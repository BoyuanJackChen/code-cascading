[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            common_elements.append(elem)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Combine the two lists into a single list\n    combined_list = test_tup1 + test_tup2\n    # Create a set from the combined list\n    combined_set = set(combined_list)\n    # Iterate through the combined set and check if the element is in both lists\n    shared_elements = [element for element in combined_set if element in test_tup1 and element in test_tup2]\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    # loop through the first tuple\n    for i in test_tup1:\n        # check if the current element exists in the second tuple\n        if i in test_tup2:\n            # add the shared element to the shared list\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and returns a new tuple containing the shared elements.\n    \"\"\"\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return tuple(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create a set to store the shared elements\n    shared_elements = set()\n    # loop through each element in the two tuples\n    for elem in test_tup1 + test_tup2:\n        # check if the element is already in the shared set\n        if elem in shared_elements:\n            # if it is, add it to the result set\n            shared_elements.add(elem)\n    # return the result set\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the lists to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the common elements between the two sets\n    shared_set = set1.intersection(set2)\n    # Convert the set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    is_prime = [True] * (n+1)\n    is_prime[0], is_prime[1] = False, False\n    for i in range(2, int(math.sqrt(n))+1):\n        if is_prime[i]:\n            for j in range(i*i, n+1, i):\n                is_prime[j] = False\n    return [i for i in range(2, n+1) if is_prime[i]]"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function returns True if the given number is not prime, else False.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if n is less than 2\n    if n < 2:\n        return True\n    # check if n is equal to 2\n    elif n == 2:\n        return False\n    # check if n is divisible by 2\n    elif n % 2 == 0:\n        return True\n    # check for odd numbers greater than 3\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return True\n    if n % 3 == 0:\n        return False\n    if n == 5:\n        return True\n    if n % 5 == 0:\n        return False\n    if n == 7:\n        return True\n    if n % 7 == 0:\n        return False\n    if n == 11:\n        return True\n    if n % 11 == 0:\n        return False\n    for i in range(13, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if the number is less than 2\n    if n < 2:\n        return True\n\n    # check if the number is divisible by any integer between 2 and sqrt(n)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    # if the number is not divisible by any integer, then it is prime\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function identifies non-prime numbers by checking if any number between 2 and n-1\n    is a factor of n. If so, n is a non-prime number and the function returns True. Otherwise,\n    the function returns False.\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap with n largest elements\n    max_heap = []\n    for num in nums[:n]:\n        hq.heappush(max_heap, num)\n    # Remove the smallest element from the max heap and add it to the result list\n    for _ in range(n):\n        largest_num = hq.heappop(max_heap)\n        if largest_num not in nums:\n            nums.append(largest_num)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # create a min heap of size n\n    heap = []\n    for num in nums[:n]:\n        hq.heappush(heap, -num)\n\n    # add the remaining numbers to the heap\n    for num in nums[n:]:\n        if -num > hq.heappop(heap):\n            hq.heappush(heap, -num)\n\n    # return the n largest integers\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a heap\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n\n    # Remove the largest n numbers from the heap\n    for i in range(n):\n        hq.heappop(heap)\n\n    # Convert the heap back into a list and return it\n    return [num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max-heap of the first n elements of the list\n    heap = hq.nlargest(n, nums)\n\n    # Return the max-heap as the answer\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)  # push negative numbers onto heap in descending order\n        if len(heap) > n:\n            hq.heappop(heap)  # remove smallest number from heap when it goes beyond n\n    return [num for num in heap]  # return list of largest numbers in descending order"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a min heap of size n\n    min_heap = []\n    for num in nums:\n        hq.heappush(min_heap, -num)\n\n    # Pop and return the n largest numbers from the min heap\n    return [hq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        heapq.heappush(max_heap, -num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap of the first n elements\n    hq.heapify(nums[:n])\n    # pop and return the largest element from the heap\n    return hq.heappop(nums[:n])"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x & (x - 1) == 0: # if the two numbers differ at only one bit position\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the numbers to binary strings\n    x_binary = bin(x)[2:]\n    y_binary = bin(y)[2:]\n\n    # Find the position of the first different bit\n    for i in range(len(x_binary)):\n        if x_binary[i]!= y_binary[i]:\n            return True\n\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = x & (x-1)\n    return diff == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        bit = 0\n        while x!= 0:\n            if x & 1:\n                return False\n            x = x >> 1\n            bit += 1\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if it is a power of two, False otherwise.\n    '''\n\n    # check if x is a power of 2\n    while x > 1:\n        if x % 2!= 0:\n            return False\n        x = x // 2\n\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer x as input and returns True if it is a power of 2, False otherwise.\n\n    A power of 2 is a number that is a power of 2 without a remainder when divided by 2. For example, 4, 8, 16, and so on are powers of 2.\n\n    This function checks whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Check if x is 0 or 1. If it is, then it is a power of 2.\n    if x == 0 or x == 1:\n        return True\n\n    # Check if x is a power of 2 by repeatedly dividing it by 2 and checking if the remainder is 0 or not.\n    while x!= 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a power of two, and False otherwise.\n    A power of two is a number that is a power of 2, 2^x. This function checks whether the integer n is a power of 2 or not.\n    \"\"\"\n    if n == 1:\n        return True\n    else:\n        if n & (n-1) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the numbers to binary strings\n    x_binary = bin(x)[2:]\n    y_binary = bin(y)[2:]\n\n    # Find the bit positions where the numbers differ\n    for i in range(len(x_binary)):\n        if x_binary[i]!= y_binary[i]:\n            return True\n\n    # If no bits differ, the numbers are equal\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1:\n        x = x >> 1\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    # Return the list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    # Convert the text to lowercase and split it into words\n    words = text.lower().split()\n\n    # Initialize an empty list to store the long words\n    long_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is greater than or equal to 4, add it to the long_words list\n        if len(word) >= 4:\n            long_words.append(word)\n\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regular expressions to find all words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Splitting the string into words\n    words = text.split()\n    # Defining a pattern for matching words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Applying the pattern to the list of words\n    matched_words = [word for word in words if pattern.match(word)]\n    # Returning the matched words\n    return matched_words\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # return the list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Loop through the list of numbers\n    for num in nums:\n        # Square the number and store the result in a new list\n        squares.append(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                return -1\n    return n - 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    max_char = str[0]\n    count = 0\n    for i in range(n):\n        if str[i] == max_char:\n            count += 1\n        else:\n            break\n    if count == 0:\n        return 0\n    min_rotations = count\n    for i in range(1, n+1):\n        if count % i == 0:\n            max_char = str[(i-1) % n]\n            count = i\n            min_rotations = min(min_rotations, i)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n//2):\n        if str[i]!= str[n-1-i]:\n            return n - i - 1\n    return n // 2"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Initialize two variables to store the length of the string and the count of unique characters in the string\n    len_str = len(str)\n    count = 0\n\n    # Loop through each character in the string\n    for char in str:\n        # If the character is not already in the count dictionary, add it to the dictionary with a count of 1\n        if char not in count:\n            count[char] = 1\n        # If the character is already in the count dictionary, increment its count by 1\n        else:\n            count[char] += 1\n\n    # Loop through each character in the string again and check if the count dictionary has any keys that have a count of 0\n    for char in str:\n        if count[char] == 0:\n            return 0\n\n    # Initialize a variable to store the minimum number of rotations required to get the same string\n    min_rotations = 0\n\n    # Loop through each character in the string and check if it is the same as the first character in the string\n    for i in range(1, len_str):\n        if str[i] == str[0]:\n            # If it is, check if the count dictionary has any keys that have a count of 0\n            for char in str:\n                if count[char] == 0:\n                    return 0\n            # If it doesn't, increment the minimum number of rotations by 1\n            min_rotations += 1\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    # Find the smallest power of 2 that is greater than n \n    power = 1 \n    while power < n: \n        power <<= 1 \n    # Calculate the number of rotations required to get the string in reverse order\n    rotations = n // power * power \n    # Find the smallest power of 2 that is greater than the number of rotations required \n    power = 1 \n    while power < rotations: \n        power <<= 1 \n    # Reverse the string and check if it is equal to the original string after rotating it\n    while rotations > 0: \n        # Reverse the first half of the string \n        mid = n // 2 \n        str = str[:mid][::-1] + str[mid:] \n        # Reverse the second half of the string \n        str = str[:mid][::-1] + str[mid:] \n        # If the string is equal to the original string, no more rotations are required \n        if str == str[::-1]: \n            break \n        # Otherwise, divide the number of rotations by 2 and find the next power of 2 that is greater than the number of rotations required \n        rotations //= 2 \n        power = 1 \n        while power < rotations: \n            power <<= 1 \n    # If the string is not equal to the original string after rotating it, the minimum number of rotations required is power-1 \n    return power-1 "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(1, n//2+1):\n        if str[:i] == str[n-i:]:\n            return i\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    # Initialize variables\n    n = len(str)\n    count = 0\n\n    # Loop until all characters are the same\n    while n > 0:\n        # Increment count by 1\n        count += 1\n\n        # Find the maximum and minimum characters\n        max_char = max(str)\n        min_char = min(str)\n\n        # If the maximum and minimum characters are the same, break the loop\n        if max_char == min_char:\n            break\n\n        # Convert the string into a list of characters\n        str_list = list(str)\n\n        # Remove the minimum character from the list\n        str_list.remove(min_char)\n\n        # Find the frequency of the minimum character in the list\n        min_freq = str_list.count(min_char)\n\n        # Update the string with the minimum character removed\n        str_list = [char for char in str_list if char!= min_char]\n\n        # Find the new string with the maximum character replaced with the minimum character\n        new_str = min_char * min_freq + str_list.count(min_char) * max_char\n\n        # Update the string with the new string\n        str = new_str\n\n        # Decrement n\n        n -= 1\n\n    # Return the count of rotations required\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i:j+1] == str[j:i+1][::-1]:\n                min_rotations = min(min_rotations, j-i+1)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n+1): \n            if str[:j] == str[j:]: \n                count += 1 \n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n == 1 or n == 2:\n        return 0\n\n    # Determine the maximum number of rotations that can be performed\n    rotations = 0\n    for i in range(n):\n        max_rotations = min(i + 1, n - i - 1)\n        for j in range(max_rotations):\n            rotations += 1\n\n    # Determine the minimum number of rotations that can be performed\n    min_rotations = n\n    for i in range(n - 1):\n        if str[i]!= str[n - i - 1]:\n            min_rotations = min(min_rotations, i + 1)\n\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '') if s.count(ch) > 1 else s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,'')\n    if len(s)>1:\n        if s[0] == ch:\n            s = s[1:]\n        if s[-1] == ch:\n            s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    # check if the string is empty\n    if not s:\n        return s\n    \n    # remove the first occurrence of the character\n    s = s.replace(ch, '', 1)\n    \n    # remove the last occurrence of the character\n    s = s.replace(ch, '', -1)\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        s = s.replace(ch, \"\")\n        s = s.replace(ch, \"\")\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s: \n        return s[:s.index(ch)+1][::-1] + s[s.rindex(ch)+1:] \n    else: \n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) == 0:\n        return \"Character not found in string\"\n    s = s.replace(ch, \"\")\n    if len(s) == 0:\n        return \"Character not found in string\"\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '')[:len(s)-len(ch)]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '')\n    return s.strip()"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first = s.find(ch)\n    last = s.rfind(ch)\n    return s[:first] + s[last+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove the first occurrence of the character from the string\n    s = s.replace(ch,'',1)\n    # remove the last occurrence of the character from the string\n    s = s.replace(ch,'',-1)\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        M[i].sort()\n    M.sort(key=lambda x: sum(x))\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    m = len(M[0])\n\n    # create a list of tuples, each containing the row sum and the matrix index\n    sums = [(sum(row), i) for i, row in enumerate(M)]\n\n    # sort the list by row sum in ascending order\n    sums.sort()\n\n    # create a new matrix sorted by row sum\n    sorted_M = [[0] * m for _ in range(n)]\n    for row_sum, i in sums:\n        sorted_M[i] = M[i]\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    sorted_matrix = [[0]*cols for i in range(rows)]\n\n    # Sort each row of the matrix in ascending order of their sum\n    for i in range(rows):\n        row_sum = sum(M[i])\n        sorted_indices = [j for j in range(cols) if M[i][j] == M[i][0]]\n        sorted_indices.sort()\n        for j in range(cols):\n            if j in sorted_indices:\n                sorted_matrix[i][j] = M[i][j]\n\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a list to store the sorted matrix\n    sorted_matrix = []\n    \n    # Iterate over each row in the matrix\n    for row in M:\n        # Initialize a variable to keep track of the sum of the row\n        row_sum = sum(row)\n        \n        # Iterate over the other rows in the matrix to find the row with the minimum sum\n        for i in range(len(M)):\n            if i == row.index(min(row)):\n                # Add the row with the minimum sum to the sorted_matrix\n                sorted_matrix.append(M[i])\n                break\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            for k in range(len(M)-i-1):\n                if sum(M[k:k+i+1][j]) > sum(M[k+i+1:k+2*i+1][j]):\n                    M[k:k+i+1], M[k+i+1:k+2*i+1] = M[k+i+1:k+2*i+1], M[k:k+i+1]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(j+1, len(M[i])):\n                if sum(M[i][j:k+1]) < sum(M[i][j:k+1]):\n                    M[i][j:k+1], M[i][k] = M[i][k], M[i][j:k+1]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    sorted_matrix = [[0]*cols for i in range(rows)]\n    for i in range(rows):\n        max_sum = float('-inf')\n        max_row = i\n        for j in range(cols):\n            if M[i][j] > max_sum:\n                max_sum = M[i][j]\n                max_row = j\n        for k in range(cols):\n            if k!= max_row:\n                sorted_matrix[i][k] = M[i][k]\n                if M[i][k] > max_sum:\n                    max_sum = M[i][k]\n                    max_row = k\n        sorted_matrix[i][max_row] = max_sum\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a new matrix to hold the sorted matrix\n    sorted_M = []\n    \n    # Loop through each row in the matrix\n    for i in range(len(M)):\n        # Initialize a new list to hold the row sums\n        row_sums = []\n        \n        # Loop through each element in the row\n        for j in range(len(M[i])):\n            # Add the j-th element to the sum of the i-th row\n            row_sums.append(M[i][j])\n        \n        # Sort the row sums in ascending order\n        row_sums.sort()\n        \n        # Initialize a new row to hold the sorted row\n        sorted_row = []\n        \n        # Loop through each element in the sorted row\n        for k in range(len(row_sums)):\n            # Add the k-th element to the sorted row\n            sorted_row.append(row_sums[k])\n        \n        # Append the sorted row to the sorted matrix\n        sorted_M.append(sorted_row)\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # loop through each element of the current row\n        for j in range(len(M[0])):\n            # find the sum of the row and compare it to the sum of the row above\n            if i == 0:\n                # if it is the first row, compare the current element to the minimum element in the current row\n                if j == 0:\n                    M[i][j] = min(M[i][j], M[i-1][j])\n                else:\n                    M[i][j] = min(M[i][j], M[i][j-1])\n            else:\n                # if it is not the first row, compare the current element to the minimum element in the current row\n                if j == 0:\n                    M[i][j] = min(M[i][j], M[i-1][j])\n                else:\n                    M[i][j] = min(M[i][j], M[i][j-1])\n                # and the minimum element to the minimum element in the row above\n                M[i][j] = min(M[i][j], M[i-1][j])\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Initialize a matrix of zeros to store the sorted matrix\n    sorted_M = [[0 for j in range(cols)] for i in range(rows)]\n    \n    # Iterate over the rows of the matrix and find the sum of each row\n    for i in range(rows):\n        row_sum = sum(M[i])\n        \n        # Iterate over the columns of the matrix and find the column with the smallest sum\n        min_col = None\n        min_col_sum = float('inf')\n        for j in range(cols):\n            if M[i][j]!= 0 and M[i][j] < min_col_sum:\n                min_col = j\n                min_col_sum = M[i][j]\n        \n        # If there is a column with a smaller sum, swap the rows\n        if min_col is not None:\n            for k in range(cols):\n                if k!= min_col:\n                    sorted_M[i][k], sorted_M[i][min_col] = sorted_M[i][min_col], sorted_M[i][k]\n    \n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three arguments l, b and h which represent the length, width and height of the triangular prism respectively.\n    The function then calculates the volume of the prism and returns it as a float value.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    #calculating the volume of the prism\n    volume = l*b*h\n\n    #returning the volume\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length of each side of a triangle and returns the volume of the triangle.\n    '''\n    volume = l * b * h / 6  # formula for the volume of a triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 6\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume using Heron's formula\n    volume = (l * b * h) / 2\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h): \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l*b*h \n    return Volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*b*h)/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'(?<![a-z])([a-z]+)_(?=[a-z])'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]*_[a-z]*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<!\\w)_([a-z]+)_(?!\\w)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define the pattern for matching lowercase letters followed by an underscore\n    pattern = r'([a-z])_+'\n\n    # Use the re.search() method to search for the pattern in the input text\n    match = re.search(pattern, text)\n\n    # If the pattern is found, return True\n    if match:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<!\\w)([a-z]+)_+([a-z]+)(?!\\w)'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-zA-Z])([a-z]+)_+(?![a-zA-Z])'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z])_+'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<![a-zA-Z0-9])[a-z]+(?![a-zA-Z0-9])_+[a-z]+(?![a-zA-Z0-9])_')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z_]*[a-z][a-z_]*')\n    return bool(pattern.match(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]*_[a-z]*$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(side_length):\n    return 4 * side_length"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = [chr(i) for i in range(NO_OF_CHARS)]\n    removed_chars = set(string)\n    new_string = \"\"\n    for char in string:\n        if char not in removed_chars:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for i in range(NO_OF_CHARS):\n        if string.count(chr(i)) > 0:\n            string = string.replace(chr(i), \"\")\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string, blacklist):\n    '''\n    Remove characters from the first string which are present in the second string.\n\n    Args:\n    - string: a string to process\n    - blacklist: a string containing characters to remove from the first string\n\n    Returns:\n    - a string containing the first string without the characters in the blacklist\n    '''\n\n    # convert both strings to lists\n    string_list = list(string)\n    blacklist_list = list(blacklist)\n\n    # iterate over the characters of the first string\n    for char in string_list:\n\n        # if the character is in the blacklist, remove it\n        if char in blacklist_list:\n            string_list.remove(char)\n\n    # convert the resulting list back to a string\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a set of characters to remove\n    set_chars = set(string)\n\n    # create an empty list to store the filtered characters\n    filtered_chars = []\n\n    # iterate over each character in the first string\n    for char in string:\n        # check if the character is not present in the set of characters to remove\n        if char not in set_chars:\n            # if the character is not present, add it to the filtered list\n            filtered_chars.append(char)\n\n    # join the filtered characters into a string and return it\n    return ''.join(filtered_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the string to a list of characters\n    char_list = list(string)\n\n    # Iterate through the list and remove the characters present in the second string\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    result = []\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            result.append(chr(i))\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and returns a list of characters\n    which are present in the string and not present in the second string.\n    '''\n    set1 = set(string)\n    set2 = set(range(NO_OF_CHARS))\n    list1 = list(set1 - set2)\n    return list1"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as an input and returns a list containing all the characters of the string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n    # Initialize an empty list to store the characters that need to be removed\n    remove_list = []\n    # Loop through each character in the string\n    for char in char_list:\n        # If the character is not present in the second string, add it to the remove_list\n        if char not in string:\n            remove_list.append(char)\n    # Remove the characters from the first string and return the resulting string\n    return ''.join(char_list) - ''.join(remove_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    no_of_chars = 256\n    char_set = set(range(no_of_chars))\n    list_chars = list(char_set)\n    removed_chars = set(string) & set(list_chars)\n    return ''.join(chr(i) for i in range(no_of_chars) if i not in removed_chars)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input and returns a new string which contains only the characters of the first string which are not present in the second string.\n    \"\"\"\n    # Convert both the strings to lists\n    list1 = list(string1)\n    list2 = list(string2)\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through the first string\n    for char in list1:\n        # If the character is not present in the second string, append it to the result list\n        if char not in list2:\n            result.append(char)\n\n    # Return the result as a string\n    return ''.join(result)\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements of the array\n    element_dict = {}\n    for num in arraynums:\n        # If the number is already in the dictionary, return True\n        if num in element_dict:\n            return True\n        else:\n            # Otherwise, add the number to the dictionary\n            element_dict[num] = True\n    # If no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    unique_nums = set(arraynums)\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Use a set to remove duplicates from the array\n    unique_nums = set(arraynums)\n\n    # Check if the length of the unique_nums list is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        print(\"No duplicates found\")\n    else:\n        print(\"Duplicates found\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = []\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                duplicates.append(arraynums[i])\n                break\n    if len(duplicates) > 0:\n        print(\"The array contains duplicate elements:\", duplicates)\n    else:\n        print(\"The array does not contain any duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the element and its index\n    element_dict = {}\n    for i, num in enumerate(arraynums):\n        if num in element_dict:\n            return True\n        element_dict[num] = i\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize an empty dictionary to store the elements and their indices\n    element_dict = {}\n    # Loop through the array of integers\n    for i in range(len(arraynums)):\n        # Check if the current element is already in the dictionary\n        if arraynums[i] in element_dict:\n            # If it is, return True since the array contains a duplicate element\n            return True\n        else:\n            # If it's not, add it to the dictionary and move on to the next element\n            element_dict[arraynums[i]] = i\n    # If we make it through the loop without finding a duplicate, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hash_table = {}\n    for num in arraynums:\n        if num in hash_table:\n            return True\n        else:\n            hash_table[num] = True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if x is a positive integer\n    if not isinstance(x, int) or x <= 0: \n        return False\n\n    # Check if x is a multiple of 3\n    if x % 3 == 0: \n        return True\n\n    # If x is not a multiple of 3, it's a woodball\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1:\n        return True\n    elif x > 1:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Check if the number is less than 1000 \n    if x < 1000:\n        return False\n    # Check if the number is divisible by 7 \n    elif x % 7 == 0:\n        return True\n    # Otherwise, the number is not a woodball \n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    if x == 1 or x == 5:\n        return True\n    elif x == 2 or x == 4:\n        return False\n    else:\n        return is_woodall(x-1) or is_woodall(x+1)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and (x+1)**2 == 2*x**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball = [2, 5, 10, 20]\n    if x in woodball:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 7:\n        return \"Woodall\"\n    elif x < 7:\n        return \"Not a Woodall\"\n    else:\n        return \"Invalid Input\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define the set of possible digits\n    digits = set(\"123456789\")\n\n    # Check if the number has only one digit\n    if len(str(x))!= 1:\n        return False\n\n    # Check if the number has a digit that is not in the set of possible digits\n    if str(x) not in digits:\n        return False\n\n    # Check if the number is divisible by 10\n    if int(str(x)) % 10 == 0:\n        return False\n\n    # If all the conditions have been met, the number is a woodball\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0 and (x//2)**2 == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 15 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return num == 1 and abs(rev_num - num) <= 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # convert the given number to a string\n    num_str = str(num)\n\n    # reverse the string\n    rev_str = num_str[::-1]\n\n    # convert the reversed string to an integer\n    rev_num = int(rev_str)\n\n    # check if the given number is one less than twice its reverse\n    if num == rev_num + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        rev_num = rev_num*10 + digit\n        temp //= 10\n    return rev_num == num + 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num //= 10\n    return (num + 1) // 2 == rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num < (num // 2 + num % 2) * (num // 2 + num % 2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = str(num)[::-1]\n    return num < int(rev_num) + 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes a number as input and returns True if the number is one less than twice its reverse.\n    \"\"\"\n    reverse_num = 0\n    temp = num\n    while temp > 0:\n        reverse_num = reverse_num*10 + temp % 10\n        temp //= 10\n    return num == reverse_num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num % 2 == 0"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num * 2) - 1 == (num * 2) // 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num //= 10\n    rev_num = int(str(rev_num)[::-1])\n    return rev_num - 1 < (2*rev_num)**2"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # initialize max_num with the first number in the list\n    max_num = arr[0]\n    # loop through the list from index 1 to the end\n    for i in range(1, len(arr)):\n        # convert the i-th number in the list to a string\n        num_str = str(arr[i])\n        # loop through the digits in the string\n        for j in range(len(num_str)):\n            # multiply the current digit with the current number and add it to the max_num\n            max_num += int(num_str[j])*arr[i]\n            # check if the sum exceeds the current max_num\n            if max_num > arr[i]:\n                max_num = arr[i]\n    # return the max_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sorting the array in descending order\n    arr.sort(reverse=True)\n\n    # Initializing the max number and the counter variable\n    max_num = arr[0]\n    counter = 1\n\n    # Looping through the array\n    for i in range(1, len(arr)):\n        # Adding the current number to the max number and incrementing the counter variable\n        max_num += arr[i]\n        counter += 1\n\n        # Checking if the current max number is greater than the max number we have found so far\n        if max_num > arr[i]:\n            max_num = arr[i]\n            counter = 1\n\n    # Returning the max number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Sort the digits in the given list in ascending order\n    arr = sorted(arr)\n    \n    # Initialize the maximum number as the first digit of the array\n    max_num = arr[0]\n    \n    # Initialize the current number as the next digit of the array\n    curr_num = arr[1]\n    \n    # Iterate through the array\n    for i in range(2, len(arr)):\n        \n        # Check if the current number can be formed with the next digit\n        if curr_num + arr[i] <= 9:\n            curr_num += arr[i]\n        else:\n            curr_num = arr[i]\n        \n        # Update the maximum number if the current number is greater than the maximum number\n        if curr_num > max_num:\n            max_num = curr_num\n    \n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    # convert list of digits to string\n    digits = ''.join(map(str, arr))\n\n    # calculate the sum of digits\n    total = sum(int(digit) for digit in digits)\n\n    # initialize maximum sum\n    max_sum = total\n\n    # iterate through all possible combinations of digits\n    for i in range(len(digits)):\n        for j in range(i, len(digits)):\n            # calculate the sum of the current combination\n            current_sum = int(digits[i:j+1])\n\n            # compare current sum with maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i]*(10**(len(arr)-i-1))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(1, 10):\n        num = i\n        for digit in arr:\n            if digit == num:\n                num *= 10\n            else:\n                break\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        num = int(''.join(str(x) for x in arr[:i+1]))\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    # Sort the list of digits in ascending order\n    arr.sort()\n    # Initialize a variable to store the maximum number that can be formed with the given digits\n    max_num = 0\n    # Loop through the digits in the list and check if each digit can form a larger number than the current maximum number\n    for digit in arr:\n        # Convert the digit to an integer and add it to the current maximum number\n        max_num += int(digit)\n    # Return the maximum number that can be formed with the given digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    curr_num = 0\n    for i in range(len(arr)):\n        curr_num += arr[i] * (10**(len(arr)-i-1))\n        max_num = max(max_num, curr_num)\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0)!= (y > 0): \n        return True \n    else: \n        return False "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    elif x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y): \n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0: \n        return \"Both numbers have opposite signs\"\n    elif x > 0 and y > 0: \n        return \"Both numbers have opposite signs\"\n    elif x < 0 and y > 0: \n        return \"First number has opposite sign\"\n    elif x > 0 and y < 0: \n        return \"Second number has opposite sign\"\n    else: \n        return \"Both numbers have same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return \"Both numbers have opposite signs.\"\n    elif x > 0 and y > 0:\n        return \"Both numbers have opposite signs.\"\n    else:\n        return \"Both numbers have the same sign.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function checks whether a given number is an octagonal number or not.\n    \"\"\"\n    return int(n**2) == n*(n+1)**2 - n*(n+1)**2/3\n\ndef nth_octagonal(n):\n    \"\"\"\n    This function returns the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n should be a positive integer\")\n    count = 0\n    octagonal = 0\n    while count < n:\n        if is_octagonal(octagonal):\n            return octagonal\n        octagonal += 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the base of the octagonal number system\n    base = 1.0\n    \n    # Calculate the nth octagonal number\n    octagonal_num = base * (n * n)\n    \n    # Check if the nth octagonal number is an integer\n    if octagonal_num.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Function to check if a number is octagonal or not\n    def is_octagonal_helper(num):\n        return (num ** 2 + num) ** 2 == num ** 3 * 2\n\n    # Helper function to find the nth octagonal number using binary search\n    def octagonal_binary_search(low, high, target):\n        if high < low:\n            return None\n\n        mid = (low + high) // 2\n        if is_octagonal_helper(mid):\n            if mid == target:\n                return mid\n            elif mid > target:\n                return octagonal_binary_search(low, mid - 1, target)\n            else:\n                return octagonal_binary_search(mid + 1, high, target)\n        elif is_octagonal_helper(mid - 1):\n            return octagonal_binary_search(low, mid - 1, target)\n        else:\n            return octagonal_binary_search(mid + 1, high, target)\n\n    # Find the nth octagonal number using binary search\n    return octagonal_binary_search(1, 10000, n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # base case\n    if n == 0:\n        return 0\n\n    # initializing variables\n    prev = 0\n    curr = 1\n    count = 0\n\n    # iterating through the sequence of numbers\n    while count < n:\n        if curr < 0:\n            curr = -curr\n\n        if curr % 12 == 0:\n            prev = curr\n\n        curr += prev\n        count += 1\n\n    return prev"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 2 ** n - 1\n\nn = int(input(\"Enter a number: \"))\n\nif n > 0:\n    octagonal = is_octagonal(n)\n    print(f\"{n}th octagonal number is {octagonal}\")\nelse:\n    print(\"Invalid input\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    j = 2\n    while i <= n:\n        if j <= n:\n            print(i*j)\n            j += 1\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n - 1) * (2 * n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    a, b = 1, 2\n    for _ in range(n):\n        a, b = b, a ** 2 + b ** 2\n    return a"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return None\n\n    # compute the nth octagonal number using the formula:\n    # (n*(2*n-1)) / 4\n    return (n*(2*n-1)) // 4"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    counts = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            digit_sum = sum(int(digit) for digit in s[i:j+1])\n            counts[digit_sum] += 1\n    return counts"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the number of substrings with each length\n    count = defaultdict(int)\n    # loop through all possible substrings and count the number of substrings with the sum of digits equal to the length of the substring\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(digit) for digit in s[i:j+1]) == len(s[i:j+1]):\n                count[len(s[i:j+1])] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # create a defaultdict to store the count of each substring with sum of digits as its length\n    substrings_count = defaultdict(int)\n\n    # loop through each character of the string\n    for i in range(len(s)):\n        # loop through each character after the current character\n        for j in range(i+1, len(s)+1):\n            # check if the substring has sum of digits equal to its length\n            if sum([int(digit) for digit in s[i:j]]) == j-i:\n                # increment the count of the substring in the defaultdict\n                substrings_count[s[i:j]] += 1\n\n    # return the count of all substrings in the defaultdict\n    return substrings_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of substrings with the given sum\n    substrings_count = defaultdict(int)\n\n    # Loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Check if the substring contains only digits and their sum is equal to its length\n            if all(c.isdigit() for c in s[i:j]) and sum(int(c) for c in s[i:j]) == j-i:\n                substrings_count[j-i] += 1\n\n    return substrings_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Count the number of unique characters in the string\n    unique_chars = len(set(s))\n\n    # Initialize a dictionary to store the count of each substring\n    substring_count = defaultdict(int)\n\n    # Iterate through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the sum of digits in the substring is equal to the length of the substring\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                # Increment the count of the substring in the dictionary\n                substring_count[substring] += 1\n\n    # Count the number of substrings with the sum of digits equal to their length\n    count = 0\n    for count_dict in substring_count.values():\n        count += sum(count_dict.values())\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        count[sum(map(int, s[i:]))] += 1\n    return count[n]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits_sum = sum(int(digit) for digit in substring)\n            if digits_sum == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    counts = defaultdict(int)\n    n = len(s)\n    \n    # Counting the number of substrings with each digit\n    for i in range(n):\n        for j in range(i, n):\n            digits = 0\n            for k in range(i, j+1):\n                digits += int(s[k])\n            counts[digits] += 1\n    \n    # Counting the number of substrings with the sum of digits equal to their length\n    for i in range(n):\n        for j in range(i, n):\n            if counts[j-i] > 0:\n                counts[j-i] -= 1\n            else:\n                counts[j-i] = 0\n    \n    return sum(counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # creating a dictionary to store the count of substrings with the sum of digits equal to their length\n    digit_count = defaultdict(int)\n    # iterating through the string and checking the sum of digits of each substring\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # calculating the sum of digits of the substring and checking if its length is equal to the length of the substring\n            if sum(int(d) for d in s[i:j]) == len(s[i:j]):\n                digit_count[len(s[i:j])] += 1\n    # returning the count of substrings with the sum of digits equal to their length\n    return sum(digit_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a defaultdict to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # Iterate through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits of the substring equals its length\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                # If it does, increment the count in the defaultdict\n                count_dict[j-i] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(count_dict.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize smallest_num to the first element of the list\n    smallest_num = xs[0]\n    # Loop through the list starting from the second element\n    for i in range(1, len(xs)):\n        # If the current element is smaller than smallest_num, update smallest_num\n        if xs[i] < smallest_num:\n            smallest_num = xs[i]\n    # Return the smallest_num\n    return smallest_num"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    \n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n            \n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest number to the first number in the list\n    smallest = xs[0]\n    # loop through the rest of the list\n    for num in xs[1:]:\n        # check if the current number is smaller than the smallest number\n        if num < smallest:\n            # update the smallest number\n            smallest = num\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    \"\"\"\n    # Initialize the smallest number to be the first number in the list\n    smallest = xs[0]\n\n    # Loop through the rest of the numbers in the list\n    for num in xs[1:]:\n        # If the current number is smaller than the smallest number, update the smallest number\n        if num < smallest:\n            smallest = num\n\n    # Return the smallest number in the list\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # Initialize the smallest number to be the first element in the list\n    smallest = xs[0]\n    # Loop through the list and compare each element with the smallest number\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = float('inf')\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = test_list[j][0] - test_list[i][0]\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0]) + abs(test_list[i][1]-test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    pairs = []\n    \n    # Iterate through the list and find pairs of values that are not equal\n    for i in range(len(test_list) - 1):\n        if test_list[i]!= test_list[i+1]:\n            pairs.append((test_list[i], test_list[i+1]))\n            \n    # If there are at least two pairs, find the maximum difference\n    if len(pairs) >= 2:\n        max_diff = max(pairs, key=lambda x: abs(x[0] - x[1]))[0] - min(pairs, key=lambda x: abs(x[0] - x[1]))[0]\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize maximum difference as the difference between the first and last elements\n    max_diff = test_list[-1] - test_list[0]\n\n    # Iterate over the list and calculate the maximum difference between pairs\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1] - test_list[i]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    n = len(test_list)\n    \n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Iterate over the sorted list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the difference is greater than the current maximum\n            diff = test_list[j][0] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Initialize the maximum difference\n    max_diff = 0\n    \n    # Loop through the list and compare adjacent pairs\n    for i in range(len(test_list) - 1):\n        diff = test_list[i+1][0] - test_list[i][1]\n        \n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] < test_list[j][0]:\n                diff = test_list[j][0] - test_list[i][0]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    This function takes a list of tuples as input and sorts it based on the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list in ascending order based on the second element of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n\n    # Return the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Print the sorted list\n    print(subjectmarks)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Print the sorted list of tuples\n    print(subjectmarks)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Create a list of tuples with the second value of each tuple as the key\n    key = [tuple(i) for i in subjectmarks]\n    \n    # Sort the list of tuples using the second value as the key\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    \n    # Return the sorted list of tuples\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    # Return the sorted list\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty or only contains one element, return it\n    if len(data_list) < 2:\n        return data_list[0]\n    # Recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten_list(data_list):\n        \"\"\"\n        Helper function to flatten a nested list.\n        \"\"\"\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_and_sum(data_list):\n        if isinstance(data_list, list):\n            flattened_list = []\n            for item in data_list:\n                flattened_list.extend(flatten_and_sum(item))\n            return flattened_list\n        else:\n            return [data_list]\n\n    flattened_list = flatten_and_sum(data_list)\n    sum_list = [flattened_list[0]]\n    for i in range(1, len(flattened_list)):\n        sum_list.append(sum_list[-1] + flattened_list[i])\n    return sum_list[1:]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(recursive_list_sum(item))\n            else:\n                flattened_list.append(item)\n        return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list, level=1):\n        '''\n        Helper function to flatten a list.\n        '''\n        flattened_list = []\n        for item in data_list:\n            if type(item) == list:\n                flattened_list.extend(flatten(item, level+1))\n            else:\n                flattened_list.append(level*item)\n        return flattened_list\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    if not isinstance(data_list, list):\n        return data_list\n\n    flattened_list = []\n    for item in data_list:\n        flattened_list.extend(recursive_list_sum(item))\n    return flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # base case: empty list or only one element in the list\n    if not data_list:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n\n    # recursive case: flatten the list and sum its elements\n    else:\n        # flatten the sublist recursively\n        sublist_sum = recursive_list_sum(data_list[1:])\n        # add the current element to the sum of sublists\n        return sublist_sum + data_list[0]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the head of the list to the sum of the tail\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_and_sum(lst):\n        if not lst:\n            return 0\n        elif isinstance(lst[0], list):\n            return flatten_and_sum(lst[0]) + flatten_and_sum(lst[1:])\n        else:\n            return lst[0] + flatten_and_sum(lst[1:])\n\n    flattened_list = flatten_and_sum(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes in a list and returns the number of positive integers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    pos = 0\n    for num in lst:\n        if num > 0:\n            pos += 1\n    return pos"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and counts the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n, k):\n        if k == 0:\n            return 1\n        elif k == n:\n            return 1\n        elif k % 2 == 0:\n            return partition(n, k//2) + partition(n, k//2)\n        else:\n            return partition(n, (k-1)//2) + partition(n, (k+1)//2)\n    \n    return partition(n, n//2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n\n    if n == 0:\n        return 1\n\n    if n == 1:\n        return 2\n\n    if n == 2:\n        return 4\n\n    if n == 3:\n        return 13\n\n    if n == 4:\n        return 54\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def bell_partition(start, end):\n        if start == end:\n            return 1\n\n        if start > end:\n            return 0\n\n        partition_count = 0\n        for i in range(start, end + 1):\n            if is_prime(i):\n                partition_count += bell_partition(start, i - 1) + bell_partition(i, end)\n        return partition_count\n\n    return bell_partition(1, n)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    def partition(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return (4*n**2-4*n-2)/(2*n-1)\n    return partition(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n    \"\"\"\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate over all values from 0 to n\n    for i in range(n + 1):\n        # Calculate the number of ways to partition the Bell number i\n        ways = i // 2 + i % 2\n        # Add the count of ways to the count variable\n        count += ways\n\n    # Return the count of ways\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # base case\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 4\n\n    # recursive case\n    else:\n        return (bell_number(n-1) + bell_number(n-2))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case: if n is 0, there is only one way to partition the set of Bell numbers\n    if n == 0:\n        return 1\n    # Base case: if n is 1, there is only one way to partition the set of Bell numbers\n    elif n == 1:\n        return 2\n    # Recursive case: we can partition the set of Bell numbers into two subsets, so we need to calculate the number of ways to partition the first subset and the second subset\n    else:\n        # Calculate the number of ways to partition the first subset\n        first = bell_number(n-1)\n        # Calculate the number of ways to partition the second subset\n        second = bell_number(n-2)\n        # Return the sum of the two numbers\n        return first + second"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    if n <= 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    # initialize the count of ways to partition the set\n    ways = 0\n\n    # find the largest and smallest Bell numbers in the set\n    largest_bell = max(bell_numbers[:n])\n    smallest_bell = min(bell_numbers[:n])\n\n    # recursively apply the same approach to the subsets\n    ways += bell_number(n - largest_bell)\n    ways += bell_number(n - smallest_bell)\n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        if n == 4:\n            return 8\n        else:\n            return 2*bell_number(n-2) + bell_number(n-4)\n    else:\n        return 2*bell_number(n-2) + bell_number(n-3)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    if A[0] < A[1]: \n        for i in range(1, len(A)): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n    elif A[0] > A[1]: \n        for i in range(1, len(A)): \n            if A[i] >= A[i-1]: \n                return False\n        return True\n    else: \n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and checks if it is monotonic or not.\n    The function returns True if the array is monotonic and False otherwise.\n    '''\n    # If the array has only one element, then it is always monotonic\n    if len(A) == 1:\n        return True\n    \n    # If the array has only two elements, then it is either monotonic or not monotonic\n    if len(A) == 2:\n        if A[0] < A[1]:\n            return True\n        else:\n            return False\n    \n    # If the array has more than two elements, then check if it is monotonic or not\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if the array is monotonic increasing or decreasing and False otherwise.\n    '''\n    if len(A) < 2: \n        return True\n    \n    if A[0] <= A[1]: \n        for i in range(1, len(A)): \n            if A[i] < A[i-1]: \n                return False\n    \n    else: \n        for i in range(1, len(A)): \n            if A[i] > A[i-1]: \n                return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is monotonic,\n    otherwise False.\n    '''\n\n    # If the array has only one element, it is always monotonic\n    if len(A) == 1:\n        return True\n\n    # Check if the array is monotonic in the first element\n    if A[1] > A[0]:\n        return False\n\n    # Check if the array is monotonic in the remaining elements\n    for i in range(1, len(A)-1):\n        if A[i+1] > A[i]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1] or A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1] or A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    This function checks if a given array is monotonic or not.\n    '''\n    # If the array is empty, return True\n    if len(A) == 0:\n        return True\n    \n    # Check if the first element is greater than the last element\n    if A[0] > A[-1]:\n        return False\n    \n    # Check if the array is monotonic in the first half\n    for i in range(len(A)//2):\n        if A[i] > A[i+1]:\n            return False\n    \n    # Check if the array is monotonic in the second half\n    for i in range(len(A)//2, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n\n    if A[0] >= A[1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and returns True if it is monotonic, \n    else it returns False.\n    '''\n    if len(A) < 2:\n        return True\n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n    # check if all elements are the same\n    if A[0] == A[-1]:\n        return True\n    # check if the array is monotonic in terms of increasing or decreasing\n    prev = A[0]\n    for i in range(1, len(A)):\n        if A[i] <= prev:\n            if not is_Monotonic(A[i:]):\n                return False\n            return True\n        prev = A[i]\n    if not is_Monotonic(A[1:]):\n        return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i-1] > A[i]:\n            return False\n        elif A[i-1] < A[i]:\n            return True\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(s)):\n        if s[i] not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) > len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if s is a sublist of l\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not isinstance(l, list) or not isinstance(s, list):\n        raise TypeError(\"Both inputs must be lists\")\n    for i in s:\n        if i not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if s[0] in l:\n        return is_sublist(l, s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i]!= l[i]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Use list comprehension to create a list of unique lengths of all tuples\n    lengths = list(set([len(i) for i in Input]))\n\n    # Check if all the lengths are equal to each other\n    if len(lengths) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # create a list to store the lengths of all the tuples in the input list\n    lengths = []\n\n    # loop through each tuple in the input list\n    for tup in Input:\n\n        # append the length of the tuple to the lengths list\n        lengths.append(len(tup))\n\n    # check if all the lengths in the list are equal\n    if all(len(tup) == lengths[0] for tup in Input):\n\n        # return True if all the tuples have equal lengths\n        return True\n\n    # return False if not all tuples have equal lengths\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    flag = True\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            flag = False\n            break\n    return flag"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    all_tuples = []\n    for i in Input:\n        all_tuples.append(i)\n    tuples_with_same_length = []\n    for i in range(len(all_tuples)):\n        temp_list = all_tuples[i:]\n        for j in range(len(temp_list)):\n            if len(temp_list[j]) == len(all_tuples[i]):\n                tuples_with_same_length.append((all_tuples[i], temp_list[j]))\n    if len(tuples_with_same_length) == len(all_tuples):\n        print(\"All the tuples have equal length.\")\n    else:\n        print(\"Some tuples have different length.\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                count += 1\n                break\n    if count == len(Input) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i]) == len(Input[0]):\n            count += 1\n    if count == len(Input):\n        print(\"All the tuples have equal length.\")\n    else:\n        print(\"Not all the tuples have equal length.\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Loop through each tuple in the input list\n    for tup in Input:\n        # If the length of the current tuple is not equal to the length of the first tuple, return False\n        if len(tup)!= len(Input[0]):\n            return False\n    # If all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n\n    while gap > 0 or swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        if not swapped:\n            gap //= 1.3\n        else:\n            gap = int(gap * 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n                \n        gap = (gap + n) // 2\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize parameters\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while swapped:\n        # Decrease the gap\n        gap = int(gap / 1.3)\n        \n        # Initialize swapped flag\n        swapped = False\n        \n        # Iterate through the list\n        for i in range(0, n - gap):\n            # If the element is greater than the next element\n            if nums[i] > nums[i+gap]:\n                # Swap the elements\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                # Set swapped flag to True\n                swapped = True\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n    max_swaps = 0\n\n    while gap > 1 or nums[0]!= nums[n-1]:\n        if gap > 1:\n            gap = (gap // 1.3) + 1\n        else:\n            gap = n\n\n        max_swaps = 0\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                max_swaps += 1\n\n        if max_swaps == 0:\n            break\n\n        n -= 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = gap // 10\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n\n    n = len(nums)\n    swapped = True\n    gap = n\n\n    while swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    start = 0\n\n    while gap > 1 or swapped:\n        if gap > 1:\n            gap = (gap * 10) // 13\n        swapped = False\n        for i in range(start, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        start += gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if gap == 1 or gap == n:\n            gap = 1\n        else:\n            gap = int(gap / 1.3)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    sorted = False\n    while not sorted:\n        sorted = True\n        gap = n // 2\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                sorted = False\n        n = gap"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the given number is negative or not\n    if n < 0:\n        return \"The given number is negative.\"\n    \n    # Initialize the variables\n    sqr1 = 0\n    sqr2 = 0\n    diff = 0\n    \n    # Calculate the square of the given number\n    sqr1 = n * n\n    \n    # Loop till the square of the difference between n and the square of the given number is less than or equal to 2\n    while sqr2 * sqr2 <= 2 * sqr1:\n        # Calculate the square of the difference between the given number and the square of the given number\n        diff = sqr1 - sqr2 * sqr2\n        \n        # Check if the difference is divisible by the given number\n        if diff % n == 0:\n            return \"The difference between the given number and the square of the given number is divisible by the given number.\"\n        \n        # Update the square of the given number\n        sqr1 = sqr2 * sqr2\n        \n        # Update the square of the difference between the given number and the square of the given number\n        sqr2 = diff * diff\n    \n    # If the while loop is not exited, then the given number can be represented as the difference of two squares\n    return \"The given number can be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        print(\"Input is not a positive integer.\")\n        return\n\n    # Check if the difference of two squares can be represented as a number\n    # Check for special cases first\n    if n == 2:\n        print(\"2 can be represented as the difference of two squares.\")\n        return\n    elif n == 4:\n        print(\"4 can be represented as the difference of two squares.\")\n        return\n    elif n == 8:\n        print(\"8 can be represented as the difference of two squares.\")\n        return\n    elif n == 16:\n        print(\"16 can be represented as the difference of two squares.\")\n        return\n\n    # Check for other special cases\n    if n % 4 == 0:\n        print(\"The difference of two squares can be represented as a number.\")\n        return\n\n    # Check for the main case\n    for i in range(5, int(n**0.5)+1, 2):\n        if n % i == 0 and n % (n//i) == 0:\n            print(\"The difference of two squares can be represented as a number.\")\n            return\n\n    # Check for the last case\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0 and n % (n//i) == 0:\n            print(\"The difference of two squares can be represented as a number.\")\n            return\n\n    # If all cases fail, it can't be represented as the difference of two squares\n    print(\"The difference of two squares can't be represented as a number.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    #initialize the variables\n    square1 = 0\n    square2 = 0\n    diff_square = 0\n    square_diff = 0\n    \n    #find the square of the given number\n    square1 = n**2\n    \n    #find the difference of the square and the square of 2\n    diff_square = abs(square1 - square2)\n    \n    #find the square of the difference of the squares\n    square_diff = diff_square**2\n    \n    #check if the square of the difference of the squares is equal to the given number\n    if square_diff == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i * i <= n:\n        j = 1\n        while i * i + j * j <= n:\n            if i * i + j * j == n:\n                print(True)\n                return\n            j += 1\n        i += 1\n    print(False)"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n    elif n == 1:\n        print(\"The number 1 is a square.\")\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n%i == 0:\n                if n == i**2 or n == (n//i)**2:\n                    print(\"The number\", n, \"cannot be represented as the difference of two squares.\")\n                else:\n                    print(\"The number\", n, \"can be represented as the difference of two squares.\")\n                    break\n        else:\n            print(\"The number\", n, \"can be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Initialize variables\n    diff = 0\n    square = 0\n    # Iterate from 1 to sqrt(n)\n    for i in range(1, int(n**0.5)+1):\n        # Check if n can be represented as the difference of two squares\n        if i*i == n:\n            diff = n - i*i\n            # Check if the difference is a square\n            for j in range(1, int(diff**0.5)+1):\n                if diff == j*j:\n                    square = True\n                    break\n            if square:\n                break\n    # Return whether the number can be represented as the difference of two squares or not\n    return square"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Finding the square of the number\n    square_n = n * n\n    \n    # Looping through all the squares between 1 and the square of the number\n    for i in range(1, square_n+1):\n        # Checking if the square is equal to the difference of the number and the square\n        if i == square_n - n:\n            return True\n    \n    # If no square is found which is equal to the difference of the number and the square, then the number cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n > 0 and n % 4 == 0:\n        return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while True:\n        j = 1\n        while True:\n            if i*i + j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if n is an integer\n    if not n.is_integer():\n        return \"The given number is not an integer.\"\n\n    # Find the square of the number\n    square = n ** 2\n\n    # Find the difference of two squares\n    diff = square - (square // 2) ** 2\n\n    # Check if the difference is less than or equal to 0\n    if diff <= 0:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a variable to store the current pattern in the sequence\n    pattern = []\n\n    # Loop through each color in the sequence\n    for color in colors:\n        # Append the current color to the current pattern\n        pattern.append(color)\n\n        # Check if the current pattern matches the given pattern\n        if pattern == patterns:\n            return True\n        else:\n            # If the pattern doesn't match, reset the pattern to its initial state\n            pattern = []\n\n    # If the loop completes without finding a match, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the length of patterns and colors arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize a variable to keep track of the current position in the patterns array\n    pos = 0\n\n    # Loop through the colors array\n    for color in colors:\n        # If the color matches the current pattern in the patterns array\n        if color == patterns[pos]:\n            # Move to the next pattern in the patterns array\n            pos = (pos + 1) % len(patterns)\n        # If the color doesn't match the current pattern, return False\n        else:\n            return False\n\n    # If the loop completes without finding any mismatches, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initializing variables\n    count = 0\n    prev_pattern = ''\n\n    # iterating through the colors array\n    for color in colors:\n        # checking if the current color follows the sequence of the patterns array\n        if color == patterns[count]:\n            # incrementing count if the current color matches the patterns array\n            count += 1\n        # checking if all the patterns have been matched\n        if count == len(patterns):\n            # returning True if all the patterns have been matched\n            return True\n        # checking if the current color does not follow the sequence of the patterns array\n        elif color!= patterns[count]:\n            # resetting count to 0 if the current color does not match the patterns array\n            count = 0\n            # checking if the current color matches the previous pattern\n            if color == prev_pattern:\n                # incrementing count if the current color matches the previous pattern\n                count += 1\n            # checking if all the patterns have been matched\n            if count == len(patterns):\n                # returning True if all the patterns have been matched\n                return True\n            # updating the previous pattern\n            prev_pattern = color\n\n    # returning False if no patterns have been matched\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    while i < len(colors):\n        if colors[i] in patterns[i]:\n            i += 1\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors) - len(patterns) + 1):\n        same = True\n        for j in range(len(patterns)):\n            if colors[i+j]!= patterns[j]:\n                same = False\n                break\n        if same:\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    prev_pattern = None\n    for pattern in patterns:\n        if pattern == prev_pattern:\n            return False\n        prev_pattern = pattern\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    \n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # initialize an empty set to store the valid tuples\n    valid_tuples = set()\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # loop through each element in the tuple\n        for j in range(len(test_list[i])):\n            # check if the current element is divisible by K\n            if test_list[i][j] % K == 0:\n                # add the current tuple to the valid set\n                valid_tuples.add(tuple(test_list[i]))\n    # return the valid set of tuples\n    return valid_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Create a new list to store the tuples that meet the criteria\n    matches = []\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible, append the tuple to the matches list\n            matches.append(tup)\n    # Return the matches list\n    return matches"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple1 in test_list:\n        found = True\n        for elem in tuple1:\n            if elem % K!= 0:\n                found = False\n                break\n        if found:\n            result.append(tuple1)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples as input and a number K as input.\n    It returns a list of tuples that have all elements divisible by K from the input list.\n    '''\n    \n    # Initialize an empty list to store the tuples that meet the condition\n    result = []\n    \n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the tuple contains all elements that are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function checks whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Check if n is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # Split the string into words\n    for word in words:\n        if len(word) % 2 == 1: # Check if length is odd\n            print(word, \"is an odd length\")\n        else:\n            print(word, \"is an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is odd-length.\")\n        else:\n            print(word, \"is even-length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return 'The length of the word is even' \n    else: \n        return 'The length of the word is odd' "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # Split the string into words\n    if len(words) == 1: # If there is only one word in the string, return True\n        return True\n    else: # If there is more than one word in the string, check the length of each word\n        for word in words:\n            if len(word) % 2 == 0: # If the length of the word is even, return False\n                return False\n        return True # If all the words have odd length, return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = []\n    for i in s.split():\n        word.append(i)\n    for i in word:\n        if len(i) % 2!= 0:\n            print(f\"{i} is odd\")\n        else:\n            print(f\"{i} is even\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string into words\n    \n    for word in words:\n        if len(word) % 2!= 0:  # check if length is odd\n            print(word, 'is an odd length.')\n        else:\n            print(word, 'is an even length.')"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as an input and checks whether the length of the word is odd or not.\n    '''\n\n    # Split the string into a list of words\n    words = s.split()\n\n    # Loop through each word in the list\n    for word in words:\n        # Check the length of the word and print whether it is odd or even\n        if len(word) % 2 == 0:\n            print(f\"{word} is an even length word.\")\n        else:\n            print(f\"{word} is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word + \" is an even length word.\")\n        else:\n            print(word + \" is an odd length word.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the counter variable\n    count = 0\n    # Initialize the result variable\n    result = 0\n    # Initialize the prime factorization of n\n    prime_factors = prime_factorize(n)\n    # Loop through each prime factorization\n    for prime_factor in prime_factors:\n        # Add 1 to the counter variable for each prime factor\n        count += 1\n        # Calculate the result variable by multiplying it with the number of times the prime factor appeared\n        result += (prime_factor**count)\n    # Return the result variable\n    return result\n\ndef prime_factorize(n):\n    '''\n    Write a function to factorize a number into prime factors.\n    '''\n    # Initialize the list of prime factors\n    prime_factors = []\n    # Loop through each number from 2 to the square root of n\n    for i in range(2, int(n**0.5)+1):\n        # Check if i is a prime factor of n\n        if n % i == 0:\n            # If i is a prime factor of n, add it to the list of prime factors\n            prime_factors.append(i)\n            # Reduce n by dividing it by i until it is no longer a factor\n            while n % i == 0:\n                n //= i\n    # If n is still a factor after dividing by all primes less than or equal to its square root, it must be a prime factor\n    if n > 1:\n        prime_factors.append(n)\n    # Return the list of prime factors\n    return prime_factors"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 1\n    for i in range(n):\n        t = t * (i + 1)\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    if n == 0:\n        return 0\n\n    n -= 1  # Convert 0-based indexing to 1-based indexing\n\n    # The first tetrahedral number is 0\n    if n == 0:\n        return 0\n\n    # The second tetrahedral number is 1\n    if n == 1:\n        return 1\n\n    # The third tetrahedral number is 5\n    if n == 2:\n        return 5\n\n    # The fourth tetrahedral number is 10\n    if n == 3:\n        return 10\n\n    # The fifth tetrahedral number is 15\n    if n == 4:\n        return 15\n\n    # The sixth tetrahedral number is 20\n    if n == 5:\n        return 20\n\n    # The seventh tetrahedral number is 25\n    if n == 6:\n        return 25\n\n    # The eighth tetrahedral number is 30\n    if n == 7:\n        return 30\n\n    # The ninth tetrahedral number is 35\n    if n == 8:\n        return 35\n\n    # The tenth tetrahedral number is 40\n    if n == 9:\n        return 40\n\n    # The eleventh tetrahedral number is 45\n    if n == 10:\n        return 45\n\n    # The twelfth tetrahedral number is 50\n    if n == 11:\n        return 50\n\n    # The thirteenth tetrahedral number is 55\n    if n == 12:\n        return 55\n\n    # The fourteenth tetrahedral number is 60\n    if n == 13:\n        return 60\n\n    # The fifteenth tetrahedral number is 65\n    if n == 14:\n        return 65\n\n    # The sixteenth tetrahedral number is 70\n    if n == 15:\n        return 70\n\n    # The seventeenth tetrahedral number is 75\n    if n == 16:\n        return 75\n\n    # The eighteenth tetrahedral number is 80\n    if n == 17:\n        return 80\n\n    # The nineteenth tetrahedral number is 85\n    if n == 18:\n        return 85\n\n    # The twentieth tetrahedral number is 90\n    if n == 19:\n        return 90\n\n    # The twenty-first tetrahedral number is 95\n    if n == 20:\n        return 95\n\n    # The twenty-second tetrahedral number is 100\n    if n == 21:\n        return 100\n\n    # The twenty-third tetrahedral number is 105\n    if n == 22:\n        return 105\n\n    # The twenty-fourth tetrahedral number is 110\n    if n == 23:\n        return 110\n\n    # The twenty-fifth tetrahedral number is 115\n    if n == 24:\n        return 115\n\n    # The twenty-sixth tetrahedral number is 120\n    if n == 25:\n        return 120\n\n    # The twenty-seventh tetrahedral number is 125\n    if n == 26:\n        return 125\n\n    # The twenty-eighth tetrahedral number is 130\n    if n == 27:\n        return 130\n\n    # The twenty-ninth tetrahedral number is 135\n    if n == 28:\n        return 135\n\n    # The thirty-first tetrahedral number is 140\n    if n == 29:\n        return 140\n\n    # The thirty-second tetrahedral number is 145\n    if n == 30:\n        return 145\n\n    # The thirty-third tetrahedral number is 150\n    if n == 31:\n        return 150\n\n    # The thirty-fourth tetrahedral number is 155\n    if n =="
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 13\n    elif n == 3:\n        return 173\n    else:\n        return (13 * tetrahedral_number(n-1)) + (173 * tetrahedral_number(n-2)) + 4 * tetrahedral_number(n-3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n\n    # Calculate the nth tetrahedral number\n    for i in range(n):\n        a, b, c, d = d, a + b + c + d\n\n    # Return the nth tetrahedral number\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    a, b, c, d = 0, 1, 2, 3\n\n    while True:\n        a += b\n        b += c\n        c += d\n\n        if a > n:\n            return a - 3\n        elif a == n:\n            return a + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize a variable to keep track of the current tetrahedral number\n    current_number = 0\n\n    # Loop through each digit of n\n    for digit in str(n):\n        # Check if the digit is a 1\n        if digit == '1':\n            # Add the value of the current_number to the result\n            current_number += n ** 3\n        # Add the value of the current_number to the result\n        current_number += (n - 1) ** 3\n\n    # Return the result\n    return current_number"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return tetrahedral_number(n//2) + tetrahedral_number(n//2)\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first tetrahedral number\n    t1 = 0\n    # Initialize the second tetrahedral number\n    t2 = 1\n    # Initialize the third tetrahedral number\n    t3 = 2\n    # Initialize the fourth tetrahedral number\n    t4 = 3\n    # Loop through the nth tetrahedral number\n    for i in range(n):\n        # Calculate the next tetrahedral number\n        t5 = t1 + t2 + t3 + t4\n        # Update the values of t1, t2, t3, t4\n        t1 = t2\n        t2 = t3\n        t3 = t4\n        t4 = t5\n    return t5"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    tetrahedral_numbers = [0, 0, 0, 0]\n    for i in range(1, n+1):\n        for j in range(4):\n            for k in range(4):\n                if (i//2)*2 == i and (j//2)*2 == j and (k//2)*2 == k:\n                    tetrahedral_numbers[j] += 1\n                    break\n    return tetrahedral_numbers[0]"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r ** 3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r as input and returns the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r as input and returns the volume of a sphere with that radius.\n    '''\n    volume = (4/3) * math.pi * r**3 # using the formula for the volume of a sphere\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V\n\nprint(volume_sphere(1))"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * (r ** 3)\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius as input and returns the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char = (char + ord(strr[i])) % 26\n    return chr(char + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for char_i in strr:\n        char += ord(char_i)\n    char %= 26\n    char_list = chr(ord('A') + char)\n    return char_list"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Convert string to list of characters\n    str_list = list(strr)\n\n    # Initialize the sum variable to 0\n    sum_val = 0\n\n    # Iterate over the list of characters\n    for char in str_list:\n\n        # Convert the character to its ASCII value\n        char_val = ord(char)\n\n        # Add the ASCII value of the character to the sum\n        sum_val += char_val\n\n    # Convert the sum value to a character using the ASCII value of 'A'\n    char_val = sum_val % 26 + 65\n\n    # Return the character made by the sum\n    return chr(char_val)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr(((ascii_sum % 26) + 65))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    # Initialize an empty string to store the character\n    char = \"\"\n\n    # Loop through each character of the string\n    for char in strr:\n        # Convert each character to its ASCII value\n        ascii_val = ord(char)\n\n        # Add the ASCII value of each character modulo 26 to the character string\n        char += (ascii_val + ord('a') - 1) % 26\n\n    # Return the character string\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    sum = 0\n    for i in strr:\n        sum = (sum + ord(i)) % 26\n    return chr(sum + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0  \n    for char in strr:  \n        ascii_sum += ord(char)  \n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                sequence(i-1)\n            else:\n                sequence(i-2)\n        return n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 ** n) - 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    for i in range(1, n+1):\n        sequence.append(2 * sequence[i-1] - sequence[i-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2]\n    for i in range(2, n+1):\n        sequence.append(sequence[-1]**2 + sequence[-2]**2)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2, 1, 1, 2, 4, 4, 8, 8]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 4**n - 4**(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th number in the Newman Conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 100\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i//2])\n        else:\n            sequence.append(3 - sequence[i//2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function finds the surface area of a sphere.\n    \n    Inputs:\n        r (float): radius of the sphere\n        \n    Outputs:\n        surface_area (float): surface area of the sphere\n    '''\n    \n    # Calculate the surface area using the formula:\n    # surface_area = 4 * math.pi * r^2\n    surface_area = 4 * math.pi * r ** 2\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * (r**3)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Find the semi-circle's area using the formula A = \u03c0r\u00b2\n    A = math.pi * r**2\n    \n    # Calculate the surface area of the sphere using the formula A * 4\n    surface_area = A * 4\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3  # formula for surface area of a sphere\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    center = (n // 2) * 10 + 1\n    return center"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 0.75\n    b = 1.25\n    while n > 0:\n        hexagonal = int(a * n + b)\n        n -= hexagonal\n    return hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Find the previous centered hexagonal number\n    prev_centered = centered_hexagonal_number(n-1)\n\n    # Calculate the centered hexagonal number\n    centered = prev_centered + 2 * prev_centered + 1\n\n    # Return the centered hexagonal number\n    return centered"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagon_nums = [0, 1, 12, 25, 48, 89, 157, 252, 377, 538, 744, 1011, 1356, 1797, 2351, 3040, 3889, 4929, 6200, 7740, 9599, 11830, 14490, 17630, 21310, 25590, 30540, 36230, 42730, 50120, 58480, 67900, 78470, 90280, 103430, 118020, 134160, 151960, 171530, 193000, 216500, 242170, 270160, 300630, 333740, 369660, 408570, 450650, 496100, 545130, 597960, 654820, 715950, 781600, 852030, 927510, 1008320, 1094760, 1187130, 1285740, 1390910, 1492960, 1602220, 1719020, 1843690, 1976570, 2118000, 2268330, 2427920, 2597120, 2776290, 2965800, 3166020, 3377340, 3599160, 3831890, 4075940, 4331720, 4599660, 4880200, 5173700, 5480620, 5801360, 6136340, 6486000, 6850780, 7231140, 7627550, 8040500, 8470490, 8918040, 9383680, 9867950, 10371390, 10894550, 11437990, 11992270, 12557960, 13135630, 13724850, 14326200, 14939260, 15564620, 16202870, 16853610, 17517450, 18194000, 18883880, 19586720, 20303160, 21032840, 21776390, 22533460, 23304690, 24089730, 24889220, 25703810, 26533150, 27377900, 2823862"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Function to check if a number is centered hexagonal\n    def is_centered_hexagonal(num):\n        # Convert the number to a string\n        num_str = str(num)\n        # Initialize the sum of digits\n        sum_of_digits = 0\n        # Loop through each digit in the string\n        for digit in num_str:\n            # Add the digit to the sum\n            sum_of_digits += int(digit)\n        # Check if the sum is divisible by 6\n        return sum_of_digits % 6 == 0\n    \n    # Check if n is a centered hexagonal number\n    if is_centered_hexagonal(n):\n        # Return the nth centered hexagonal number\n        return n\n    else:\n        # Raise an error if n is not a centered hexagonal number\n        raise ValueError(\"The input number is not a centered hexagonal number.\")"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # define the function to calculate centered hexagonal numbers\n    def centered_hexagonal(n):\n        # if n is 0 or 1, return n\n        if n == 0 or n == 1:\n            return n\n        # if n is even, return n + 1\n        elif n % 2 == 0:\n            return centered_hexagonal(n-1) + 2\n        # if n is odd, return (n - 1) * (3 * n - 1)\n        else:\n            return (n - 1) * (3 * n - 1)\n    # return the nth centered hexagonal number\n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 11\n    else:\n        for i in range(3, n+1):\n            centered_hexagonal_number = i*(i-1)*(6*i**2 + 12*i - 3)\n            return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # first centered hexagonal number is 1\n    if n == 1:\n        return 1\n\n    # centered hexagonal numbers are odd\n    if n % 2 == 1:\n        return centered_hexagonal_number(n-1)\n\n    # centered hexagonal numbers are 2n-1\n    return centered_hexagonal_number(n/2) + centered_hexagonal_number(n/2) - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Function to calculate the centered hexagonal number\n    def centered_hexagonal(n):\n        # Calculate the centered hexagonal number using formula\n        return n * (n + 1) * 12 / 6\n\n    # Function to find the difference between the centered hexagonal number and the given number\n    def difference(n):\n        # Calculate the centered hexagonal number for the given number\n        given_hex = centered_hexagonal(n)\n        # Calculate the centered hexagonal number for the centered hexagonal number of 1\n        centered_hex = centered_hexagonal(1)\n        # Return the difference between the two centered hexagonal numbers\n        return given_hex - centered_hex\n\n    # Function to find the centered hexagonal number that is closest to the given number\n    def closest_hex(n):\n        # Find the difference between the centered hexagonal number and the given number\n        diff = difference(n)\n        # Return the centered hexagonal number that is closest to the given number\n        return n + diff // 2\n\n    # Find the centered hexagonal number closest to the given number\n    centered_hex = closest_hex(n)\n\n    # Return the centered hexagonal number\n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize variables\n    a = 1\n    b = 4\n    c = 1\n    d = 1\n    e = 6\n    f = 4\n    \n    # loop through the sequence of centered hexagonal numbers\n    for i in range(1, n+1):\n        # calculate the centered hexagonal number\n        h = a + b + c + d + e + f\n        \n        # print the centered hexagonal number\n        print(h, end=' ')\n        \n        # update the variables\n        a, b = b, c\n        c, d = d, e\n        e, f = f, a"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # create an empty dictionary to hold the merged dictionaries\n    merged_dict = {}\n\n    # loop through the three dictionaries and merge them into the merged dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge two dictionaries into a single dictionary\n    merged_dict = {**dict1, **dict2}\n    \n    # Merge the two merged dictionaries into a single dictionary\n    merged_dict_2 = {**merged_dict, **dict3}\n    \n    return merged_dict_2"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \"\"\"\n    # Initialize empty dictionary to store merged dictionaries\n    merged_dict = {}\n\n    # Loop through each key in the first dictionary\n    for key in dict1:\n        # If the key exists in the second and third dictionaries, add the values of the keys to the merged dictionary\n        if key in dict2 and key in dict3:\n            merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n        # If the key exists only in the second dictionary, add the value of the key to the merged dictionary\n        elif key in dict2:\n            merged_dict[key] = dict1[key] + dict2[key]\n        # If the key exists only in the third dictionary, add the value of the key to the merged dictionary\n        elif key in dict3:\n            merged_dict[key] = dict1[key] + dict3[key]\n        # If the key doesn't exist in either dictionary, add it to the merged dictionary with its value as an empty list\n        else:\n            merged_dict[key] = []\n\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    dict1, dict2, dict3 - dictionaries to be merged\n\n    Returns:\n    merged_dict - merged dictionary of dict1, dict2, and dict3\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    # create an empty dictionary to store the merged values\n    merged_dict = {}\n    \n    # loop through each key in each dictionary\n    for key in dict1.keys():\n        # check if the key already exists in the merged dictionary\n        if key in merged_dict.keys():\n            # if it does, add the values together\n            merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n        # if the key doesn't already exist, add it with its value from the first dictionary\n        else:\n            merged_dict[key] = dict1[key]\n    \n    # return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()  # create a copy of the first dictionary\n    merged_dict.update(dict2)  # update the copy with the second dictionary\n    merged_dict.update(dict3)  # update the copy with the third dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    for key, value in dict1.items():\n        merged_dict[key] = value\n        \n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n            \n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n            \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge the three dictionaries into a single dictionary\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    # Sort the keys of the merged dictionary\n    merged_dict = ct.OrderedDict(sorted(merged_dict.items()))\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): The first dictionary to be merged.\n        dict2 (dict): The second dictionary to be merged.\n        dict3 (dict): The third dictionary to be merged.\n\n    Returns:\n        dict: A merged dictionary.\n\n    Example:\n        >>> dict1 = {'a': 1, 'b': 2, 'c': 3}\n        >>> dict2 = {'d': 4, 'e': 5, 'f': 6}\n        >>> dict3 = {'g': 7, 'h': 8, 'i': 9}\n        >>> merge_dictionaries_three(dict1, dict2, dict3)\n        {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list and returns a dictionary with the frequency of each element in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int) #using defaultdict to get a dictionary with default value as 0\n    \n    for element in list1:\n        freq_dict[element] += 1 #incrementing count for each element\n    \n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    \"\"\"\n    freq = collections.defaultdict(int)\n    for item in lst:\n        freq[item] += 1\n    return dict(freq)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_list = [x for x in range(1, N+1)]\n    closest_num = abs(min(n_list) - N)\n    closest_num = min(closest_num, abs(max(n_list) - N))\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    # Define a list of numbers from 1 to N\n    nums = list(range(1, N+1))\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Find the mid index of the list\n    mid = len(nums) // 2\n\n    # If the mid index is even, return the middle element\n    if len(nums) % 2 == 0:\n        return nums[mid]\n\n    # If the mid index is odd, return the middle element or the smaller number\n    return nums[mid] if nums[mid] < nums[mid+1] else nums[mid+1]"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for i in range(N):\n        if i < smallest:\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_min = 1\n    n_max = N\n\n    # Binary search to find the closest smaller number\n    while n_max - n_min > 1:\n        n = (n_max + n_min) // 2\n\n        if n < N:\n            n_min = n\n        else:\n            n_max = n\n\n    return n_min"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Find the smallest number in the list\n    smallest = min(N)\n\n    # Find the difference between N and smallest\n    diff = abs(N - smallest)\n\n    # If N is the smallest number, return N\n    if diff == 0:\n        return smallest\n\n    # If N is less than smallest, find the closest smaller number\n    elif N < smallest:\n        return smallest - diff\n\n    # If N is greater than smallest, find the closest smaller number\n    else:\n        return smallest + diff\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    numbers = [int(x) for x in input(\"Enter the numbers separated by space: \").split()]\n    smallest = min(numbers)\n    closest = smallest\n    for num in numbers:\n        if num > smallest:\n            if abs(num - smallest) < abs(num - closest):\n                closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    min_n = float('inf')\n    max_n = float('-inf')\n    closest_num = 0\n    for i in range(1, N+1):\n        if i < N:\n            if i <= N//2:\n                if i >= min_n:\n                    min_n = i\n            else:\n                if i <= N//2 + 1:\n                    if i < max_n:\n                        max_n = i\n        if n <= i < min(n, min_n):\n            closest_num = min(n, min_n)\n        elif n >= i > max(n, max_n):\n            closest_num = max(n, max_n)\n    print(\"The closest smaller number is:\", closest_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    # initialize variables\n    smallest = float('inf')\n    closest_smallest = float('inf')\n    for num in range(1, N+1):\n        # find the difference between the current number and N\n        diff = abs(num - N)\n        \n        # if the difference is smaller than the current smallest\n        if diff < smallest:\n            # update the smallest and closest_smallest variables\n            smallest = diff\n            closest_smallest = num\n            \n    # return the closest smaller number\n    return closest_smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    largest = float('-inf')\n\n    for i in range(N+1):\n        if i <= N:\n            smallest = min(smallest, i)\n        else:\n            largest = max(largest, i)\n\n    if abs(largest - smallest) <= N:\n        return smallest\n    else:\n        return largest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    if N == 0:\n        return 0\n    \n    smaller_num = N\n    while smaller_num > 0:\n        if N - smaller_num == 0:\n            return smaller_num\n        elif N - smaller_num > 0:\n            smaller_num -= 1\n        else:\n            smaller_num += 1\n    \n    return smaller_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    max_word = ''\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_length = 0\n    longest_word = ''\n\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n            longest_word = word\n\n    return longest_word, max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word in the list.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list of words.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if the sub_str is present as a substring in any of the str_list values\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list:\n        print(\"The first argument must be a list.\")\n        return\n    if type(sub_str)!= str:\n        print(\"The second argument must be a string.\")\n        return\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if the given string is present as a substring in the list\n    if sub_str in str1:\n        # If yes, return True\n        return True\n    # If not, return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes two string parameters: str1 and sub_str.\n    str1 is the string that we want to search for sub_str in.\n    sub_str is the string that we want to search for in str1.\n    The function returns a boolean value indicating whether or not sub_str is present in str1.\n    \"\"\"\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, str) or not isinstance(sub_str, str):\n        return \"Both the inputs must be strings.\"\n    if not all(isinstance(s, str) for s in str1):\n        return \"All elements of the input list must be strings.\"\n    return sub_str in str1"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether a given number is undulating or not.\n    \"\"\"\n\n    # If the number is even, then it is not undulating\n    if n % 2 == 0:\n        return False\n    \n    # If the number is odd, then it is undulating\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check whether the given number is divisible by 2 or not\n    if n % 2 == 0: \n        # If the given number is even, it is undulating\n        return True\n    else: \n        # If the given number is odd, it is not undulating\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether a given number is undulating or not.\n    \"\"\"\n\n    # Checking for special case: 0 is undulating\n    if n == 0:\n        return True\n\n    # Checking for the case where the given number is even\n    if n % 2 == 0:\n        return False\n\n    # Checking for the case where the given number is odd\n    else:\n        # Dividing the given number by 2\n        n = n // 2\n\n        # Checking whether the result is odd or even\n        if n % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check whether the number is odd or even\n    if n % 2 == 0:\n        return False\n    else:\n        # Calculate the square root of the number\n        sqrt_n = int(n ** 0.5) + 1\n\n        # Check if the square root is an integer\n        if sqrt_n ** 2 == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check for edge cases\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n\n    # Check for prime numbers\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    \n    # Check for undulating numbers\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Define a list of prime numbers up to n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    \n    # Check if n is a prime number\n    if n in primes:\n        return True\n    \n    # Check if n is divisible by any prime number in the list\n    for prime in primes:\n        if n % prime == 0:\n            return False\n    \n    # If the number is not divisible by any prime number, it is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return 'The given number is undulating.'\n    else:\n        return 'The given number is not undulating.'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0 or n == 1: \n        return True\n    elif n % 2 == 0: \n        return is_undulating(n//2)\n    else: \n        return is_undulating(3*n+1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    This function takes a number as input and returns True if the number is undulating else False.\n    A number is said to be undulating if it is a multiple of 2.\n    '''\n\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    This function takes two parameters 'a' and 'b', and returns the value of 'a' to the power of 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments a and b, and returns the value of 'a' raised to the power of 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sorting the list of tuples based on second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # returning the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_minimum(test_list):\n    # Sort the list of tuples by second value (ascending)\n    test_list.sort(key=itemgetter(1))\n    # Return the index of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list by the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    index_min = None\n    min_value = None\n    for i in range(len(test_list)):\n        if test_list[i][1] is None:\n            index_min = i\n            min_value = None\n            break\n        if min_value is None or test_list[i][1] < min_value:\n            index_min = i\n            min_value = test_list[i][1]\n    return index_min"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the minimum length to be the length of the first list in the list of lists\n    min_length = len(lst[0])\n    # Iterate over the remaining lists in the list of lists\n    for lst in lst[1:]:\n        # Check if the current list has a shorter length than the minimum length\n        if len(lst) < min_length:\n            min_length = len(lst)\n    # Return the minimum length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0][0]\n    for i in range(1,len(lst)):\n        for j in range(len(lst[i])):\n            if len(lst[i][j]) < min_len:\n                min_len = len(lst[i][j])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # find the length of the smallest list in the list\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n\n    # return the length of the smallest list\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0][0]\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:  \n        if len(sublist) < min_len:  \n            min_len = len(sublist)  \n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  #initialize the minimum length to infinity\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])  #update the minimum length if the current list is smaller than the current minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisors = []\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            divisors.append(i)\n        i += 1\n    return len(divisors)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\nprint(divisor(12)) # Output: 2"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    # initialize a boolean array of size n+1 with all elements as True\n    is_prime = [True] * (n + 1)\n\n    # mark all non-prime numbers as False\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i**2, n + 1, i):\n                is_prime[j] = False\n\n    # count the number of prime numbers up to n\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # Initialize a counter variable to keep track of the number of divisors\n    count = 0\n\n    # Loop through all the numbers from 1 to the square root of n\n    for i in range(1, int(n ** 0.5) + 1):\n\n        # Check if n is divisible by i\n        if n % i == 0:\n\n            # If it is, increment the counter variable\n            count += 1\n\n    # Return the counter variable\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for subitem in item:\n            if subitem not in freq:\n                freq[subitem] = 1\n            else:\n                freq[subitem] += 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through each element in the flattened list\n    for elem in list1:\n        # if the element is not in the dictionary, add it with a frequency of 1\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        # if the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[elem] += 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency\n    frequency_dict = {}\n    # flatten the list of lists to a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    # iterate over the flattened list and update the frequency dictionary\n    for item in flat_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    # return the dictionary of frequency\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through each element in the list\n    for item in list1:\n        # if the item is a list, call the function recursively on that list\n        if isinstance(item, list):\n            # call the function recursively and update the freq_dict with the result\n            sub_dict = frequency_lists(item)\n            for key, value in sub_dict.items():\n                freq_dict[key] = freq_dict.get(key, 0) + value\n        # if the item is not a list, add it to the dictionary with a frequency of 1\n        else:\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    \n    # return the final dictionary with the frequency of each element in the flattened list\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Helper function to flatten a list of lists\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    # Flatten the input list\n    flattened_list = flatten(list1)\n\n    # Use a dictionary to store frequency of each element\n    freq_dict = {}\n    for elem in flattened_list:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the flattened list\n    for element in list1:\n        # Check if the element is already in the dictionary\n        if element in freq_dict:\n            # Increment the frequency of the element by 1\n            freq_dict[element] += 1\n        else:\n            # If the element is not in the dictionary, add it with a frequency of 1\n            freq_dict[element] = 1\n    \n    # Return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Args:\n    list1 (list): a flattened list of lists\n\n    Returns:\n    dict: a dictionary where the keys are the elements in list1 and the values are the corresponding frequencies\n\n    \"\"\"\n    flat_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flat_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # iterate through the flattened list and update the frequency of each element in the dictionary\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # return the dictionary with the frequency of each element\n    return freq_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # calculate the product of all the numbers\n    product = 1\n    for num in numbers:\n        product *= num\n    # divide the product by the length of the list\n    product /= len(numbers)\n    return product"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize an empty string to store the binary representation\n    binary_str = \"\"\n    # convert the decimal number to its binary equivalent using a while loop\n    while n > 0:\n        # get the last digit of the decimal number\n        digit = n % 2\n        # add the last digit to the binary string\n        binary_str = str(digit) + binary_str\n        # remove the last digit from the decimal number\n        n = n // 2\n    # return the binary string with no leading zeros\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        rem = n % 2 \n        binary = str(rem) + binary \n        n //= 2 \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Initialize an empty string to store the binary equivalent of the decimal number\n    binary_num = ''\n\n    # Convert the decimal number to binary and store it in binary_num\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n //= 2\n\n    # Remove leading zeros from binary_num\n    while binary_num.startswith('0'):\n        binary_num = binary_num[1:]\n\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Initialize variables\n    binary = \"\"\n    current_number = n\n\n    # Convert decimal number to binary\n    while current_number > 0:\n        binary = str(current_number % 2) + binary\n        current_number //= 2\n\n    # Remove leading zeros from binary string\n    while binary[0] == '0':\n        binary = binary[1:]\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # initialize an empty string to store the binary equivalent\n    binary = \"\"\n    \n    # convert the decimal number to binary using a while loop\n    while n > 0:\n        # get the last digit of the decimal number\n        last_digit = n % 2\n        \n        # convert the last digit to a string and append it to the binary string\n        binary = str(last_digit) + binary\n        \n        # remove the last digit from the decimal number\n        n //= 2\n    \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    elif n % 2 == 0:\n        return decimal_to_binary(n // 2) + \"0\"\n    else:\n        return decimal_to_binary(n // 2) + \"1\""
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    while True:\n        new_num = num - 1\n        if is_palindrome(new_num):\n            return new_num\n        num = new_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    reversed_num = 0\n    temp = num\n    while temp > 0:\n        remainder = temp % 10\n        reversed_num = (reversed_num * 10) + remainder\n        temp //= 10\n    return num == reversed_num\n\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num\n    \n    # Check if the number is 1 or a multiple of 10\n    if num == 1 or (num % 10 == 0):\n        return 10\n    \n    # Check if the number is a multiple of 100\n    if num % 100 == 0:\n        return 1000\n    \n    # Check if the number is a multiple of 1000\n    if num % 1000 == 0:\n        return 10000\n    \n    # Find the smallest multiple of 10 greater than the input number\n    multiple = 10\n    while (multiple * multiple) <= num:\n        multiple *= 10\n    \n    # Convert the multiple to a palindrome and return the next smaller palindrome\n    palindrome = multiple * 10\n    while not is_palindrome(palindrome):\n        palindrome -= 1\n    \n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input is a single digit\n    if num < 10:\n        return num\n\n    # Remove leading zeros from the input number\n    while num >= 10 and num % 10 == 0:\n        num //= 10\n\n    # Find the smallest number greater than the input number that is also a palindrome\n    smallest_palindrome = num + 1\n    while smallest_palindrome % 10 == 0:\n        smallest_palindrome += 1\n\n    # If the smallest number greater than the input number is less than the input number,\n    # then the input number is the largest palindrome smaller than the input number\n    if smallest_palindrome > num:\n        return smallest_palindrome\n\n    # If the smallest number greater than the input number is equal to the input number,\n    # then the input number is the next smallest palindrome greater than the input number\n    else:\n        return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Check if a given number is palindrome or not.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a given integer.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Check if a given number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    max_prime = 2\n    while not is_prime(max_prime):\n        max_prime += 1\n\n    if is_palindrome(max_prime):\n        max_prime += 1\n\n    return max_prime"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Find the length of the integer string\n    length = len(num_str)\n    # Initialize a variable to store the next smallest palindrome\n    next_palindrome = None\n    # Iterate over each digit in the string, starting from the rightmost digit\n    for i in range(length - 1, -1, -1):\n        # Initialize a variable to store the current digit\n        current_digit = int(num_str[i])\n        # Initialize a variable to store the complement of the current digit\n        complement_digit = 0\n        # Iterate over the digits to the left of the current digit\n        for j in range(i + 1, length):\n            # Calculate the complement of the current digit and add it to the sum\n            complement_digit += int(num_str[j])\n        # Calculate the new value of the current digit by adding the complement to the current digit and subtracting the previous value of the current digit\n        new_digit = current_digit + complement_digit - (i + 1)\n        # If the new value of the current digit is greater than the current digit and the new value of the current digit is a palindrome, update the next_palindrome variable\n        if new_digit > current_digit and str(new_digit) == str(new_digit)[::-1]:\n            next_palindrome = new_digit\n            # If the new value of the current digit is the same as the current digit, break out of the loop\n            if new_digit == current_digit:\n                break\n    # If no next smallest palindrome was found, return None\n    if next_palindrome is None:\n        return None\n    # Convert the next_palindrome variable to an integer and return it\n    return int(next_palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    # Check if the given number is odd or even\n    if num % 2 == 0:\n        num += 1\n    # Convert the number to a string\n    num_str = str(num)\n    # Remove the last digit and check if it is odd or even\n    for i in range(len(num_str)-2, -1, -1):\n        if num_str[i] % 2 == 0:\n            num_str = num_str[:i] + num_str[i+1:]\n            break\n    # Convert the modified string back to an integer\n    next_num = int(num_str)\n    # Check if the next smallest palindrome is greater than the given number\n    while next_num > num:\n        # Check if the next smallest palindrome is a palindrome\n        if str(next_num) == str(next_num)[::-1]:\n            return next_num\n        # Increment the next smallest palindrome by 1\n        next_num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    # initialize a variable to store the next smallest palindrome\n    next_palindrome = None\n    \n    # check if the number is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num\n    \n    # check if the number is even\n    if num % 2 == 0:\n        # try all odd integers\n        for i in range(3, num+1, 2):\n            # check if the odd integer is a palindrome\n            if int(str(i)[::-1]) == i:\n                # if so, update the next smallest palindrome\n                if next_palindrome is None or i < next_palindrome:\n                    next_palindrome = i\n    \n    # check if the number is odd\n    else:\n        # try all even integers\n        for i in range(2, num, 2):\n            # check if the even integer is a palindrome\n            if int(str(i)[::-1]) == i:\n                # if so, update the next smallest palindrome\n                if next_palindrome is None or i < next_palindrome:\n                    next_palindrome = i\n    \n    return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Find the largest palindrome that is less than or equal to num\n    max_palindrome = 0\n    for i in range(10**num, -1, -1):\n        if is_palindrome(i):\n            max_palindrome = i\n            break\n    # Find the smallest palindrome that is greater than max_palindrome\n    smallest_palindrome = max_palindrome + 1\n    while not is_palindrome(smallest_palindrome):\n        smallest_palindrome += 1\n    return smallest_palindrome\n\nif __name__ == '__main__':\n    # Test the function with some inputs\n    for num in [1, 10, 100, 1000, 10000]:\n        print(\"Next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n    # Initialize a variable to store the next smallest palindrome\n    next_palindrome = \"\"\n    # Iterate through each digit of the input integer\n    for i in range(len(num_str)):\n        # Check if the current digit is the rightmost digit\n        if num_str[i] == num_str[-1]:\n            # If it is, check if the next digit is also the rightmost digit\n            if i == len(num_str) - 2 or num_str[i+1]!= num_str[-1]:\n                # If not, append the current digit to the next palindrome and break out of the loop\n                next_palindrome += num_str[i]\n                break\n        # If the current digit is not the rightmost digit, append the next digit and break out of the loop\n        else:\n            next_palindrome += num_str[i+1]\n            break\n    # Convert the next palindrome to an integer and return it\n    return int(next_palindrome)\n\n\nif __name__ == \"__main__\":\n    # Test the function with an input of 12345\n    print(next_smallest_palindrome(12345))  # Output: 13245\n    # Test the function with an input of 12321\n    print(next_smallest_palindrome(12321))  # Output: 12345\n    # Test the function with an input of 12331\n    print(next_smallest_palindrome(12331))  # Output: 13244"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def reverse_number(num):\n        return int(str(num)[::-1])\n\n    def is_valid_next_palindrome(num):\n        next_num = reverse_number(num) + 1\n        return is_palindrome(next_num)\n\n    def find_next_palindrome(num):\n        while not is_valid_next_palindrome(num):\n            num += 1\n        return num\n\n    next_palindrome = find_next_palindrome(num)\n    return next_palindrome\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    if k == 1:\n        return arr[0]\n    return kth_element(arr[1:], k-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is within the range of array size\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n\n    # Count the number of occurrences of the target element in the array\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[k-1]:\n            count += 1\n\n    # Return the kth element or \"Invalid input\" if k is not found in the array\n    if count == k-1:\n        return arr[k-1]\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in an array and a number k and returns the kth element of the array.\n    The array is assumed to have at least k elements.\n    '''\n    if k > len(arr):\n        raise ValueError(\"k is greater than the length of the array.\")\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid > k - 1:\n            right = mid\n        else:\n            left = mid + 1\n    return arr[left]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and a k value as input and returns the kth element of the array.\n    The array is assumed to have at least k elements.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return \"Invalid input. k must be between 1 and the length of the array.\"\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    left, right = 1, len(arr)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k:\n            return arr[mid-1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n\n    left = 1\n    right = len(arr)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k:\n            return arr[mid - 1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and an integer k as input, and returns the kth element in the array.\n    k is assumed to be a positive integer and greater than or equal to 1.\n    '''\n    if k < 1:\n        return \"k must be a positive integer greater than or equal to 1\"\n    elif k > len(arr):\n        return \"k must be less than or equal to the length of the array\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_word = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_word += char.lower()\n        elif i == 1 and char.isupper():\n            camel_word += char.lower()\n        else:\n            camel_word += char\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n\n    Example:\n    snake_to_camel(\"snake_case\")\n    # Output: \"snakeCase\"\n\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if word[i] == \"_\":\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0 or (i > 0 and word[i]!= \"_\"):\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif i > 0 and word[i].isupper():\n            camel_case += \"_\" + word[i].lower()\n        else:\n            camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), word[1:].title()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    word_list = word.split('_')\n    for i in range(len(word_list)):\n        if i == 0:\n            camel_case += word_list[i].capitalize()\n        else:\n            camel_case += word_list[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0 or word[i].isupper():\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    # convert the snake case to camel case by capitalizing the first letter\n    camel_case = word.replace('_','').title().replace(' ', '')\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), word[1:].title()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    \n    # Capitalize the first word and join the rest of the words\n    camel_case = words[0].upper()\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    \n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if the number of vertices is greater than or equal to the number of edges.\n    if n < m:\n        print(\"Invalid input. The number of vertices should be greater than or equal to the number of edges.\")\n        return\n    \n    # Calculate the value of a(n, m) using the formula:\n    # a(n, m) = n * (n - 1) / 2 + 2 * m - 1\n    a = n * (n - 1) / 2 + 2 * m - 1\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function takes two integers n and m as input and returns the Eulerian number a(n, m).\n    The Eulerian number is defined as the number of ways to arrange n flowers in m rows.\n    '''\n\n    if n == 0 or m == 0:\n        return 0\n\n    # Initialize matrix to store the number of ways to arrange the flowers in the rows\n    a = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the matrix using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if j == 1:\n                a[i][j] = 1\n            else:\n                a[i][j] = a[i-1][j] + a[i][j-1]\n\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    if n == 0 or m == 0: # Base case\n        return 0\n\n    # Initialize the first row with ones\n    row = [1] * (m + 1)\n\n    # Calculate the first column\n    for i in range(n + 1):\n        row[0] = (row[0] * i) % 1000000007\n\n    # Calculate the other rows\n    for i in range(1, n + 1):\n        new_row = []\n        for j in range(m + 1):\n            new_row.append((row[j] * i) % 1000000007)\n        row = new_row\n\n    # Return the last element in the row\n    return row[-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # check for n, m being even\n    if n % 2 == 0 or m % 2 == 0:\n        print(\"Error: n and m must be odd numbers!\")\n        return\n    \n    # calculate the number of steps required to reach (n+m)/2\n    steps = (n+m)/2\n    \n    # initialize variables for the binary representation of steps\n    step_bin = bin(steps)[2:]\n    \n    # initialize variables for the binary representation of (n+m)/2\n    n_bin = bin(n)[2:]\n    m_bin = bin(m)[2:]\n    \n    # find the binary digits that differ from each other\n    diff_digits = [i for i in n_bin if i!= m_bin[i]]\n    \n    # check if there are any binary digits that differ from each other\n    if not diff_digits:\n        print(\"a(n, m) = 1\")\n        return\n    \n    # find the maximum number of steps required to reach (n+m)/2\n    max_steps = 2**len(diff_digits)\n    \n    # find the number of possible values for the difference digits\n    num_values = 2**len(n_bin) - 2**len(m_bin) + 1\n    \n    # initialize variables for the Eulerian numbers\n    a = 0\n    \n    # loop through the possible values for the difference digits\n    for i in range(num_values):\n        # convert the binary representation of i to an integer\n        i_int = int(i, 2)\n        \n        # calculate the number of steps required to reach (n+m)/2 with the current value for i\n        current_steps = int(i_int + n_int + m_int, 2)\n        \n        # check if the current value for i is a valid solution\n        if current_steps == steps:\n            # if it is, update the value of a\n            a = i_int\n            \n            # break out of the loop since we have found the solution\n            break\n    \n    # if we have not found the solution, print an error message\n    if a == 0:\n        print(\"Error: a(n, m) not found!\")\n    \n    # otherwise, print the solution\n    else:\n        print(\"a(n, m) = \" + str(a))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the value of a(n, m) to 0\n    a = 0\n    \n    # Loop through each row of the Pascal triangle\n    for i in range(n):\n        # Initialize the value of the current row to 0\n        row = 0\n        \n        # Loop through each column of the current row\n        for j in range(m):\n            # Add the value of the previous row and the current column together\n            row += a\n            \n            # Update the value of a(n, m) to the new value of row\n            a = row\n    \n    # Return the value of a(n, m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if not is_prime(n):\n        return None\n\n    def phi(n):\n        if n < 2:\n            return None\n        p = 2\n        while p * p <= n:\n            if n % p == 0:\n                return None\n            p += 1\n        return n\n\n    def eulerian_formula(n, m):\n        return (m - 1) * (n * m - m**2) / 2\n\n    a = eulerian_formula(phi(n), m)\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, m+1):\n        if is_prime(i) and is_prime(m-i):\n            count += 1\n            if count == n:\n                return i*m\n    return \"Eulerian number not found\""
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case \n    if n == 1: \n        return m \n\n    # recursive case \n    return (m - (m - 1) % (n - 1)) // (n - 1) "
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if j % i == 0:\n                print(i, end=' ')\n            else:\n                print(j, end=' ')"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i+j == n:\n                count += 1\n    return count"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        # sort the sublist in-place using the sorted() function\n        input_list[i] = sorted(sublist)\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count the number of true booleans in a given list.\n    '''\n\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_true_booleans(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuple to a list to add it to\n    test_list = list(test_tup)\n    # Append the list to the tuple\n    test_tup = tuple(test_list + test_list)\n    # Return the new tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Define a new list and a new tuple\n    new_list = []\n    new_tup = ()\n    \n    # Loop through the given list and append each element to the new list\n    for elem in test_list:\n        new_list.append(elem)\n        \n    # Loop through the given tuple and append each element to the new tuple\n    for elem in test_tup:\n        new_tup = new_tup + (elem,)\n        \n    # Return the new list and tuple\n    return new_list, new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # create a new empty tuple\n    new_tup = ()\n    # iterate through each element in the test_list\n    for elem in test_list:\n        # append the element to the new_tup\n        new_tup = new_tup + (elem,)\n    # append the new_tup to the test_tup\n    test_tup = test_tup + (new_tup,)\n    # return the modified test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    print(\"The modified list is:\", test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Define a new tuple with the same elements as the test_list\n    new_tup = tuple(test_list)\n    # Append the test_list to the new_tup\n    new_tup = new_tup + test_list\n    # Return the new_tup\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge the first two lists into a single sorted list\n    merged_list = num1 + num2\n    # Merge the merged list with the third list\n    merged_list = merged_list + num3\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n    # Sort the combined list using heapq\n    heapq.heapify(combined_list)\n    # Return the sorted list\n    return sorted(combined_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Merge two lists and sort them using heapify\n    heapq.heapify(num1)\n    num1.extend(heapq.merge(num2, num3))\n    heapq.heapify(num1)\n    \n    # Extract the sorted list from the heap\n    sorted_list = []\n    while num1:\n        sorted_list.append(num1.pop(0))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Combine the three lists into one large list\n    merged_list = sorted(num1 + num2 + num3)\n\n    # Convert the merged list back to a heap\n    heap = [x for x in merged_list]\n\n    # Merge the heaps using heapq\n    heapq.heapify(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list using heapsort\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Merge the first two lists\n    merged_list = num1 + num2\n    \n    # Merge the merged list with the third list\n    final_list = heapq.merge(merged_list, num3)\n    \n    return final_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    This function takes three sorted lists (num1, num2, and num3) and returns a single sorted list of all the elements in them.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge two lists and two more lists into one list\n    merged_list = num1 + num2 + num3\n    # Sort the merged list in ascending order\n    sorted_list = sorted(merged_list)\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # convert lists to sets to remove duplicates and sort them in ascending order\n    num1_set = set(sorted(num1))\n    num2_set = set(sorted(num2))\n    num3_set = set(sorted(num3))\n    \n    # merge sets into a single set\n    all_set = num1_set.union(num2_set,num3_set)\n    \n    # convert the set back to a list\n    all_list = list(all_set)\n    \n    # sort the list in ascending order\n    all_list.sort()\n    \n    # convert the list back to a set\n    all_set = set(all_list)\n    \n    # convert the set back to a sorted list\n    sorted_list = sorted(list(all_set))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function merges three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    i = j = k = 0\n\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            if num1[i] < num3[k]:\n                merged_list.append(num1[i])\n                i += 1\n            elif num3[k] < num2[j]:\n                merged_list.append(num3[k])\n                k += 1\n        elif num2[j] < num1[i]:\n            if num2[j] < num3[k]:\n                merged_list.append(num2[j])\n                j += 1\n            elif num3[k] < num1[i]:\n                merged_list.append(num3[k])\n                k += 1\n        else:\n            if num3[k] < num1[i]:\n                merged_list.append(num3[k])\n                k += 1\n            else:\n                merged_list.append(num1[i])\n                i += 1\n\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    return merged_list\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n        for j in range(len(s)):\n            if s[j] == '1':\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # convert binary string to a list of characters\n    s_list = list(s)\n    # rotate the binary string the given number of times\n    for i in range(n):\n        s_list.append(s_list.pop(0))\n    # count the number of odd values in the rotated binary string\n    count = sum(1 for char in s_list if char == '1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # convert the string to a list of integers\n    s_list = [int(i) for i in s]\n\n    # initialize variables to keep track of the odd numbers and the count of odd numbers\n    odd_count = 0\n    odd_list = []\n\n    # iterate through each number in the list and check if it's odd\n    for num in s_list:\n        if num % 2!= 0:\n            odd_list.append(num)\n            odd_count += 1\n\n    # rotate the list by n times and count the odd numbers in the result\n    for i in range(n):\n        last_num = odd_list[-1]\n        odd_list = odd_list[:-1]\n        odd_list.append(last_num)\n\n    # return the count of odd numbers\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize the counter variable to 0\n    count = 0\n    # convert the binary string to a list of integers\n    s = list(map(int, list(s)))\n    # rotate the list n times\n    s = s[n:] + s[:n]\n    # iterate through the list and count the odd values\n    for i in s:\n        if i % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the input string into a binary string\n    binary_str = bin(int(s))[2:]\n    \n    # Initialize a counter for odd numbers\n    odd_count = 0\n    \n    # Rotate the binary string n times and count the odd numbers\n    for i in range(n):\n        binary_str = binary_str[1:] + binary_str[0]\n        if int(binary_str[-1]) % 2 == 1:\n            odd_count += 1\n    \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    def bin_to_int(binary):\n        return int(binary, 2)\n\n    def int_to_bin(num, bits):\n        return bin(num)[2:].zfill(bits)\n\n    def rotate(binary, n):\n        return binary[-n:] + binary[:-n]\n\n    # Convert binary string to integer\n    num = bin_to_int(s)\n\n    # Rotate the binary string n times\n    for _ in range(n):\n        num = bin_to_int(rotate(int_to_bin(num, len(s)), len(s)))\n\n    # Count the number of odd values\n    count = sum(1 for digit in int_to_bin(num, len(s)) if int(digit) % 2!= 0)\n\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    odd_count = 0 \n    for i in range(n): \n        s = s[::-1] + s \n    for i in s: \n        if int(i) % 2!= 0: \n            odd_count += 1 \n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(s)):\n        # If the character is an odd number (i.e., greater than 0 and less than or equal to 1)\n        if int(s[i]) % 2!= 0:\n            # Increment the count variable\n            count += 1\n    \n    # Return the count variable\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    # initialize a list of odd numbers\n    odd_list = []\n    # convert the binary string to a list of binary digits\n    binary_list = [int(digit) for digit in s]\n    # rotate the binary list the given number of times\n    for i in range(n):\n        for j in range(len(binary_list)):\n            if binary_list[j] == 1:\n                odd_list.append(binary_list[j])\n                binary_list[j] = 0\n            else:\n                binary_list[j] = binary_list[j] + 1\n    # count the number of odd numbers in the rotated list\n    for num in odd_list:\n        count += num\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    def odd_count(binary_string):\n        count = 0\n        for char in binary_string:\n            if char == '1':\n                count += 1\n        return count\n\n    binary_string = s\n    count = 0\n    for i in range(n):\n        binary_string = binary_string[-2:] + binary_string[:-2]\n        count += odd_count(binary_string)\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] == nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns a list of common elements.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                common.append(i)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty set to store the common elements\n    common = set()\n    \n    # loop through each element in the nested list\n    for i in range(len(nestedlist)):\n        # loop through each other element in the nested list\n        for j in range(i+1, len(nestedlist)):\n            # check if the current elements are equal and if so, add them to the common set\n            if nestedlist[i] == nestedlist[j]:\n                common.add(nestedlist[i])\n    \n    # convert the common set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for sublist in nestedlist:\n        common.update(set(sublist))\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for item in nestedlist:\n        if item not in common_list:\n            common_list.append(item)\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n    \n    # Loop through each list in the nested list\n    for lst in nestedlist:\n        # Loop through each element in the list\n        for elem in lst:\n            # If the element is already in the common set, add it to the result set\n            if elem in common:\n                common.remove(elem)\n    \n    # Return the result set as a list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common_elements and j not in nestedlist[0]:\n                common_elements.append(j)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return None\n    else:\n        common = []\n        for i in range(len(nestedlist[0])):\n            for j in range(1, len(nestedlist)):\n                if nestedlist[0][i] == nestedlist[j][i]:\n                    common.append(nestedlist[0][i])\n        return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    if not isinstance(nestedlist, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Get the first list from the nestedlist\n    first_list = nestedlist[0]\n    \n    # Initialize an empty set to store the common elements\n    common_elements = set()\n    \n    # Iterate over the first list and check if each element exists in the set of common elements\n    for element in first_list:\n        if element in common_elements:\n            common_elements.remove(element)\n        else:\n            common_elements.add(element)\n    \n    # Remove the first list from the nestedlist\n    del nestedlist[0]\n    \n    # Iterate over the remaining nested lists and check if the common elements are in them\n    for sublist in nestedlist:\n        if not isinstance(sublist, list):\n            raise TypeError(\"All sublists must be lists\")\n        if len(sublist)!= len(common_elements):\n            raise ValueError(\"All sublists must have the same length\")\n        \n        for element in common_elements:\n            if element not in sublist:\n                common_elements.remove(element)\n    \n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    This function checks if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n        else:\n            continue\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for item in list1:\n        if not item:\n            return False\n\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dict in list1:\n        if len(dict)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for d in list1:\n        if not d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_count = 0\n    for dictionary in list1:\n        if dictionary == {}:\n            empty_count += 1\n    if empty_count == len(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if isinstance(nums, tuple):\n        # Check if all elements are integers\n        if all(isinstance(num, int) and num > 0 for num in nums):\n            # Convert all elements to integers\n            return sum(int(num) for num in nums)\n        else:\n            raise ValueError('All elements must be positive integers.')\n    else:\n        raise TypeError('Input must be a tuple.')"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of the numbers in the tuple\n    int_sum = 0\n    \n    # Loop through each number in the tuple\n    for num in nums:\n        # Convert each number to an integer and add it to the sum\n        int_sum += int(num)\n    \n    # Return the sum of all the integers in the tuple\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n\n    Args:\n        nums (tuple): A tuple of positive integers.\n\n    Returns:\n        int: The integer equivalent of the input tuple.\n    \"\"\"\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the result variable to 0\n    result = 0\n    # Loop through the list of numbers\n    for num in nums_list:\n        # Convert each number to an integer and add it to the result\n        result += int(num)\n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if isinstance(test_list[i][j], (int, float, complex)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (int, float)):\n                continue\n            elif isinstance(element, str):\n                try:\n                    element = float(element)\n                except ValueError:\n                    pass\n            else:\n                element = float(str(element))\n            sublist[test_list.index(sublist)] = element\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                item = float(item)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, complex)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                continue\n            else:\n                sublist[test_list.index(sublist)] = float(item)\n                \n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for row in test_list:\n        for element in row:\n            try:\n                float_list.append(float(element))\n            except ValueError:\n                pass\n    return float_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    # Split the string on whitespace\n    words = string.split()\n    # Convert the words to a list of strings\n    return words"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes an array as input and returns the element that appears only once in the array.\n\n    :param arr: a sorted array of integers\n    :return: the element that appears only once in the array\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return None\n\n    # Traverse the array for a repeated element\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            # Check if the current element is already in the result set\n            if arr[i] not in result:\n                # Add the current element to the result set\n                result.add(arr[i])\n            else:\n                # If the element is already in the result set, it means it appears only once in the array.\n                return arr[i]\n\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    for i in count:\n        if count[i] == 1:\n            return i\n    \n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for key in count:\n        if count[key] == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_elem = arr[0]\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == unique_elem:\n            count += 1\n        else:\n            count = 1\n            unique_elem = arr[i]\n    return unique_elem"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to store the number of times each element appears\n    count = [0] * (arr[-1] + 1)\n\n    # Iterate through the array and increment the count of each element\n    for i in arr:\n        count[i] += 1\n\n    # Iterate through the count array and find the first element that appears only once\n    for i in range(len(count)):\n        if count[i] == 1:\n            return i\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    for key, value in count.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to keep track of the frequency of each element\n    freq = {}\n\n    # Iterate over the array and update the frequency of each element\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # Find the element that appears only once\n    for i in freq:\n        if freq[i] == 1:\n            return i\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n                "
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Iterate through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Iterate through the dictionary and find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Returns the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    def find_max_product(tuple1):\n        '''\n        This function finds the maximum absolute product between two numbers in a given tuple.\n        '''\n        num1, num2 = tuple1\n        return abs(num1) * abs(num2)\n\n    max_product = 0\n    for i in range(0, len(list1), 2):\n        for j in range(i+1, min(i+3, len(list1))):\n            product = find_max_product(list1[i], list1[j])\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = abs(list1[i]*list1[j])\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = abs(list1[i][0] * list1[j][1])\n            if prod > max_product:\n                max_product = prod\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize variables\n    max_product = 0\n    current_product = 0\n\n    # Iterate through the list and calculate the product of each pair of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i][0]*list1[j][1])\n            if current_product > max_product:\n                max_product = current_product\n\n    # Return the maximum absolute product between numbers in pairs of tuples\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    product = 1\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            diff = abs(list1[i][1] - list1[j][1])\n            if diff > max_product:\n                max_product = diff\n                product = list1[i][0] * list1[j][0]\n            elif diff == max_product:\n                product *= list1[i][0] * list1[j][0]\n\n    return max_product, product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function takes in a limit and returns the sum of all amicable numbers from 1 to that limit.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i!= 1:\n            if i % 2 == 0:\n                j = 3\n            else:\n                j = 5\n            while True:\n                if i * j == j * j:\n                    break\n                elif j * j > i * j:\n                    break\n                j += 2\n            if i * j == j * j:\n                amicable_numbers.append(i)\n                amicable_numbers.append(j)\n                if i == j:\n                    continue\n                for k in range(j, i, -2):\n                    if i * k == k * k:\n                        amicable_numbers.append(i)\n                        amicable_numbers.append(k)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a given number is amicable or not.\n    \"\"\"\n    if num < 1:\n        return False\n    sum_of_squares = sum(int(i**0.5) for i in range(1, num))\n    return (sum_of_squares == num) and (num!= sum_of_squares)\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable = 0\n    for num in range(1, limit):\n        if is_amicable(num):\n            sum_of_amicable += num\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize variables for sum and count\n    sum_amicable = 0\n    count = 0\n    \n    # Loop through numbers from 1 to limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable by checking if it is divisible by any number from 1 to its square root\n        for i in range(1, int(num**0.5)+1):\n            if (num % i == 0) and (num/i!= i):\n                count += 1\n                break\n    \n    # Calculate sum of amicable numbers and return it\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    def is_amicable(a, b):\n        \"\"\"\n        Determine if two numbers are amicable by calculating their sum and comparing it to a specified number.\n        \"\"\"\n        return a + b == limit and a!= b\n\n    amicable_sum = 0\n    for a in range(1, limit + 1):\n        for b in range(a, limit + 1):\n            if is_amicable(a, b):\n                amicable_sum += a + b\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == sum_of_squares(i) and i!= sum_of_squares(sum_of_squares(i)):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_squares(num):\n    '''\n    Write a function to calculate the sum of the squares of a number.\n    '''\n    return num**2"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_amicable(num):\n    \"\"\"\n    This function checks if a given number is amicable or not.\n    If a number is amicable, it returns True else False.\n    \"\"\"\n    for i in range(1, num):\n        if num % i == 0 and num // i!= i:\n            return True\n    return False\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit number and returns the sum of all amicable numbers from 1 to that limit.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_prime(i) and is_prime(limit - i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if num == sum_of_proper_divisors(num):\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if num == sum_of_divisors(num) and num!= 1:\n            amicable_sum += num\n    return amicable_sum\n\ndef sum_of_divisors(num):\n    \"\"\"\n    Write a function to sum of all divisors of a specified number.\n    \"\"\"\n    divisors_sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef main():\n    limit = int(input(\"Enter the limit for amicable numbers: \"))\n    print(\"Sum of amicable numbers from 1 to\", limit, \"is:\", sum_amicable_numbers(limit))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize sum variable to 0\n    sum_amicable = 0\n    # loop through all numbers from 1 to limit\n    for num in range(1, limit+1):\n        # check if the number is amicable\n        if is_amicable(num):\n            # add the number to the sum if it is amicable\n            sum_amicable += num\n    # return the sum of all amicable numbers\n    return sum_amicable\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable.\n    '''\n    # check if the number is less than 10\n    if num < 10:\n        return False\n    # loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(num**0.5)+1):\n        # check if the number is divisible by the i-th power\n        if num % i == 0:\n            # check if the i-th power is also a factor of the number\n            if i**2 == num:\n                return True\n            # check if the square of the i-th power is also a factor of the number\n            elif i**2 < num:\n                return True\n    # if no factors are found, the number is not amicable\n    return False"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle of their complex conjugate.\n    \"\"\"\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes in two complex numbers as input and returns their angle in radians.\n    \"\"\"\n    # Convert input complex numbers to radians\n    angle_rad = cmath.phase(a + b * 1j)\n    # Convert radians to degrees\n    angle_deg = (angle_rad * 180 / cmath.pi) % 360\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes two complex numbers as inputs and returns their angle as a floating point value in degrees.\n    '''\n    angle = cmath.phase(a+b)\n    return (angle * 180.0) / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    angle = round(angle, 2)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle_degrees = angle * 180.0 / cmath.pi\n    return angle_degrees"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n\n    Parameters:\n    a (complex): The real part of the complex number.\n    b (complex): The imaginary part of the complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if string[i-1] == '0' and string[j-1] == '1':\n                dp[i][j] = dp[i-1][j]\n            elif string[i-1] == '1' and string[j-1] == '0':\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    return dp[n][n]"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    # initializing variables\n    zero_count = 0\n    one_count = 0\n    max_diff = 0\n\n    # iterating over the string\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        elif char == '1':\n            one_count += 1\n        else:\n            raise ValueError(\"String contains invalid character\")\n\n        # finding maximum difference\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n\n    # returning the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    count_zero = 0\n    count_one = 0\n    max_diff = 0\n    n = len(string)\n\n    for i in range(n):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n\n        diff = abs(count_zero - count_one)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    count = [0] * 3 # count[0] will store the count of 0s, count[1] will store the count of 1s and count[2] will store the count of 0s and 1s\n    max_diff = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n        count[2] = count[0] + count[1]\n        diff = abs(count[0] - count[1])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        zero_count = string.count('0', i, n)\n        one_count = string.count('1', i, n)\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    if len(string) < 2:\n        return 0\n\n    prev_count_0 = 0\n    prev_count_1 = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            prev_count_1 += 1\n        else:\n            prev_count_0 += 1\n\n        diff = prev_count_1 - prev_count_0\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize a variable to keep track of the maximum difference\n    max_diff = 0\n\n    # Loop through each character in the string\n    for i in range(len(string)): \n        # Initialize a variable to keep track of the number of 0s in the current sub-string\n        count = 0\n\n        # Loop through each character in the current sub-string\n        for j in range(i, len(string)): \n            # Check if the current character is a 0\n            if string[j] == '0': \n                count += 1\n\n            # Check if we've found a 1 and not seen a 0 before\n            elif string[j] == '1' and count == 0: \n                # Calculate the difference between the number of 0s and 1s in the current sub-string\n                diff = j - i\n\n                # Update the maximum difference if the current difference is greater\n                if diff > max_diff: \n                    max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    count_diff = 0\n    \n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Check if the current character is 0 or 1\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        # Calculate the difference between the counts of 0s and 1s\n        count_diff = count_0 - count_1\n        \n        # Update the maximum difference if the current difference is greater\n        if count_diff > max_diff:\n            max_diff = count_diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Convert the binary string to a list of integers\n    binary = [int(bit) for bit in string]\n    \n    # Initialize variables to store the maximum difference and the length of the longest sub-string\n    max_diff = 0\n    max_len = 0\n    \n    # Loop through all possible sub-strings of the binary string\n    for i in range(1, len(binary)):\n        # Calculate the length of the sub-string\n        sub_len = len(binary[i:])\n        \n        # Calculate the difference between the number of 0s and 1s in the sub-string\n        diff = sum(1 for j in range(sub_len) if binary[i+j] == 0) - sum(1 for j in range(sub_len) if binary[i+j] == 1)\n        \n        # Update the maximum difference and the length of the longest sub-string if the current difference is greater\n        if diff > max_diff or (diff == max_diff and sub_len > max_len):\n            max_diff = diff\n            max_len = sub_len\n    \n    # Return the maximum difference and the length of the longest sub-string\n    return max_diff, max_len"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize a dictionary to store the frequency of each digit (0 or 1) in the string\n    freq = {'0': 0, '1': 0}\n    for digit in string:\n        freq[digit] += 1\n\n    # Initialize variables for the maximum difference and the current difference\n    max_diff = 0\n    current_diff = 0\n\n    # Loop through all possible substrings of the string\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            current_diff = abs(freq['0'] - freq['1'])\n            if current_diff > max_diff:\n                max_diff = current_diff\n\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n\n    # Find all divisors of a and b\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Calculate the sum of common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors_a = []\n    divisors_b = []\n    for i in range(1,a+1):\n        if a % i == 0:\n            divisors_a.append(i)\n    for i in range(1,b+1):\n        if b % i == 0:\n            divisors_b.append(i)\n    common_divisors = list(set(divisors_a).intersection(set(divisors_b)))\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 1\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            c = c+i\n    return c"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # check if the given numbers are positive\n    if a <= 0 or b <= 0:\n        return None\n\n    # check if a is greater than b\n    if a > b:\n        a, b = b, a\n\n    # initialize a variable to store the sum of common divisors\n    sum_cd = 0\n\n    # iterate through all numbers between 1 and b\n    for i in range(1,b+1):\n\n        # check if the number is a common divisor of a and b\n        if a % i == 0 and b % i == 0:\n\n            # add the common divisor to the sum of common divisors\n            sum_cd += i\n\n    # return the sum of common divisors\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # initialize a set to store the divisors of a\n    divisors_a = set()\n    # initialize a set to store the divisors of b\n    divisors_b = set()\n    \n    # loop through the numbers from 1 to a-1 and find the divisors of a and b\n    for i in range(1, a):\n        if a % i == 0:\n            divisors_a.add(i)\n        if b % i == 0:\n            divisors_b.add(i)\n    \n    # find the intersection of the two sets to get the common divisors\n    common_divisors = divisors_a.intersection(divisors_b)\n    \n    # calculate the sum of the common divisors\n    sum_of_common_divisors = sum(common_divisors)\n    \n    # return the sum of the common divisors\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Finding the common divisors of two numbers\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Finding the sum of common divisors\n    total_sum = 0\n    for i in range(1, max(a, b) + 1):\n        if i in divisors:\n            total_sum += i\n\n    return total_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find the common divisors of a and b\n    common = []\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            common.append(i)\n    \n    # find the sum of common divisors\n    sum_common = 0\n    for i in common:\n        sum_common += i\n    \n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Check if a is divisible by b\n    if a % b == 0:\n        return b\n    else:\n        # Initialize sum of common divisors to 0\n        sum_cd = 0\n        \n        # Find all divisors of a and b\n        divisors = [i for i in range(1, b+1) if a % i == 0]\n        \n        # Check if any of the divisors are common divisors of a and b\n        for d in divisors:\n            if a // d == b // d:\n                # Add the common divisor to the sum of common divisors\n                sum_cd += d\n                \n        # Return the sum of common divisors\n        return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function calculates the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n\n    # Loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # Check if i is a divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # If it is, add it to the list of divisors\n            divisors.append(i)\n\n    # Calculate the sum of the divisors and return it\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Check if both the numbers are positive integers\n    if isinstance(a, int) and isinstance(b, int) and a > 0 and b > 0:\n        # Initialize variables to store the sum of common divisors\n        div_sum = 0\n        # Loop through all the numbers from 1 to the smaller number\n        for i in range(1, min(a, b) + 1):\n            # Check if the smaller number is divisible by i\n            if a % i == 0 and b % i == 0:\n                # Add i to the sum of common divisors\n                div_sum += i\n        # Return the sum of common divisors\n        return div_sum\n    # Raise an error if any of the conditions are not met\n    else:\n        raise ValueError(\"Both the numbers must be positive integers.\")"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(x):\n        result += y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function multiplies two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y > 0:\n        remainder = x % 10\n        product += remainder * y\n        x = x // 10\n        y = y // 10\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = [word for word in str if len(word) > n]\n    return words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()  # convert string to list of words\n    long_words = []\n    \n    for word in words:\n        if len(word) > n:  # check if word is longer than n characters\n            long_words.append(word)  # add word to list if it is\n    \n    return long_words  # return list of long words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes in two arguments:\n    n: an integer representing the number of characters required for a word to be considered long\n    words: a list of words to search\n\n    This function returns a list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words in a list of words that are longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words in a list of words that are longer than n characters.\n\n    :param n: the maximum length of words to consider\n    :param words: a list of words\n    :return: a list of words longer than n characters\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # define the size of the matrix\n    n = len(my_matrix)\n\n    # create the sum of all elements in the matrix\n    sum_elements = sum([sum(row) for row in my_matrix])\n\n    # check if the sum of all elements is equal to the product of all rows and columns\n    if sum_elements == n*(n+1)//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    # Check if all rows are equal\n    for row in my_matrix:\n        if row!= my_matrix[0]:\n            return False\n\n    # Check if all columns are equal\n    for col in range(len(my_matrix)):\n        if [row[col] for row in my_matrix]!= [my_matrix[0][col] for col in range(len(my_matrix))]:\n            return False\n\n    # Check diagonals\n    for i in range(len(my_matrix)):\n        if my_matrix[i][i]!= my_matrix[i][len(my_matrix)-i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is a magic square\n    total = sum(sum(row) for row in my_matrix)\n    if total!= 36:\n        return False\n    else:\n        for row in my_matrix:\n            if len(set(row))!= len(row):\n                return False\n        return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    # calculate the sum of the rows and columns\n    row_sum = sum(sum(row) for row in my_matrix)\n    col_sum = sum(sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0])))\n\n    # check if the sum of all elements is equal to the sum of the diagonal elements\n    if row_sum == col_sum == sum(sum(row[j] for j in range(len(row))) for row in my_matrix):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Initialize variables\n    n = len(my_matrix)\n    sums = [[0] * n for i in range(n)]\n    values = set()\n\n    # Calculate the sums of the rows and columns\n    for i in range(n):\n        for j in range(n):\n            sums[i][j] = my_matrix[i][j]\n\n    # Check for unique values in the matrix\n    for i in range(n):\n        values.add(my_matrix[i][i])\n        values.add(sums[i][n-i-1])\n\n    # Check for unique values in the sums of the rows and columns\n    for i in range(n):\n        for j in range(n):\n            if (my_matrix[i][j] not in values) or (sums[i][j] not in values):\n                return False\n\n    # Check if the sum of the diagonals is equal to the product of the row and column sums\n    diagonal_sum = sums[0][0] + sums[0][n-1] + sums[n-1][0] + sums[n-1][n-1]\n    if diagonal_sum == n * (n * (n + 1) // 2):\n        return True\n\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # check if the matrix has the same sum of the diagonals\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    if diagonal_sum!= sum(my_matrix[i][i] for i in range(len(my_matrix))):\n        return False\n    \n    # check if each cell in the matrix is in the range of 1 to 9\n    for row in my_matrix:\n        for num in row:\n            if num < 1 or num > 9:\n                return False\n    \n    # if all tests pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the size of the matrix\n    size = len(my_matrix)\n\n    # Check if the matrix is square\n    if size!= size:\n        return False\n\n    # Check if the matrix contains all unique elements\n    unique_elements = set(sum(my_matrix, ()))\n    if len(unique_elements)!= size ** 2:\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(size):\n        for j in range(size):\n            # Calculate the sum of the elements in the current row and column\n            row_sum = sum(my_matrix[i][j:j+size])\n            col_sum = sum(my_matrix[j][i:i+size])\n\n            # Check if the sum is equal to the element at the current position\n            if my_matrix[i][j]!= row_sum and my_matrix[i][j]!= col_sum:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # initialize variables\n    sum_row_1 = 0\n    sum_row_2 = 0\n    sum_col_1 = 0\n    sum_col_2 = 0\n\n    # check rows and columns for sum of diagonals\n    for i in range(len(my_matrix)):\n        sum_row_1 += my_matrix[i][i]\n        sum_row_2 += my_matrix[i][len(my_matrix)-i-1]\n        sum_col_1 += my_matrix[i][i]\n        sum_col_2 += my_matrix[i][len(my_matrix)-i-1]\n\n    # check if sums of diagonals are equal\n    if sum_row_1 == sum_row_2 == sum_col_1 == sum_col_2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the row and column sums are equal\n    if row_sums == col_sums:\n        # Check if the matrix is a magic square\n        for i in range(3):\n            for j in range(3):\n                if my_matrix[i][j]!= (i+1) + j:\n                    return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix has the same number of rows and columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # initialize the sum of the rows and columns to 0\n    row_sum = 0\n    col_sum = 0\n    \n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        # check if the row sums to 0\n        if sum(my_matrix[i]) == 0:\n            return False\n        \n        # check if the column sums to 0\n        col_sum = 0\n        for j in range(len(my_matrix)):\n            col_sum += my_matrix[j][i]\n        if col_sum == 0:\n            return False\n    \n    # if we made it this far, the matrix is a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n        \n    max_count = 0\n    max_num = None\n    \n    for num, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_freq = max(freq_dict.values())\n    max_num = None\n    \n    for num in freq_dict:\n        if freq_dict[num] == max_freq:\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    # Count the frequency of each item in the list\n    for num in nums:\n        freq_dict[num] += 1\n        \n        # Update the maximum frequency and item if necessary\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    count_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        count_dict[num] += 1\n        \n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    # Count the frequency of each item in the list\n    for num in nums:\n        freq[num] += 1\n        \n    # Find the item with maximum frequency\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    max_num = None\n    for num, count in freq.items():\n        if count == max_freq:\n            max_num = num\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    return [key for key, value in freq_dict.items() if value == max_freq]\n"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for i in str1:\n        if i in vowels:\n            if len(new_str) == 0:\n                new_str += i\n            elif i == new_str[-1]:\n                new_str += i\n            else:\n                new_str = i + new_str\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'AEIOUaeiou'\n    result = ''\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    vowels_reversed = ''\n\n    for char in str1:\n        if char.lower() in vowels:\n            vowel_count += 1\n            vowels_reversed += char\n\n    if vowel_count == 0:\n        return str1\n    else:\n        return vowels_reversed[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"AEIOUaeiou\"\n    result = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_str = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char.lower() in vowels:\n            vowel_indices.append(i)\n    reversed_str = str1[::-1]\n    for i in vowel_indices:\n        reversed_str = reversed_str[:i] + str1[i] + reversed_str[i+1:]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a list\n    lst = list(tup1)\n    # convert the list to a string\n    return str(lst)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # check if the input is a tuple\n    if type(tup1) == tuple:\n        # join the elements of the tuple into a string\n        return ', '.join(str(x) for x in tup1)\n    else:\n        # return an error message if the input is not a tuple\n        return 'Error: Input must be a tuple.'"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Define a string variable to hold the concatenated values of the elements in the tuple\n    result = \"\"\n    # Loop through each element in the tuple and append its string representation to the result variable\n    for i in tup1:\n        result += str(i)\n    # Return the final result\n    return result"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * ((2 * n) + 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Initialize the variable to 1\n    i = 1\n    # Initialize the sum to 0\n    hex_num = 0\n    \n    # Loop until we reach the nth hexagonal number\n    while i <= n:\n        # Add the current hexagonal number to the sum\n        hex_num += i\n        \n        # Increment i by 2 to get the next hexagonal number\n        i += 2\n    \n    # Return the sum of hexagonal numbers\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize counter to 1\n    counter = 1\n\n    # initialize hexagonal number to 1\n    hex_num = 1\n\n    # loop to find nth hexagonal number\n    while counter <= n:\n        # if counter is even, multiply hexagonal number by 6\n        if counter % 2 == 0:\n            hex_num *= 6\n\n        # if counter is odd, subtract 1 from hexagonal number\n        else:\n            hex_num -= 1\n\n        # increment counter\n        counter += 1\n\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_num = (n * (2 * n - 1)) // 2\n    return hexagonal_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def next_prime(num):\n        i = num + 1\n        while not is_prime(i):\n            i += 1\n        return i\n    \n    def hexagonal_number(num):\n        return num * (num + 1) * 3 // 2\n    \n    return hexagonal_number(next_prime(n))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    else:\n        return 2 * n - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the hexagon number pattern\n    hex_pattern = [1]\n    for i in range(1, n+1):\n        hex_pattern.append(6*hex_pattern[i-1] + 1)\n    return hex_pattern[n]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    while n > 0:\n        n -= 1\n        a = 2 * a\n    return a"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list to access its elements efficiently\n    nums_list = list(nums)\n    count_zeros = 0\n    count_non_zeros = 0\n    for num in nums_list:\n        if num == 0:\n            count_zeros += 1\n        else:\n            count_non_zeros += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = count_zeros / count_non_zeros if count_non_zeros!= 0 else 0\n\n    # Return the ratio of zeroes to non-zeroes as a float\n    return float(zero_ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # convert the input array to an array of integers\n    arr = array('i', nums)\n\n    # find the number of zeros in the array\n    zeros = 0\n    for num in arr:\n        if num == 0:\n            zeros += 1\n\n    # find the number of non-zeros in the array\n    non_zeros = len(arr) - zeros\n\n    # calculate the ratio of zeros to non-zeros\n    if non_zeros == 0:\n        ratio = 0\n    else:\n        ratio = zeros / non_zeros\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    non_zero_count = len([num for num in nums if num!= 0])\n    zero_count = len(nums) - non_zero_count\n    \n    return float(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert array to list\n    nums_list = list(nums)\n    # initialize counters for zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    # loop through the list and increment counters for zeroes and non-zeroes\n    for num in nums_list:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    # calculate the ratio of zeroes to non-zeroes\n    zero_to_non_zero_ratio = zero_count / non_zero_count if non_zero_count!= 0 else 0\n    # return the ratio\n    return zero_to_non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [1]*len(nums))\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            count[count.index(1)+1] += 1\n            zero_count += 1\n    \n    non_zero_count = sum(count) - zero_count\n    ratio = zero_count/non_zero_count\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if zero_count == 0:\n        return 0.0\n    else:\n        return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i')\n    non_zero_count = array('i')\n    \n    for num in nums:\n        if num == 0:\n            zero_count.append(1)\n        else:\n            non_zero_count.append(1)\n            \n    non_zero_count = non_zero_count[1:]\n    zero_count = zero_count[1:]\n    \n    if len(non_zero_count) == 0:\n        return 0\n    \n    return sum(zero_count) / len(non_zero_count)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert array to list\n    nums_list = nums.tolist()\n\n    # Find the count of zeroes and non-zeroes\n    zero_count = nums_list.count(0)\n    non_zero_count = len(nums_list) - zero_count\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = 0\n    if non_zero_count!= 0:\n        ratio = round(zero_count / non_zero_count, 2)\n\n    # Return the ratio of zeroes to non-zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize variables to store counts of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the array and increment the count of non-zeroes and zeroes\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    if non_zero_count == 0:\n        ratio = 1\n    else:\n        ratio = zero_count / non_zero_count\n\n    # Return the ratio of zeroes to non-zeroes as a floating point number\n    return round(ratio, 6)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list\n    nums = list(nums)\n    \n    # Initialize counters for non-zeroes and zeroes\n    non_zeros = 0\n    zeros = 0\n    \n    # Iterate over the list\n    for num in nums:\n        # If the number is zero, increment the zero counter\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    \n    # Calculate and return the ratio\n    if non_zeros == 0:\n        return 0\n    else:\n        return zeros / non_zeros"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True\n    if n == 1: \n        return True\n    for i in range(2, int(n ** 0.5) + 1): \n        if n % i == 0: \n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # compute the sum of non-zero powers of 2 in n\n    sum_of_powers = 0\n    while n!= 0:\n        if n % 2 == 1:\n            sum_of_powers += 1\n        n //= 2\n\n    # check if sum_of_powers is a power of 2\n    if sum_of_powers == 0 or (sum_of_powers > 0 and sum_of_powers & (sum_of_powers - 1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return True \n    elif n == 1: \n        return True \n    elif n == 2: \n        return True \n    else: \n        for i in range(2, int(n**0.5)+1): \n            if n % i == 0: \n                if n//i == 1: \n                    return True\n                else: \n                    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Step 1: Check for special cases\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n\n    # Step 2: Find the number of bits required to represent n\n    count = 0\n    while n > 0:\n        count += 1\n        n = n >> 1\n\n    # Step 3: Check if the number can be represented as sum of non-zero powers of 2\n    i = 1\n    while i <= count:\n        if n & (1 << (i-1)):\n            return False\n        i *= 2\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Convert the given number to binary\n    binary_num = bin(n)[2:]\n    # Check for a power of 2 in the binary representation\n    for i in range(len(binary_num)):\n        if binary_num[i] == '1' and binary_num[i-1] == '0':\n            # Check if there exists any other power of 2 in the remaining part of the binary representation\n            for j in range(i, len(binary_num)):\n                if binary_num[j] == '0':\n                    break\n                elif binary_num[j] == '1':\n                    break\n            else:\n                # If all remaining digits are 0, return True, else False\n                return True\n        else:\n            break\n    else:\n        # If no power of 2 is found, return False\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the number of non-zero bits in the binary representation of n\n    num_bits = 0\n\n    # Loop through each bit in the binary representation of n\n    for i in range(32):\n        # If the current bit is a 1, increment the number of non-zero bits\n        if n & (1 << i):\n            num_bits += 1\n\n        # If the number of non-zero bits is greater than or equal to the number of bits in the binary representation of n, then the number can be represented as sum of non-zero powers of 2\n        if num_bits >= i:\n            return True\n\n    # If the number of non-zero bits is less than the number of bits in the binary representation of n, then the number cannot be represented as sum of non-zero powers of 2\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the number to binary and check if there is a 1 in the rightmost bit\n    if bin(n)[-1] == '1':\n        return False\n    # Loop through all possible binary values starting from 0 to n\n    for i in range(0, n+1):\n        # Check if the binary value is a sum of powers of 2\n        if sum_of_powers_of_two(i) == n:\n            return True\n    return False\n\ndef sum_of_powers_of_two(n):\n    '''\n    Write a python function to calculate the sum of non-zero powers of 2.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through all the bits in the binary representation of n\n    for bit in bin(n)[2:]:\n        # Check if the bit is 1\n        if bit == '1':\n            # Add 2^sum to the sum\n            sum += 2**sum\n    return sum"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        return True\n\n    # Check if n can be represented as sum of non-zero powers of 2\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers = 0\n\n    # Iterate from 2^0 to 2^31 and check if the number can be represented as sum of powers of 2\n    for i in range(32):\n        if (n & (1 << i))!= 0:\n            # Check if the current number can be represented as a sum of powers of 2\n            if (n >> i) == (2**i):\n                return True\n            elif (n >> i)!= (2**i):\n                sum_of_powers += (2**i)\n\n    # Check if the number can be represented as a sum of powers of 2\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n <= 0:\n        return \"The given number is negative or zero.\"\n    \n    # We can check whether the given number can be represented as sum of non-zero powers of 2 or not by repeatedly dividing it by 2 and checking if the result is a power of 2.\n    while n % 2 == 0:\n        n //= 2\n    \n    if n == 1:\n        return \"The given number can be represented as sum of non-zero powers of 2.\"\n    else:\n        return \"The given number cannot be represented as sum of non-zero powers of 2.\""
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # converting radius to radians and multiplying by 2 * pi\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Convert radius to radians\n    theta = 2*3.14159*r\n    # Calculate circumference\n    circumference = 2*3.14159*r\n    # Return circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    This function calculates the circumference of a circle with the given radius r.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    # Define an empty set to store the flattened list\n    flattened = set()\n\n    # Loop through each item in the test_list\n    for item in test_list:\n        # If the item is a list, recursively call the function on that list\n        if isinstance(item, list):\n            flattened.update(extract_singly(item))\n        # If the item is a number, add it to the flattened set\n        elif isinstance(item, (int, float)):\n            flattened.add(item)\n\n    # Return the flattened set\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # Use recursion to flatten the nested list\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    # Flatten the nested list\n    flat_list = flatten(test_list)\n\n    # Convert the list to a set to remove duplicates\n    singly_set = set(flat_list)\n\n    # Return the set as a list\n    return list(singly_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list += sublist\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten_list = []\n    for item in test_list:\n        flatten_list += item\n    return flatten_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        flat_list.extend(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        for item in sublist:\n            if type(item) == int or type(item) == float:\n                flattened.append(item)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        flat_list.extend(item)\n    return flat_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        # Find the maximum element in the range\n        max_idx = 0\n        for j in range(1,i+1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Swap the maximum element with the last element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    \n    # Start from the highest number and move down the sequence\n    # until it is in its correct position\n    for i in range(n - 1, 0, -1):\n        # Find the position of the current number in the sequence\n        # (i.e., the position where the pancake should end)\n        # Using the formula for the length of the pancake sequence\n        # (i+1)*i//2, where i is the current number\n        pancake_length = (i+1)*i//2\n        \n        # Move the pancake sequence upwards by shifting the\n        # elements after it to the right\n        for j in range(i, pancake_length):\n            # Swap the current number with the number at the\n            # position pancake_length-1-j\n            nums[j], nums[pancake_length-1-j] = nums[pancake_length-1-j], nums[j]\n            \n        # Print the sorted sequence\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Initialize the maximum size of the pancakes.\n    pancake_size = 1\n    # Initialize the maximum size of the sorted array.\n    sorted_size = n\n    # While the maximum size of the sorted array is not equal to the original size.\n    while sorted_size!= n:\n        # Find the index of the maximum element in the unsorted array.\n        max_index = 0\n        for i in range(1, sorted_size):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # If the maximum element is not already in its correct position, swap it with the last element.\n        if max_index!= sorted_size - 1:\n            nums[sorted_size - 1], nums[max_index] = nums[max_index], nums[sorted_size - 1]\n            sorted_size -= 1\n            pancake_size += 1\n        # If the maximum element is already in its correct position, remove it from the array.\n        else:\n            nums.pop(sorted_size - 1)\n            sorted_size -= 1\n    # Return the sorted array.\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # start from the largest number and pick the smallest element in the remaining unsorted part\n        j = 0\n        while j < i:\n            if nums[i] < nums[j]:\n                break\n            j += 1\n        # swap the largest and the smallest element in the remaining unsorted part\n        nums[i], nums[j] = nums[j], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    def flip(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n    \n    def merge(arr, l, m, r):\n        n1 = m - l + 1\n        n2 = r - m\n        \n        left = [0] * n1\n        right = [0] * n2\n        \n        for i in range(0, n1):\n            left[i] = arr[l + i]\n        \n        for j in range(0, n2):\n            right[j] = arr[m + 1 + j]\n        \n        i = 0\n        j = 0\n        k = l\n        \n        while i < n1 and j < n2:\n            if left[i] <= right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n        \n        while i < n1:\n            arr[k] = left[i]\n            i += 1\n            k += 1\n        \n        while j < n2:\n            arr[k] = right[j]\n            j += 1\n            k += 1\n    \n    def pancake_sort_helper(arr, l, r):\n        if l == r:\n            return\n        \n        m = l + (r - l) // 2\n        \n        pancake_sort_helper(arr, l, m)\n        pancake_sort_helper(arr, m + 1, r)\n        \n        merge(arr, l, m, r)\n    \n    pancake_sort_helper(nums, 0, len(nums) - 1)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    \n    # First, we create a list of numbers from 1 to n.\n    for i in range(n):\n        nums.insert(i, i+1)\n    \n    # Now, we repeatedly reverse the pancakes until they are sorted.\n    while True:\n        swapped = False\n        for i in range(n-1):\n            # If the next pancake is smaller than the current pancake, we swap them.\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        \n        # If no swaps were made, the list is already sorted.\n        if not swapped:\n            break\n    \n    # Finally, we remove the pancake numbers from the list.\n    for i in range(n):\n        nums.remove(i+1)\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the first element of the unsorted part of the array\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the entire unsorted part of the array\n        for j in range(i, n//2):\n            nums[i+j], nums[n-j-1] = nums[n-j-1], nums[i+j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Find the length of the list\n    n = len(nums)\n\n    # Create a temporary copy of the list\n    temp_nums = nums.copy()\n\n    # Sort the temporary list using pancake sort algorithm\n    for i in range(n):\n        max_index = i\n        for j in range(i+1, n):\n            if temp_nums[j] > temp_nums[max_index]:\n                max_index = j\n        temp_nums[i], temp_nums[max_index] = temp_nums[max_index], temp_nums[i]\n\n    # Copy the sorted temporary list back to the original list\n    nums[:] = temp_nums[:]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Traverse the array from 0 to n-2\n    for start in range(n-1):\n        # Find the maximum element in the unsorted part of the array\n        max_idx = start\n        for end in range(start+1, n):\n            if nums[end] > nums[max_idx]:\n                max_idx = end\n        \n        # Swap the elements if required\n        if max_idx!= start:\n            nums[start], nums[max_idx] = nums[max_idx], nums[start]\n        \n        # Reverse the pancake that is just sorted\n        reverse_pancake(nums, start)\n\ndef reverse_pancake(nums, start):\n    '''\n    Reverse the pancake that is just sorted\n    '''\n    end = len(nums)-1\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the first element in the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    \n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n\n    Args:\n    list1: List of integers\n    list2: List of integers\n    list3: List of integers\n\n    Returns:\n    count: Integer, the number of items identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    # initialize a counter\n    count = 0\n    \n    # loop through the three lists\n    for i in range(len(list1)):\n        # check if the current item is the same in all three lists\n        if list1[i] == list2[i] == list3[i]:\n            # increment the counter\n            count += 1\n    \n    # return the count\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input: \n        if type(element) is list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    \n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize variables\n    max_diff = 0\n    max_diff_index = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Loop through the array again to find the maximum difference\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                max_diff_index = j\n\n    return max_diff, max_diff_index"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    if len(arr) < 2:\n        return \"The array should have at least two elements\"\n\n    max_diff = float('-inf')\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \"Array must have at least 2 elements\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes in a list of numbers and returns the maximum absolute difference between any two elements in the list.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize the solution\n    x = 0\n    y = 0\n    \n    # Find the values of x and y that satisfy the equation ax + by = n\n    while True:\n        x += 1\n        y = (a * x) + b\n        if a * y == n:\n            break\n    \n    # Return the solution as a tuple\n    if a * y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n//b + 1):\n        for y in range(n//a + 1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n//a+1):\n        if a*x*x+b*x+n == 0:\n            return (x, n//a)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # calculate the discriminant\n    d = b**2 - 4 * a * n\n    \n    # check if there is a solution\n    if d < 0:\n        return None\n    \n    # calculate the two roots of the discriminant\n    root1 = (-b + d**0.5) / (2 * a)\n    root2 = (-b - d**0.5) / (2 * a)\n    \n    # return the solution if it exists\n    if root1**2 + root2**2 == n:\n        return (int(root1), int(root2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # check if a, b, and n are non-zero\n    if a == 0 or b == 0 or n == 0:\n        return None\n\n    # check if a is invertible\n    if a == 1:\n        return None\n\n    # initialize x and y to 0\n    x = 0\n    y = 0\n\n    # use extended Euclidean algorithm to find x and y\n    while b!= 0:\n        temp = b\n        b = n % b\n        n = temp\n\n        temp = a\n        a = x - (n // b) * a\n        x = temp\n\n    # check if the solution satisfies the given condition\n    if a * x + b * y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns a tuple of integers x and y that satisfy ax + by = n, or None if no solution exists.\n    \"\"\"\n    if b == 0:\n        return None\n    \n    # Compute the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if the discriminant is positive or zero\n    if d < 0:\n        return None\n    \n    # Compute the two solutions\n    x1 = (-b + d**0.5) / (2*a)\n    x2 = (-b - d**0.5) / (2*a)\n    \n    # Check if both solutions are distinct\n    if x1 == x2:\n        return None\n    \n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    d = b**2 - 4*a*n\n    if d < 0:\n        return None\n    x1 = (-b + d**0.5) / (2*a)\n    x2 = (-b - d**0.5) / (2*a)\n    y1 = a*x1 + b\n    y2 = a*x2 + b\n    return (int(x1), int(x2), int(y1), int(y2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    if a == 0:\n        if b == 0:\n            # Degenerate case: no solutions\n            return None\n        elif n % b == 0:\n            # One solution: y = n // b\n            return (None, n // b)\n        else:\n            # No solutions\n            return None\n    else:\n        # General case:\n        # Let d = gcd(a, b) be the greatest common divisor of a and b.\n        d = a if a > b else b\n        if d % 2 == 0:\n            # Case where gcd(a, b) is even:\n            # Let x0 = -n // (2 * d) be an integer such that ax0 + by0 = -n.\n            x0 = -n // (2 * d)\n            if x0 ** 2 + b * x0 + a * n == 0:\n                # One solution: x = x0\n                return (x0, None)\n            else:\n                # No solutions\n                return None\n        else:\n            # Case where gcd(a, b) is odd:\n            # Let x0 = -n // d be an integer such that ax0 + by0 = -n.\n            x0 = -n // d\n            if x0 ** 2 + b * x0 + a * n == 0:\n                # One solution: x = x0 and y = -x0\n                return (x0, -x0)\n            else:\n                # No solutions\n                return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if a, b, and n are valid\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)) or not isinstance(n, (int, float)):\n        raise TypeError(\"All inputs must be numbers.\")\n    if a == 0 or b == 0:\n        raise ValueError(\"a and b cannot be zero.\")\n\n    # Initialize variables\n    x = y = None\n    i = 0\n    while x is None:\n        x = a * i\n        y = b * i\n        i += 1\n        if x * y == n:\n            return (int(x), int(y))\n\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a = 0 or b = 0\n    if a == 0 or b == 0:\n        return None\n    \n    # check if there is no solution for a = 0\n    if a == 0:\n        return (None, n//b)\n    \n    # check if there is no solution for b = 0\n    if b == 0:\n        return (n//a, None)\n    \n    # find the values of x and y that satisfy the equation\n    x = (-n//b) // a\n    y = x * b\n    \n    return (x, y)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Check if list2 is a subset of list1\n    if set(list2).issubset(set(list1)):\n        # Remove all elements from list1 present in list2\n        for element in list1:\n            if element in list2:\n                list1.remove(element)\n    else:\n        print(\"list2 is not a subset of list1\")"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through the list1 and check if each element is present in list2\n    for element in list1:\n        if element in list2:\n            # if the element is present in list2, remove it from list1\n            list1.remove(element)\n    # return the updated list1\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Loop through the first list and check if each element is present in the second list\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # loop through list1 and remove all elements present in list2\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the first list\n    for i in range(len(list1)):\n        # Check if the element is present in the second list\n        if list1[i] in list2:\n            # If it is, remove it from the first list\n            list1.pop(i)\n            i -= 1  # Decrement i by 1 to avoid a possible index error\n            \n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the list1 and remove the elements present in list2\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += (n - 2*i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return sum_series(n // 2) + n - sum_series(n // 2) - 1\n    else:\n        return sum_series(n // 2) - n + sum_series(n // 2) + 1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return 0\n    else:\n        series = 0\n        for i in range(n // 2):\n            series += n - 2 * i\n        return series"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    i = 0\n    sum = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        sum_ = (n - 1) * (n // 2)\n    else:\n        sum_ = (n - 1) * (n // 2) + (n - 2)\n    return sum_"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while i <= n // 2:\n        sum += n - 2 * i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    total = 0\n    while i < n // 2:\n        total += n - 2 * i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n * (n + 1) // 2) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return 0\n    else:\n        series_sum = 0\n        for i in range(n // 2):\n            series_sum += (n - 2 * i)\n        return series_sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the semi-perimeter and area of the polygon\n    perimeter = s * l\n    area = (perimeter * tan(pi/l)) / 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l * (s ** 2)) / (4 * math.tan(math.pi / l))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s/tan(pi/l))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(l-2)*tan(pi/l)) / (2*pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        r = s/tan(pi/l*(i+1))\n        area += r\n    return area*s"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the perimeter of the polygon\n    perimeter = 2 * s * l\n    # calculate the area of the polygon using Heron's formula\n    area = 0.5 * perimeter * (s ** 2 + l ** 2)\n    # calculate the number of sides of the polygon\n    n_sides = 3 * l\n    # calculate the sine of the angle between the sides of the polygon\n    cos_angle = (n_sides ** 2 * s ** 2) / (4 * l ** 3)\n    # calculate the angle between the sides of the polygon using the cosine rule\n    angle = pi / n_sides * tan(acos(cos_angle))\n    # calculate the area of the triangle\n    triangle_area = (s * l) / 2\n    # calculate the area of the polygon using the formula: area = 1/2 * base * height\n    polygon_area = 0.5 * s * l * angle\n    # return the total area of the polygon\n    return polygon_area + triangle_area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2*pi/l * i\n        area += s*tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the perimeter of the polygon\n    perimeter = 2 * s * l\n\n    # Calculate the area using the formula for a regular polygon\n    area = (perimeter * (tan(pi/l))) / (tan(pi/2) ** 2)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 360 / l\n        area += s * tan(angle * pi / 180)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of a regular polygon with s sides\n    area = (s * l * tan(pi/s)) / (2 * pi)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Loop through the range of numbers from 1 to n-1\n    for i in range(1, n+1): \n        # Check if i is a divisor of n \n        if n % i == 0: \n            # If i is a divisor of n, add it to a list of divisors\n            divisors.append(i) \n    # Sort the list of divisors in ascending order\n    divisors.sort() \n    # Calculate the sum of the divisors\n    sum_div = sum(divisors) \n    # Return True if the sum of the divisors is the same as n, and False otherwise\n    if sum_div == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Calculate the sum of the divisors of n\n    sum_of_divisors = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    \n    # Check if the sum of the divisors is the same as n\n    if sum_of_divisors == n:\n        print(\"The sum of the divisors of {} and {} is equal to {}.\".format(n, n, n))\n    else:\n        print(\"The sum of the divisors of {} and {} is not equal to {}.\".format(n, n, n))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer as input and returns a boolean value indicating if the sum of the divisors of the input integer and its negation are the same.\n    '''\n    divisor_sum = sum([i for i in range(1, n+1) if n % i == 0])\n    neg_divisor_sum = sum([i for i in range(1, n+1) if n % i == 0 and i!= n])\n    return divisor_sum == neg_divisor_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    if n < 2: \n        return False\n\n    # Calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    # Check if the sum of the divisors is equal to n\n    if div_sum == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2:\n        return False\n\n    divisor_sum = 0\n    divisor = 1\n\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            divisor_sum += divisor\n            n //= divisor\n        else:\n            divisor += 1\n\n    if n > 1:\n        divisor_sum += n\n\n    return divisor_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Function to find all the divisors of a given number\n    def find_divisors(num):\n        div_list = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                if i!= num//i:\n                    div_list.append(i)\n                    div_list.append(num//i)\n        return div_list\n    \n    # Find the divisors of the first number\n    div1 = find_divisors(n)\n    \n    # Find the divisors of the second number\n    div2 = find_divisors(2*n)\n    \n    # Find the sum of the two divisors\n    sum_div = sum(div1) + sum(div2)\n    \n    # Check if the sum of the two divisors is the same\n    if sum_div == n:\n        print(\"The sum of the divisors is the same for both numbers.\")\n    else:\n        print(\"The sum of the divisors is not the same for both numbers.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n using a loop\n    sum_n = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_n += i\n            if i!= n // i:\n                sum_n += n // i\n\n    # If the square root of the sum of the divisors is equal to n, the sum is the same\n    return sum_n == int(math.sqrt(n))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def find_divisors(num):\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    # calculate the divisors of n\n    div_n = find_divisors(n)\n    # calculate the sum of the divisors of n\n    sum_div_n = sum(div_n)\n    \n    # calculate the sum of the divisors of m\n    m = int(input(\"Enter another integer: \"))\n    div_m = find_divisors(m)\n    sum_div_m = sum(div_m)\n    \n    # check if the sum of the divisors of n and m are the same\n    if sum_div_n == sum_div_m:\n        print(\"The sum of the divisors of\", n, \"and\", m, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and\", m, \"are not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determines if the sum of the divisors of two integers are the same.\n\n    Args:\n        n (int): An integer\n\n    Returns:\n        bool: True if the sum of the divisors of the two integers is the same, False otherwise\n    \"\"\"\n\n    def sum_of_divisors(num):\n        \"\"\"\n        Calculates the sum of the divisors of a given number.\n\n        Args:\n            num (int): An integer\n\n        Returns:\n            int: The sum of the divisors of the given number\n        \"\"\"\n        return sum(set(range(1, num + 1)) - set(range(1, int(math.sqrt(num)) + 1)) - {num})\n\n    div1 = sum_of_divisors(n)\n    div2 = sum_of_divisors(n + 1)\n\n    return div1 == div2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            div = 1\n            while n % i == 0:\n                n //= i\n                div += 1\n            if div*i == n:\n                return True\n    return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.upper().count(chr(97+i)) == 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower() == chr(65+i).lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i in range(len(str1)):\n        char_count[str1[i].lower()] = char_count.get(str1[i].lower(), 0) + 1\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        char = chr(ord('a') + i)\n        if str1.lower().count(char.lower()) == len(str1):\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase and remove any non-alphanumeric characters\n    str1 = ''.join(filter(str.isalnum, str1)).lower()\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n    # Loop through the string and count the number of characters at each position in the English alphabet\n    for i in range(26):\n        char_count[chr(i+97)] = 0\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n    # Return the dictionary containing the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n\n        # Check if the character is a letter\n        if char.isalpha():\n\n            # If it is, convert it to its ASCII code and add it to the dictionary with the corresponding value\n            ascii_code = ord(char)\n            char_count[ascii_code] = char_count.get(ascii_code, 0) + 1\n\n    # Initialize a list to store the count of characters that occur at the same position as in the English alphabet\n    same_position_count = []\n\n    # Loop through each character in the string\n    for ascii_code, count in char_count.items():\n\n        # If the ASCII code is within the range of the English alphabet, add the count to the same_position_count list\n        if 65 <= ascii_code <= 90 or 97 <= ascii_code <= 122:\n            same_position_count.append(count)\n\n    # Return the length of the same_position_count list\n    return len(same_position_count)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n\n    # Iterate over the characters in the string\n    for char in str1:\n        # Add the frequency of the character to the dictionary\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Initialize a count variable to store the number of characters that occur at the same position in the English alphabet\n    count = 0\n\n    # Iterate over the characters in the English alphabet\n    for i in range(97, 123):\n        # Convert the ASCII code of the character to a character\n        char = chr(i)\n\n        # If the character occurs at the same position in the string as the English alphabet, add to the count\n        if char in freq:\n            count += freq[char]\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        for char in str1:\n            if char.lower() == alphabet[i].lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    char_count = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            char_count += 1\n    return char_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize variable to store the result\n    result = n\n    \n    # Loop until result is a power of 2\n    while result & (result-1)!= 0:\n        result = result << 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n - 1)!= 0:\n        n = n + 1\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (int(log2(n)) + 1)\n\ndef log2(n):\n    '''\n    Write a python function to find the logarithm of n in base 2.\n    '''\n    return int(log(n, 2))\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # check if the number is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n    \n    # binary search\n    low = 1\n    high = n\n    while low < high:\n        mid = (low + high) // 2\n        if mid == 1 or mid * mid <= n:\n            high = mid\n        else:\n            low = mid + 1\n            \n    return low * low"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the power of 2 to 2\n    power_of_2 = 2\n\n    # Find the smallest power of 2 greater than or equal to n\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n = n - 1\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    n = n + 1\n    return 2**n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # use bitwise operations to find the next highest power of 2\n    while n & (1 << (31 - i)) == 0: \n        i += 1\n    return 1 << i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 1\n    i = 1\n    while i < n: \n        i <<= 1\n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the power of 2 to 2\n    power = 2\n    \n    # While the current power is less than or equal to n\n    while power <= n:\n        # If the current power is a power of 2\n        if power == 2**i for i in range(int(log2(n))+1):\n            return power\n        # If the current power is not a power of 2\n        else:\n            power *= 2"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list and a number as input and returns the count of the number in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(lst, x):\n    '''\n    This function counts the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in lst:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # initialize variables\n    sum_range = 0\n    # loop through the list\n    for i in range(len(list1)):\n        # check if the current index is within the range\n        if i >= m and i <= n:\n            # add the value at the current index to the sum_range\n            sum_range += list1[i]\n    # return the sum_range\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n > len(list1) - 1 or m > n:\n        return \"Invalid Range\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    return sum_range"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the semi-perimeter\n    sp = 5 * a / 4\n    # return the perimeter\n    return math.pi * sp"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 5 * a\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the length of the hypotenuse\n    c = math.sqrt(5) * a\n\n    # calculate the perimeter using the formular: 5c = 12a\n    perimeter = 5 * c\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # calculate the perimeter of the pentagon using the formula: 5a = 5(sin(50\u00b0/5)*2)\n    sides = 5 * a\n    perimeter = math.sqrt(5) * sides\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # convert sides to radians\n    sides = [math.radians(a)] * 5\n    # find the sine and cosine of each side\n    sin_sides = [math.sin(side) for side in sides]\n    cos_sides = [math.cos(side) for side in sides]\n    # find the midpoint of each side\n    midpoints = [(side1 + side2) / 2 for side1, side2 in zip(sides, sides[1:])]\n    # find the area of each triangle\n    areas = [(1 / 2) * a * (side ** 2) for side in sides]\n    # find the perimeter of each triangle\n    perimeters = [3 * side for side in sides]\n    # find the total perimeter\n    total_perimeter = sum(perimeters)\n    return total_perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n\nprint(perimeter_pentagon(5)) # Output: 30"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * math.pi * a\n    perimeter = circumference * 5\n    return round(perimeter, 2)"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '')\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurances of the string'std' in a given string.\n    \"\"\"\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for word in s.split():\n        if word =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n\n    count = 0\n    std ='std'\n    while std in s:\n        count += 1\n        s = s.replace(std, '', 1)\n\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the tuple is empty\n    if len(test_tuple) == 0:\n        print(\"Tuple is empty.\")\n        return\n    \n    # Get the first element of the tuple\n    first_element = test_tuple[0]\n    \n    # Loop through all the elements of the tuple\n    for element in test_tuple:\n        # Check if the element is of different data type than the first element\n        if type(element)!= type(first_element):\n            print(\"All elements in the tuple have different data types.\")\n            return\n            \n    # If the loop completes without returning, all the elements in the tuple have same data type\n    print(\"All elements in the tuple have same data types.\")"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_set = set() # initialize an empty set to store data types\n    for element in test_tuple:\n        type_set.add(type(element)) # add the data type of each element to the set\n    return len(type_set) == 1 # if the set has only one element, then all elements have same data type"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to store the data type of the first element of the tuple\n    data_type = type(test_tuple[0])\n    \n    # iterate through the rest of the tuple elements\n    for element in test_tuple[1:]:\n        # if the current element has a different data type than the first element, return False\n        if type(element)!= data_type:\n            return False\n    \n    # if all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if all elements in the tuple have same data type\n    for i in range(len(test_tuple)):\n        if not isinstance(test_tuple[i], type(test_tuple[0])):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for item in test_tuple:\n        type_list.append(type(item))\n    if len(set(type_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if not isinstance(test_tuple, tuple):\n        return False\n    types = set()\n    for item in test_tuple:\n        if not isinstance(item, type):\n            return False\n        types.add(type(item))\n    return len(types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Check if the length of the tuple is 0\n    if len(test_tuple) == 0:\n        return True\n\n    # Check if all elements in the tuple have the same data type\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize variables to store data type of the first element\n    data_type = type(test_tuple[0])\n    # loop through the tuple and check data type of each element\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count >= n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif count == 0:\n            return False\n        else:\n            count -= 1\n    return count == 0"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize count and candidate\n    count = 1\n    candidate = arr[0]\n    \n    # Iterate through the array and count the occurrences of the candidate\n    for i in range(1, n):\n        if arr[i] == candidate:\n            count += 1\n        else:\n            count -= 1\n            \n    # If the candidate occurs more than n/2 times, it is the majority\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize the count of x to 0\n    count = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is equal to x, increment the count\n        if arr[i] == x:\n            count += 1\n\n        # If the count of x exceeds n/2, return True\n        if count > n/2:\n            return True\n\n    # If the loop completes without finding a majority, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        n &= (n - 1) # clears the least significant set bit \n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        if(n & 1):\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer n as input and returns the count of set bits in n.\n    The count of set bits is the number of binary digits with a value of 1 in n.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    while n: \n        n &= (n-1) # clears all the least significant set bits \n        count += 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer as input and returns the number of set bits in that integer.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = ''\n    for i, char in enumerate(str):\n        if i % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty string to store the odd values\n    odd_str = ''\n    \n    # iterate over each character in the given string\n    for char in str:\n        # if the index of the character is odd, append it to the odd string\n        if ord(char) % 2 == 1:\n            odd_str += char\n    \n    # return the odd string\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index of the character is odd\n        if int(char) % 2!= 0:\n            # If it is, add the character to the result string\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Parameters:\n    str (str): The string from which the odd index characters will be removed.\n\n    Returns:\n    str: The modified string with odd index characters removed.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    result = ''\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:  # if index is odd\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    # Split the string into a list of characters\n    lst = list(str)\n\n    # Initialize an empty string to store the result\n    result = \"\"\n\n    # Loop through the list of characters and remove the odd index characters\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            result += lst[i]\n\n    # Return the result string\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c "
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    if l > r:\n        return \"Invalid input\"\n\n    set_bits = 0\n    unset_bits = 0\n\n    for i in range(l, r+1):\n        unset_bits += (n >> i) & 1\n        set_bits += (n >> i) & 1\n\n    return \"All bits are set in the given range.\" if set_bits == 0 else \"Not all bits are set in the given range.\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are set in the given range or not.\n    \"\"\"\n    while n > 0:\n        # Extract the last bit\n        last_bit = n & 1\n        # If the last bit is set, return False\n        if last_bit == 1:\n            return False\n        # Shift the number to the right by 1\n        n = n >> 1\n    # If the loop reaches here, all the bits are unset\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while l <= r:\n        if n & 1 == 0:\n            return False\n        n = n >> 1\n        l = l << 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # get all the bits set in the given range\n    set_bits = set(bin(n)[2:].zfill(r-l+1)[l:r+1])\n\n    # check if all the bits are unset in the given range\n    if not set_bits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # converting binary values into integers\n    n = int(n, 2)\n    l = int(l, 2)\n    r = int(r, 2)\n\n    # checking if all the bits are set in the range\n    for i in range(l, r+1):\n        if n & (1 << i)!= (1 << i):\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        count += bin(i).count('1')\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1<<i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    count = 0\n    for i in range(l, r+1):\n        count += n & (1 << i)\n    return count == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Bitwise XOR of the given range and n, to get the bits that are set in the given range\n    bitwise_set_range = n ^ (2 ** (r - l - 1) - 1)\n    # Check if the result of the bitwise XOR is 0 or not\n    if bitwise_set_range == 0:\n        # If all the bits are unset in the given range, return True\n        return True\n    # If any of the bits are set in the given range, return False\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Parameters:\n        n (int): the given integer\n        l (int): lower bound of the range\n        r (int): upper bound of the range\n\n    Returns:\n        bool: True if all the bits are unset in the given range, False otherwise.\n    \"\"\"\n    # Initialize a set to keep track of the unset bits\n    unset_bits = set()\n\n    # Iterate over the bits in the given integer n and check if any of them are set to 1\n    for i in range(l, r + 1):\n        if n & 1:\n            unset_bits.add(i)\n        n >>= 1\n\n    # If the length of the unset_bits set is equal to the number of bits in the given range, then all the bits are unset\n    return len(unset_bits) == r - l + 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize two pointers\n    i = 0\n    j = n - 1\n\n    # loop through the array\n    while i < j:\n        # check if the current element is negative\n        if arr[i] < 0:\n            # increment the pointer to the right until we find a positive element\n            while arr[j] >= 0:\n                j -= 1\n        else:\n            # increment the pointer to the left until we find a negative element\n            while arr[i] < 0:\n                i += 1\n\n        # if the pointers meet, swap the elements\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array\n    so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    \n    Args:\n    arr: list, the input array\n    n: int, the number of elements to re-arrange\n    \n    Returns:\n    arr: list, the re-arranged array\n    \"\"\"\n    \n    # find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n    \n    # count the number of negative and positive elements\n    neg_count = 0\n    pos_count = 0\n    for val in arr:\n        if val < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # determine the number of elements to shift to the end of the array\n    shift_count = neg_count + pos_count\n    if shift_count > n:\n        shift_count = n\n    \n    # shift the elements to the end of the array\n    end_index = len(arr) - shift_count\n    for i in range(end_index, len(arr)):\n        arr[i] = arr[i - shift_count]\n    \n    # shift the negative elements to the beginning of the array\n    neg_index = 0\n    pos_index = end_index\n    while neg_index < shift_count:\n        arr[neg_index] = arr[neg_index + pos_count]\n        neg_index += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    pos_count = 0\n    neg_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        elif arr[i] > 0:\n            pos_count += 1\n    neg_start = n\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg_start -= 1\n            if neg_start >= 0:\n                arr[neg_start], arr[i] = arr[i], arr[neg_start]\n        elif arr[i] > 0:\n            if pos_count > 0 and neg_start >= 0:\n                arr[neg_start], arr[pos_count - 1] = arr[pos_count - 1], arr[neg_start]\n                pos_count -= 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Helper function to swap elements in the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Initialize two pointers, one for each set of negative and positive elements\n    neg_ptr = 0\n    pos_ptr = n\n\n    # Iterate through the array\n    for i in range(n, len(arr)):\n        # Check if the element at the current pointer is negative\n        if arr[i] < 0:\n            # If it is, swap it with the first negative element\n            if i!= neg_ptr:\n                swap(arr, i, neg_ptr)\n                neg_ptr += 1\n        else:\n            # If it is positive, swap it with the first positive element\n            if i!= pos_ptr:\n                swap(arr, i, pos_ptr)\n                pos_ptr += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Create two lists to store positive and negative elements respectively\n    pos_list = []\n    neg_list = []\n    \n    # Iterate through the array and add positive and negative elements to respective lists\n    for i in range(n):\n        if arr[i] > 0:\n            pos_list.append(arr[i])\n        elif arr[i] < 0:\n            neg_list.append(arr[i])\n    \n    # Iterate through the remaining elements of the array and add them to their respective lists\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            pos_list.append(arr[i])\n        elif arr[i] < 0:\n            neg_list.append(arr[i])\n    \n    # Combine the two lists and return the final result\n    return pos_list + neg_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    arr[:n] = positive + negative\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables\n    negative_count = 0\n    positive_count = 0\n    i = 0\n    \n    # loop through array\n    while i < n:\n        # if current element is negative\n        if arr[i] < 0:\n            # increment negative count\n            negative_count += 1\n            # move current element to end of negative portion of array\n            arr[i], arr[negative_count] = arr[negative_count], arr[i]\n            # increment i to skip negative element\n            i += 1\n        else:\n            # increment positive count\n            positive_count += 1\n            # move current element to end of positive portion of array\n            arr[i], arr[positive_count] = arr[positive_count], arr[i]\n            # increment i to skip positive element\n            i += 1\n    \n    # return modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a dictionary to store the indices of the elements with positive and negative signs\n    positive = {}\n    negative = {}\n    for i in range(n):\n        if arr[i] >= 0:\n            positive[arr[i]] = i\n        else:\n            negative[abs(arr[i])] = i\n    \n    # re-arrange the array\n    for i in range(n):\n        if arr[i] >= 0:\n            arr[i] = -arr[i]\n        else:\n            arr[i] = -abs(arr[i])\n    \n    # re-arrange the elements with positive and negative signs\n    for i in range(n):\n        if arr[i] >= 0:\n            arr[i] = arr[positive[arr[i]]]\n        else:\n            arr[i] = arr[negative[abs(arr[i])]]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Create two empty arrays for positive and negative elements\n    pos_arr = []\n    neg_arr = []\n    \n    # Iterate through the array and append positive and negative elements to their respective arrays\n    for num in arr:\n        if num >= 0:\n            pos_arr.append(num)\n        else:\n            neg_arr.append(num)\n    \n    # Concatenate the positive and negative arrays and sort them in ascending order\n    arr = pos_arr + neg_arr\n    arr.sort()\n    \n    # Re-arrange the array to preserve the relative order of negative and positive elements\n    i = 0\n    for num in arr:\n        if num >= 0:\n            arr[i] = num\n            i += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize three pointers, one for each category\n    negative_pointer = 0\n    positive_pointer = n - 1\n    zero_pointer = n\n    \n    # Traverse the array from left to right\n    for i in range(n):\n        \n        # Check if the current element is negative\n        if arr[i] < 0:\n            \n            # If it is, shift the positive pointer to the right\n            if positive_pointer < zero_pointer:\n                arr[positive_pointer], arr[zero_pointer] = arr[zero_pointer], arr[positive_pointer]\n                positive_pointer += 1\n                zero_pointer -= 1\n                \n            # If it is not, move the negative pointer to the right\n            else:\n                arr[negative_pointer], arr[positive_pointer] = arr[positive_pointer], arr[negative_pointer]\n                negative_pointer += 1\n        \n        # Check if the current element is positive\n        else:\n            \n            # If it is, shift the negative pointer to the right\n            if negative_pointer < positive_pointer:\n                arr[negative_pointer], arr[positive_pointer] = arr[positive_pointer], arr[negative_pointer]\n                negative_pointer += 1\n                positive_pointer -= 1\n            \n            # If it is not, move the positive pointer to the right\n            else:\n                arr[zero_pointer], arr[positive_pointer] = arr[positive_pointer], arr[zero_pointer]\n                zero_pointer += 1\n                \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Replace all blank spaces with the given character\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # create a new string that replaces blank spaces with the character\n    new_str = str1.replace(' ',char)\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= \" \":\n            str2 += str1[i]\n        elif str1[i] == \" \":\n            str2 += char\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the character is a blank space, replace it with the specified character\n        if str1[i] =='':\n            str1 = str1[:i] + char + str1[i+1:]\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1.replace(\" \",\"\")"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert the list to a set to remove duplicates and sort in descending order\n    list2 = sorted(set(list1), reverse=True)\n    # Return the first n elements of the sorted list\n    return list2[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a max heap of size n\n    max_heap = [0] * n\n\n    # fill the max heap with the n largest items from the list\n    heapq.heapify(max_heap)\n    for item in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        else:\n            if item > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, item)\n\n    # return the max heap as the result\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>=len(list1):\n        return list1\n    else:\n        heap = []\n        for i in range(len(list1)):\n            heapq.heappush(heap,list1[i])\n            if len(heap) > n:\n                heapq.heappop(heap)\n        return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(reversed(heap))"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap with the first n items of the list\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    \n    # pop and return the smallest n items from the heap\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    \n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap of size n\n    min_heap = [float('-inf')] * n\n\n    # Insert the first n elements of the list into the min-heap\n    heapq.heapify(min_heap)\n    for i in range(n):\n        if list1[i] > min_heap[0]:\n            heapq.heappushpop(min_heap, list1[i])\n\n    # Return the list of the n largest elements\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert list to min heap\n    min_heap = []\n    for i in range(len(list1)):\n        heapq.heappush(min_heap, list1[i])\n        # if heap size exceeds n, remove smallest element\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # convert min heap back to list\n    larg_nlist = []\n    for i in range(n):\n        larg_nlist.append(heapq.heappop(min_heap))\n    \n    return larg_nlist"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h + 2 * r * r"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area of the cylinder using the formula:\n    # lateral surface area = (1/2) * radius * height\n    return (1/2) * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * (3.14 * r * r + 3.14 * r * h)\n    \n    # Return the lateral surface area of the cylinder\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi*(r**2) #find the surface area of the cylinder\n    lateral_area = area*(h/2) #find the lateral surface area of the cylinder\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    S = 2*math.pi*r*h\n    return S"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    return 2*3.14*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area\n    lateral_area = 2 * (3 * r ** 2 + 3 * r * h + h ** 2)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    (float): lateral surface area of the cylinder\n    \"\"\"\n\n    # Formula to find lateral surface area of a cylinder\n    lateral_surface_area = 2 * 3.14159 * r * h\n\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    area = 2*3.14159*r**2\n    # calculate the lateral surface area\n    lateral_area = area - 2*3.14159*r*h\n    # return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # Return the cube of the side length"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to keep track of the number of bits that need to be set\n    count = 0\n    # loop through the bits of the input number\n    for i in range(32):\n        # if the current bit is even, set it and increment the count\n        if n & (1 << i):\n            n |= (1 << i)\n            count += 1\n    # return the number of bits set\n    return count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize the count of even bits as zero\n    count = 0\n    # loop through each bit of the given number\n    while n > 0:\n        # check if the current bit is even\n        if n & 1 == 0:\n            # set the corresponding bit of the even_bits array to 1\n            even_bits[count // 64] |= (1 << (count % 64))\n            # increment the count of even bits\n            count += 1\n        # shift the number to the right by 1 bit\n        n >>= 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate through the bits of the input number and set the corresponding even bits to 1\n    for i in range(32):\n        if (n & (1 << i))!= 0:\n            if i % 2 == 0:\n                result |= (1 << i)\n    \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = []\n    while n:\n        if n & 1 == 0: # check if the least significant bit is 0\n            even_bits.append(n)\n        n >>= 1 # shift the number to the right by 1 bit\n    even_bits_set = 0 # initialize a variable to store the final result\n    for i in range(len(even_bits)):\n        even_bits_set |= even_bits[i] # set the corresponding bits in the variable\n    return even_bits_set"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to hold the even bits of the number\n    even_bits = 0\n    \n    # Loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1\n        if int(bit) == 0:\n            even_bits = even_bits << 1\n        else:\n            even_bits = even_bits | (1 << 1)\n    \n    # Return the number with all even bits set to 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bit_count = 0\n    while n > 0:\n        if n % 2 == 0:\n            even_bit_count += 1\n        n = n >> 1\n    return even_bit_count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n\n    # Loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set its corresponding position in the result to 1\n        if bit == '1':\n            result += 1 << int(bit)\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of the given number\n    even_bits = 0\n    \n    # Iterate over each bit in the binary representation of the given number\n    for bit in bin(n)[2:]:\n        # Check if the current bit is even\n        if int(bit) % 2 == 0:\n            # If it is, set the corresponding bit in the even_bits variable to 1\n            even_bits += int(bit)\n    \n    # Return the final even_bits variable\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0:\n        n &= n - 1  # clearing the least significant bit\n        n |= (1 << i)  # setting the i-th bit to 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize an empty list to store the set bits\n    even_bits = []\n\n    # Loop through the bits of the number in reverse order\n    while n > 0:\n        # Check if the rightmost bit of the number is even\n        if n & 1 == 0:\n            # If it's even, add it to the list of even bits\n            even_bits.append(n & 1)\n\n        # Shift the number one bit to the right\n        n = n >> 1\n\n    # Reverse the list of even bits and return it\n    return even_bits[::-1]"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    counter = Counter(unique_tuples)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a Counter object to count the occurrences of each tuple\n    count = Counter(test_list)\n\n    # Return the dictionary of unique tuples and their counts\n    return count.items()"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object from the input list\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Initialize an empty dictionary to store the counts\n    count_dict = {}\n    # Loop through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the number of occurrences of each tuple\n    count_dict = {}\n    \n    # loop through each tuple in the test_list\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment its value by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # if the tuple is not in the dictionary, add it to the dictionary with a value of 1\n        else:\n            count_dict[tup] = 1\n    \n    # return the dictionary of unique tuples and their count\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n\n    # Initialize count to 0\n    count = 0\n\n    # Loop through each character of the string\n    for i in range(len(str)): \n\n        # Check if the character is a letter\n        if str[i].isalpha(): \n\n            # Initialize a substring to start with the current character\n            substring = str[i] \n\n            # Loop through each subsequent character of the string\n            for j in range(i+1, len(str)): \n\n                # Check if the character is a letter\n                if str[j].isalpha(): \n                    # Add the substring to the count\n                    count += 1\n\n                    # Update the substring to include the next character\n                    substring += str[j] \n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substr = str[i:j]\n            if substr!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)): \n        # Loop through each possible substring starting from the current character\n        for j in range(i, len(str)): \n            # If the substring is not empty, increment the count\n            if str[i:j+1].strip()!= '': \n                count += 1\n\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize the count variable to 0\n    count = 0\n    # loop through each character in the string\n    for i in range(len(str)): \n        # loop through each possible substring starting from the current position\n        for j in range(i+1, len(str)+1): \n            # check if the substring is non-empty\n            if str[i:j]!= '': \n                # increment the count variable\n                count += 1\n    # return the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function takes a string as input and returns the number of non-empty substrings in it.\n    \"\"\"\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if substring and substring!='':\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Function to count the number of sequences\n    def count_sequences(start, current_count):\n        nonlocal total_count\n        if current_count == n:\n            total_count += 1\n        for i in range(start, m, 1):\n            if i >= start * 2 and i <= m - 1 and i!= start:\n                count_sequences(i + 1, current_count + 1)\n\n    # Initialize the total count\n    total_count = 0\n\n    # Call the helper function to count the sequences\n    count_sequences(2, 1)\n\n    # Return the total count\n    return total_count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    # Create a set to store unique sequences\n    sequences = set()\n    \n    # Initialize the sequence with the first element\n    sequence = [2]\n    \n    # Loop through the remaining elements\n    for i in range(1,n): \n        # Check if the current element is within the range of m\n        if 2*sequence[-1] < m: \n            # If not, add the element to the sequence\n            sequence.append(2*sequence[-1])\n        # If the current element is within the range of m, add it to the sequence\n        else: \n            # Check if the current element is in the sequence\n            if sequence[-1] < m: \n                # If it is, extend the sequence\n                sequence.append(sequence[-1]+1)\n            # If the current element is not in the sequence, add it to the sequence\n            else: \n                # Create a new sequence with the current element as the first element\n                new_sequence = [sequence[-1]]\n                # Loop through the remaining elements\n                for j in range(1,i): \n                    # Check if the current element is within the range of m\n                    if 2*new_sequence[-1] < m: \n                        # If not, add the element to the sequence\n                        new_sequence.append(2*new_sequence[-1])\n                    # If the current element is within the range of m, add it to the sequence\n                    else: \n                        # Check if the current element is in the sequence\n                        if new_sequence[-1] < m: \n                            # If it is, extend the sequence\n                            new_sequence.append(new_sequence[-1]+1)\n                        # If the current element is not in the sequence, add it to the sequence\n                        else: \n                            # Create a new sequence with the current element as the first element\n                            new_new_sequence = [new_sequence[-1]]\n                            # Loop through the remaining elements\n                            for k in range(2,j): \n                                # Check if the current element is within the range of m\n                                if 2*new_new_sequence[-1] < m: \n                                    # If not, add the element to the sequence\n                                    new_new_sequence.append(2*new_new_sequence[-1])\n                                # If the current element is within the range of m, add it to the sequence\n                                else: \n                                    # Check if the current element is in the sequence\n                                    if new_new_sequence[-1] < m: \n                                        # If it is, extend the sequence\n                                        new_new_sequence.append(new_new_sequence[-1]+1)\n                                    # If the current element is not in the sequence, add it to the sequence\n                                    else: \n                                        # Create a new sequence with the current element as the first element\n                                        new_new_new_sequence = [new_new_sequence[-1]]\n                                        # Loop through the remaining elements\n                                        for l in range(3,k): \n                                            # Check if the current element is within the range of m\n                                            if 2*new_new_new_sequence[-1] < m: \n                                                # If not, add the element to the sequence\n                                                new_new_new_sequence.append(2*new_new_new_sequence[-1])\n                                            # If the current element is within the range of m, add it to the sequence\n                                            else: \n                                                # Check if the current element is in the sequence\n                                                if new_new_new_sequence[-1] < m: \n                                                    # If it is, extend the sequence\n                                                    new_new_new_sequence.append(new_new_new_sequence[-1]+1)\n                                                # If the current element is not in the sequence, add it to the sequence\n                                                else: \n                                                    # Create a new sequence with the current element as the first element\n                                                    new_new_new_new_sequence = [new_new_new_sequence[-1]]\n                                                    # Loop through the remaining elements\n                                                    for m in range(4,l): \n                                                        # Check if the current element is within the range of m\n                                                        if 2*new_new_new_new_sequence[-1] < m: \n                                                            # If not, add the element to the sequence\n                                                            new_new_new_new_sequence.append(2*new_new_new_new_sequence[-1])\n                                                        # If the current element is within the range of m, add it to the sequence\n                                                        else: \n                                                            # Check if the current element is in the sequence\n                                                            if new_new_new_new_sequence[-1] < m: \n                                                                # If it is, extend the sequence\n                                                                new_new_new_new_sequence.append(new_new_new_new_sequence[-1]+1)\n                                                            # If the current element is not in the sequence, add it to the sequence\n                                                            else: \n                                                                # Create a new"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(nums, start, end, prefix_sum, result):\n        if start >= end:\n            return\n\n        if end - start == n:\n            if prefix_sum >= m * 2:\n                result.append(nums[start:end])\n            return\n\n        if nums[start] + prefix_sum < m * 2:\n            helper(nums, start + 1, end, prefix_sum, result)\n        helper(nums, start + 1, end, prefix_sum, result)\n\n    nums = list(range(2, m))\n    result = []\n    helper(nums, 0, len(nums) - 1, 0, result)\n    return len(result)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1,m+1):\n        for j in range(i*2,m+1):\n            count+=1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(seq):\n        for i in range(1, len(seq)):\n            if seq[i] - seq[i - 1] > m:\n                return False\n        return True\n\n    total_sequences = 0\n    for i in range(m, m + n):\n        if is_valid_sequence(range(i, m + 1)):\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    def backtrack(sequence, start):\n        if len(sequence) == n:\n            total_sum = sum(sequence)\n            if total_sum <= m:\n                return\n            total_sequences += 1\n            return\n\n        for i in range(start, m):\n            if i < sequence[-1] or (i >= sequence[-1] * 2 and i < m):\n                sequence.append(i)\n                backtrack(sequence, i + 1)\n                sequence.pop()\n\n    sequence = []\n    total_sequences = 0\n    backtrack(sequence, 2)\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    This function takes in two positive integers m and n. It returns the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    The function uses dynamic programming to store the results and avoid redundant calculations. It has a time complexity of O(n*m*log(m)) and a space complexity of O(n*m).\n    '''\n\n    # Initialize the 2D array to store the results\n    dp = [[0 for j in range(n+1)] for i in range(m+1)]\n\n    # Initialize the first row and column\n    for i in range(m+1):\n        if i >= 2:\n            dp[i][1] = 1\n\n    for j in range(n+1):\n        if j >= 2:\n            dp[1][j] = 1\n\n    # Fill the rest of the array using dynamic programming\n    for i in range(2,m+1):\n        for j in range(2,n+1):\n            if dp[i-1][j-1]:\n                # If the current element is greater than or equal to twice the previous element, include it in the sequence\n                if i >= 2 * j:\n                    dp[i][j] = dp[i][j] + dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i][j] + dp[i-1][j-1]\n\n    return dp[m][n]"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # create a list to store the cumulative sum of sequences\n    cumulative_sum = [0]\n    for i in range(m):\n        # if i is even, add 2*i to the cumulative sum\n        if i % 2 == 0:\n            cumulative_sum.append(2*i + cumulative_sum[-1])\n        # if i is odd, add i to the cumulative sum\n        else:\n            cumulative_sum.append(i + cumulative_sum[-1])\n    # initialize the count variable to 0\n    count = 0\n    # loop through the cumulative sum to find the number of sequences of length n\n    for i in range(len(cumulative_sum) - n + 1):\n        # check if the current sequence is valid\n        if cumulative_sum[i] >= 2*cumulative_sum[i-1] <= m and all(cumulative_sum[i+j] > 2*cumulative_sum[i-1] for j in range(1,n)):\n            # if the current sequence is valid, increment the count\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    count = 0\n    prev_num = 0\n    \n    # Check if m is greater than n\n    if m > n:\n        return 0\n    \n    # Generate all possible sequences\n    for i in range(m, 0, -1):\n        # Check if i is a valid number\n        if i >= 2*prev_num and i <= m:\n            count += 1\n            \n            # Update prev_num\n            prev_num = i\n    \n    # Return the total number of sequences found\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    for i in range(1, m+1):\n        for j in range(i, m+1):\n            if j >= 2*i and j <= m:\n                total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the last element of the first list\n    last_element = list1[-1]\n    # Remove the last element of the first list\n    list1.pop()\n    # Add the elements of the second list to the first list\n    list1.extend(list2)\n    # Add the last element of the first list back to the list\n    list1.append(last_element)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    # Get the length of the first list\n    length = len(list1)\n    # Reverse the second list to get the replacement order\n    replacement_order = list2[::-1]\n    # Loop through the first list and replace the last element with the elements of the second list\n    for i in range(length-1, -1, -1):\n        list1[i] = replacement_order.pop(0)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n\n    # Check if the second list is longer than the first list\n    if len(list2) > length:\n        # Remove the last element from the first list\n        list1.pop()\n\n        # Loop through the second list\n        for i in range(len(list2)):\n            # Add each element of the second list to the first list\n            list1.append(list2[i])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if the lists have the same length\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length.\")\n    # Loop over the elements of the first list and replace the last element with the elements of the second list\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for element in list2:\n        list1.append(element)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop() # Remove the last element from the first list\n    list1.extend(list2) # Add the elements of the second list to the first list\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    This function counts the total number of characters in a given string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as an input and returns the total number of characters in the string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    sqrt_N_plus_1 = sqrt_N + 1\n    \n    # check if the square root of N is even or odd\n    if sqrt_N % 2 == 0:\n        sqrt_N_plus_1 += 1\n    \n    # calculate the next perfect square greater than sqrt_N\n    next_sqrt_N = 2*sqrt_N_plus_1\n    \n    return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # initialize variables\n    num = N\n    num_list = []\n\n    # check if number is not a perfect square\n    if not num.is_perfect_square():\n        print(\"The given number is not a perfect square.\")\n        return\n\n    # convert number to its base 2 representation\n    num_bin = bin(num)[2:]\n    num_list = [int(i) for i in num_bin]\n\n    # find the index of the maximum element in the binary representation\n    max_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] > max_index:\n            max_index = i\n\n    # iterate through the binary representation starting from the maximum element until a non-zero element is found\n    index = max_index\n    while num_list[index] == 0:\n        index -= 1\n\n    # increment the non-zero element in the binary representation\n    num_list[index] += 1\n\n    # convert the binary representation back to an integer\n    num = int(\"\".join([str(i) for i in num_list]), 2)\n\n    # check if the number is a perfect square\n    if num.is_perfect_square():\n        return num\n    else:\n        # if it is not a perfect square, find the next perfect square greater than the current number\n        next_num = next_Perfect_Square(num)\n        return next_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Calculating the square root of the given number\n    sqrt_N = math.sqrt(N)\n    # Incrementing the square root to get the next perfect square\n    next_sqrt = sqrt_N + 1\n    # Converting the square root to an integer and returning it\n    return int(next_sqrt)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    sqrt_N += 1\n    while True:\n        if math.isqrt(sqrt_N) * math.isqrt(sqrt_N) > N:\n            break\n        sqrt_N += 1\n    \n    return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N\n    y = math.ceil(math.sqrt(N))\n    \n    while x > y:\n        x = (x + y) // 2\n        y = (x + y) // 2\n    \n    return x"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Square root of N\n    sqrtN = int(math.sqrt(N))\n\n    # Check if N is a perfect square\n    if sqrtN * sqrtN == N:\n        return sqrtN * sqrtN\n\n    # If not, find the next perfect square after sqrtN\n    else:\n        return sqrtN * sqrtN + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n    # calculate the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # check if the square root is an integer\n    if sqrt_N.is_integer():\n        # increment the integer part of the square root\n        sqrt_N += 1\n    else:\n        # add 1 to the fractional part of the square root\n        sqrt_N = math.ceil(sqrt_N)\n\n    # calculate the next perfect square\n    next_N = int(sqrt_N ** 2)\n\n    # check if the next perfect square is greater than N\n    if next_N > N:\n        # return the next perfect square\n        return next_N\n    else:\n        # return the next smallest perfect square greater than N\n        return next_Perfect_Square(N + 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        N = int(N*2)\n        if math.isqrt(N) % 1 == 0 and int(math.sqrt(N))**2 == N:\n            return N\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_square(num):\n        '''\n        Helper function to check if a number is a perfect square.\n        '''\n        return math.isqrt(num) ** 2 == num\n    \n    def next_square(num):\n        '''\n        Helper function to find the next perfect square greater than a number.\n        '''\n        if num < 2:\n            return 2\n        else:\n            return 2 * math.isqrt(num) + 1\n    \n    # find the least integer greater than the given number that is a perfect square\n    next_square_num = next_square(N)\n    \n    # if the next square is greater than the given number, return the next square\n    if next_square_num > N:\n        return next_square_num\n    \n    # if the next square is less than the given number, find the next perfect square greater than the next square\n    else:\n        while True:\n            next_square_num = next_square(next_square_num)\n            if next_square_num > N:\n                return next_square_num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Check if N is an integer\n    if type(N)!= int:\n        return \"N must be an integer.\"\n    \n    # Check if N is zero\n    if N == 0:\n        return 1\n    \n    # Find the largest perfect square less than or equal to N\n    while True:\n        a = math.sqrt(N)\n        if int(a) ** 2 == N:\n            a += 1\n        else:\n            break\n    \n    # Find the next perfect square after a\n    b = a + 1\n    while b ** 2 <= N:\n        b += 1\n    \n    # Return the next perfect square\n    return int(b ** 2)\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i, n):\n            if j < n - 1 and arr[i] < arr[j] and arr[j + 1] < arr[i]:\n                dp[i][j] = arr[i] + dp[i + 1][j + 1]\n            elif j > 0 and arr[i] < arr[j] and arr[j - 1] > arr[i]:\n                dp[i][j] = arr[i] + dp[i][j - 1]\n            else:\n                dp[i][j] = arr[i]\n\n    max_sum_so_far = float('-inf')\n    max_sum_ending_here = float('-inf')\n\n    for i in range(n):\n        max_sum_ending_here = max(max_sum_ending_here + arr[i], dp[i][i])\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n\n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n\n    # Initialize variables for the maximum sum and its indices\n    max_sum = float('-inf')\n    max_left = None\n    max_right = None\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Check if the current element is increasing\n        if i == 0 or arr[i] < arr[i - 1]:\n            # Check if the current element is decreasing\n            if i == len(arr) - 1 or arr[i] > arr[i + 1]:\n                # Update the maximum sum and its indices\n                if arr[i] + arr[i - 1] > max_sum:\n                    max_sum = arr[i] + arr[i - 1]\n                    max_left = i - 1\n                    max_right = i\n        elif i > 0 and arr[i] > arr[i - 1]:\n            # Check if the current element is increasing\n            if i == len(arr) - 1 or arr[i] < arr[i + 1]:\n                # Update the maximum sum and its indices\n                if arr[i] + arr[i - 1] > max_sum:\n                    max_sum = arr[i] + arr[i - 1]\n                    max_left = i - 1\n                    max_right = i\n\n    return max_sum, max_left, max_right"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # check if the array is bitonic\n    if is_bitonic(arr):\n        # find the maximum sum of a decreasing sequence\n        max_sum = find_max_sum_decreasing(arr)\n        # find the maximum sum of an increasing sequence\n        max_sum_increasing = find_max_sum_increasing(arr)\n        # return the maximum of the two sums\n        return max(max_sum, max_sum_increasing)\n    else:\n        # return 0 if the array is not bitonic\n        return 0\n\ndef is_bitonic(arr):\n    # check if the array is bitonic by comparing adjacent elements\n    for i in range(1, len(arr)):\n        if (arr[i] >= arr[i-1])!= (arr[i-1] >= arr[i-2]):\n            return False\n    return True\n\ndef find_max_sum_decreasing(arr):\n    # initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    # loop through the array\n    for num in arr:\n        # check if the current element is greater than the previous element\n        if num > arr[0]:\n            # update the sum if the current element is greater\n            current_sum += num\n        # check if the current sum is greater than the previous maximum sum\n        if current_sum > max_sum:\n            # update the maximum sum\n            max_sum = current_sum\n        # reset the current sum\n        current_sum = 0\n    # return the maximum sum\n    return max_sum\n\ndef find_max_sum_increasing(arr):\n    # initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    # loop through the array\n    for num in arr:\n        # check if the current element is less than the previous element\n        if num < arr[0]:\n            # update the sum if the current element is less\n            current_sum += num\n        # check if the current sum is greater than the previous maximum sum\n        if current_sum > max_sum:\n            # update the maximum sum\n            max_sum = current_sum\n        # reset the current sum\n        current_sum = 0\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Initialize the three pointers\n    left = 0\n    right = n - 1\n    mid = n // 2\n    \n    # Initialize the three variables\n    left_sum = arr[left]\n    right_sum = arr[right]\n    mid_sum = arr[mid]\n    \n    # If the left pointer is increasing, find the maximum sum of the right subsequence\n    while left < right:\n        left_sum = left_sum + arr[left]\n        right_sum = max(right_sum, arr[right])\n        left += 1\n    \n    # If the left pointer is decreasing, find the maximum sum of the left subsequence\n    while left < right:\n        left_sum = max(left_sum, arr[left])\n        right_sum = right_sum + arr[right]\n        right -= 1\n    \n    # If the left pointer is not increasing and the right pointer is increasing, find the maximum sum of the mid subsequence\n    while left < right:\n        left_sum = left_sum + arr[left]\n        right_sum = right_sum + arr[right]\n        mid_sum = mid_sum + arr[mid]\n        left += 1\n        right -= 1\n    \n    # If the left pointer is decreasing and the right pointer is not decreasing, find the maximum sum of the mid subsequence\n    while left < right:\n        left_sum = max(left_sum, arr[left])\n        right_sum = right_sum + arr[right]\n        mid_sum = mid_sum + arr[mid]\n        left += 1\n        right -= 1\n    \n    # Calculate the maximum sum\n    max_sum = max(left_sum, right_sum, mid_sum)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    n = len(arr) \n    dp = [0] * n \n    max_sum = float('-inf') \n    for i in range(n): \n        if i == 0 or arr[i] > arr[i-1]: \n            dp[i] = arr[i] \n        else: \n            dp[i] = dp[i-1] + arr[i] \n        max_sum = max(max_sum, dp[i]) \n    return max_sum "
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Calculate the sum of each subsequence\n    left = [0] * len(arr)\n    right = [0] * len(arr)\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            left[i] = left[i-1] + arr[i]\n        else:\n            left[i] = max(left[i-1], left[i-1]+arr[i])\n\n    for i in range(len(arr)-2, -1, -1):\n        if arr[i] < arr[i+1]:\n            right[i] = right[i+1] + arr[i]\n        else:\n            right[i] = max(right[i+1], right[i+1]+arr[i])\n\n    # Calculate the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(max_sum, left[i] + right[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = 0\n    \n    # check if the array is bitonic\n    if arr[0] < arr[1]:\n        for i in range(2, n):\n            if arr[i] < arr[i-1]:\n                max_sum = max(max_sum, arr[i] + arr[i-1])\n    \n    # check if the array is decreasing\n    elif arr[0] > arr[1]:\n        for i in range(2, n):\n            if arr[i] > arr[i-1]:\n                max_sum = max(max_sum, arr[i] + arr[i-1])\n    \n    # if the array is neither increasing nor decreasing, it is a mixed array\n    else:\n        for i in range(2, n):\n            max_sum = max(max_sum, arr[i] + arr[i-1])\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, \n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # initialize variables for sum and maximum sum\n    sum1 = 0\n    sum2 = 0\n    max_sum = float('-inf')\n\n    # iterate through the array\n    for num in arr:\n        # add the current number to sum1\n        sum1 += num\n\n        # check if the current number is decreasing\n        if num < arr[0]:\n            # add the current number to sum2\n            sum2 += num\n\n            # check if the sum of the subsequence is greater than the maximum sum found so far\n            if sum2 - sum1 > max_sum:\n                max_sum = sum2 - sum1\n\n    # return the maximum sum of the subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Initialize variables for the minimum and maximum subarrays\n    min_subarray = [float('inf')] * n\n    max_subarray = [float('-inf')] * n\n\n    # Initialize variables for the maximum sum and its indices\n    max_sum = float('-inf')\n    max_sum_indices = []\n\n    # Iterate through the array and update the subarrays and max sum accordingly\n    for i in range(n):\n        if arr[i] > arr[i-1]:\n            min_subarray[i] = min(min_subarray[i-1], arr[i])\n        else:\n            min_subarray[i] = max(min_subarray[i-1], arr[i])\n\n        if arr[i] < arr[i-1]:\n            max_subarray[i] = max(max_subarray[i-1], arr[i])\n        else:\n            max_subarray[i] = min(max_subarray[i-1], arr[i])\n\n        if min_subarray[i] > max_subarray[i]:\n            current_sum = min_subarray[i] + max_subarray[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_indices = [i]\n            elif current_sum == max_sum:\n                max_sum_indices.append(i)\n\n    return max_sum_indices"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2: \n        return 0\n    \n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    max_sum = float('-inf')\n    \n    # Initialize first row and last row with single element subsequences\n    dp[0][0] = arr[0]\n    dp[n-1][n-1] = arr[n-1]\n    \n    # Fill the rest of the matrix in a bottom-up manner\n    for i in range(1, n-1):\n        if arr[i] < arr[i-1]:\n            dp[i][i] = dp[i-1][i] + arr[i]\n        else:\n            dp[i][i] = max(dp[i-1][i], dp[i][i-1])\n    \n    # Update max_sum if the maximum sum is found in a subsequence that is increasing and decreasing\n    for i in range(n-2, -1, -1):\n        if dp[i][i] > dp[i][i+1]:\n            max_sum = max(max_sum, dp[i][i])\n    \n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + number//x) / 2\n    while y < x/y:\n        x = y\n        y = (x + number//x) / 2\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a, b = 0, number / 2\n    while b**2 > a**2:\n        a, b = b, number / b\n    return math.sqrt(b)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess**2 > number:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    a = 1\n    b = number\n    c = 0\n\n    # Use babylonian method to find square root\n    while b**2 - 4*a*c >= 0:\n        d = (b**2 - 4*a*c) / (2*a)\n        a = b\n        b = d\n        c = (b + a/b) / 2\n\n    # Return square root\n    return c"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = number / 2.0\n    n = 1\n    y = 1.0\n    while abs(y - x) >= 1e-10:\n        x = y\n        y = x / (1.0 + n * (x / y))\n        n += 1\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2\n    y = x\n    i = 0\n    while abs(y - x) > 0.00001:\n        x = y\n        y = (number / y) + y / 2\n        i += 1\n    return (i, y)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Define the precision of the calculation\n    precision = 0.0001\n    \n    # Initialize variables\n    current_guess = number / 2\n    last_guess = current_guess\n    iteration = 0\n    \n    # Iterate until the difference between the current and last guesses is less than the precision\n    while abs(current_guess - last_guess) > precision:\n        last_guess = current_guess\n        iteration += 1\n        current_guess = (current_guess + number / current_guess) / 2\n        \n    # Return the result\n    return current_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Calculate the initial guess\n    guess = number / 2.0\n    \n    # Calculate the next guess\n    while True:\n        # Calculate the next guess\n        next_guess = (guess + number / guess) / 2.0\n        \n        # Check if the difference between the next guess and the actual square root is less than 0.00001\n        if abs(next_guess - guess) < 0.00001:\n            # If the difference is less than 0.00001, we have found the square root\n            return next_guess\n        \n        # Update the guess\n        guess = next_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Check if the number is negative\n    if number < 0:\n        return None\n    \n    # Initialize variables for the current approximation and the number of iterations\n    approximation = number\n    iterations = 0\n    \n    # Loop while the difference between the current approximation and the square of the previous approximation is greater than 0.0001\n    while abs(approximation - (approximation**2)) > 0.0001:\n        # Update the approximation\n        approximation = approximation - ((approximation - number/approximation) / (2 * approximation - number))\n        # Increment the iteration count\n        iterations += 1\n    \n    # Return the approximate square root\n    return approximation"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize variables\n    guess = number/2\n    previous_guess = guess\n\n    # Keep iterating until the difference between the guess and the square root is less than a small error\n    while abs(guess*guess - number) > 0.00001:\n        # Calculate the new guess\n        next_guess = (number/guess + guess)/2\n\n        # Check if the new guess is closer to the true root\n        if abs(next_guess*next_guess - number) < abs(guess*guess - number):\n            guess = next_guess\n        else:\n            guess = previous_guess\n\n        # Update the previous guess\n        previous_guess = guess\n\n    # Return the final guess\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    # Initialize two arrays to store the length of the longest palindromic subsequence ending at each index\n    # dp[i][j] represents the length of the longest palindromic subsequence ending at index i, j in the string\n    dp = [[0] * n for _ in range(n)]\n    # Initialize a helper array to store the indices of the longest palindromic subsequence ending at each index\n    # idx[i][j] represents the index of the longest palindromic subsequence ending at index i, j in the string\n    idx = [[-1] * n for _ in range(n)]\n    # Initialize dp[i][i] to 1 and dp[i][j] = 1 if str[i] == str[j] for all i <= j\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            dp[i][i] = 1\n            idx[i][i] = i\n        elif str[i] == str[i + 1]:\n            dp[i][i + 1] = 2\n            idx[i][i + 1] = i + 1\n    \n    # Fill in the remaining values of dp and idx using dynamic programming\n    for k in range(2, n):\n        for i in range(n - k):\n            j = i + k\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n                idx[i][j] = idx[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n                idx[i][j] = -1\n    \n    # Find the length of the longest palindromic subsequence ending at index i, j in the string\n    max_len = dp[0][n - 1]\n    start = idx[0][n - 1]\n    end = idx[0][0]\n    for i in range(1, n):\n        if dp[i][n - 1] > max_len:\n            max_len = dp[i][n - 1]\n            start = i\n            end = n - 1\n        elif dp[i][n - 1] == max_len and idx[i][n - 1] > idx[start][end]:\n            max_len = dp[i][n - 1]\n            start = i\n            end = n - 1\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # create a 2D array to store the length of longest palindromic subsequence for all prefixes\n    # and suffixes of the given string\n    lps_arr = [[0] * n for _ in range(n)]\n    # initialize all lengths to 1, since empty string is always a palindrome\n    for i in range(n):\n        lps_arr[i][i] = 1\n\n    # fill in the rest of the array using dynamic programming\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                lps_arr[i][j] = lps_arr[i+1][j-1] + 2\n            else:\n                lps_arr[i][j] = max(lps_arr[i+1][j], lps_arr[i][j-1])\n\n    return lps_arr[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each index\n    table = [[0] * n for _ in range(n)]\n\n    # Iterate through the string and fill in the table\n    for i in range(n):\n        table[i][i] = 1\n\n    # Check for palindromic subsequences of length 2\n    for i in range(n - 1):\n        if str[i] == str[i + 1]:\n            table[i][i + 1] = 2\n\n    # Check for palindromic subsequences of length 3 and more\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n\n    # Find the length of the longest palindromic subsequence\n    max_length = 1\n    for i in range(n):\n        max_length = max(max_length, table[0][i])\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Initialize variables\n    start = 0\n    max_length = 1\n    length = 1\n\n    # Iterate through the string\n    for i in range(1, len(str)): \n\n        # If the current character is same as the previous character, \n        # then we can create a palindrome substring using two characters\n        if str[i] == str[start]:\n            length += 1\n\n            # If the length is greater than the current max_length, \n            # then update the start and max_length\n            if length > max_length:\n                start = i - length + 1\n                max_length = length\n\n        # If the current character is different from the previous character, \n        # then we need to check if the substring is already a palindrome or not\n        else: \n            # If the substring is already a palindrome, \n            # then check if it is longer than the current max_length\n            if length > max_length: \n                start = i - length + 1 \n                max_length = length\n\n            # If the substring is not a palindrome, \n            # then reset the length to 1 and start to the next character\n            length = 1\n\n    # Return the maximum length of a palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def longest_palindrome(str):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Initialize LPS array of size n\n    LPS = [1] * n\n\n    # Find LPS array using KMP algorithm\n    i = 1\n    while i < n:\n        if str[i] == str[n - i]:\n            LPS[i] = LPS[n - i] + 1\n            i += 1\n        else:\n            # If current character is not same as the previous character\n            # then compare with LPS[0..i-2]\n            j = LPS[i - 1]\n            while j >= 1 and str[i]!= str[j + n - i]:\n                j = LPS[j - 1]\n            # If current character is same as the previous character, then\n            # LPS[i] will be greater than j\n            if str[i] == str[j + n - i]:\n                LPS[i] = j + 1\n            i += 1\n\n    # Return the length of the longest palindromic subsequence\n    return max(LPS)\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    if len(s) < 2:\n        return len(s)\n    \n    dp = [[0] * (len(s)) for _ in range(len(s))]\n    \n    for i in range(len(s)):\n        dp[i][i] = 1\n    \n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n            \n    for l in range(2, len(s)):\n        for i in range(len(s)-l):\n            j = i+l\n            if s[i] == s[j] and (j-i < 3 or s[i+1] == s[j-1]):\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    return dp[0][len(s)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each index in the string.\n    table = [[0 for j in range(len(str)+1)] for i in range(len(str)+1)]\n\n    # Initialize the first row and first column of the table with 1.\n    for i in range(1, len(str)+1):\n        table[i][0] = 1\n        table[0][i] = 1\n\n    # Fill the table by iterating over the string and updating the table.\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence ending at the last index in the string.\n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    if n == 0 or n == 1:\n        return n\n    \n    # Initialize two variables to store the longest palindromic subsequence length\n    # for odd and even lengths respectively\n    p1 = p2 = 0\n    \n    # Initialize two variables to store the starting index of the longest\n    # palindromic subsequences for odd and even lengths respectively\n    start1 = start2 = 0\n    \n    # Iterate through the string and find the longest palindromic subsequences\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            # Check if the current character is the middle character of a palindrome\n            # of odd length and update the p1 and start1 variables accordingly\n            if i % 2 == 0:\n                p1 = 2\n                start1 = i - 1\n            \n            # Check if the current character is the middle character of a palindrome\n            # of even length and update the p2 and start2 variables accordingly\n            else:\n                p2 = 2\n                start2 = i - 1\n            \n            # If the length of the longest palindromic subsequence for odd length is less\n            # than the length of the current longest palindromic subsequence for odd length,\n            # update p1 and start1 accordingly\n            if p1 < p2:\n                p1 = p2\n                start1 = start2\n            \n            # Check if the length of the longest palindromic subsequence for even length is less\n            # than the length of the current longest palindromic subsequence for even length,\n            # update p2 and start2 accordingly\n            elif p2 < p1:\n                p2 = p1\n                start2 = start1\n        \n        # If the current character is not the middle character of a palindrome,\n        # update the longest palindromic subsequence for odd length and update p1\n        else:\n            p1 += 1\n            \n            # Update the longest palindromic subsequence for even length and update p2\n            p2 = 0\n            \n            # If the length of the longest palindromic subsequence for odd length is less\n            # than the length of the current longest palindromic subsequence for odd length,\n            # update p1 and start1 accordingly\n            if p1 < p2:\n                p1 = p2\n                start1 = start2\n            \n            # Check if the length of the longest palindromic subsequence for even length is less\n            # than the length of the current longest palindromic subsequence for even length,\n            # update p2 and start2 accordingly\n            elif p2 < p1:\n                p2 = p1\n                start2 = start1\n    \n    # Return the length of the longest palindromic subsequence for odd length\n    return p1\n    \n    # Return the length of the longest palindromic subsequence for even length\n    # return p2"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(s):\n    n = len(s)\n    # create a 2D array to store the lengths of longest palindromic subsequences\n    dp = [[0] * n for _ in range(n)]\n\n    # base case: if the length of the string is 1 or 0, then the longest palindrome is itself\n    for i in range(n):\n        dp[i][i] = 1\n\n    # fill the 2D array using dynamic programming\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    # find the maximum length palindromic subsequence\n    max_len = dp[0][n-1]\n    max_start = 0\n    for i in range(n-1, -1, -1):\n        if dp[i][n-1] > max_len:\n            max_len = dp[i][n-1]\n            max_start = i\n\n    # reconstruct the longest palindromic subsequence\n    max_palindrome = \"\"\n    i = max_start\n    while i < n and i >= 0:\n        if s[i] == s[n-1-i]:\n            max_palindrome = s[i] + max_palindrome\n            i += 1\n        else:\n            i -= 1\n\n    return max_len, max_palindrome"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Create a 2D table to store the length of palindromic subsequences\n    table = [[0] * len(str) for _ in range(len(str))]\n\n    # Initialize the first row and first column of the table\n    for i in range(len(str)):\n        table[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[i] == str[j]:\n                table[i][j] = 2 + table[j+1][i-1]\n            else:\n                table[i][j] = max(table[i][j+1], table[j][i])\n\n    # Return the length of the longest palindromic subsequence\n    return table[-1][-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2 * n - 1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Calculate the harmonic sum\n    sum = 1\n    for i in range(1, n):\n        sum += 1 / i\n    \n    # Return the harmonic sum\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Initialize a list to store the harmonic series\n    harmonic_series = []\n    \n    # Calculate the harmonic series up to n-1\n    for i in range(1, n):\n        harmonic_series.append(1/i)\n    \n    # Calculate the sum of the harmonic series\n    harmonic_sum = sum(harmonic_series)\n    \n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += 1 / i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / (n * harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + 1/(n-1) + 1/(n-2) +... + 1/(n-n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum_harmonic = 0.0\n    for i in range(1, n):\n        sum_harmonic += 1.0 / i\n    return sum_harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of elements in the first array\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Initialize a set to store the common elements in the two arrays\n    common_set = set()\n\n    # Loop through the second array and check if the element is present in the first array\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            common_set.add(num)\n            freq_dict[num] -= 1\n\n    # Return the common elements as a list\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n\n    Args:\n    - array_nums1: a list of integers\n    - array_nums2: a list of integers\n\n    Returns:\n    - a list of integers that is the intersection of the two input arrays.\n\n    \"\"\"\n    # create a set of all the elements in array_nums1\n    set_nums1 = set(array_nums1)\n    # create a set of all the elements in array_nums2\n    set_nums2 = set(array_nums2)\n    # find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a dictionary to store the frequency of each element in the first array\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Create a new list to store the intersection of the two arrays\n    intersection = []\n    \n    # Loop through the second array and check if the element is in the dictionary\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1 in array_nums1:\n        if num1 in array_nums2 and num1 not in intersection:\n            intersection.append(num1)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Finds the intersection of two arrays.\n\n    Parameters:\n    array_nums1 (list): The first array of integers.\n    array_nums2 (list): The second array of integers.\n\n    Returns:\n    list: The intersection of the two arrays.\n    \"\"\"\n\n    # Create a set of elements in the first array\n    set_nums1 = set(array_nums1)\n\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set(array_nums2))\n\n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection_set = set(array_nums1) & set(array_nums2)\n    return list(intersection_set)\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set from array_nums1 and array_nums2\n    nums1 = set(array_nums1)\n    nums2 = set(array_nums2)\n    \n    # find the intersection of the two sets and convert it to a list\n    intersection = list(nums1.intersection(nums2))\n    \n    # return the intersection\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in the list.\n\n    Parameters:\n        lst (list): the list to insert the element before.\n        element (any): the element to insert before each element in the list.\n\n    Returns:\n        list: the resulting list with the element inserted before each element in the input list.\n    \"\"\"\n    return [element] + lst[:-1] + [lst[-1]]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result[1::2]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Insert an element before each element in a list and return the resulting list.\n    \"\"\"\n    return [element] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    # create a new list to hold the modified elements\n    modified_list = []\n    # iterate over each element in the original list\n    for i in range(len(list)):\n        # insert the element before the current element\n        modified_list.insert(i, element)\n        # add the current element to the modified list\n        modified_list.append(list[i])\n    # return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers and converts them to polar coordinates.\n    '''\n    polar_list = []\n    for num in numbers:\n        r, theta = cmath.polar(num)\n        polar_list.append((r, theta))\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    polar_coordinates = []\n    \n    for number in numbers:\n        complex_num = complex(number)\n        modulus = cmath.sqrt(complex_num.real**2 + complex_num.imag**2)\n        angle = cmath.phase(complex_num)\n        \n        polar_coordinates.append((modulus, angle))\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        # calculate magnitude\n        mag = cmath.sqrt(real**2 + imag**2)\n        # calculate angle\n        angle = cmath.phase(num)\n        # print polar coordinates\n        print(\"Polar coordinates of\", num, \"are\", mag, \"and\", angle, \"radians.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n\n    Args:\n        numbers (list): A list of complex numbers.\n\n    Returns:\n        list: A list of tuples containing the magnitude (r) and angle (theta) of each complex number in the input list.\n    \"\"\"\n    polar_coords = []\n    for num in numbers:\n        magnitude = abs(num)\n        theta = cmath.phase(num)\n        polar_coords.append((magnitude, theta))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a Python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_numbers = []\n    for number in numbers:\n        magnitude = abs(number)\n        phase = cmath.phase(number)\n        polar_numbers.append((magnitude, phase))\n    return polar_numbers\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        result.append((magnitude, angle))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        # converting complex number to polar coordinates\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n        \n        # creating a tuple with polar coordinates\n        polar_coordinates = (r, theta)\n        \n        # adding polar coordinates to the result list\n        result.append(polar_coordinates)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        \n        # print the polar coordinates\n        print(f\"({num.real:.2f} + {num.imag:.2f}i), r = {r:.2f}, theta = {theta:.2f}rad\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:\n        # converting to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n\n        # printing polar coordinates\n        print(f\"r = {r} + {theta}i\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    for num in numbers:  \n        # Convert the complex number to polar coordinates  \n        r, theta = cmath.polar(num)  \n\n        # Print the polar coordinates  \n        print(\"({}, {})\".format(r, theta))  "
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the count of integer elements in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        combo = tuple(l[i:i+n])\n        result.append(combo)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all possible combinations of colors\n    colors = list(combinations_with_replacement(l, n))\n    \n    # Return a list with a tuple for each combination\n    return [(color[:i], color[i:]) for color in colors]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    This function takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(1, len(l) + 1):\n        for c in combinations_with_replacement(l, i):\n            comb.append(tuple(c))\n    return comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Use combinations_with_replacement function to generate all combinations with repetition\n    combinations = combinations_with_replacement(l, n)\n\n    # Convert each combination into a tuple\n    combinations = list(combinations)\n\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = list(combinations_with_replacement(l, n))\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue']\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n+1):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2,int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i < n:\n        if is_prime(i):\n            count += 1\n        i += 1\n    return count\n\ndef is_prime(num):\n    '''\n    Write a python function that takes in a non-negative integer and returns True if it is a prime number and False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative number n as input and returns the number of prime numbers less than n.\n    \"\"\"\n\n    count = 0\n\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, i)):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return max(test_tup1)\n    elif len(test_tup1) < len(test_tup2):\n        return max(test_tup2)\n    else:\n        if test_tup1[0] > test_tup2[0]:\n            return max(test_tup1)\n        else:\n            return max(test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Initialize variables to keep track of the maximum values\n    max_tup1 = test_tup1[0]\n    max_tup2 = test_tup2[0]\n\n    # Loop through the values of the first tuple\n    for i in range(1, len(test_tup1)):\n        # If the current value is greater than the maximum value, update the maximum value\n        if test_tup1[i] > max_tup1:\n            max_tup1 = test_tup1[i]\n        # If the current value is greater than the maximum value, update the maximum value\n        if test_tup2[i] > max_tup2:\n            max_tup2 = test_tup2[i]\n\n    # Return the maximum values\n    return max_tup1, max_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Create a list to hold the maximum elements\n    max_list = []\n    \n    # Loop through each element in the first tuple\n    for num1 in test_tup1:\n        # Loop through each element in the second tuple\n        for num2 in test_tup2:\n            # If the element in the first tuple is greater than the element in the second tuple, append it to the max_list\n            if num1 > num2:\n                max_list.append(num1)\n                \n    # If there are no elements in the max_list, return None\n    if not max_list:\n        return None\n    \n    # Return the maximum element in the max_list\n    else:\n        return max(max_list)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1, max2 = 0, 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max2 = max1\n            max1 = test_tup1[i]\n        elif test_tup2[i] > max2:\n            max2 = test_tup2[i]\n    return max(max1, max2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Determine the maximum value in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n\n    # Find the tuple with the maximum value in each tuple\n    if max1 == max2:\n        max_tuple = test_tup1\n    else:\n        max_tuple = test_tup2\n\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        return max(test_tup1, test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Get the length of both tuples\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n    # Check if the length of the first tuple is greater than the second tuple\n    if length1 > length2:\n        # If it is, return the first tuple\n        return test_tup1\n    # If the first tuple is less than or equal to the second tuple, return the second tuple\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    max_tup = (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]), max(test_tup1[2], test_tup2[2]))\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1, max2 = 0, 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max2 = max1\n            max1 = test_tup1[i]\n        elif test_tup1[i] > max2:\n            max2 = test_tup1[i]\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max1:\n            max2 = max1\n            max1 = test_tup2[i]\n        elif test_tup2[i] > max2:\n            max2 = test_tup2[i]\n    return (max1, max2)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define the list of numbers up to 100,000\n    numbers = [2]\n    i = 3\n    while i <= 100000:\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            numbers.append(i)\n        i += 2\n    # Find the nth newman prime number\n    newman_primes = [numbers[i] for i in range(len(numbers)-1, -1, -1)]\n    return newman_primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    count = 0\n    while count < n:\n        if is_prime(p):\n            count += 1\n        p += 1\n    return p - 1\n\ndef is_prime(n): \n    if n <= 1: \n        return False \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            return False \n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    while p <= n:\n        if all(p%i!=0 for i in range(2, int(p**0.5)+1)) and all(p%i!=0 for i in range(p**2-1, 0, -1)):\n            print(p)\n        p += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a list to store the prime numbers\n    primes = []\n    # Initialize a boolean variable to keep track of whether we have found a prime\n    is_prime = True\n    # Initialize a counter variable to keep track of the number of primes found so far\n    count = 0\n\n    # Start with the first prime number\n    p = 2\n    while count < n:\n        # Check if p is prime\n        is_prime = True\n        for i in range(2, int(p**0.5) + 1):\n            if p % i == 0:\n                is_prime = False\n                break\n        # If p is prime, add it to the list of primes and increment the count\n        if is_prime:\n            primes.append(p)\n            count += 1\n        # Increment p until we have found n primes\n        p += 1\n\n    # Return the nth prime number\n    return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # First check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the list of primes to an empty list\n    primes = []\n\n    # Initialize a boolean flag to indicate if there is a new prime\n    is_prime = True\n\n    # Initialize a counter to keep track of how many primes we have found\n    count = 0\n\n    # Initialize the value of the current prime number\n    current_prime = 2\n\n    # Loop through all numbers from 3 to n\n    for num in range(3, n + 1):\n\n        # Check if the number is a prime using the newman-shanks-williams algorithm\n        if num % 2!= 0 and all(num % i!= 0 or i == 1 for i in range(3, int(num**0.5) + 1, 2)):\n            count += 1\n            primes.append(num)\n\n        # If we have found the nth prime, return the value of that prime\n        if count == n:\n            return primes[count - 1]\n\n        # If we have found a new prime, move on to the next number\n        if is_prime:\n            current_prime += 1\n            is_prime = False\n\n    # If we have not found the nth prime, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    i = 2\n    prime_count = 0\n    \n    while prime_count < n:\n        if i % 2 == 1:\n            is_prime = True\n            for j in range(3, int(i**0.5) + 1, 2):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_count += 1\n        i += 1\n    \n    if prime_count == n:\n        return i - 1\n    else:\n        return \"Not enough prime numbers found\""
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define the newman-shanks-williams prime numbers up to n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Iterate over the primes to find the nth newman-shanks-williams prime number\n    for i in range(n):\n        if i == 0:\n            continue\n        elif primes[i-1] % 2 == 0:\n            continue\n        elif primes[i-1] < 4:\n            continue\n        else:\n            flag = True\n            for j in range(2, int(primes[i-1]**0.5)+1):\n                if primes[i-1] % j == 0:\n                    flag = False\n                    break\n            if flag:\n                return primes[i-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables for the nth newman prime number and the count of primes found so far\n    current_prime = 1\n    count = 0\n\n    # Loop through the numbers from 2 to sqrt(n)\n    for i in range(2, int(n**0.5) + 1):\n        # Check if i is a newman prime\n        if is_newman_prime(i):\n            # If it is, check if it's the nth newman prime\n            if count == n - 1:\n                return i\n            else:\n                count += 1\n\n    # If we've reached this point, the nth newman prime has not been found\n    return None\n\n\ndef is_newman_prime(n):\n    '''\n    Determine if a given number is a newman prime.\n    '''\n    # Check if n is a prime number\n    if is_prime(n):\n        # If it is, check if it has already been used in the sequence of primes\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\n\n\ndef is_prime(n):\n    '''\n    Determine if a given number is a prime number.\n    '''\n    # Check if n is less than 2\n    if n < 2:\n        return False\n\n    # Check if n is equal to 2\n    if n == 2:\n        return True\n\n    # Check if n is even\n    if n % 2 == 0:\n        return False\n\n    # Check if n is odd\n    i = 3\n    while i**2 <= n:\n        if n % i == 0:\n            return False\n        i += 2\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a variable p to be the largest prime number less than or equal to n that is divisible by two or three.\n    p = 2\n    while p <= n:\n        if p % 2 == 0 or p % 3 == 0:\n            # Set p to be the next prime number greater than or equal to p that is divisible by two or three.\n            p += 2\n            while p <= n and p % 2 == 0 or p % 3 == 0:\n                p += 2\n        else:\n            # Set p to be the next prime number greater than or equal to p that is divisible by two or three.\n            p += 2\n\n    # Return p.\n    return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize the list of primes\n    primes = []\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return None\n\n    # Initialize the first two primes\n    primes.append(2)\n    primes.append(3)\n\n    # Check the rest of the numbers\n    for i in range(5, n+1, 2):\n        # Check if the number is divisible by any of the primes\n        for p in primes:\n            if i % p == 0:\n                break\n        else:\n            # If the number is not divisible by any of the primes, add it to the list\n            primes.append(i)\n\n    return primes[n-1]"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple((num1 / num2) for num1, num2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The number of elements in the two tuples must be the same.\")\n        return None\n    else:\n        # Perform element-wise division and return the result\n        return tuple(a / b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples have different lengths.\")\n\n    # Perform element-wise division\n    result_tup = tuple([elem1/elem2 for elem1, elem2 in zip(test_tup1, test_tup2)])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # get the length of the first tuple\n    length1 = len(test_tup1)\n    # get the length of the second tuple\n    length2 = len(test_tup2)\n    # check if the length of the second tuple is greater than or equal to the first tuple\n    if length2 >= length1:\n        # create a new tuple to hold the result\n        result_tup = ()\n        # loop through the first tuple\n        for i in range(length1):\n            # get the i-th element from both tuples\n            num1 = test_tup1[i]\n            num2 = test_tup2[i]\n            # perform element-wise division and append to the result tuple\n            result_tup += (num1/num2,)\n        # return the result tuple\n        return result_tup\n    # if the second tuple is smaller than the first tuple, pad it with None values\n    else:\n        # create a new tuple to hold the result\n        result_tup = ()\n        # loop through the second tuple\n        for i in range(length2):\n            # append None values to the result tuple\n            result_tup += (None,)\n        # loop through the first tuple\n        for i in range(length1):\n            # get the i-th element from both tuples\n            num1 = test_tup1[i]\n            num2 = test_tup2[i]\n            # perform element-wise division and append to the result tuple\n            result_tup += (num1/num2,)\n        # return the result tuple\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            if test_tup2[i] == 0:\n                return None\n            else:\n                result_tup += (test_tup1[i] // test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0 and test_tup2[i] == 0:\n            result_tup = result_tup + (float('inf'),)\n        elif test_tup1[i] == 0:\n            result_tup = result_tup + (float('inf'),)\n        elif test_tup2[i] == 0:\n            result_tup = result_tup + (float('-inf'),)\n        else:\n            result_tup = result_tup + (float(test_tup1[i]) / float(test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both input tuples must have equal number of elements.\")\n        return\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(\"Error: Cannot divide by zero.\")\n            return\n        else:\n            result_tup.append(test_tup1[i] / test_tup2[i])\n    \n    return tuple(result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples should have the same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print(\"Error: Division by zero not allowed.\")\n            return\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the first tuple is equal to the length of the second tuple\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the first tuple is not equal to the length of the second tuple.\")\n        return None\n    else:\n        # loop through each element of the first tuple and perform division operation element-wise with the corresponding element of the second tuple\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == 0 and test_tup2[i] == 0:\n                print(\"Error: Division by zero is not allowed.\")\n                return None\n            else:\n                test_tup1[i] = test_tup1[i] / test_tup2[i]\n        # return the modified tuple\n        return test_tup1"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # create a list to store the first part of the list\n    part1 = []\n    # iterate through the list and add elements to the first part of the list until it reaches length L\n    while len(part1) < L:\n        part1.append(list1.pop(0))\n    # create a list to store the second part of the list\n    part2 = list1\n    # return a tuple containing the first and second parts of the list\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # check if the length of list is greater than or equal to L\n    if len(list1) >= L:\n        # split the list into two parts where the length of the first part is L\n        first_part = list1[:L]\n        second_part = list1[L:]\n        # return the resulting lists in a tuple\n        return (first_part, second_part)\n    else:\n        # if the length of list is less than L, return an error message\n        print(\"Error: The length of the list must be greater than or equal to L.\")\n"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 0:\n        mid = int(len(list1) / 2)\n        part1 = list1[:mid]\n        part2 = list1[mid:]\n        return (part1, part2)\n    else:\n        mid = int(len(list1) / 2)\n        part1 = list1[:mid+1]\n        part2 = list1[mid+1:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L <= 0 or L > len(list1):\n        return None, None\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return None, None\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts, where the length of the first part is L, and return the resulting lists in a tuple.\n    \"\"\"\n    # split the list into chunks of size L\n    chunks = [lst[i:i+L] for i in range(0, len(lst), L)]\n    # check if the last chunk is shorter than L\n    if len(lst) % L!= 0:\n        chunks.append(lst[len(lst)-L:])\n    return tuple(chunks)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    list2 = list1[L:]\n    list1 = list1[:L]\n    \n    # Return the two parts as a tuple\n    return (list1, list2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob = input(\"What was your date of birth (YYYY-MM-DD)? \")\n    birth_year = int(dob[:4])\n    today = datetime.datetime.now().year\n    age = today - birth_year\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dog_years = 7 * h_age\n    return age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert the input age in hours to dog years.\n    dog_years = h_age / 7\n    # Return the dog's age in dog years.\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age / 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob = input(\"Enter your date of birth (MM/DD/YYYY): \")\n    dob_list = dob.split('/')\n    dob_year = int(dob_list[2])\n    today_year = int(str(datetime.date.today().year)[2:])\n    age = today_year - dob_year\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_years = 7 * h_age\n    return dogs_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # convert human age to dog age\n    dog_age = h_age * 7\n    # round the dog age to the nearest integer\n    dog_age = round(dog_age)\n    # return the dog age in years\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7\n    dog_age_years = h_age * dog_years\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_years = h_age / 7\n    return age_in_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 7 * h_age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Loop through the list using a for loop\n    for i in range(0, len(S), step):\n        # Create a new list containing only the current element and append it to the result list\n        result.append([S[i]])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 1:\n        return [S]\n    else:\n        return S[0:step] + list_split(S[step:], step)"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to hold the resulting lists\n    result = []\n    # Loop through each element of the input list\n    for i in range(0, len(S), step):\n        # Add the current element to the result list\n        result.append(S[i])\n    # Return the resulting list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if isinstance(S, list):\n        results = []\n        for i in range(0, len(S), step):\n            results.append(S[i:i+step])\n        return results\n    else:\n        return None"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    S = 6 * l**2\n    return S"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l\n    print(\"The lateral surface area of a cube with side length\", l, \"is\", surface_area)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralSurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area using the formula: A = 2*l*h\n    h = l/3\n    area = 2*l*h\n    return area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_sum = 0\n    for i in range(1, n+1, 2):\n        odd_sum += i*i\n    return odd_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add square of current odd natural number to sum variable\n        sum += i*i\n        \n    # return sum of squares of odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_numbers = [i for i in range(1, n+1, 2)]\n    odd_squares = [x**2 for x in odd_numbers]\n    sum_squares = sum(odd_squares)\n    return sum_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    count = 0\n    sum_squares = 0\n    while count < n:\n        count += 1\n        sum_squares += count * count\n\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n        count += 1\n\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"1\"\n    else:\n        return str(n * (5 * n - 1) // 2)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the first star number to 1\n    star_num = 1\n    # Loop through the number of times specified by n\n    for i in range(1, n+1):\n        # Multiply the star number by 2\n        star_num *= 2\n        # Print the star number\n        print(star_num)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    count = 0\n    while count <= n:\n        print('*' * count)\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    return n * n * n\n\nn = int(input(\"Enter the value of n: \"))\nprint(find_star_num(n))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    for i in range(1, n + 1):\n        print(\"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"I\"\n    elif n == 2:\n        return \"II\"\n    elif n == 3:\n        return \"III\"\n    else:\n        return str(n) + \" stars\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    for i in range(n+1):\n        print(\"*\" * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Define the first n stars\n    stars = ['*' for i in range(1, n+1)]\n    # Concatenate all the stars into a single string\n    result = ''.join(stars)\n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the result string\n    result = \"\"\n\n    # loop through each row of the star pattern\n    for i in range(1, n+1):\n        # add the appropriate number of stars to the result string\n        result += \"*\" * i + \"\\n\"\n\n    # return the result string\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    elif n == 2:\n        return \"**\"\n    elif n == 3:\n        return \"***\"\n    elif n == 4:\n        return \"****\"\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3) + find_star_num(n-4)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        k = ord(k)\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n\n    # ASCII code table for letters A-Z\n    ascii_table = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]\n\n    # If k is a letter, convert it to its ASCII value\n    if k.isalpha():\n        return ascii_table.index(ord(k))\n\n    # If k is a digit, return its ASCII value\n    elif k.isdigit():\n        return int(k)\n\n    # Otherwise, raise an error\n    else:\n        raise ValueError(\"Invalid input. Please provide a letter or digit.\")"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of the even numbers at even positions.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n\n            if count % 2 == 0:\n                return even_sum\n    return \"No even sum found\""
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            if i % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index_sum = 0\n    count = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n            if count % 2 == 0:\n                even_index_sum += num\n        count += 1\n    return even_sum, even_index_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i**5\n    \n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    # initialize the sum to zero\n    sum_of_powers = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        sum_of_powers += i ** 5\n\n    # return the sum of the first n even natural numbers raised to the fifth power\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_evens = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_of_evens += i**5\n    return sum_of_evens"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_evens = 0\n    for i in range(2, 2*n+1, 2):\n        sum_of_evens += i**5\n    return sum_of_evens"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    even_numbers = []\n    sum = 0\n\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even_numbers.append(i)\n\n    for i in even_numbers:\n        sum += i**5\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_powers = 0\n    for i in range(1, n+1):\n        if i ** 5 % 2 == 0:\n            sum_of_even_powers += i\n    return sum_of_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize a variable to keep track of the sum\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(n):\n\n        # if the number is even, add it to the sum\n        if i % 2 == 0:\n            sum += i**5\n\n    # return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tuple in test_list:\n        rear_element = tuple[-1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_element in test_list:\n        rear_list.append(tuple_element[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [elem[-1] for tup in test_list for elem in tup]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Create an empty tuple to store the result\n    result_tup = ()\n    \n    # Check if the number of elements in both tuples are equal\n    if len(test_tup1) == len(test_tup2):\n        # Iterate through each index of the tuples\n        for i in range(len(test_tup1)):\n            # Subtract the element of the first tuple from the element of the second tuple with the same index\n            result_tup += (test_tup1[i] - test_tup2[i],)\n    else:\n        # Raise an error if the number of elements in both tuples are not equal\n        raise ValueError(\"Both tuples must have the same number of elements\")\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples must have the same length\"\n    \n    # Check if both tuples have the same elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return \"Both tuples must have the same elements\"\n    \n    # Create a new tuple with the subtraction result for each element\n    subtraction_result = [test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))]\n    \n    # Return the new tuple\n    return subtraction_result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            new_tup += (test_tup1[i] - test_tup2[test_tup2.index(i)]),\n        else:\n            new_tup += (test_tup1[i],)\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # create an empty list to store the result\n    result_list = []\n    # iterate over each element in the first tuple\n    for i in range(len(test_tup1)):\n        # if the index is also in the second tuple, add the result of the subtraction to the result list\n        if i in range(len(test_tup2)):\n            result_list.append(test_tup1[i] - test_tup2[i])\n        # if the index is not in the second tuple, add the original element to the result list\n        else:\n            result_list.append(test_tup1[i])\n    # return the result list\n    return result_list"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    \n    # Calculate the sum of even index binomial coefficients\n    sum_even_coeffs = 0\n    for i in range(2, n+1, 2):\n        binomial_coeff = math.comb(n, i)\n        sum_even_coeffs += binomial_coeff\n    \n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize sum of even index binomial coefficients to 0\n    even_sum = 0\n\n    # Calculate the value of k for each term\n    for k in range(1, n+1):\n\n        # Calculate the value of the binomial coefficient for even indices\n        if k % 2 == 0:\n            even_sum += math.comb(n, k)\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n and returns the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial_coeffs = 0\n    for i in range(1, n+1):\n        binomial_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_binomial_coeffs += binomial_coeff\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of the even index binomial coefficients.\n    '''\n    # Use the math module to calculate the even index binomial coefficients\n    coeff_sum = 0\n    for i in range(2, n+1):\n        coeff_sum += math.comb(n, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # initialize sum and coefficient\n    sum = 0\n    coeff = 1\n\n    # loop through even indices\n    for i in range(2, n+1, 2):\n        sum += coeff\n        # calculate next coefficient\n        coeff = coeff * i\n\n    # return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through each index i from 0 to n\n    for i in range(2*n):\n        # If i is even, add its binomial coefficient to the sum\n        if i % 2 == 0:\n            sum += math.comb(n, i//2)\n\n    # Return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    even_binomial_coeffs_sum = 0\n    for i in range(1, n + 1):\n        even_binomial_coeffs_sum += math.comb(i, 2)\n    return even_binomial_coeffs_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum_even_coeffs += math.comb(n, i-1)\n\n    return sum_even_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients for a given positive integer n.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                sum += math.comb(n, i)\n        return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    # Initialize the sum to zero\n    sum_even_index = 0\n    \n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # If the current number is even, add its binomial coefficient to the sum\n        if i % 2 == 0:\n            term = math.comb(n, i)\n            sum_even_index += term\n    \n    return sum_even_index"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r ** 2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume using the formula V = (1/3) * pi * r^2 * h\n    V = (1/3) * 3.14 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * (r ** 2) * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14 * r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume of the cylinder.\n    '''\n    vol = 3.14159 * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14*(r**2)*(h/3)\n    return vol"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and returns a new dictionary with only the entries whose values are greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and an integer n as input and returns a new dictionary containing only the keys and values in the original dictionary that have values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {k:v for k,v in dict.items() if v>=n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i-1] == test_tup[i]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0:\n            if test_tup[i] == test_tup[i-1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i+1]!= test_tup[i]:\n                count += 1\n                if count == 3:\n                    return count\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1]!= test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0 and test_tup[i-1] == test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize counter\n    count = 0\n\n    # Loop through numbers from 1 to 20\n    for i in range(1, 21):\n\n        # If the sum of the square of the number and its square divided by 2 is equal to n, then the number is a decagonal number\n        if i ** 2 + i ** 2 // 2 == n:\n            count += 1\n\n    # If n is a decagonal number, return True\n    if count == 1:\n        return True\n\n    # If n is not a decagonal number, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return ((n * (2 * n - 1)) // 2) ** 2\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_count = 0\n    for i in range(1, n+1):\n        decagonal_count += i * (i+1)\n    return decagonal_count\n\nn = int(input(\"Enter the value of n: \"))\nresult = is_num_decagonal(n)\nprint(\"The\", n, \"th decagonal number is:\", result)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return n * (3 * n - 1) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    a, b = 1, 1\n    num = 1\n\n    # Loop to calculate nth decagonal number\n    for i in range(1, n + 1):\n        # Calculate new number\n        num = (a * (i * (i + 1)) + b) // 2\n        # Update a and b for next iteration\n        a, b = b, num\n\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function will check whether a given number is a decagonal number or not.\n    A decagonal number is the sum of its own digits raised to the power of its position.\n    '''\n\n    # Function to calculate the decagonal number for a given number\n    def calculate_decagonal(n):\n        num_str = str(n)\n        decagonal_num = 0\n\n        # Iterate over the digits of the number and calculate their decagonal value\n        for i in range(len(num_str)):\n            decagonal_num += int(num_str[i]) ** i\n\n        return decagonal_num\n\n    # Check if the number is a decagonal number\n    decagonal_num = calculate_decagonal(n)\n    if n == decagonal_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal_num = 1\n    # Calculate number of rows and columns\n    rows = int(n/2) + 1\n    cols = 2*rows - 1\n    # Loop through each row and column\n    for i in range(rows):\n        for j in range(cols):\n            # If current cell is not on the diagonal, increment the number\n            if not (i == j or i+j == rows-1):\n                decagonal_num += 1\n    # Check if decagonal number is valid\n    if decagonal_num == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize variables\n    decagonal_count = 1\n    current_num = 1\n\n    # Loop through each row of decagonal numbers\n    for i in range(1, n+1):\n        # Loop through each column of the current row\n        for j in range(1, i+1):\n            # Add the current number to the total count\n            decagonal_count += current_num\n            # Move to the next number\n            current_num += 1\n\n    # Check if the nth decagonal number is divisible by 2\n    if decagonal_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return n*(3*n-1)//2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_numbers = [1]\n    for i in range(1, n):\n        for j in range(i):\n            decagonal_numbers.append(decagonal_numbers[j] + decagonal_numbers[j+1])\n    return decagonal_numbers[-1]"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    # Loop through the list to find the item\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            # Found the item, return a tuple with a boolean indicating if it was found and the index position\n            return (True, i)\n\n    # If we make it through the loop without finding the item, return a tuple with a boolean indicating if it was found and -1 for the index position\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    test_dict = {}\n    for element in test_list:\n        if element in test_dict:\n            return False\n        else:\n            test_dict[element] = True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # Create a set to store unique elements of the list\n    unique_set = set()\n\n    # Iterate through the list\n    for element in test_list:\n        # If the element is already present in the set, return False\n        if element in unique_set:\n            return False\n        # Otherwise, add the element to the set\n        else:\n            unique_set.add(element)\n\n    # If the loop completes, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Initialize a set to store unique elements\n    unique_set = set()\n    # Iterate through the list\n    for element in test_list:\n        # If the element is already in the set, return False\n        if element in unique_set:\n            return False\n        # Otherwise, add the element to the set\n        else:\n            unique_set.add(element)\n    # If we get through the loop without finding a duplicate, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item in unique_list:\n            return False\n        unique_list.append(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    return all(x not in seen and seen.add(x) for x in test_list)"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list that contains the element-wise subtraction of the two lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have the same length\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    if len(nums1)!= len(nums2):\n        return \"Both lists must have the same length.\"\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    This function takes an integer and checks if the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Convert the integer to a string\n    num_str = str(n)\n    \n    # Create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    \n    # Loop through each character in the string and add it to the dictionary\n    for char in num_str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Loop through each key in the dictionary and check if the frequency is greater than the digit itself\n    for key, value in freq.items():\n        if value > int(key):\n            print(\"The frequency of\", key, \"is greater than the digit itself.\")\n            return False\n    \n    # If the loop completes without returning False, it means all digits have a frequency that is less than or equal to the digit itself\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # create a dictionary to store the frequency of digits\n    freq = {}\n\n    # loop through each digit in the number\n    for digit in str(n):\n        # if the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # loop through each digit in the number and check if its frequency is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Loop through each digit in the integer\n    for digit in str(n):\n        # Check if the digit is already in the dictionary\n        if digit in freq:\n            # Increment the frequency of the digit by 1\n            freq[digit] += 1\n        # Otherwise, add the digit to the dictionary with a frequency of 1\n        else:\n            freq[digit] = 1\n    \n    # Loop through each digit in the integer again to check its frequency\n    for digit in str(n):\n        # Check if the frequency of the digit is greater than or equal to the digit itself\n        if freq[digit] > digit:\n            # Print a message indicating that the digit is invalid\n            print(f\"{digit} is invalid\")\n            # Return False to indicate that the number is invalid\n            return False\n    \n    # Return True to indicate that the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n\n    for d in freq:\n        if freq[d] > d:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0] * 10\n    # Convert the integer to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Count the frequency of each digit in the list\n    for d in digits:\n        count[d] += 1\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if count[i] > 1 or count[i]!= i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer\")\n\n    # Convert the integer to a string and convert each character to an integer\n    n_str = str(n)\n    n_list = [int(x) for x in n_str]\n\n    # Iterate over each digit in the string and check if it's frequency is less than or equal to itself\n    for digit in n_list:\n        if n_str.count(str(digit)) > 1:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n\n    # Iterate through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # Iterate through each digit in the integer and check if the frequency of the digit is greater than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] < digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    all_same = True\n    for item in list:\n        if item!= element:\n            all_same = False\n            break\n    return all_same"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(elem == element for elem in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        for item in list[1:]:\n            if item!= element:\n                return False\n    return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(lst, ele):\n    '''\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element, and False otherwise.\n    '''\n    if len(lst) == 0:\n        return True\n    elif lst[0] == ele:\n        return check_element(lst[1:], ele)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = r'a[b]{2,3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[^b]*b(?:{2})')\n    match = pattern.search(text)\n    return True if match else False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def text_match_two_three(text):\n    pattern = re.compile(r'a[bB]*[bB]*')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]*b[b]*b'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The string contains the pattern: {}\".format(match.group()))\n    else:\n        print(\"The string does not contain the pattern.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        print('Match found!')\n    else:\n        print('No match found.')"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"a[bB][bB]\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"a[^a]*b[^b]*(?:b(?:[^b]*b)*){2,3}\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b){2,3}')\n    matches = pattern.findall(text)\n    return any(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the sum and maximum sum variables\n    sum_a = sum(a)\n    max_sum = sum_a\n\n    # Loop through each element in the array\n    for i in range(n-1):\n\n        # If the element is greater than the sum, add the element to the sum\n        if a[i] > sum_a:\n            sum_a += a[i]\n        else:\n            # If the sum is greater than the current element, subtract the current element from the sum and add the element to the sum\n            sum_a = a[i] + sum_a - a[i]\n\n        # If the sum is greater than the maximum sum, update the maximum sum\n        if sum_a > max_sum:\n            max_sum = sum_a\n\n    # Loop through each element in the array\n    for i in range(n-1):\n\n        # If the element is greater than the sum, add the element to the sum\n        if a[i] > sum_a:\n            sum_a += a[i]\n        else:\n            # If the sum is greater than the current element, subtract the current element from the sum and add the element to the sum\n            sum_a = a[i] + sum_a - a[i]\n\n        # If the sum is greater than the maximum sum, update the maximum sum\n        if sum_a > max_sum:\n            max_sum = sum_a\n\n    # Return the maximum sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize a new array with repeated elements\n    repeated_a = [a[i] for i in range(n)]\n\n    # Find the maximum subarray sum in the original array\n    max_sum = max(sum(a), sum(repeated_a))\n\n    # Initialize variables to store the maximum subarray sums in the modified array\n    max_sum_a = max_sum_r = 0\n\n    # Loop through all possible starting indices for the repeated array\n    for i in range(k):\n        # Initialize variables to store the maximum subarray sum in the modified array\n        max_sum_a = max_sum_r = 0\n\n        # Loop through all possible ending indices for the repeated array\n        for j in range(n):\n            # Compute the maximum subarray sum in the modified array\n            max_sum_a = max(max_sum_a, max_sum_r + a[j])\n            max_sum_r = max(max_sum_r, max_sum_a - a[j])\n\n        # Update the maximum subarray sum in the original array\n        max_sum = max(max_sum, max_sum_a)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a modified array by repeating the given array k times\n    modified_array = [a[0]] * k\n    for i in range(1, n):\n        modified_array.append(a[i] + modified_array[-1])\n    # initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    # iterate through the modified array\n    for i in range(k):\n        current_sum += modified_array[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n % k!= 0:\n        k = n // k + 1\n    max_sum = float('-inf')\n    temp_sum = 0\n    for i in range(k):\n        temp_sum += a[i]\n    max_sum = max(max_sum, temp_sum)\n    for i in range(n-k):\n        temp_sum = temp_sum - a[i] + a[i+k]\n        max_sum = max(max_sum, temp_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the first k elements of the array\n    first_k_sum = sum(a[:k])\n    # Initialize the maximum sum to be the sum of the first k elements\n    max_sum = first_k_sum\n    # Initialize the sum of the first k elements\n    curr_sum = first_k_sum\n    # Initialize the count of repeated elements to 1\n    count = 1\n    # Traverse the array starting from index k and repeat the process until we reach the end of the array\n    for i in range(k, n):\n        # Calculate the sum of the remaining elements of the array\n        new_sum = a[i] + first_k_sum\n        # Update the count of repeated elements if the new sum is greater than the current sum\n        if new_sum > curr_sum:\n            count += 1\n            curr_sum = new_sum\n        # Update the maximum sum if the new sum is greater than the maximum sum\n        elif new_sum > max_sum:\n            max_sum = new_sum\n        # If the count of repeated elements becomes greater than k, reset the count and the current sum to the previous value\n        if count > k:\n            first_k_sum = curr_sum\n            count = 1\n            curr_sum = first_k_sum + sum(a[k:])\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize a list to store the modified array\n    modified_arr = []\n\n    # Add the first element of the original array\n    modified_arr.append(a[0])\n\n    # Repeat the first element k times\n    for i in range(k-1):\n        modified_arr.append(a[0])\n\n    # Add the remaining elements of the original array to the modified array\n    for i in range(1, n):\n        modified_arr.append(modified_arr[-1] + a[i])\n\n    # Initialize a variable to store the maximum subarray sum\n    max_sum = 0\n\n    # Initialize a variable to store the current subarray sum\n    curr_sum = 0\n\n    # Iterate through the modified array and calculate the maximum subarray sum\n    for i in range(1, len(modified_arr)-1):\n        curr_sum = max(modified_arr[i], curr_sum + modified_arr[i])\n        max_sum = max(max_sum, curr_sum)\n\n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    modified_array = a * k\n    max_sum = max(modified_array)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = a[0]\n    temp_sum = a[0]\n    for i in range(1, n):\n        temp_sum += a[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            temp_sum = a[i]\n        elif i >= k and temp_sum > max_sum:\n            temp_sum = a[i]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # initialize the maximum sum\n    max_sum = float('-inf')\n    \n    # initialize the index of the first array element\n    i = 0\n    \n    # loop through the array n-k times\n    for j in range(n-k):\n        # calculate the sum of the first k elements\n        sum_first_k = sum(a[i:i+k])\n        # calculate the sum of the modified array formed by repeating the first k elements k times\n        modified_sum = k*sum_first_k\n        # update the maximum sum if the modified array is greater than the current maximum sum\n        max_sum = max(max_sum, modified_sum)\n        # move the index to the next element in the array\n        i += 1\n    \n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_list = [0] * (n * k)  # create a list of length n * k to store the sums of the original array and k times of the repeated array\n    max_sum = -float('inf')  # initialize max_sum to negative infinity to handle cases where all the subarrays have the same sum\n    \n    # calculate the sum of the original array and k times of the repeated array\n    for i in range(n):\n        for j in range(k):\n            sum_list[i*k+j] = a[i] + a[i] * (j+1)\n    \n    # loop through the list to find the maximum sum\n    for i in range(n * k):\n        if sum_list[i] > max_sum:\n            max_sum = sum_list[i]\n    \n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0  \n    for i in range(2, n+1, 2):  \n        sum += i*i  \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 2\n    while i <= n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    current_num = 2\n    while current_num <= n:\n        sum_of_squares += current_num ** 2\n        current_num += 2\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length_list:\n            max_length_list = len(list1[i])\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        max_length = max(len(lst), len(max_lengths))\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(sublist)] + [len(elem) for elem in sublist[1:]]\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for i in list1:\n        lengths.append(len(i))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list) or (len(i) == len(max_list) and i < max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for i in list1:\n        max_length = len(i)\n        if max_length not in max_lengths:\n            max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = len(list1[0])\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Find the maximum length of a list of lists.\n\n    Args:\n    - list1 (list[list]): list of lists\n\n    Returns:\n    - int: maximum length of the list of lists\n    \"\"\"\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > max(max_length_list):\n            max_length_list = [len(lst)]\n        elif len(lst) == max(max_length_list):\n            max_length_list.append(len(lst))\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize an empty dictionary to store the number of ways of painting the fence\n    fence_ways = {}\n    \n    # Initialize the number of ways of painting the fence to 1\n    fence_ways[0] = 1\n    \n    # Iterate through all possible lengths of the fence\n    for length in range(1, n + 1):\n        \n        # Calculate the number of ways of painting the fence with the current length\n        ways = (k - 2) * fence_ways[length - 1] + fence_ways[length - 2]\n        \n        # Add the number of ways of painting the fence with the current length to the dictionary\n        fence_ways[length] = ways\n    \n    # Return the number of ways of painting the fence with n posts and k colors\n    return fence_ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways_helper(n, k, count):\n        # Base case: if fence has 0 or 1 posts and k colors, there is only 1 way to paint it\n        if n == 0 or k == 0:\n            count[0] += 1\n            return\n        # Base case: if fence has 2 posts and k colors, there is only 1 way to paint it\n        if n == 2 and k > 0:\n            count[0] += 1\n            return\n        # Recursive case: if fence has more than 2 posts and k colors, there are at most 2 ways to paint it\n        if n > 2 and k > 0:\n            count_ways_helper(n-1, k, count)\n            count_ways_helper(n-2, k-1, count)\n        return\n    \n    count = [0]\n    count_ways_helper(n, k, count)\n    return count[0]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize an array to store the number of ways of painting the fence\n    # with at most 2 adjacent posts having the same color\n    ways = [0] * (k + 1)\n\n    # Initialize the first way as 1\n    ways[0] = 1\n\n    # Fill the remaining ways array by iterating over the range of k+1 (colors)\n    for color in range(1, k + 1):\n        # Initialize a variable to store the number of ways of painting the fence\n        # with at most 2 adjacent posts having the current color\n        current_ways = 0\n\n        # Iterate over the range of n (posts)\n        for post in range(n):\n            # Compute the number of ways of painting the fence with the current color\n            # and the remaining posts\n            current_ways += ways[post]\n\n            # If the current way has already exceeded the limit of 2 adjacent\n            # posts having the same color, update the value of ways[color]\n            if current_ways > ways[color]:\n                ways[color] = current_ways\n\n    # Return the value of ways[k] which represents the number of ways of painting\n    # the fence with at most 2 adjacent posts having the same color\n    return ways[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n    dp = [1] * (n+1)\n    for i in range(2, n+1):\n        dp[i] = 0\n        for j in range(1, i+1):\n            if j <= k:\n                dp[i] += dp[j-1]\n        dp[i] %= 1000000007\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # initialize a dictionary to store the number of ways of painting the fence with n posts and k colors\n    ways = {}\n    for i in range(k+1):\n        ways[(0, i)] = 1 # for the first post, there is only one way to paint it with the first color\n    \n    for i in range(1, n):\n        # for each post after the first, there are 4 possible ways to paint it\n        for j in range(1, k+1):\n            # the first two adjacent posts can be painted with the same color or different colors\n            ways[(i, j)] = ways[(i-1, j)] + ways[(i-1, j-1)]\n            # the third adjacent post can only be painted with the same color\n            ways[(i, j)] += ways[(i-1, j-1)] + ways[(i-1, j-2)]\n    \n    # return the value of the last key in the dictionary, which represents the number of ways of painting the fence\n    return ways[(n-1, k)]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    # Loop from 0 to n-1\n    for i in range(n):\n        # Loop from i+2 to n-1 to avoid duplicate pairs of adjacent posts\n        for j in range(i+2, n):\n            # Check if the adjacent posts have the same color\n            if k == 0:\n                # If k is 0, there can be no adjacent pairs of same color\n                if i+1!= j:\n                    # Increment the count if the adjacent posts have different colors\n                    count += 1\n            else:\n                # If k is not 0, there can be at most k-1 adjacent pairs of same color\n                count += 1\n    # Return the final count of ways of painting the fence\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    ways = [1] * (n + 1)\n    ways[0] = 0\n    ways[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            if ways[j] > 0 and ways[i - j - 1] > 0 and k - (j - 1) >= 0:\n                ways[i] += ways[j] * ways[i - j - 1]\n                k -= j - 1\n    return ways[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # initialize the count variable to zero\n    count = 0\n    \n    # loop through the fence\n    for i in range(n-1):\n        \n        # if the two adjacent posts have different colors, increment the count\n        if fence[i]!= fence[i+1]:\n            count += 1\n            \n    # return the count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Create a list of colors of size k\n    colors = []\n    for i in range(k):\n        colors.append(i)\n\n    # Initialize the matrix to store the number of ways for each number of colors\n    ways = [1] * k\n\n    # Iterate over all possible number of colors\n    for i in range(k, n+1):\n        # Iterate over all possible adjacent pairs\n        for j in range(k):\n            # Check if the colors are different and the adjacent pairs have not been used before\n            if colors[j]!= i-j-1 and ways[j] > 0:\n                # If they are different, assign the color to the second adjacent pair\n                colors[j] = i-j-1\n                ways[j] = 0\n                break\n\n    # Count the number of ways to paint the fence\n    count = 0\n    for way in ways:\n        count += way\n\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n    The problem is to count the number of ways in which we can paint the fence such that the number of colors used for painting is at most k. We can choose either of the adjacent posts to be the same as the current post.\n\n    We can use dynamic programming to solve the problem.\n\n    Time complexity: O(nk)\n    Space complexity: O(nk)\n\n    Args:\n    n: int\n    k: int\n\n    Returns:\n    int: The number of ways of painting the fence.\n    '''\n\n    # Initialize a 2D matrix to store the number of ways of painting the fence\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Base cases\n    dp[0][0] = 1\n    dp[0][1] = 0\n    dp[1][0] = 0\n    dp[1][1] = 1\n\n    # Fill in the remaining values in the matrix\n    for i in range(2, n + 1):\n        for j in range(k + 1):\n            if j >= i:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - i]\n\n    return dp[n][k]\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers n and m as input and returns the quotient of n divided by m rounded down to the nearest integer.\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Find the quotient of two numbers.\n\n    Parameters:\n        n: The first number\n        m: The second number\n\n    Returns:\n        The quotient rounded down to the nearest integer.\n\n    \"\"\"\n\n    # Calculate the quotient\n    q = n // m\n\n    # If the remainder is greater than or equal to 0.5, round up the quotient\n    if n % m >= 0.5:\n        q += 1\n\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    return int(n / m)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # Calculate the length of the third side of the triangle\n    t = math.sqrt(s * (s - w) * (s - h) * (s - w - h))\n    \n    # Return the length of the third side of the triangle\n    return t"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes two arguments: the length of the first and the length of the second side of a right angled triangle. \n    It calculates and returns the length of the third side of the triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculating the semi-perimeter\n    s = (w + h) / 2\n    \n    # calculating the area of the triangle\n    area = math.sqrt(s*(s-w)*(s-h))\n    \n    # calculating the third side\n    third_side = math.sqrt(area)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n\n    Parameters:\n    w (float): the length of the base of the triangle\n    h (float): the length of the height of the triangle\n\n    Returns:\n    float: the length of the other side of the triangle\n    \"\"\"\n    s = (w**2 + h**2)**0.5\n    cosine = (w**2 + h**2 - s**2) / (2 * w * h)\n    return math.sqrt(w**2 - cosine**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes the length of the two sides of a right angled triangle and returns the third side.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = math.sqrt((w**2 + h**2)**2 - w**2)\n    c = a - b\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = math.sqrt(h**2 + w**2)\n    cos_theta = w / a\n    c = (a**2 + b**2 - 2*a*b*cos_theta) ** 0.5\n    \n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Use Heron's formula to calculate the semi-perimeter and its square root\n    s = (w + h) / 2\n    s_sqrt = math.sqrt(s ** 2 - w ** 2 - h ** 2)\n\n    # Use trigonometry to calculate the third side\n    c = math.sqrt(s_sqrt ** 2 - w ** 2)\n    third_side = c / 2\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # use Heron's formula to find the semi-perimeter\n    s = (w**2 + h**2) / 2\n\n    # use the Pythagorean theorem to find the cotangent of the half angle\n    c = math.sqrt(s ** 2 - w ** 2 - h ** 2)\n\n    # use the inverse cosine formula to find the third side\n    return w * (1 - c)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the length of the two sides of the triangle\n    s = math.sqrt(w**2 + h**2)\n    \n    # calculate the third side of the triangle\n    s_sqrt = math.sqrt(s**2 - w**2 - h**2)\n    \n    # return the value of s_sqrt\n    return s_sqrt"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    return side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for num in listval:\n        if max_num is None or num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(lst):\n    '''\n    This function takes a list as input and returns the maximum value in the list.\n    '''\n    # initialize max_val with the first element of the list\n    max_val = lst[0]\n    # loop through the rest of the list\n    for i in lst[1:]:\n        # if the current element is greater than max_val, update max_val\n        if i > max_val:\n            max_val = i\n    # return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        return None\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of mixed data types as input and returns the maximum value in the list.\n    '''\n    # Initialize variables to keep track of the current maximum value and the current data type\n    max_val = None\n    current_val = None\n    \n    # Loop through each element in the list\n    for val in listval:\n        # Check if the current value is greater than the current maximum value\n        if current_val is None:\n            current_val = val\n            max_val = val\n        elif isinstance(val, bool):\n            if val == True:\n                current_val = val\n            else:\n                if current_val > val:\n                    current_val = val\n        elif isinstance(val, int):\n            if current_val < val:\n                current_val = val\n        elif isinstance(val, float):\n            if current_val < val:\n                current_val = val\n        elif isinstance(val, str):\n            if current_val < val:\n                current_val = val\n        elif isinstance(val, list):\n            max_val = max_val(val)\n        elif isinstance(val, tuple):\n            max_val = max_val(val)\n        elif isinstance(val, set):\n            max_val = max_val(list(val))\n        elif isinstance(val, frozenset):\n            max_val = max_val(list(val))\n        elif isinstance(val, dict):\n            max_val = max(max_val(k) for k in val)\n            \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initializing max_val with the first element of the list\n    max_val = listval[0]\n    \n    # iterating over the remaining elements of the list\n    for i in range(1, len(listval)):\n        # checking if the current element is greater than max_val\n        if listval[i] > max_val:\n            # updating max_val with the current element\n            max_val = listval[i]\n    \n    # returning max_val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize variables for maximum value and its index\n    max_val = None\n    max_idx = None\n    \n    # loop through the list and compare each value with the current maximum value\n    for i in range(len(listval)):\n        if max_val is None or listval[i] > max_val:\n            max_val = listval[i]\n            max_idx = i\n            \n    # return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, (list, tuple)):\n        raise TypeError('Input must be a list or tuple')\n    elif not listval:\n        raise ValueError('Input list cannot be empty')\n    else:\n        max_val = listval[0]\n        for val in listval[1:]:\n            if val > max_val:\n                max_val = val\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Find the maximum value using a loop\n    max_val = listval[0]\n    for i in listval[1:]:\n        if i > max_val:\n            max_val = i\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        maxval = listval[0]\n        for i in range(1, len(listval)):\n            if maxval < listval[i]:\n                maxval = listval[i]\n        return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize max value to negative infinity\n    max_val = -float('inf')\n    # Iterate through the list\n    for val in listval:\n        # If the current value is greater than max, update max value\n        if val > max_val:\n            max_val = val\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # Compute the sum of all divisors of the number\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    sum_div = 0\n    \n    while divisor <= number:\n        if number % divisor == 0:\n            sum_div += divisor\n        divisor += 1\n    \n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    # Initialize a variable to store the sum of divisors\n    total_divisors = 0\n\n    # Loop through all numbers from 1 to the square root of the input number\n    for i in range(1, int(number**0.5)+1):\n        # Check if the input number is divisible by i\n        if number % i == 0:\n            # If it is, add i to the total divisors\n            total_divisors += i\n    \n    # Return the total sum of divisors\n    return total_divisors"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Initialize variables\n    n = len(arr)\n    inv_count = 0\n    \n    # Sort the array using merge sort\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left = arr[:mid]\n            right = arr[mid:]\n            \n            merge_sort(left)\n            merge_sort(right)\n            \n            i = j = k = 0\n            \n            while i < len(left) and j < len(right):\n                if left[i] < right[j]:\n                    arr[k] = left[i]\n                    i += 1\n                else:\n                    arr[k] = right[j]\n                    j += 1\n                    inv_count += len(left) - i\n                k += 1\n            \n            while i < len(left):\n                arr[k] = left[i]\n                i += 1\n                k += 1\n            \n            while j < len(right):\n                arr[k] = right[j]\n                j += 1\n                k += 1\n            \n    merge_sort(arr)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - j\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # initialize variables to store the counts of inversions\n    inv_count = 0\n    inv_index = 0\n\n    # sort the array in ascending order\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # swap the elements if they are in the wrong order\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += len(arr) - i - j\n                # move the inversion indices\n                if inv_index < j:\n                    inv_index = j\n\n    # return the final count of inversions\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array. \n    '''\n    n = len(arr) \n  \n    # Sort the array in non-decreasing order \n    arr.sort() \n  \n    # Initialize variables for counting inversions and the count of elements \n    inversion_count = 0 \n    i = 0 \n    j = n - 1 \n  \n    # Traverse the array using two pointers \n    while i < j: \n        # If the element at the left pointer is greater than the element at the right pointer, \n        # increment the inversion count and move the left pointer to the right \n        if arr[i] > arr[j]: \n            inversion_count += j - i + 1 \n            i += 1 \n        # If the element at the left pointer is less than the element at the right pointer, \n        # move the left pointer to the right \n        else: \n            j -= 1 \n  \n    return inversion_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    n = len(arr) \n    # Get the length of the array \n\n    def merge(left, mid, right): \n        # Merge the subarrays \n        i = left \n        j = mid + 1 \n        k = left \n        inv_count = 0 \n        inv_count_temp = 0 \n\n        while i <= mid and j <= right: \n            if arr[i] <= arr[j]: \n                if arr[i] < arr[k]: \n                    inv_count_temp += mid - i + 1 \n                    k = i \n                    i += 1 \n                else: \n                    inv_count_temp += mid - i \n                    i += 1 \n            else: \n                inv_count += mid - j + 1 \n                if arr[j] < arr[k]: \n                    k = j \n                    j += 1 \n                else: \n                    k = j \n                    j += 1 \n\n        while i <= mid: \n            inv_count_temp += mid - i \n            if arr[i] < arr[k]: \n                k = i \n                i += 1 \n            else: \n                inv_count_temp += mid - i + 1 \n                i += 1 \n\n        while j <= right: \n            inv_count_temp += right - j \n            if arr[j] < arr[k]: \n                k = j \n                j += 1 \n            else: \n                inv_count_temp += right - j + 1 \n                j += 1 \n\n        return inv_count_temp, inv_count \n\n    # Sort the array using merge sort \n    i = 1 \n    while i < n: \n        mid = 0 \n        while i + mid < n: \n            mid += mid \n        mid += i \n        if i == mid: \n            mid -= 1 \n\n        # Merge the first i-1 subarrays with the last mid subarray \n        inv_count_temp, inv_count = merge(0, mid, n - 1) \n        inv_count += get_Inv_Count(arr[:mid]) \n        inv_count += get_Inv_Count(arr[mid:]) \n\n        i += 1 \n\n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\ndef get_Inv_Count(arr):\n    arr = merge_sort(arr)\n    inv_count = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            inv_count += merge(arr[i], arr[j])\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array using selection sort\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n    # Traverse the sorted array and calculate inversions\n    for i in range(1, n):\n        inv_count += n - i\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    if n == 1 or n == 2:\n        return 0\n    \n    # Divide the array into two halves\n    mid = n // 2\n    left_inv_count = get_Inv_Count(arr[:mid])\n    right_inv_count = get_Inv_Count(arr[mid:])\n    \n    # Count inversions in each half separately\n    left_count = 0\n    for i in range(mid):\n        for j in range(mid, n):\n            if arr[i] > arr[j]:\n                left_count += 1\n    \n    right_count = 0\n    for i in range(mid, n):\n        for j in range(i, mid):\n            if arr[i] > arr[j]:\n                right_count += 1\n    \n    return left_inv_count + right_inv_count - left_count - right_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    \n    # Counting inversions using merge sort\n    def merge_sort(arr, l, r):\n        if l < r:\n            mid = (l+r)//2\n            merge_sort(arr, l, mid)\n            merge_sort(arr, mid+1, r)\n            merge(arr, l, mid, r)\n    \n    def merge(arr, l, mid, r):\n        i = l\n        j = mid+1\n        k = l\n        inv_count = 0\n        temp = [0]*(r-l+1)\n        while i <= mid and j <= r:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= r:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(l, r+1):\n            arr[i] = temp[i-l]\n            \n    merge_sort(arr, 0, n-1)\n    \n    # Counting inversions using counting sort\n    def counting_sort(arr, l, r):\n        if l < r:\n            max_val = max(arr[l:r+1])\n            temp = [0]*(max_val+1)\n            for i in range(l, r+1):\n                temp[arr[i]] += 1\n            for i in range(1, max_val+1):\n                temp[i] += temp[i-1]\n            for i in range(l, r+1, -1):\n                arr[temp[arr[i]]-1] = arr[i]\n                temp[arr[i]] -= 1\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Initialize variables\n    n = len(arr)\n    inv_count = 0\n    # Calculate the inversions using merge sort algorithm\n    merge_sort(arr, 0, n-1)\n    # Count the inversions\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                inv_count += i - j\n    return inv_count\n\ndef merge_sort(arr, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(arr, low, mid)\n        merge_sort(arr, mid+1, high)\n        merge(arr, low, mid, high)\n\ndef merge(arr, low, mid, high):\n    i = low\n    j = mid + 1\n    k = low\n    inv_count = 0\n    while i <= mid and j <= high:\n        if arr[i] <= arr[j]:\n            arr[k] = arr[i]\n            i += 1\n        else:\n            arr[k] = arr[j]\n            j += 1\n            inv_count += mid - i + 1\n        k += 1\n    while i <= mid:\n        arr[k] = arr[i]\n        i += 1\n        k += 1\n    while j <= high:\n        arr[k] = arr[j]\n        j += 1\n        k += 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a list of lists and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in lst:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Use defaultdict to create a dictionary to store the maximum aggregate and the corresponding date\n    max_agg_dict = defaultdict(lambda: [0, ''])\n    # Loop through the list of tuples and update the max_agg_dict accordingly\n    for date, value in stdata:\n        # If the value is greater than the current max aggregate, update both max_agg_dict and the corresponding date\n        if value > max_agg_dict[date][0]:\n            max_agg_dict[date][0] = value\n            max_agg_dict[date][1] = date\n    # Return the maximum aggregate and the corresponding date\n    return max_agg_dict[max(max_agg_dict, key=lambda x: max_agg_dict[x][0])]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for item in stdata:\n        for key, value in item:\n            max_aggr[key] = max(max_aggr[key], value)\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the aggregate count for each transaction\n    agg_count = defaultdict(int)\n    # iterate through the list of tuples and update the aggregate count\n    for transaction in stdata:\n        agg_count[transaction[0]] += transaction[1]\n    # find the maximum aggregate count in the dictionary\n    max_agg = max(agg_count.values())\n    # return the maximum aggregate count\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)\n    for transaction in stdata:\n        for item, quantity in transaction:\n            agg_dict[item] += quantity\n    max_agg = max(agg_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[1]] += item[0]\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate for each customer\n    max_dict = defaultdict(int)\n\n    # iterate through the list of tuples\n    for customer, amount in stdata:\n        # if the current amount is greater than the current max aggregate for that customer, update it\n        if amount > max_dict[customer]:\n            max_dict[customer] = amount\n\n    # iterate through the max dictionary to find the maximum aggregate\n    max_agg = 0\n    for amount in max_dict.values():\n        if amount > max_agg:\n            max_agg = amount\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from a list of tuples.\n\n    Args:\n    stdata: List of tuples (price, quantity)\n\n    Returns:\n    Maximum aggregate as a float value.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each price\n    max_agg_by_price = defaultdict(float)\n\n    # Iterate over the list of tuples\n    for price, quantity in stdata:\n        # Update the maximum aggregate for that price\n        max_agg_by_price[price] = max(max_agg_by_price[price], price*quantity)\n\n    # Calculate the maximum aggregate by iterating over the defaultdict\n    max_agg = float('-inf')\n    for price in max_agg_by_price:\n        max_agg = max(max_agg, max_agg_by_price[price])\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_dict = defaultdict(int)\n    for item in stdata:\n        max_aggregate_dict[item[0]] += item[1]\n    max_aggregate = max(max_aggregate_dict.values())\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    agg_dict = defaultdict(int)\n\n    for sale, quantity in stdata:\n        agg_dict[sale] += quantity\n        if max_agg < agg_dict[sale]:\n            max_agg = agg_dict[sale]\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for sid, sprice, quantity in stdata:\n        max_dict[sid] = max(max_dict[sid], sprice * quantity)\n    return max(max_dict.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n):\n        first_sum = sum(int(digit) for digit in format(i, '0' + str(n)))\n        last_sum = sum(int(digit) for digit in format((i >> (n - 1)), '0' + str(n)))\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if sum([int(bit) for bit in format(i, 'b').zfill(n)]) == i*2 - sum([int(bit) for bit in format(i, 'b').zfill(n)]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    # Count of binary sequences of length 2n\n    count = 0\n    # Generate all possible binary sequences of length 2n\n    for i in range(2**n, 2**n+2**n):\n        # Get the sum of first n bits\n        first_bits = i >> n\n        # Get the sum of last n bits\n        last_bits = i & ((1 << n) - 1)\n        # If the sum of first n bits is same as the sum of last n bits, increment the count\n        if first_bits == last_bits:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n-1, -1, -1):\n        sum_first_n_bits = sum(int(digit) for digit in bin(i)[2:].zfill(n))\n        sum_last_n_bits = sum(int(digit) for digit in bin(i)[2:].zfill(n))[n:]\n        if sum_first_n_bits == sum_last_n_bits:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, (1 << 2 * n) + 1):\n        for j in range(1, (1 << n) + 1):\n            if i ^ j == (1 << n) - 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        num = bin(i)[2:]\n        if num[:n] == num[-n:]:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize variables\n    count = 0\n    sum_first = 0\n    sum_last = 0\n\n    # Generate all binary sequences of length 2n\n    for i in range(2**n):\n        binary_str = bin(i)[2:]\n        if len(binary_str) < n:\n            # If binary string is shorter than n, pad with 0s to reach length n\n            binary_str = binary_str.zfill(n)\n\n        # Calculate sum of first n bits\n        first_bits = int(binary_str[:n])\n        sum_first += first_bits\n\n        # Calculate sum of last n bits\n        last_bits = int(binary_str[-n:])\n        sum_last += last_bits\n\n        # If sum of first n bits and last n bits is same, increment count\n        if sum_first == sum_last:\n            count += 1\n\n    # Return count of binary sequences with sum of first n bits same as sum of last n bits\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        num = bin(i)[2:].zfill(n)\n        if sum(int(x) for x in num[0:n/2]) == sum(int(x) for x in num[n/2:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n): \n        first_half = bin(i)[2:].zfill(n)  # convert binary to first half (bits 1-n) and pad with zeros if necessary\n        last_half = bin(i)[-2:].zfill(n)  # convert binary to last half (bits n-1) and pad with zeros if necessary\n        if sum(int(digit) for digit in first_half) == sum(int(digit) for digit in last_half): \n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    count = 0\n    seq = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if i + j == 2**2*n:\n                count += 1\n                seq = i\n                break\n            elif i + j > 2**2*n:\n                break\n    return count, seq"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n            max_depth = max(max_depth, dict_depth(value))\n            current_depth -= 1\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    current_depth += 1\n                    max_depth = max(max_depth, dict_depth(item))\n                    current_depth -= 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    # Check if the dictionary is empty\n    if not d:\n        return 0\n    # If the dictionary has only one element, return 1\n    if len(d) == 1:\n        return 1\n    # If the dictionary has more than one element, find the maximum depth of its keys and values\n    max_key_depth = max([dict_depth(key) for key in d])\n    max_value_depth = max([dict_depth(value) for value in d.values()])\n    return 1 + max(max_key_depth, max_value_depth)"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = 1 + dict_depth(v)\n        elif isinstance(v, list):\n            depth = 1 + max([dict_depth(item) for item in v])\n        else:\n            depth = 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    current_depth += 1\n        if current_depth > depth:\n            depth = current_depth\n        current_depth = 0\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = 1 + dict_depth(d[key])\n            max_depth = max(max_depth, depth)\n        else:\n            max_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    elif isinstance(d, list):\n        return 1 + max(dict_depth(v) for v in d)\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for k, v in d.items())"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d, depth=0):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    for value in d.values():\n        if isinstance(value, dict):\n            dict_depth(value, depth+1)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, an array of ranges, and an integer representing the number of rotations.\n    It returns the element at the given index after the specified number of rotations.\n    '''\n    # Initialize the sum and counter\n    sum = 0\n    count = 0\n\n    # Loop through the array and find the sum and count of elements in each range\n    for i in range(len(arr)):\n        if i < ranges[0] or i > ranges[-1]:\n            continue\n        if i in arr:\n            sum += i\n            count += 1\n\n    # Calculate the index of the element in the original array\n    original_index = sum + count + index\n\n    # Check if the element is in the original array\n    if original_index < 0 or original_index >= len(arr):\n        return -1\n\n    # Find the element at the original index after the specified number of rotations\n    for i in range(rotations):\n        original_index -= count\n        if original_index < 0:\n            original_index += len(arr)\n\n    # Return the element at the original index\n    return arr[original_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    n = len(arr)\n    max_val = 0\n    for i in range(n):\n        max_val = max(max_val, arr[i])\n    max_val += 1\n    min_val = max_val\n\n    for r in ranges:\n        min_val = min(min_val, arr[r[0]-1])\n        max_val = max(max_val, arr[r[1]-1])\n\n    for r in rotations:\n        if r[0] == 0:\n            min_val = max(min_val, arr[r[1]-1])\n        else:\n            max_val = min(max_val, arr[r[1]-1])\n\n    while index > 0:\n        index -= 1\n        min_val += 1\n\n    while index < max_val - min_val:\n        if index % (max_val - min_val) == 0:\n            min_val = max(min_val, arr[index//(max_val - min_val)])\n        index += 1\n\n    return arr[index-1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Initialize variables\n    n = len(arr)\n    max_val = arr[0]\n    min_val = arr[0]\n    result = -1\n\n    # Perform rotations\n    for _ in range(rotations):\n        arr.append(arr.pop(0))\n\n    # Traverse the array and find the element at the given index\n    for i in range(n):\n        val = arr[i]\n\n        # Update the min and max values\n        if val > max_val:\n            max_val = val\n        elif val < min_val:\n            min_val = val\n\n        # Check if we've found the element\n        if i == index:\n            result = val\n            break\n\n    # Perform rotations\n    for _ in range(rotations):\n        arr.append(arr.pop(0))\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # initialize the current index and the element to be found\n    current_index = index\n    element_to_find = arr[index]\n\n    # loop for rotations\n    for i in range(rotations) :\n        # find the next index to be rotated to\n        next_index = (current_index + ranges[current_index]) % len(arr)\n        # rotate the element at current index to next index\n        arr[current_index],arr[next_index] = arr[next_index],arr[current_index]\n        # update current index and element to be found\n        current_index = next_index\n\n    # return the element found\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges for rotations, and the number of rotations to be performed.\n    It then finds the element at the given index after performing the required number of rotations.\n    '''\n    # Get the length of the array\n    length = len(arr)\n\n    # Find the number of rotations to be performed\n    rotations = rotations % length\n\n    # Create a list to store the rotated array\n    rotated_arr = []\n\n    # Iterate through the range of rotations\n    for i in range(rotations):\n        # Append the element at index i+index to the rotated array\n        rotated_arr.append(arr[i+index])\n\n    # Iterate through the array from index 0 to index i+index-1\n    for i in range(index):\n        # Append the element at index i to the rotated array\n        rotated_arr.append(arr[i])\n\n    # Iterate through the array from index i+index to the end\n    for i in range(index, length):\n        # Append the element at index i to the rotated array\n        rotated_arr.append(arr[i])\n\n    # Return the element at index 0 of the rotated array\n    return rotated_arr[0]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the number of elements in the given array\n    n = len(arr)\n\n    # Find the position of the element to be rotated in the rotated array\n    pos = find_position(n, rotations, index)\n\n    # Find the element at the given index in the original array\n    element = arr[index]\n\n    # Remove the element at the given index from the original array\n    arr.remove(element)\n\n    # Find the position of the element to be rotated in the original array\n    pos_orig = find_position(n, rotations, pos)\n\n    # Find the element at the given position in the original array\n    element_orig = arr[pos_orig]\n\n    # Insert the element at the given position in the rotated array\n    arr.insert(pos, element)\n\n    # Remove the element at the given position in the original array\n    arr.remove(element_orig)\n\n    # Return the element at the given index in the rotated array\n    return arr[index]\n\n\ndef find_position(n, rotations, index):\n    \"\"\"\n    Find the position of the element at index after rotating by rotations elements.\n    \"\"\"\n    # Calculate the number of elements to be rotated\n    num_elements = n * rotations\n\n    # Return the position of the element after rotating by rotations elements\n    return (index % num_elements) % n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the number of rotations\n    num_rotations = rotations % len(arr)\n\n    # Initialize the element to be found\n    current_element = arr[0]\n\n    # Traverse the array for rotations\n    for i in range(num_rotations):\n        # Find the next element in the array after the current element\n        current_index = (index + i) % len(arr)\n        next_index = (current_index + 1) % len(arr)\n        next_element = arr[next_index]\n\n        # Update the element to be found after the current rotation\n        if i == 0:\n            current_element = next_element\n        else:\n            current_element = next_element - current_element + arr[index]\n\n    # Calculate the element to be found after the last rotation\n    final_index = (index + num_rotations) % len(arr)\n    final_element = arr[final_index]\n\n    # Update the final element to be found after all rotations\n    return current_element - final_element + arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the element at the given index\n    element = arr[index]\n    # Calculate the final index after rotations\n    final_index = (index + rotations) % len(arr)\n    # Check if the element is in the range\n    if ranges[final_index] == 'range':\n        # Find the element in the range\n        start = min(final_index, index)\n        end = max(final_index, index)\n        element = find_Element(arr, ranges, rotations, start)\n        if element in ranges[start:end+1]:\n            return element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    :param arr: A list of elements.\n    :param ranges: A list of dictionaries, where each dictionary has two keys,'start' and 'end', and 'value', which is the element we are searching for.\n    :param rotations: An integer, representing the number of rotations required.\n    :param index: An integer, representing the index of the element we want to find.\n\n    :return: The element at the given index after number of rotations.\n    \"\"\"\n\n    # Store the original index\n    original_index = index\n\n    # Initialize the index variable\n    current_index = index\n\n    # Loop through the rotations and find the element\n    for _ in range(rotations):\n        # Loop through the ranges and check if the current index is within the range\n        for range_ in ranges:\n            if current_index >= range_[\"start\"] and current_index <= range_[\"end\"]:\n                # If the current index is within the range, we have found the element\n                return range_[\"value\"]\n        # If we have made it through all the ranges without finding the element, we need to rotate the array\n        arr = arr[::-1]\n        # Update the current index to the last element of the array\n        current_index = len(arr) - 1\n        # If the current index is greater than or equal to the original index, we have found the element\n        if current_index >= original_index:\n            return arr[original_index]\n\n    # If we have made it through all the rotations without finding the element, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Calculate the total number of rotations required\n    total_rotations = sum(rotations)\n\n    # Get the range of the element at the given index\n    element_range = ranges[index]\n\n    # Get the element at the given index\n    element = arr[element_range[0]]\n\n    # Check if the element needs to be rotated\n    if total_rotations > 0:\n        # Get the current index\n        current_index = element_range[0]\n\n        # Calculate the distance between the current index and the index to be found\n        distance = (current_index - index) % total_rotations\n\n        # If the distance is greater than or equal to the total rotations, wrap around to the beginning of the array\n        if distance >= total_rotations:\n            distance = distance - total_rotations\n\n        # Calculate the new index after the rotation\n        new_index = (current_index - distance) % len(arr)\n\n        # Calculate the new range of the element at the new index\n        new_range = ranges[new_index]\n\n        # Get the element at the new index\n        new_element = arr[new_range[0]]\n\n        # Return the new element\n        return new_element\n    else:\n        # If no rotations are required, return the element at the given index\n        return arr[element_range[0]]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p.*') # regular expression pattern to match words starting with 'p'\n    p_words = [word for word in words if pattern.match(word)] # filter the words based on the pattern\n    \n    if len(p_words) == 2: # check if there are exactly 2 words that match the pattern\n        return p_words # return the two words that match the pattern\n    else:\n        return 'No words starting with \"p\" were found in the list.' # otherwise, return a message that no words were found"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if matches:\n        return matches[0], matches[1]\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0].lower() == 'p']\n    \n    if len(p_words) == 0:\n        return None\n    \n    return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = re.findall(pattern, words)\n    if len(matches) >= 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\b[Pp][a-zA-Z]+\\b',''.join(words))\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return words[i], words[i-1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+') # regex pattern to match words starting with 'p'\n    for word in words:\n        if pattern.match(word):\n            return word, pattern.sub('', word) # return the two words that match the pattern\n    return None # return None if no words match the pattern"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r'p[a-z]*'\n    matches = re.findall(pattern, words)\n    if len(matches) < 2:\n        return None\n    return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Regular expression pattern to match words starting with letter 'p'\n    pattern = re.compile(r'^p\\w+')\n    \n    # Find the two words starting with letter 'p' in the list of words\n    result = [word for word in words if pattern.match(word)]\n    \n    # Return the two words starting with letter 'p'\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = r\"^[pP][a-zA-Z]*\"\n    return re.findall(pattern, words)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n - 1:  # if index is at the last element\n        if a[index] >= a[k]:  # if the current element is greater than or equal to the k-th element\n            return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n        else:  # if the current element is less than the k-th element\n            return max_sum_increasing_subseq(a, n, index + 1, k)\n    else:  # if index is not at the last element\n        if a[index] < a[k]:  # if the current element is less than the k-th element\n            return max_sum_increasing_subseq(a, n, index + 1, k)\n        else:  # if the current element is greater than or equal to the k-th element\n            return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k),\n                       max_sum_increasing_subseq(a, n, index + 1, k))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    :param a: input array\n    :param n: length of array\n    :param index: current index\n    :param k: kth element after current index\n    :return: maximum sum of increasing subsequence\n    \"\"\"\n\n    # Create a list to store the previous element of increasing subsequence\n    prev = [-1] * (n + 1)\n\n    # Initialize maximum sum of increasing subsequence\n    max_sum = float('-inf')\n\n    # Initialize maximum sum of increasing subsequence ending at current index\n    curr_sum = 0\n\n    # Traverse through the array\n    for i in range(index, n + 1):\n\n        # If the current element is greater than k or current index is greater than i, skip it\n        if i == index or a[i] > k or i > index:\n            continue\n\n        # Calculate the maximum sum of increasing subsequence ending at the previous element of increasing subsequence\n        temp = max_sum_increasing_subseq(a, n, index, k)\n\n        # Calculate the maximum sum of increasing subsequence ending at the current element\n        temp_curr = curr_sum + a[i]\n\n        # Update the maximum sum of increasing subsequence\n        max_sum = max(max_sum, temp_curr)\n\n        # Update the maximum sum of increasing subsequence ending at the current element\n        curr_sum = temp_curr\n\n        # Update the previous element of increasing subsequence\n        prev[i] = prev[i - 1]\n\n    # Calculate the maximum sum of increasing subsequence ending at the last element of increasing subsequence\n    max_sum = max(max_sum, curr_sum)\n\n    # Initialize maximum sum of increasing subsequence from index to k\n    max_sum_k = 0\n\n    # Traverse through the array from index to k\n    for i in range(index, k + 1):\n\n        # Calculate the maximum sum of increasing subsequence ending at the previous element of increasing subsequence from index to k\n        temp = max_sum_increasing_subseq(a, n, index, k)\n\n        # Calculate the maximum sum of increasing subsequence ending at the current element from index to k\n        temp_curr = curr_sum + a[i]\n\n        # Update the maximum sum of increasing subsequence from index to k\n        max_sum_k = max(max_sum_k, temp_curr)\n\n        # Update the maximum sum of increasing subsequence ending at the current element from index to k\n        curr_sum = temp_curr\n\n    # Calculate the maximum sum of increasing subsequence from index to k\n    max_sum_k = max(max_sum_k, curr_sum)\n\n    # Return the maximum sum of increasing subsequence from index to k\n    return max_sum_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:  # base case\n        return 0\n\n    if index == k:  # kth element is included in increasing subsequence\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n\n    max_so_far = max_sum_increasing_subseq(a, n, index + 1, k)  # not including kth element\n\n    for i in range(index + 1, n):\n        if a[i] > a[index]:  # including kth element\n            max_so_far = max(max_so_far, a[i] + max_sum_increasing_subseq(a, n, i + 1, k))\n\n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    current_subseq = [0]\n    # Loop through the array\n    for i in range(index, n):\n        # Add the current element to the current subsequence\n        current_subseq.append(a[i])\n        # Check if the current subsequence has more than k elements after i\n        if len(current_subseq) > k:\n            # Remove the first element of the current subsequence\n            current_subseq.pop(0)\n        # Calculate the sum of the current subsequence\n        current_sum = sum(current_subseq)\n        # Update the maximum sum if the sum is greater than the current maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * (n+1)\n    max_sum = 0\n    \n    for i in range(index, n):\n        if a[i] <= a[k]:\n            continue\n        j = i\n        while j < n and a[j] <= a[k]:\n            j += 1\n        dp[i+1] = max(dp[i+1], dp[j] + a[i])\n        max_sum = max(max_sum, dp[i+1])\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes an array a, its length n, an index i, and a kth element which is after i, and returns the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    The function uses dynamic programming to solve the problem.\n\n    Complexity Analysis:\n    Time Complexity: O(n^2).\n    The function iterates through the array once, so the time complexity is linear.\n    Space Complexity: O(n).\n    The function uses a dictionary to store intermediate results, so the space complexity is linear.\n    \"\"\"\n\n    # Initialize the sum of increasing subsequences for all indices\n    dp = [0] * (n + 1)\n\n    # Initialize the maximum sum of increasing subsequences\n    max_sum = 0\n\n    # Loop through all indices from 1 to n\n    for i in range(1, n + 1):\n\n        # Initialize the sum of increasing subsequences for the current index\n        curr_sum = 0\n\n        # Loop through all indices from 1 to i - 1 to find the maximum sum of increasing subsequence ending at the i-th index\n        for j in range(1, i + 1):\n\n            # If the j-th element is less than or equal to k, then the sum of increasing subsequence from j to i is equal to the sum of increasing subsequence from j to i - 1 plus the value of the j-th element\n            if j <= k:\n                curr_sum = dp[j - 1] + a[j - 1]\n\n            # Update the maximum sum of increasing subsequences if the current sum is greater than the current maximum sum\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n\n        # Update the sum of increasing subsequences for the i-th index in the dictionary\n        dp[i] = curr_sum\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # initialize maximum sum as 0\n    max_sum = 0\n\n    # initialize current sum as 0\n    curr_sum = 0\n\n    # initialize prefix sum as 0\n    prefix_sum = 0\n\n    # loop through all elements from 1 to n-1\n    for i in range(1, n):\n        # if current element is greater than k\n        if a[i] > k:\n            # if current element is greater than k, we need to find the maximum sum of increasing subsequence from prefix until i-1, and include the current element k\n            if curr_sum + a[i] > prefix_sum + a[i]:\n                prefix_sum += a[i]\n                curr_sum += a[i]\n            # if current element is less than or equal to k, we need to find the maximum sum of increasing subsequence from prefix until i-1, and exclude the current element k\n            else:\n                prefix_sum += a[i] - a[k]\n                curr_sum += a[i] - a[k]\n\n        # if current element is not greater than k\n        else:\n            # if current element is greater than a[i], we need to find the maximum sum of increasing subsequence from prefix until i-1, and include the current element a[i]\n            if curr_sum + a[i] > prefix_sum + a[i]:\n                prefix_sum += a[i]\n                curr_sum += a[i]\n            # if current element is less than a[i], we need to find the maximum sum of increasing subsequence from prefix until i-1, and exclude the current element a[i]\n            else:\n                prefix_sum += a[i] - a[i]\n                curr_sum += a[i] - a[i]\n\n        # if current sum is greater than max_sum, update max_sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize max_sum to the first element in the array\n    max_sum = a[index]\n\n    # Initialize dp array to store the maximum sum of increasing subsequence until the ith index\n    dp = [0] * n\n\n    # Initialize max_sum_k to the first element in the array\n    max_sum_k = a[k]\n\n    # Initialize dp_k array to store the maximum sum of increasing subsequence including the kth element\n    dp_k = [0] * n\n\n    # Fill the dp array using the Fibonacci formula\n    dp[index] = max_sum\n    for i in range(index - 1, -1, -1):\n        dp[i] = max(dp[i + 1], a[i] + dp[i])\n\n    # Fill the dp_k array using the Fibonacci formula\n    dp_k[k] = max_sum_k\n    for i in range(k - 1, -1, -1):\n        dp_k[i] = max(dp_k[i + 1], a[i] + dp_k[i])\n\n    # Initialize max_sum_prev to the first element in the array\n    max_sum_prev = a[k]\n\n    # Initialize i to the ith index\n    i = index\n\n    # Initialize max_sum_prev_i to the maximum sum of increasing subsequence including the ith index\n    max_sum_prev_i = dp_k[i]\n\n    # Initialize current_sum_prev_i to the first element in the array\n    current_sum_prev_i = a[i]\n\n    # Iterate until we reach the 0th index\n    while i > 0:\n        # If the current element in the array is less than the kth element, then it can only be included in the increasing subsequence if its value is greater than the current sum of increasing subsequence including the kth element\n        if a[i] < max_sum_k:\n            # Update the current sum of increasing subsequence including the ith element and the ith index\n            current_sum_i = a[i] + dp[i]\n\n            # Update the maximum sum of increasing subsequence including the ith element and the ith index\n            if current_sum_i > max_sum_prev_i:\n                max_sum_prev_i = current_sum_i\n                max_sum_prev = a[i]\n        else:\n            # Update the maximum sum of increasing subsequence including the ith element and the ith index\n            if dp_k[i - 1] > max_sum_prev_i:\n                max_sum_prev_i = dp_k[i - 1]\n                max_sum_prev = a[i - 1]\n\n        # Decrement the ith index\n        i -= 1\n\n    # Return the maximum sum of increasing subsequence including the ith index\n    return max_sum_prev_i"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize max_sum as negative infinity\n    max_sum = float('-inf')\n    # Initialize prefix array\n    prefix = []\n    # Initialize max_sum_k as negative infinity\n    max_sum_k = float('-inf')\n    # Traverse from 0 to n-1\n    for i in range(n):\n        # If current element is smaller than or equal to k, update max_sum_k\n        if i <= k:\n            max_sum_k = max(max_sum_k, a[i])\n        # If current element is greater than k, then update prefix array\n        if i > k:\n            prefix.append(a[i-1] + prefix[-1])\n        # Update max_sum if current element is greater than max_sum_k, and if sum of prefix up to current index is greater than max_sum\n        if a[i] > max_sum_k and sum(prefix) > max_sum:\n            max_sum = sum(prefix)\n    # Return max_sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        raise ValueError(\"k must be less than or equal to index\")\n    dp = [0] * n\n    max_sum = 0\n    for i in range(index, n):\n        dp[i] = max(dp[i], a[i])\n        if i < k:\n            dp[i] += dp[i-1]\n        if i-1 >= 0:\n            dp[i] += dp[i-1] - dp[k-1]\n        if i >= index and dp[i] > max_sum:\n            max_sum = dp[i]\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    This function takes a tuple and returns a copy of the tuple where each element\n    is repeated n times. The elements are repeated in the order specified by the\n    tuple's length.\n\n    For example:\n    (1, 2, 3, 4) -> (1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4)\n    \"\"\"\n    new_tuplex = deepcopy(tuplex)\n    for i in range(len(new_tuplex)):\n        for j in range(m):\n            new_tuplex[i] = new_tuplex[i][:j] + new_tuplex[i][j:j+1] * n + new_tuplex[i][j+1:]\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a deepcopy of the tuple\n    colon = deepcopy(tuplex)\n    # get the length of the tuple\n    length = len(colon)\n    # check if the tuple is empty\n    if length == 0:\n        return []\n    # check if the tuple is a 2-dimensional tuple\n    elif length == m and isinstance(tuplex[0], tuple):\n        # loop through each element of the tuple\n        for i in range(length):\n            # get the ith element\n            element = tuplex[i]\n            # check if the element is a 2-dimensional tuple\n            if isinstance(element, tuple):\n                # loop through each element of the inner tuple\n                for j in range(len(element)):\n                    # get the jth element of the inner tuple\n                    sub_element = element[j]\n                    # insert the sub_element in the colon at position (i,j)\n                    colon.insert(i*m+j, sub_element)\n            else:\n                # if the element is not a 2-dimensional tuple, insert it in the colon at position (i,0)\n                colon.insert(i*m, element)\n        # return the colon as a 2-dimensional tuple\n        return tuple(colon)\n    # if the tuple is not a 2-dimensional tuple, return an empty list\n    else:\n        return []"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    for i in range(len(tuplex)):\n        tuplex_copy[i] = (tuplex[i][0],tuplex[i][1])\n    colon = [tuplex_copy[i:i+m] for i in range(0,len(tuplex_copy),m)]\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Define a function to copy the original tuple and modify it\n    def modify_tuplex(t):\n        new_tuplex = deepcopy(t)\n        new_tuplex[m] = new_tuplex[m][:n] + (new_tuplex[m][n],)\n        return new_tuplex\n\n    # Create a new tuple by applying the modify_tuplex function to the original tuple\n    return modify_tuplex(tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Check if the input is a tuple\n    if not isinstance(tuplex, tuple):\n        return \"Error: The input is not a tuple.\"\n    \n    # Check if the input has at least m elements\n    if len(tuplex) < m:\n        return \"Error: The input tuple has less than m elements.\"\n    \n    # Check if the input has n elements\n    if len(tuplex) > n:\n        return \"Error: The input tuple has more than n elements.\"\n    \n    # Copy the input tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # Get the first m elements of the tuple\n    first_m_elements = tuple(new_tuplex[:m])\n    \n    # Get the last n elements of the tuple\n    last_n_elements = tuple(new_tuplex[-n:])\n    \n    # Concatenate the first m elements and the last n elements\n    colon_tuple = first_m_elements + last_n_elements\n    \n    # Return the colon tuple\n    return colon_tuple"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    tuplex (tuple): A tuple.\n    m (int): The number of rows in the colon.\n    n (int): The number of columns in the colon.\n\n    Returns:\n    A colon of the input tuple as a new tuple.\n    \"\"\"\n\n    # Create a copy of the input tuple to avoid modifying the original\n    colontuple = deepcopy(tuplex)\n\n    # Calculate the length of the colon\n    colonlen = m * n\n\n    # Fill the colon with the first m elements of the tuple\n    for i in range(m):\n        colontuple[i] = tuplex[i]\n\n    # Fill the remaining elements of the colon with the last n-m elements of the tuple\n    for i in range(m, colonlen):\n        colontuple[i] = tuplex[i-m]\n\n    # Return the colon as a new tuple\n    return tuple(colontuple)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i:i+m] for i in range(0, len(tuplex), n))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuplex and returns a colon of size m x n.\n    '''\n    if len(tuplex) == 0:\n        return []\n    else:\n        # create a copy of the tuplex\n        new_tuplex = deepcopy(tuplex)\n        # reverse the new tuplex\n        new_tuplex = new_tuplex[::-1]\n        # create a list to store the colon\n        colon = []\n        # iterate through the new tuplex\n        for i in range(m):\n            # create a new list to store the row of the colon\n            row = []\n            # iterate through the n elements in the new tuplex\n            for j in range(n):\n                # check if the index is within the range of the tuplex\n                if i < len(new_tuplex) and j < len(new_tuplex[i]):\n                    # if it is, append the element to the row list\n                    row.append(new_tuplex[i][j])\n                else:\n                    # if it's outside the range of the tuplex, append None\n                    row.append(None)\n            # append the row list to the colon list\n            colon.append(row)\n        # return the colon list\n        return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Get the length of the input tuple\n    length = len(tuplex_copy)\n    \n    # If m is greater than length, return None\n    if m > length:\n        return None\n    \n    # Check if m and n are valid indices for the input tuple\n    if m >= n:\n        return None\n    \n    # Get the length of the colon to be returned\n    colon_length = n - m\n    \n    # Create an empty list to store the colon\n    colon = []\n    \n    # Iterate over the range of indices from m to n (inclusive)\n    for i in range(m, n+1):\n        # Add the i-th element of the input tuple to the colon\n        colon.append(tuplex_copy[i-1])\n        \n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # copy the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # initialize a list to store the colon\n    colon = []\n    # iterate through the rows of the tuple\n    for i in range(m):\n        # iterate through the columns of the tuple\n        for j in range(n):\n            # append the element to the colon list\n            colon.append(tuplex_copy[i][j])\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both input lists must have the same length.')\n    if N > len(nums1) * len(nums2):\n        raise ValueError('The specified number of largest products cannot be greater than the product of the lengths of the input lists.')\n\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    largest_products = []\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[len(nums1) - i - 1] * nums2[len(nums2) - i - 1]\n        largest_products.append(max(product1, product2))\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the largest number in each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n\n    # Initialize the variables to keep track of the largest products\n    largest1 = float('-inf')\n    largest2 = float('-inf')\n    largest3 = float('-inf')\n\n    # Iterate through the numbers in the lists and find the products of each factor\n    for i in range(len(nums1)):\n        product1 = nums1[i] * max1\n        product2 = nums2[i] * max2\n        product3 = nums1[i] * nums2[i]\n\n        if product1 > largest1:\n            largest1 = product1\n            largest2 = product2\n            largest3 = product3\n\n        if product1 > largest2:\n            largest2 = product1\n            largest1 = product2\n            largest3 = product3\n\n        if product2 > largest2:\n            largest2 = product2\n            largest1 = product1\n            largest3 = product3\n\n        if product3 > largest3:\n            largest3 = product3\n            largest1 = product1\n            largest2 = product2\n\n    # Sort the largest products and return the specified number of them\n    largest_products = [largest1, largest2, largest3]\n    largest_products.sort(reverse=True)\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the input lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the products and indices\n    products = []\n    indices = []\n\n    # Loop through the sorted lists\n    for i in range(len(nums1)):\n        # Calculate the product of the current factor of each list\n        product = nums1[i] * nums2[i]\n\n        # Check if the product is already in the list\n        if product not in products:\n            # If not, add it to the list and its index\n            products.append(product)\n            indices.append((i, 0))\n\n    # Loop through the sorted lists again to find the largest N products\n    for i in range(len(nums1)):\n        # Calculate the product of the current factor of each list\n        product = nums1[i] * nums2[i]\n\n        # If the product is in the list, find the index in the original list and decrement the count\n        for j in range(len(products)):\n            if products[j] == product:\n                indices[j] = (indices[j][0], indices[j][1] - 1)\n                break\n\n        # If the count reaches zero, remove the product from the list and break out of the loop\n        if indices[j][1] == 0:\n            products.remove(product)\n            break\n\n    # Return the N largest products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value in nums1 and nums2\n    max1 = max(nums1)\n    max2 = max(nums2)\n    \n    # Initialize the result list with zeros\n    result = [0] * N\n    \n    # Iterate over the range of N and select the largest product from each list\n    for i in range(N):\n        # If the product is larger than the maximum value in nums1 and nums2, add it to the result list\n        if nums1[i] * nums2[i] > max1 * max2:\n            result[i] = nums1[i] * nums2[i]\n        \n        # If the product is smaller than the maximum value in nums1 or nums2, add the maximum value in that list to the result list\n        elif nums1[i] * nums2[i] < max1 * max2:\n            result[i] = max(nums1[i], nums2[i])\n        \n        # If the product is equal to the maximum value in both nums1 and nums2, add the larger of the two values to the result list\n        else:\n            result[i] = max(nums1[i], nums2[i])\n    \n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    # Initialize the max_product variables\n    max_product1 = 0\n    max_product2 = 0\n\n    # Iterate through the lists and find the maximum product for each list\n    for num1 in nums1:\n        for num2 in nums2:\n            current_product = num1 * num2\n            if current_product > max_product1:\n                max_product1 = current_product\n\n            if current_product > max_product2:\n                max_product2 = current_product\n\n    # Return the maximum product\n    return max(max_product1, max_product2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                current_product = max(nums1[i], nums2[j]) * min(nums1[i], nums2[j])\n                if current_product > max_product:\n                    max_product = current\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Find the maximum of the two lists\n    max_num = max(max(nums1), max(nums2))\n\n    # Initialize the result list with zeros\n    result = [0] * N\n\n    # Iterate over all possible subsets of the two lists\n    for i in range(1, max_num+1):\n        # Compute the product of the subsets\n        prod = 1\n        for j in range(len(nums1)):\n            prod *= nums1[j]\n            if i & (1 << j):\n                prod *= nums2[j]\n        # Keep track of the largest product found so far\n        if prod > result[-1]:\n            result[-1] = prod\n\n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Initialize variables to store the maximum and minimum values in the two lists\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    # Loop through the two lists and update the maximum and minimum values\n    for num1, num2 in zip(nums1, nums2):\n        max1 = max(num1, num2, max1)\n        min1 = min(num1, num2, min1)\n        \n    # Loop through the two lists again and update the maximum and minimum values\n    for num1, num2 in zip(nums1, nums2):\n        max2 = max(num1 * num2, max1 * num2, max2)\n        min2 = min(num1 * num2, min1 * num2, min2)\n        \n    # Sort the two lists based on the maximum value\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Return the desired number of largest products\n    return nums1[:N], nums2[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the given lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the largest products\n    largest_product1 = nums1[-1] * nums2[-1]\n    largest_product2 = nums1[-1] * nums2[-2]\n    largest_product3 = nums2[-1] * nums1[-2]\n\n    # Find the largest products for N elements\n    largest_products = [largest_product1, largest_product2, largest_product3]\n    for i in range(2, N):\n        next_largest = max(largest_product1 * nums1[i-1], largest_product2 * nums2[i-1], largest_product3 * nums1[i-2])\n        largest_products.append(next_largest)\n        largest_product1 = largest_product2\n        largest_product2 = largest_product3\n        largest_product3 = next_largest\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Check if the length of the lists is correct\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    \n    # Initialize variables for the largest products\n    max_product1 = nums1[0]\n    max_product2 = nums2[0]\n    \n    # Find the largest product of the two lists\n    for i in range(1, len(nums1)):\n        if nums1[i] > max_product1:\n            max_product1 = nums1[i]\n        if nums2[i] > max_product2:\n            max_product2 = nums2[i]\n    \n    # Check if the number of desired products is greater than the length of the lists\n    if N > len(nums1):\n        raise ValueError(\"The number of desired products must be less than or equal to the length of the lists.\")\n    \n    # Initialize variables for the index of the largest products\n    index1 = 0\n    index2 = 0\n    \n    # Find the largest products among the two lists\n    for i in range(N):\n        # Calculate the product of the largest products found so far\n        product1 = max_product1 * nums1[index1]\n        product2 = max_product2 * nums2[index2]\n        \n        # Check if the current product is greater than the maximum found so far\n        if product1 > max_product1:\n            max_product1 = product1\n            index1 = i\n        if product2 > max_product2:\n            max_product2 = product2\n            index2 = i\n    \n    return max_product1, max_product2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns the maximum number.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:   \n        print(\"The maximum of\",a,\"and\",b,\"is\",a)   \n    else:   \n        print(\"The maximum of\",a,\"and\",b,\"is\",b)   "
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    This function takes two numbers as input and returns their maximum value.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a)\n    else:\n        print(b)"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list of characters to a tuple of characters\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Convert the integer to binary string\n    bin_str = bin(n)[2:]\n    # Iterate over the binary string from right to left\n    for i in range(len(bin_str)-1, -1, -1):\n        if bin_str[i] == '0':\n            # Set the leftmost unset bit to 1\n            bin_str = bin_str[:i] + '1' + bin_str[i+1:]\n            break\n    # Convert the binary string back to an integer\n    return int(bin_str, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    # Convert n to binary representation\n    binary_representation = bin(n)[2:]\n\n    # Initialize an empty string to store the binary representation with the left most unset bit set\n    binary_representation_with_unset_bit_set = ''\n\n    # Iterate through the binary representation and set the left most unset bit to 1\n    for i in range(len(binary_representation)):\n        if binary_representation[i] == '0':\n            binary_representation_with_unset_bit_set += '1'\n        else:\n            binary_representation_with_unset_bit_set += '0'\n\n    # Convert the binary representation with the left most unset bit set back to an integer\n    return int(binary_representation_with_unset_bit_set, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in the binary representation of a given number n.\n    \"\"\"\n    # Convert the given number to binary representation\n    bin_n = bin(n)[2:]\n    # Iterate over the bits of the binary representation\n    for i in range(len(bin_n)):\n        # If a bit is not set, set it and break out of the loop\n        if bin_n[i] == '0':\n            bin_n = bin_n[:i] + '1' + bin_n[i+1:]\n            break\n    # Convert the binary representation back to an integer\n    result = int(bin_n, 2)\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the number to binary and split it into two parts:\n    # First part is all the ones, second part is all the zeros.\n    # For example, 1010101010101010101010101010101010101010101010101010101010101010 is\n    # 00000000000000000000000000000000000000000000000000000000000010101010\n    # 101010101010101010101010101010101010101010101010101010101010101010101010\n    binary = bin(n)[2:]\n    # Split the binary string into two parts:\n    # First part is all the ones, second part is all the zeros.\n    # For example, 0000000000000000000000000000000000000000000000000000000000000010101010\n    # 101010101010101010101010101010101010101010101010101010101010101010101010\n    ones, zeros = binary.split('0')\n    # Combine the two parts back into a binary string.\n    new_binary = ones + '0'\n    # Convert the binary string back to an integer.\n    new_int = int(new_binary, 2)\n    # Return the new integer.\n    return new_int"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n % 2 == 0:\n        n //= 2 # divide by 2 if there's an even bit at leftmost position\n    n |= 1 # set the leftmost unset bit to 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    while n & 1 == 0:\n        n >>= 1\n\n    n |= 1\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit in a given number.\n    \"\"\"\n    # Find the position of the first set bit\n    while n & 1 == 0:\n        n >>= 1\n    return n << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the index to the left of the first set bit\n    index = 0\n    # Initialize the count of set bits\n    count = 0\n    # Iterate through each bit in the binary representation of n\n    for i in range(32):\n        # If the current bit is set, increment the count and move on to the next bit\n        if (n >> i) & 1 == 1:\n            count += 1\n            continue\n        # If the current bit is not set, check if the leftmost unset bit is at the current index\n        if count == 0:\n            return index\n        # Increment the index and reset the count to 0\n        index += 1\n        count = 0\n    # If we get here, the last bit was set to 1 and is the leftmost unset bit\n    return index"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to keep track of the unset bits\n    unset_bits = 0\n    # Iterate through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is '0', set the unset_bits variable\n        if bit == '0':\n            unset_bits = 1\n            # Exit the loop since there can only be one unset bit\n            break\n    # Calculate the leftmost unset bit by shifting the unset_bits variable left by 1\n    left_most_unset_bit = unset_bits << 1\n    # Return the leftmost unset bit\n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while i < 32 and (n & (1 << i)):\n        i += 1\n    return i"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume of the cone\n    V = math.pi * r**2 * h\n    # return the volume of the cone\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r*r*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n\n    Parameters:\n    r (float): the radius of the cone\n    h (float): the height of the cone\n\n    Returns:\n    float: the volume of the cone\n    \"\"\"\n\n    # Formula for volume of a cone\n    V = math.pi * r**2 * h\n\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in the radius and height of a cone, and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone with given base radius and height.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cone(r, h):\n    \"\"\"\n    Calculates the volume of a cone given its base radius and height.\n\n    Parameters:\n    r (float): the base radius of the cone\n    h (float): the height of the cone\n\n    Returns:\n    float: the volume of the cone\n    \"\"\"\n\n    # The formula for the volume of a cone is:\n    # V = 1/3 * \u03c0 * r^2 * h\n    # where \u03c0 is the mathematical constant pi\n    volume = (1 / 3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of the cone\n    V = (1/3) * math.pi * r**2 * h\n    \n    # Return the volume\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n\n    # find the next power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 \n    that is less than or equal to n.\n    '''\n\n    # Initialize the variable result to 1\n    result = 1\n\n    # Loop until the result is greater than or equal to n\n    while result >= n:\n\n        # Increment the result by 1\n        result += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 1\n    while highest_power_of_2 < n:\n        highest_power_of_2 <<= 1\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        n = n >> 1\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        if n & (n - 1) == 0:\n            return n\n        n = n >> 1\n    return 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function takes an integer as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # initialize the variable to store the highest power of 2\n    highest = 0\n\n    # loop through the numbers from 2 to n\n    for i in range(2, n+1):\n        # if the current number is a power of 2\n        if i & (i-1) == 0:\n            # update the highest power of 2 if necessary\n            if i > highest:\n                highest = i\n\n    # return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    \n    # initialize the highest power of 2 to be 1\n    highest_power_of_2 = 1\n    \n    # loop through the range of powers of 2 from 1 to n-1\n    for i in range(1, n):\n        # check if the current power of 2 is less than or equal to the current highest power of 2\n        if 2**i <= highest_power_of_2:\n            # if not, update the highest power of 2 to be the current power of 2\n            highest_power_of_2 = 2**i\n    \n    # return the highest power of 2 found\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n\n    Args:\n    n (int): a positive integer\n\n    Returns:\n    int: the highest power of 2 that is less than or equal to n\n    \"\"\"\n    # Check if n is a positive integer\n    if n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the variable to store the result\n    result = 0\n\n    # Loop while n is greater than 1\n    while n > 1:\n        # If n is a power of 2, increment the result by 1 and divide n by 2\n        if n & 1 == 0:\n            result += 1\n            n //= 2\n        # If n is not a power of 2, divide n by 2\n        else:\n            n //= 2\n\n    # Return the result\n    return result"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    \"\"\"\n    This function finds then'th Lucas number.\n    \"\"\"\n    # Initialize the first two Lucas numbers as 2 and 1\n    a = 2\n    b = 1\n\n    # Check if n is greater than 0\n    if n <= 0:\n        return None\n\n    # Check if n is 1 or 2\n    if n == 1 or n == 2:\n        return a\n\n    # Check for n greater than 2\n    for i in range(3, n+1):\n        # Compute the next Lucas number using formula: a(n-1) + b(n-2)\n        c = a + b\n        a = b\n        b = c\n\n    # Return the nth Lucas number\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    This function takes an integer n and returns the n-th Lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds the n-th Lucas number using the formula:\n    L(n) = L(n-1) + L(n-2)\n    \n    The function takes an integer n as input and returns an integer.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_lucas = 2\n        lucas = 1\n        for i in range(2, n+1):\n            lucas = (prev_lucas**2) + lucas\n            prev_lucas = lucas\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the nth lucas number using the formula:\n    L(n) = (phi^n - (1-phi)^n) / sqrt(5)\n\n    where phi = (1 + sqrt(5)) / 2\n    \"\"\"\n\n    # Define phi as the golden ratio\n    phi = (1 + 5 ** 0.5) / 2\n\n    # Calculate the nth lucas number using the formula\n    lucas = (phi ** n - (1 - phi) ** n) / (5 ** 0.5)\n\n    return lucas"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Args:\n        list_ (list): The list of strings to apply the format string to.\n        string (str): The format string to apply to each element in the list.\n\n    Returns:\n        list: The modified list with the format string applied to each element.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string.format(element))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for i in range(len(list_)):\n        result.append(string.format(list_[i]))\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Combine the three lists into a single dictionary\n    result = dict(zip(l1, zip(l2, l3)))\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n\nl1 = ['apple', 'banana', 'cherry']\nl2 = ['red', 'yellow', 'green']\nl3 = [3, 5, 7]\n\nnested_dict = convert_list_dictionary(l1, l2, l3)\nprint(nested_dict)"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n\n    Parameters:\n    *args (list): List of lists to be converted to dictionary.\n\n    Returns:\n    dict: Nested dictionary where the keys are the first element of each sublist, and the values are the rest of the sublists.\n    \"\"\"\n    result = {}\n    for lst in args:\n        subdict = {}\n        for i, item in enumerate(lst):\n            subdict[item] = lst[i+1:]\n        result[lst[0]] = subdict\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for l in lists:\n        for i in range(len(l)):\n            if i not in result:\n                result[i] = []\n            result[i].append(l[i])\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    # creating empty dictionary\n    new_dict = {}\n    \n    # iterating through each list\n    for i in range(len(l1)):\n        new_dict[l1[i]] = l2[i]\n        new_dict[l1[i]][l3[i]] = l3[i]\n    \n    return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n\n    # Create empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through each list and add values to the nested dictionary\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        sub_dict = l3[i]\n        nested_dict[key] = {'value': value,'sub_dict': sub_dict}\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {\"a\": l2[i], \"b\": l3[i]}\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nn = 10\nprint(get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def f(n):\n        if n == 1:\n            return n\n        elif n == 2:\n            return n\n        elif n == 3:\n            return n\n        elif n == 4:\n            return n\n        elif n == 5:\n            return n\n        else:\n            return f(n//2) + f(n//3) + f(n//4) + f(n//5) + n\n\n    return max(f(i) for i in range(2, n+1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        # find the maximum sum possible using the given equation\n        max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    else:\n        # calculate the sum of the first half\n        sum_1 = get_max_sum(n//2)\n        \n        # calculate the sum of the second half\n        sum_2 = get_max_sum(n//3)\n        \n        # calculate the sum of the third half\n        sum_3 = get_max_sum(n//4)\n        \n        # calculate the sum of the fourth half\n        sum_4 = get_max_sum(n//5)\n        \n        # calculate the sum of the current number\n        sum_current = n\n        \n        # find the maximum sum possible by using the given equation\n        max_sum = max(sum_1 + sum_2 + sum_3 + sum_4, sum_current)\n        \n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case: if n is 1, f(1) = 1\n    if n == 1:\n        return 1\n\n    # Recursive case: calculate the maximum sum of n/2, n/3, n/4, n/5\n    # and n\n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        # Divide n by 2, 3, 4, and 5 recursively and add the result to n\n        sub_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n        max_sum = max(n, sub_sum)\n        \n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        max_sum = max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n        return max_sum"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        length = len(item)\n        \n        if length > max_length:\n            max_length = length\n            max_list = [item]\n        elif length == max_length:\n            max_list.append(item)\n            \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes in a list and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for num in input_list:\n        if len(num) > max_length:\n            max_length = len(num)\n            max_list = num\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # convert tuple to list to make it mutable\n    test_list = list(test_tup)\n    # sort the list in ascending order\n    test_list.sort()\n    # loop through the sorted list and check if duplicates are present\n    for i in range(len(test_list)):\n        if i == 0 or test_list[i]!= test_list[i - 1]:\n            return True\n    # if no duplicates are found, return False\n    return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # Create a set to store unique elements of the tuple\n    unique_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    return all(x not in seen and seen.add(x) for x in test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If all characters in the string are repeating, it returns None.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Iterate through the dictionary and find the first non-repeating character\n    for char, count in freq.items():\n        if count == 1:\n            return char\n\n    # If all characters are repeating, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate over the string and find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    count_dict = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is already in the dictionary\n        if char in count_dict:\n            # If it is, increment its count by 1\n            count_dict[char] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[char] = 1\n    \n    # Loop through each character in the string again to find the first non-repeated character\n    for char in str1:\n        # Check if the character has a count of 1 in the dictionary\n        if count_dict[char] == 1:\n            # If it does, return the character\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            del char_dict[char]\n        else:\n            char_dict[char] = True\n    for char in str1:\n        if char in char_dict:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(string):\n    \"\"\"\n    Returns the first non-repeating character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(s):\n    \"\"\"\n    Return the first non-repeating character in the given string s.\n    \"\"\"\n    freq = {}\n    for c in s:\n        freq[c] = freq.get(c, 0) + 1\n    for c in s:\n        if freq[c] == 1:\n            return c\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(string):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first character with count 1 in the dictionary\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # if no character has count 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(string):\n    # Create a dictionary to store the frequency of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in string:\n        # If the character is not already in the dictionary, add it with a frequency of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # Otherwise, increment the frequency by 1\n        else:\n            char_count[char] += 1\n\n    # Loop through the dictionary to find the first non-repeating character\n    for char in string:\n        # If the frequency of the character is 1, return the character as the first non-repeating character\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            char_set[char] += 1\n        else:\n            char_set[char] = 1\n    \n    for char in char_set:\n        if char_set[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(pattern, string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the sum of the numbers\n    total_sum = sum(sorted_numbers)\n\n    # Calculate the middle index\n    middle_index = len(sorted_numbers) // 2\n\n    # If the length of the sorted list is odd, the median is the middle element\n    if len(sorted_numbers) % 2!= 0:\n        median = sorted_numbers[middle_index]\n    # If the length of the sorted list is even, the median is the average of the two middle elements\n    else:\n        first_middle_element = middle_index - 1\n        second_middle_element = middle_index\n        median = (sorted_numbers[first_middle_element] + sorted_numbers[second_middle_element]) / 2\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Calculate the median\n    if len(sorted_nums) % 2 == 0:\n        median = (sorted_nums[len(sorted_nums)//2-1] + sorted_nums[len(sorted_nums)//2]) / 2\n    else:\n        median = sorted_nums[len(sorted_nums)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of those numbers.\n    '''\n    # Create a list of numbers to sort\n    numbers = [a, b, c]\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Check if the list has an odd or even number of elements\n    if len(numbers) % 2 == 0:\n        # Return the average of the two middle numbers\n        return (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        # Return the middle number\n        return numbers[len(numbers)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function finds the median of three numbers.\n\n    :param a: The first number.\n    :param b: The second number.\n    :param c: The third number.\n    :return: The median of the three numbers.\n    \"\"\"\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    median = sorted_numbers[1] if len(sorted_numbers) % 2 == 0 else (sorted_numbers[0] + sorted_numbers[1]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    # sort the three numbers\n    sorted_numbers = sorted([a,b,c])\n\n    # calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2])/2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the median based on the length of the sorted list\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[len(sorted_list)//2] + sorted_list[len(sorted_list)//2 - 1]) / 2\n    else:\n        median = sorted_list[len(sorted_list)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and finds their median.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle index of the sorted numbers\n    middle_index = len(sorted_numbers) // 2\n\n    # Check if the length of the sorted numbers is odd or even\n    if len(sorted_numbers) % 2 == 0:\n        # If the length is even, return the average of middle two numbers\n        return (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        # If the length is odd, return the middle number\n        return sorted_numbers[middle_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    middle = len(numbers) // 2\n    median = numbers[middle]\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize sum variable to zero\n    sum_of_digits = 0\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and loop through each character\n        for char in str(num):\n            # Convert each character to an integer and add it to the sum variable\n            sum_of_digits += int(char)\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(digit) for digit in str(num))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into individual digits\n        digits = [int(digit) for digit in str(num)]\n        # add up the digits and store the result in a new list\n        sum_digits = [sum(digit) for digit in digits]\n        # concatenate the result list with the original number to get the sum of digits of that number\n        sum_nums = [num + sum(digit) for num in nums for digit in digits]\n        # print the sum of digits of each number\n        print(\"Sum of digits of\", num, \"is:\", sum(sum_digits))\n        # print the original number with the sum of digits appended\n        print(\"Original number with sum of digits appended:\", sum_nums)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Define an empty list to store the sum of digits for each number\n    digit_sum = []\n    # Loop through each number in the list\n    for num in nums:\n        # Initialize the sum of digits to zero\n        current_sum = 0\n        # Loop through each digit in the number\n        for digit in str(num):\n            # Add the digit to the sum of digits for this number\n            current_sum += int(digit)\n        # Add the current sum of digits for this number to the list of sums\n        digit_sum.append(current_sum)\n    # Return the list of sums of digits\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(map(int, str(num)))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # create a list to store the sum of digits\n    total_sum = []\n    \n    # iterate over each number in the input list\n    for num in nums:\n        # convert the number to a string and split it into a list of digits\n        digits = [int(d) for d in str(num)]\n        # sum up the digits\n        total = sum(digits)\n        # add the sum to the list of total sums\n        total_sum.append(total)\n    \n    # return the list of total sums\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total_sum = 0\n    for num in nums:\n        # Convert the number to string and split into list of digits\n        num_str = str(num)\n        num_list = list(num_str)\n\n        # Compute the sum of digits and add to the total sum\n        digit_sum = sum(int(digit) for digit in num_list)\n        total_sum += digit_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        num_str = str(num)\n        num_sum = 0\n        for digit in num_str:\n            num_sum += int(digit)\n        total_sum += num_sum\n    return total_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] ^ test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple with all zeros\n    result_tup = (0, ) * len(test_tup1)\n    \n    # iterate through the tuples and perform the bitwise xor operation on each element\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Initialize variables to store the result\n    result_tup = ()\n    carry = 0\n\n    # Iterate through each element of the tuples\n    for i in range(len(test_tup1)):\n        # Get the corresponding elements of the tuples\n        num1 = test_tup1[i]\n        num2 = test_tup2[i]\n\n        # Calculate the bitwise xor of the elements\n        xor_val = num1 ^ num2\n\n        # Check if the carry is required\n        if (xor_val & carry)!= 0:\n            # Perform the bitwise xor with the carry\n            xor_val ^= carry\n\n        # Add the result to the result tuple\n        result_tup += (xor_val,)\n\n        # Shift the carry to the next bit\n        carry = xor_val & num1\n\n    # If the carry is not zero, add it to the result tuple\n    if carry!= 0:\n        result_tup += (carry,)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result = xor_result ^ test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\n    Parameters:\n    test_tup1 (tuple): the first tuple to perform the operation on\n    test_tup2 (tuple): the second tuple to perform the operation on\n\n    Returns:\n    tuple: the result of the bitwise xor operation across the input tuples\n    '''\n    xor_result = 0\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        xor_result |= (test_tup1[i] ^ test_tup2[i])\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    result_tup = ()\n\n    # iterate over the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] ^ test_tup2[i]),)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_sum = 0\n    for i in range(len(test_tup1)):\n        xor_sum |= test_tup1[i] ^ test_tup2[i]\n    return xor_sum"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            unique_tuples.add((test_list[i][j], ))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 0\n        freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Using set to remove duplicates and then len to get frequency\n    freq = len(set(test_list))\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    # create a dictionary to store the frequency of each tuple\n    freq_dict = {}\n\n    # iterate through each element in the list\n    for element in test_list:\n        # convert the element to a tuple\n        tuple_element = tuple(element)\n\n        # check if the tuple exists in the dictionary\n        if tuple_element in freq_dict:\n            # if it does, increment the frequency\n            freq_dict[tuple_element] += 1\n        else:\n            # if it doesn't, add the tuple with frequency 1\n            freq_dict[tuple_element] = 1\n\n    # return the frequency of unique tuples\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a set to store unique tuples\n    unique_tuples = set()\n    # iterate through the list of tuples\n    for tup in test_list:\n        # add each tuple to the set\n        unique_tuples.add(tup)\n    # return the length of the set (i.e. the number of unique tuples)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize an empty list to store the resultant tuple\n    result_tup = []\n    # Get the length of the two input tuples\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    # Check if the two input tuples have the same length\n    if tup1_len!= tup2_len:\n        raise ValueError(\"Both input tuples must have the same length.\")\n    # Iterate through the length of the two input tuples\n    for i in range(tup1_len):\n        # Add the corresponding elements of the two input tuples at index i and add it to the result_tup list\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i] = tuple(map(int.__add__, test_tup1[i], test_tup2[i][j]))\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the sum of the two tuples\n    sum_tup = []\n    \n    # iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # iterate through the second tuple\n        for j in range(len(test_tup2[0])):\n            # add the corresponding elements of the two tuples\n            sum_tup.append(test_tup1[i] + test_tup2[i][j])\n    \n    return sum_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple with the same length as the longer tuple\n    result_tup = tuple([0] * max(len(test_tup1), len(test_tup2)))\n    # Loop through each index in the result tuple\n    for i in range(len(result_tup)):\n        # Add the corresponding elements of the two tuples at the current index\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            result_list.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different length\")\n        return\n\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Get the length of the tuples\n    len_tup1 = len(test_tup1)\n    len_tup2 = len(test_tup2)\n\n    # If the length of the tuples are not same, raise an exception\n    if len_tup1!= len_tup2:\n        raise Exception(\"Both tuples should have same length\")\n\n    # Initialize an empty tuple to store the result\n    result_tup = ()\n\n    # Perform index wise addition of the tuple elements\n    for i in range(len_tup1):\n        # Get the values of the two tuples\n        val1 = test_tup1[i]\n        val2 = test_tup2[i]\n\n        # Perform index wise addition\n        result_tup += (val1 + val2,)\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize result tuple with empty values\n    result_tup = ()\n    # Iterate over each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Get the corresponding element in the second tuple\n        val = test_tup2[i]\n        # Add the elements and append the result to the result tuple\n        result_tup = result_tup + (val + test_tup1[i],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum number.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two arguments a and b and returns the minimum of these two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    return min(a,b)"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two tuples as input and checks if an element exists within the first tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1: \n        print(\"Element exists in the tuple.\") \n    else: \n        print(\"Element does not exist in the tuple.\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if x in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes in two tuples and returns a boolean value indicating whether the element exists within the first tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for x in tuplex:\n        if x in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(f\"{tuplex} exists in tuple1\") \n    else: \n        print(f\"{tuplex} does not exist in tuple1\") "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of the number is even\")\n    else:\n        print(\"The parity of the number is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: \n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # check if the number is even\n    if x % 2 == 0:\n        # if even, parity is even\n        return 'Even'\n    else:\n        # if odd, parity is odd\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Initialize a variable to store the parity of x\n    parity = False\n    \n    # Iterate over all possible even numbers from 2 to x-1\n    for i in range(2, x):\n        # Check if x is divisible by i\n        if x % i == 0:\n            # If it is divisible by i, then x is not even and the parity is odd\n            parity = True\n            break\n    \n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # if x is even\n        return False\n    else: # if x is odd\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return \"Even number is not Parity\"\n    else:\n        return \"Odd number is Parity\"\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 1 if x % 2 == 1 else 0\n    return parity"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    s = str(n)\n    # Get the length of the string\n    length = len(s)\n    # Loop through each digit of the string\n    for i in range(length):\n        # Get the current digit\n        digit = int(s[i])\n        # Check if the digit is greater than 9\n        if digit > 9:\n            # Calculate the next bigger digit using the following logic:\n            # If the digit is 9, add 1 to the next digit (if there is one)\n            # If there is no next digit, add 1 to the next bigger digit (if there is one)\n            next_digit = (digit + 1) % 10\n            # Check if the next digit is greater than 9\n            if next_digit > 9:\n                # Calculate the next bigger digit using the following logic:\n                # If the next digit is 9, add 1 to the next digit (if there is one)\n                # If there is no next digit, add 1 to the next bigger digit (if there is one)\n                next_next_digit = ((next_digit + 1) % 10) + 1\n            # Otherwise, set the next_next_digit variable to the next digit\n            else:\n                next_next_digit = next_digit\n            # Create the new string with the digits rearranged\n            new_string = ''\n            # Loop through each digit of the original string\n            for j in range(length):\n                # Get the current digit of the original string\n                old_digit = int(s[j])\n                # Check if the old digit is equal to the current digit\n                if old_digit == digit:\n                    # If it is, create a new string with the next digit\n                    new_string += str(next_digit)\n                # If the old digit is not equal to the current digit, append the digit to the new string\n                else:\n                    new_string += str(old_digit)\n            # Convert the new string to an integer and return it\n            return int(new_string)\n    # If no next bigger number was found, return the original number\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    largest_digit = max(digits)\n    index = digits.index(largest_digit)\n\n    # Find the smallest non-zero digit to the right of the largest digit\n    smallest_non_zero = max(0, max(digits[:index]))\n\n    # Reverse the digits to create the next bigger number\n    digits[index:] = digits[:index][::-1]\n    digits[:index] = [d + smallest_non_zero for d in digits[:index]]\n\n    next_bigger = int(''.join(str(d) for d in digits))\n\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Reverse the string\n    rev_str = num_str[::-1]\n\n    # Find the index of the first occurrence of a digit\n    first_digit = -1\n    for i, digit in enumerate(rev_str):\n        if digit.isdigit():\n            first_digit = i\n            break\n\n    # Check if the first digit is already at the first index\n    if first_digit == 0:\n        # If it is, return 999...999\n        return int(''.join(['9' for _ in range(len(num_str))]))\n\n    # Find the index of the last occurrence of a digit\n    last_digit = -1\n    for i, digit in enumerate(rev_str[first_digit:], first_digit):\n        if digit.isdigit():\n            last_digit = i\n            break\n\n    # If the last digit is at the last index, return 999...999\n    if last_digit == len(rev_str) - 1:\n        return int(''.join(['9' for _ in range(len(num_str))]))\n\n    # Reverse the substring between the first and last digits\n    substr_rev = rev_str[first_digit+1:last_digit+1][::-1]\n\n    # Reverse the substring between the first and last digits\n    substr_rev = substr_rev[::-1]\n\n    # Combine the reversed substring and the first and last digits\n    new_str = rev_str[:first_digit+1] + substr_rev + rev_str[last_digit+1:]\n\n    # Convert the string back to an integer\n    new_num = int(new_str)\n\n    # Check if the new number is greater than n\n    if new_num > n:\n        return new_num\n\n    # If it's not, return 999...999\n    return int(''.join(['9' for _ in range(len(num_str))]))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    n_list = list(n_str)\n    n_list.sort(reverse=True)\n    n_str_new = ''.join(n_list)\n    n_new = int(n_str_new)\n    return n_new"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    digits = [int(digit) for digit in n_str]\n    digits.sort(reverse=True)\n    n_str = ''.join(str(digit) for digit in digits)\n    next_bigger = int(n_str)\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize variables to store the digits of the number\n    ones_count = 0\n    tens_count = 0\n    hundreds_count = 0\n    thousands_count = 0\n    # Count the number of ones, tens, hundreds, and thousands in the number\n    while n > 0:\n        if n % 10 == 1:\n            ones_count += 1\n        elif n % 10 == 2:\n            tens_count += 1\n        elif n % 10 == 3:\n            ones_count += 1\n            hundreds_count += 1\n        elif n % 10 == 4:\n            tens_count += 1\n            hundreds_count += 1\n        elif n % 10 == 5:\n            ones_count += 1\n            hundreds_count += 1\n            thousands_count += 1\n        elif n % 10 == 6:\n            tens_count += 1\n            hundreds_count += 1\n            thousands_count += 1\n        elif n % 10 == 7:\n            ones_count += 1\n            hundreds_count += 1\n            thousands_count += 1\n            tens_count += 1\n        elif n % 10 == 8:\n            tens_count += 1\n            hundreds_count += 1\n            thousands_count += 1\n            tens_count += 1\n        elif n % 10 == 9:\n            ones_count += 1\n            hundreds_count += 1\n            thousands_count += 1\n            tens_count += 1\n            hundreds_count += 1\n        n //= 10\n    # Create the next bigger number by rearranging the digits of the given number\n    next_bigger = 0\n    # Add the ones count\n    next_bigger += ones_count\n    # Add the tens count\n    next_bigger += tens_count * 10 ** (ones_count + tens_count)\n    # Add the hundreds count\n    next_bigger += hundreds_count * 10 ** (ones_count + tens_count + hundreds_count)\n    # Add the thousands count\n    next_bigger += thousands_count * 10 ** (ones_count + tens_count + hundreds_count + thousands_count)\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Reverse the string\n    rev_str = num_str[::-1]\n\n    # Reverse the digits of the reversed string\n    rev_num_str = \"\"\n    for digit in rev_str:\n        if digit.isdigit():\n            digit_int = int(digit)\n            if digit_int > 9:\n                digit_int = digit_int % 10 + 9\n            else:\n                digit_int = digit_int % 10 + 1\n            rev_num_str += str(digit_int)\n        else:\n            rev_num_str += digit\n\n    # Convert the reversed number string back to an integer and return it\n    return int(rev_num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Create the next bigger number by rearranging the digits of a given number.\n\n    Parameters:\n    n (int): a positive integer\n\n    Returns:\n    int: the next bigger number\n    \"\"\"\n    # convert n to a list of its digits\n    digits = [int(digit) for digit in str(n)]\n\n    # sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # convert the sorted digits back to a string and return it as an integer\n    result = int(''.join(map(str, digits)))\n\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    while n!= 0:\n        digit = n % 10\n        # If the digit is less than 5, then move it to the next digit\n        if digit < 5:\n            return digit * 10 + n // 10\n        # If the digit is 5, then move it to the next greater digit\n        else:\n            n -= digit\n            n //= 10\n    # If the number is 0, then there is no bigger number\n    return -1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Check if the given number is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return 'Please enter a positive integer'\n    \n    # Convert the given number to a string\n    n = str(n)\n    \n    # Loop through the digits of the number in reverse order\n    for i in range(len(n)-1, -1, -1):\n        # Check if the next digit is smaller than the current digit\n        if int(n[i]) < int(n[i+1]):\n            # If it is, swap the digits\n            temp = n[i]\n            n[i] = n[i+1]\n            n[i+1] = temp\n            # Convert the modified string back to an integer and return it\n            return int(n)\n    \n    # If no swaps were made, the number is already the next biggest number\n    return n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # create a min heap of size k\n    min_heap = []\n\n    # create a tuple for each pair of elements\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (num1, num2))\n\n            # if the size of the heap becomes equal to k, remove the smallest element\n            if len(min_heap) == k:\n                heapq.heappop(min_heap)\n\n    # return the pairs with the smallest elements\n    return [(num1, num2) for num1, num2 in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap1 = []\n    heap2 = []\n    for num in nums1:\n        heapq.heappush(heap1, -num)\n    for num in nums2:\n        heapq.heappush(heap2, -num)\n    \n    result = []\n    while len(result) < k:\n        if len(heap1) == 0:\n            heapq.heappush(heap2, -heap2[0])\n        elif len(heap2) == 0:\n            heapq.heappush(heap1, -heap1[0])\n        else:\n            if -heap1[0] <= -heap2[0]:\n                heapq.heappush(heap1, -heap1[0])\n            else:\n                heapq.heappush(heap2, -heap2[0])\n                \n        if len(result) < k:\n            if len(heap1) > 0:\n                result.append([heap1[0], -heap1[0]])\n            if len(heap2) > 0:\n                result.append([-heap2[0], heap2[0]])\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(min_heap, (-nums1[i], nums2[i]))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    result = []\n    while min_heap:\n        neg_num, num2 = heapq.heappop(min_heap)\n        result.append((-neg_num, num2))\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (-neg_num, num2))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a min-heap to store the elements from the second array\n    heap = []\n    for num in nums2:\n        heapq.heappush(heap, num)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate until we have found k smallest pairs\n    while k > 0:\n        # Get the minimum element from the heap\n        min_num = heapq.heappop(heap)\n\n        # Check if there are any elements in the heap\n        if not heap:\n            break\n\n        # Calculate the difference between the minimum element and the first element from the first array\n        diff = min_num - nums1[0]\n\n        # Check if the difference is already in the heap\n        if diff in heap:\n            # If it is, add the pair to the result list and decrement k\n            pair = (nums1[0], diff)\n            result.append(pair)\n            k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n            else:\n                if (nums1[i] + nums2[j]) > heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n    res = []\n    while heap:\n        res.append(heapq.heappop(heap))\n    return res"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap1 = []\n    min_heap2 = []\n    \n    n1 = len(nums1)\n    n2 = len(nums2)\n    i, j = 0, 0\n    \n    # Insert k smallest elements from nums1 and nums2 in min_heap1 and min_heap2\n    for _ in range(k):\n        if i < n1 and j < n2:\n            if nums1[i] + nums2[j] < nums1[i]:\n                heapq.heappush(min_heap1, (nums1[i], i))\n            elif nums1[i] + nums2[j] > nums1[i]:\n                heapq.heappush(min_heap2, (nums1[i], i))\n            i += 1\n            j += 1\n        elif i < n1:\n            heapq.heappush(min_heap1, (nums1[i], i))\n            i += 1\n        elif j < n2:\n            heapq.heappush(min_heap2, (nums2[j], j))\n            j += 1\n    \n    # Insert remaining elements from nums1 and nums2 in min_heap1 and min_heap2\n    while i < n1:\n        if j < n2:\n            if nums1[i] + nums2[j] < nums1[i]:\n                heapq.heappush(min_heap1, (nums1[i], i))\n                i += 1\n            elif nums1[i] + nums2[j] > nums1[i]:\n                heapq.heappush(min_heap2, (nums1[i], i))\n                i += 1\n            j += 1\n        elif j == n2:\n            heapq.heappush(min_heap1, (nums1[i], i))\n            i += 1\n    \n    while j < n2:\n        if i < n1:\n            if nums1[i] + nums2[j] < nums1[i]:\n                heapq.heappush(min_heap1, (nums1[i], i))\n                i += 1\n            elif nums1[i] + nums2[j] > nums1[i]:\n                heapq.heappush(min_heap2, (nums1[i], i))\n                i += 1\n            j += 1\n        elif i == n1:\n            heapq.heappush(min_heap2, (nums2[j], j))\n            j += 1\n    \n    # Extract k smallest elements from min_heap1 and min_heap2 and return their sum\n    return sum(heapq.heappop(min_heap1)[0] for _ in range(k)) + sum(heapq.heappop(min_heap2)[0] for _ in range(k))"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a list of tuples containing the difference between each element in the two arrays\n    pairs = [(nums1[i] - nums2[i], i) for i in range(len(nums1))]\n\n    # Sort the list of pairs in ascending order\n    pairs.sort()\n\n    # Initialize an empty list to store the k smallest pairs\n    result = []\n\n    # Iterate through the list of pairs and add the k smallest pairs to the result list\n    for i in range(k):\n        heapq.heappush(result, pairs[i][1])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Convert the arrays to lists\n    nums1 = list(nums1)\n    nums2 = list(nums2)\n    \n    # Sort the lists in ascending order\n    nums1.sort()\n    nums2.sort()\n    \n    # Initialize the result list\n    result = []\n    \n    # Create a min heap for the second array\n    min_heap = []\n    \n    # Iterate over the first array\n    for num1 in nums1:\n        \n        # While the size of the min heap is less than k, add the smallest element of the second array to the min heap\n        while len(min_heap) < k:\n            heapq.heappush(min_heap, nums2.pop(0))\n        \n        # Pop the smallest k elements of the min heap\n        for i in range(k):\n            result.append([num1, min_heap[0]])\n            heapq.heappop(min_heap)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a heap of the first array\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, -num)\n\n    # Create a dictionary to store the indices of the smallest numbers in the second array\n    indices = {}\n    for index, num in enumerate(nums2):\n        if num in indices:\n            smallest = min(indices[num], index)\n            indices[num] = index\n        else:\n            smallest = index\n            indices[num] = index\n\n        # If the heap is not empty and the size of the heap is less than k, add the smallest number to the result\n        if len(heap) > 0 and len(heap) < k:\n            result = []\n            result.append(heapq.heappop(heap))\n            result.append(num)\n            print(result)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n\n    # Create a min heap to store the pairs\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # Add the pair to the heap if its value is smaller than k\n            if num1 + num2 < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n                # If the heap has more than k elements, remove the smallest element\n                while len(min_heap) > k:\n                    heapq.heappop(min_heap)\n\n    # Return the smallest pairs\n    return min_heap"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                product = list1[i][0] * list1[j][1]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i < j:\n                prod = list1[i][0] * list1[j][1]\n                if prod < min_product:\n                    min_product = prod\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product_list = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product_list.append(list1[i][0]*list1[j][1])\n    min_product = min(product_list)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples as input and finds the minimum product of the pairs of tuples.\n    '''\n\n    # Initialize minimum product and initialize minimum number of tuples\n    min_prod = float('inf')\n    min_count = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(lst)):\n        # Iterate through the remaining tuples in the list\n        for j in range(i+1, len(lst)):\n            # Calculate the product of the tuples\n            prod = lst[i][0] * lst[j][0] * lst[i][1] * lst[j][1]\n            # If the product is less than the current minimum, update the minimum and the minimum count\n            if prod < min_prod:\n                min_prod = prod\n                min_count = 2\n            elif prod == min_prod:\n                min_count += 1\n\n    # Return the minimum product and the minimum count of pairs of tuples\n    return min_prod, min_count"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples\n    list1.sort(key=lambda x: x[0]*x[1])\n    # Initialize the minimum product as the first element of the first tuple\n    min_product = list1[0][0]\n    # Loop through the remaining tuples and update the minimum product if a new minimum is found\n    for i in range(1, len(list1)):\n        if list1[i][0]*list1[i][1] < min_product:\n            min_product = list1[i][0]*list1[i][1]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(lst):\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            pair = lst[i], lst[j]\n            product = pair[0] * pair[1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Sort the list of tuples in ascending order\n    list1.sort(key=lambda x: (x[0], x[1]))\n\n    # Initialize variables for the minimum and maximum values\n    min_val = list1[0][0] * list1[0][1]\n    max_val = list1[0][0] * list1[0][1]\n\n    # Iterate through the sorted list of tuples and update the minimum and maximum values\n    for i in range(1, len(list1)):\n        min_val = min(min_val, list1[i][0] * list1[i][1])\n        max_val = max(max_val, list1[i][0] * list1[i][1])\n\n    # Return the minimum value as the minimum product\n    return min_val"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        list1 (list): A list of tuples of integers.\n\n    Returns:\n        int: The minimum product of any two tuples in the list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product\n    of pairs of tuples in the list.\n    '''\n\n    if len(list1) % 2!= 0:\n        raise ValueError('The list should have an even number of elements.')\n\n    # Sort the list of tuples in ascending order of the first element\n    list1.sort(key=lambda x: x[0])\n\n    # Initialize the minimum product\n    min_product = float('inf')\n\n    # Iterate over the pairs of tuples and calculate the product of their product\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            min_product = min(min_product, product)\n\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')  # initialize the minimum value as positive infinity\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if type(listval[0]) == int:\n        min_num = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_num:\n                min_num = listval[i]\n        return min_num\n    elif type(listval[0]) == float:\n        min_num = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_num:\n                min_num = listval[i]\n        return min_num\n    elif type(listval[0]) == str:\n        min_str = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_str:\n                min_str = listval[i]\n        return min_str\n    else:\n        print(\"List contains non-numeric values.\")"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value as the first element of the list\n    min_val = listval[0]\n    # Iterate through the list and compare each element with the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Check if the list is empty\n    if not listval:\n        return None\n    \n    # Initialize the minimum value to be the first value in the list\n    min_val = listval[0]\n    \n    # Loop through the list and update the minimum value as required\n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n\n    minval = listval[0]\n    for item in listval:\n        if item < minval:\n            minval = item\n\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Check if the list is empty\n    if len(listval) == 0:\n        return None\n    # Find the minimum value\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove any non-alphanumeric characters from the string\n    word = re.sub('[^a-zA-Z0-9]+', '', word)\n    # Convert the snake case string to camel case\n    camel_case = ''.join(w.capitalize() for w in word.split('_'))\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to lowercase\n    word = word.lower()\n    # Split the word into words using underscores as a delimiter\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words together with underscores\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove underscores from word\n    word = re.sub('_', '', word)\n    # Convert first character to lower case\n    first_char = word[0].lower()\n    # Convert rest of the word to upper case\n    rest_of_word = word[1:]\n    # Combine first character and rest of the word\n    camel_case_word = first_char + rest_of_word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'[A-Z]+', word)\n    words = words[::-1]\n    camel_case = words[0]\n    for i in range(1, len(words)):\n        camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n\n    :param word: snake case string to be converted to camel case\n    :return: camel case string\n    \"\"\"\n    pattern = re.compile(r'([a-z])([A-Z])')\n    return pattern.sub(r'\\1_\\2', word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into individual words\n    words = word.split('_')\n    \n    # Convert the first letter of each word to uppercase\n    words[0] = words[0][0].upper() + words[0][1:]\n    \n    # Join the words back into a camel case string\n    camel_case = ''.join(words)\n    \n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    return ''.join(x.title() if x.isupper() else x for x in word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # replace underscores with spaces to split the words\n    words = re.findall(r'(?<!^)(?=[A-Z])', word)\n    # join the words with capital letters after the first letter\n    camel_case = ''.join(word.title() for word in words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'_(.)', re.IGNORECASE)\n    return pattern.sub(lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in re.findall(r'_(.?)(?=[A-Z])', word))"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for num in l:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Use a list comprehension to create a new list with even numbers only\n    new_list = [num for num in l if num % 2 == 0]\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) >= n:\n        return list1[n-1][1]\n    else:\n        print(\"List is too short!\")\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Create an empty list to store the extracted elements\n    extracted_elements = []\n    # Iterate over the list of tuples\n    for tuple1 in list1:\n        # Extract the nth element and append it to the extracted_elements list\n        extracted_elements.append(tuple1[n-1])\n    # Return the extracted_elements list\n    return extracted_elements"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function takes a list of tuples and an integer n as input. \n    It extracts the nth element from the list of tuples and returns it.\n    If n is greater than the length of the list of tuples, it returns None.\n    \"\"\"\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input list is a list of tuples\n    if type(list1[0])!= tuple:\n        raise TypeError(\"Input list must be a list of tuples.\")\n    # Check if the input list has at least n elements\n    if len(list1) < n:\n        raise ValueError(\"Input list must have at least {} elements.\".format(n))\n    # Extract the nth element from the list and return it\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        nth_element = list1[n-1]\n        return nth_element\n    except IndexError:\n        return \"Invalid index.\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n    \"\"\"\n    # Check if the input list is empty\n    if not list1:\n        return None\n    # Check if the nth element is valid (i.e. a positive integer)\n    if not isinstance(n, int) or n <= 0:\n        return None\n    # Extract the nth element and return it\n    return list1[n - 1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if any value in the first list exists in the second list\n    and vice versa. If the two lists have no overlapping values, it returns False.\n    '''\n    # Create a set for each list to store unique values\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if any value in set1 is also in set2\n    for val in set1:\n        if val in set2:\n            return True\n\n    # If no overlapping values were found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    # Loop through each element in list1\n    for element in list1:\n        # Check if element exists in list2\n        if element in list2:\n            return True\n    # If no overlapping element is found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any overlapping values in the two lists.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in the first list exists in the second list or not.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Convert the list to a set to remove duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n    \n    # Check if any value in list1 exists in list2\n    for item in list1:\n        if item in list2:\n            return True\n        \n    # If no value exists in list1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and returns True if there is any common element between the two sequences, False otherwise.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Args:\n        list1: List of values to search for in `list2`.\n        list2: List of values to search for in `list1`.\n\n    Returns:\n        True if any value in `list1` exists in `list2` or vice versa, otherwise False.\n    \"\"\"\n    # Convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if any value in `list1` is also in `list2`\n    if set1.intersection(set2):\n        return True\n\n    # Check if any value in `list2` is also in `list1`\n    if set2.intersection(set1):\n        return True\n\n    # If no value in `list1` is also in `list2`, no value in `list1` is also in `list2`\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Create a set of values in list2 to check for overlap with list1\n    set2 = set(list2)\n    # Loop through list1 to check for overlap with set2\n    for value in list1:\n        if value in set2:\n            return True\n    # If no overlap was found, return False\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns the pair of integers with the highest product.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    return max1, max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (-1, -1)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    # initialize variables\n    max_1, max_2, max_3 = float('-inf'), float('-inf'), float('-inf')\n    min_1, min_2, min_3 = float('inf'), float('inf'), float('inf')\n    max_product = float('-inf')\n    \n    # iterate through the array\n    for num in arr:\n        # check if the number is greater than the maximum of the first three numbers\n        if num > max_1:\n            max_3 = max_2\n            max_2 = max_1\n            max_1 = num\n        # check if the number is greater than the second maximum of the first two numbers\n        elif num > max_2:\n            max_3 = max_2\n            max_2 = num\n        # check if the number is greater than the third maximum of the first one number\n        elif num > max_3:\n            max_3 = num\n        # check if the number is less than the minimum of the first three numbers\n        if num < min_1:\n            min_3 = min_2\n            min_2 = min_1\n            min_1 = num\n        # check if the number is less than the second minimum of the first two numbers\n        elif num < min_2:\n            min_3 = min_2\n            min_2 = num\n        # check if the number is less than the third minimum of the first one number\n        elif num < min_3:\n            min_3 = num\n        # calculate the product of the maximum and minimum numbers\n        current_product = max_1 * max_2 * max_3\n        # check if the current product is greater than the maximum product\n        if current_product > max_product:\n            max_product = current_product\n    \n    # return the maximum product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple containing the indices of two elements of the array which together produce the highest product.\n    \"\"\"\n    max1 = max2 = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max1:\n                max2 = max1\n                max1 = arr[i]*arr[j]\n            elif arr[i]*arr[j] > max2:\n                max2 = arr[i]*arr[j]\n    return (arr.index(max1), arr.index(max2))"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables\n    max_pair = (-1, -1)\n    max_product = -1\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the product of the two numbers\n            product = arr[i] * arr[j]\n            # Update the max_product and max_pair variables\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n                \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers and returns the pair of integers with the highest product.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    # Initialize two variables for the maximum product and their indices\n    max1 = arr[0]\n    max2 = arr[0]\n    max1_idx = 0\n    max2_idx = 0\n\n    # Loop through the array and update max1 and max2 as needed\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n            max1_idx = i\n        elif arr[i] > max2 and arr[i]!= max1:\n            max2 = arr[i]\n            max2_idx = i\n\n    # Return the pair of integers with the highest product\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    # Initialize max1 and max2 as the first and second element of the array\n    max1 = arr[0]\n    max2 = arr[1]\n\n    # Check if the second element is the maximum\n    if arr[1] > arr[0]:\n        max1, max2 = max2, max1\n\n    # Iterate over the rest of the array\n    for i in range(2, len(arr)):\n        # Calculate the current element's product\n        current_product = arr[i] * max1\n\n        # Update max1 and max2 if the current element is the maximum\n        if current_product > max2:\n            max2 = current_product\n        elif current_product < max1:\n            max1 = current_product\n\n    # Return the maximum of max1 and max2\n    return max(max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product_pair = (-1, -1)\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product_pair[0]:\n                max_product_pair = (product, arr[i], arr[j])\n\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (float('-inf'), float('-inf'))\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            curr_product = arr[i] * arr[j]\n            if curr_product > max_product:\n                max_product = curr_product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for i in Input:\n        if i[0] in common_first_element:\n            common_first_element.append(i[0])\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples \n    where each tuple contains the common first element from the input list.\n    '''\n    common_elements = []\n    for tup in Input:\n        if len(common_elements) == 0 or tup[0]!= common_elements[-1]:\n            common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)): \n        for j in range(i+1, len(Input)): \n            if Input[i][0] == Input[j][0]: \n                common_elements.append(Input[i][0])\n    return common_elements "
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            common_element = Input[i][0]\n            if all(common_element in tup[0] for tup in Input[j]):\n                common_elements.append(common_element)\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.add(Input[i][0])\n    return list(common_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    # initialize an empty dictionary to store the count of each element\n    count = {}\n    # iterate over the input list of tuples\n    for item in Input:\n        # if the first element is in the dictionary, increment its count\n        if item[0] in count:\n            count[item[0]] += 1\n        # otherwise, add the first element to the dictionary with a count of 1\n        else:\n            count[item[0]] = 1\n    # find the element with the highest count and return it\n    max_count = max(count.values())\n    for key, value in count.items():\n        if value == max_count:\n            return key"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    group_dict = {}\n    for item in Input:\n        if item[0] in group_dict:\n            group_dict[item[0]].append(item)\n        else:\n            group_dict[item[0]] = [item]\n    result = []\n    for key in group_dict:\n        if len(group_dict[key]) > 1:\n            result.append(group_dict[key])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Iterate through the list of tuples\n    for tuple in Input:\n        # Get the first element of the tuple\n        element = tuple[0]\n\n        # If the element is not in the set, add it and continue to the next tuple\n        if element not in common:\n            common.add(element)\n            continue\n\n        # If the element is in the set, check if the tuples are equal\n        is_equal = True\n        for other_tuple in Input:\n            if tuple!= other_tuple:\n                if tuple[1:]!= other_tuple[1:]:\n                    is_equal = False\n                    break\n\n        # If the tuples are not equal, add it to the set\n        if not is_equal:\n            common.add(tuple)\n\n    return list(common)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    common_first = []\n\n    for item in Input:\n        first, *_ = item\n        common_first.append(first)\n\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # loop through each tuple in the list\n    for tup in Input: \n        # loop through each element of the tuple\n        for elem in tup: \n            # check if the first element of the tuple is equal to the current element\n            if elem == tup[0]: \n                # if so, print the tuple\n                print(tup) "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Finding the maximum length of the list\n    max_len = max(len(x) for x in lst)\n\n    # Iterating through the list to find the element with maximum length\n    for i in range(len(lst)):\n        if len(lst[i]) == max_len:\n            return lst[i]\n\n    # If all elements have same length, return None\n    return None"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = max(len(x) for x in lst)\n    max_item = [x for x in lst if len(x) == max_length][0]\n    return max_item"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    return lst[lst.index(max(lst, key=len))][-max_len:]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_elem = None\n    \n    for elem in lst: \n        if len(elem) > max_length: \n            max_length = len(elem) \n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n        print(rounded_num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    return total_sum"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(lst):\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n    total = 0\n    for num in lst:\n        if isinstance(num, float):\n            num = round(num)\n        total += num\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        num = round(num)\n        total_sum += num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    return total * len(lst)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Round all the numbers in the list\n    list1 = [round(num) for num in list1]\n    \n    # Calculate the total sum\n    total_sum = sum(list1)\n    \n    # Multiply the total sum by the length of the list\n    result = total_sum * len(list1)\n    \n    # Print the result\n    print(result)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        cube = i ** 3\n        if cube % 2 == 0:\n            sum += cube\n        i += 1\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n    '''\n    # initializing a variable to store the sum of cubes of even natural numbers\n    cube_sum = 0\n    # iterating from 1 to n-1\n    for i in range(1, n):\n        # checking if i is an even number\n        if i % 2 == 0:\n            # adding the cube of i to cube_sum\n            cube_sum += i ** 3\n    # returning the cube_sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initialize sum and count\n    sum_cubes = 0\n    count = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of the even number and add it to sum_cubes\n        sum_cubes += i**3\n        # increment count\n        count += 1\n\n    # return the sum of cubes and the count\n    return sum_cubes, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n%2==0:\n        n=n//2\n    sum=0\n    for i in range(2,n+1,2):\n        sum+=i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**3\n    return total\n\nn = int(input(\"Enter the number of even natural numbers: \"))\nprint(\"The cube sum of first\", n, \"even natural numbers is:\", cube_Sum(n))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Concatenate each element of a tuple by the given delimiter.\n    \"\"\"\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''  # Set the delimiter to be a space\n\n    # Use a for loop to iterate over the tuple elements\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n\n    # Remove the last delimiter from the concatenated string\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n\n    # Loop through each element of the tuple and concatenate it with the delimiter\n    result = ''\n    for element in test_tup:\n        result += str(element) +''\n\n    # Remove the last space from the concatenated string\n    result = result[:-1]\n\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter ='- '\n    concatenated_string = delimiter.join(test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \", \"\n    concatenated_str = \"\"\n    for i in test_tup:\n        concatenated_str += str(i) + delimiter\n    return concatenated_str[:-2]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple and a delimiter as input and concatenates each element of the tuple using the delimiter.\n    '''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)] # removing the last delimiter from the result string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = ''\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        count += 1\n    avg_cubes = sum_cubes / count\n    return avg_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize sum to 0 and count to 0\n    sum = 0\n    count = 0\n\n    # iterate through first n natural numbers\n    for i in range(n):\n        # calculate cube of current number\n        cube = i**3\n\n        # add cube to sum and increment count\n        sum += cube\n        count += 1\n\n    # calculate average of cubes\n    average = sum/count\n\n    # print the average of cubes\n    print(\"The average of cubes of first {} natural numbers is {}\".format(n, average))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    average_of_cubes = sum_of_cubes / (n * n)\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_cubes = sum_cubes/n\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n        count += 1\n    return sum/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    \n    #initialize a variable to store the sum of cubes\n    cube_sum = 0\n    \n    #loop through the first n natural numbers\n    for i in range(1, n+1):\n        \n        #calculate the cube of the current number\n        cube = i**3\n        \n        #add the cube to the sum\n        cube_sum += cube\n        \n    #find the average of the cubes by dividing the sum by n\n    average_of_cubes = cube_sum/n\n    \n    #return the average\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    \n    average = sum / (n * n * n)\n    \n    return average\n\nprint(find_Average_Of_Cube(5)) # Output: 35.333333333333336"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        cube = i**3\n        sum_of_cubes += cube\n        count += 1\n    average = sum_of_cubes/count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The average of cubes of the first\", n, \"natural numbers is:\", find_Average_Of_Cube(n))"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # create an empty list to store the rear index elements\n    rear_elements = []\n    # loop through each string in the given tuple\n    for string in test_tuple:\n        # extract the rear index element and append it to the list\n        rear_elements.append(string[-1])\n    # return the list of rear index elements\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for item in test_tuple:\n        rear_index.append(item[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        result.append(i[-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # iterate through the tuple\n    for i in range(len(test_tuple)):\n        # if the current element is a string, extract the rear index element and add it to a new tuple\n        if isinstance(test_tuple[i], str):\n            rear_index = len(test_tuple[i]) - 1\n            new_element = test_tuple[i][rear_index]\n            test_tuple[i] = new_element\n    # return the new tuple with rear index elements only\n    return test_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = []\n    for string in test_tuple:\n        if string[-1] == '[':\n            index = string.index(']')\n            rear_string = string[index+1:]\n            rear_tuple.append(rear_string)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if i % 2 == 0:\n            rear_list.append(test_tuple[i])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(index for index, value in enumerate(test_tuple) if index % 2 == 1)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for item in test_tuple:\n        rear_element = item[-1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if all(elem == x for elem in list1[i]):\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i].count(x) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    \n    for sublist in list1:\n        if x in sublist:\n            count += 1\n            \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(regex, dt)\n    if match:\n        day, month, year = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for the input date string\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Compile the regular expression pattern\n    regex = re.compile(pattern)\n    # Match the regular expression pattern in the input date string\n    match = regex.match(dt)\n    # Extract the year, month, and day values from the match object\n    year = int(match.group(1))\n    month = int(match.group(2))\n    day = int(match.group(3))\n    # Convert the date values to the dd-mm-yyyy format\n    new_dt = f'{day}-{month}-{year}'\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression to match the format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Use the re.sub() method to replace the matched pattern with the desired format\n    return re.sub(pattern, r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # create a regex pattern for date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # match the pattern in the input date\n    match = re.match(pattern, dt)\n    \n    # if match found, convert the date to dd-mm-yyyy format\n    if match:\n        yyyy, mm, dd = match.groups()\n        new_date = dd + '-' + mm + '-' + yyyy\n        return new_date\n    \n    # if no match found, return original date\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define the date format using regular expressions\n    regex = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    # search for the pattern in the date string\n    match = regex.search(dt)\n    # check if the pattern is found\n    if match:\n        # extract the day, month, and year values from the match object\n        year, month, day = match.groups()\n        # format the date string in dd-mm-yyyy format\n        new_dt = '{:02d}-{:02d}-{}'.format(int(day), int(month), year)\n        # return the new date string\n        return new_dt\n    else:\n        # if the pattern is not found, return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # match the pattern in the input string\n    match = re.match(pattern, dt)\n    \n    # check if the match object is not None\n    if match:\n        # split the matched groups into individual elements\n        yyyy, mm, dd = match.groups()\n        \n        # reverse the order of the month and day elements\n        mm, dd = dd, mm\n        \n        # join the reversed elements back into a new date string\n        new_date = f'{dd}-{mm}-{yyyy}'\n        \n        # return the new date string\n        return new_date\n    \n    # if the match fails, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the pattern in the given date string and extract the substrings\n    match = re.match(pattern, dt)\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n\n    # Reverse the order of the substrings and join them back together with dashes\n    new_date = '-'.join([day, month, year])\n\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_pattern = re.compile(r'^\\d{4}-\\d{2}-\\d{2}$')\n    if not date_pattern.match(dt):\n        return dt\n    year, month, day = dt.split('-')\n    return day + '-' + month + '-' + year"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}' # regex pattern for date in yyyy-mm-dd format\n    match = re.search(pattern, dt) # search for date in string\n    if match: # if date found\n        date = match.group() # get matched date\n        new_date = date[6:4] + '-' + date[4:2] + '-' + date[2:0] # format date in dd-mm-yyyy format\n        return new_date # return new date in dd-mm-yyyy format\n    else:\n        return dt # return original date if not found"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Do shell sort for each gap size\n    for gap in range(n//2, 0, -1):\n        # Insertion sort for each gap size\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n            \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Do increments of the first hth element (h = 1, 3, 5,...)\n    for h in range(1, n//2+1):\n        # Do a gapped insertion sort for this increment\n        for i in range(h, n):\n            # The following line is the shell sort key comparison\n            # The key is the element being compared\n            key = my_list[i]\n            # Find the correct position for the key in the list\n            j = i\n            while j >= h and my_list[j-h] > key:\n                # Move elements over by h positions\n                my_list[j] = my_list[j-h]\n                j -= h\n            # Insert the key at the correct position\n            my_list[j] = key\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest integer in the list\n    largest = my_list[-1]\n    for i in range(len(my_list)-2, -1, -1):\n        if my_list[i] > largest:\n            largest = my_list[i]\n\n    # Perform the shell sort algorithm\n    gap = largest // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Calculate the gap sequence\n    gap = n // 2\n    while gap > 0:\n        # Shift the gap\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # Move elements of arr[0..gap-1], that are greater than arr[gap], to one position ahead of their current position\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n/3:\n        h = 3*h + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h //= 3"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same number of elements.\")\n        return None\n    \n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Extract the elementwise and tuples from the two input tuples\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # initialize the result tuple with zeros\n    result_tup = (0, 0)\n    # loop through the two tuples\n    for i in range(len(test_tup1)):\n        # extract the elements from the two tuples at the same index\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        # perform the elementwise and operation\n        result_tup = (result_tup[0] & elem1, result_tup[1] & elem2)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i], test_tup1[i], test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Both tuples must have the same number of elements.\"\n    # Extract the elementwise and tuples\n    and_tup = tuple(x and y for x, y in zip(test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return tuple(and_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the corresponding elementwise and tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize a new empty list to store the resulting tuples\n    result = []\n    \n    # loop through the tuples and compare each element\n    for i in range(len(test_tup1)):\n        # check if both elements are True using the bitwise AND operator\n        if test_tup1[i] and test_tup2[i]:\n            # if both elements are True, append the corresponding tuple to the result list\n            result.append((test_tup1[i], test_tup2[i]))\n    \n    # return the result list of tuples\n    return result"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n    elif discriminant == 0:\n        x1 = x2 = -b / (2*a)\n    else:\n        print(\"The equation of the parabola does not have a real root.\")\n        \n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta >= 0:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n    else:\n        x1 = 0\n        x2 = 0\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        root1 = (-b + math.sqrt(discriminant))/(2*a)\n        root2 = (-b - math.sqrt(discriminant))/(2*a)\n        print(\"The directrix is\", root1)\n        print(\"The directrix is\", root2)\n    elif discriminant == 0:\n        root = (-b)/(2*a)\n        print(\"The directrix is\", root)\n    else:\n        print(\"There is no real root\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        print(\"The directrix is x1 =\", x1, \" and x2 =\", x2)\n    elif discriminant == 0:\n        x1 = -b/(2*a)\n        x2 = -b/(2*a)\n        print(\"The directrix is x =\", x1)\n    else:\n        print(\"The equation has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (-b + discriminant**0.5)/(2*a)\n    elif discriminant == 0:\n        return -b/(2*a)\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    Parameters:\n    a (float): The first coefficient of the parabola.\n    b (float): The second coefficient of the parabola.\n    c (float): The constant term of the parabola.\n\n    Returns:\n    float: The value of the directrix of the parabola.\n    \"\"\"\n    delta = b ** 2 - 4 * a * c\n    if delta > 0:\n        x1 = (-b + delta ** 0.5) / (2 * a)\n        x2 = (-b - delta ** 0.5) / (2 * a)\n        return x1, x2\n    elif delta == 0:\n        return None\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function finds the directrix of a parabola.\n\n    :param a: The first coefficient of the parabola.\n    :param b: The second coefficient of the parabola.\n    :param c: The constant term of the parabola.\n    :return: The directrix of the parabola.\n    \"\"\"\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # If the discriminant is positive, there is a real root\n    if disc > 0:\n        root1 = (-b + disc**0.5) / (2*a)\n        root2 = (-b - disc**0.5) / (2*a)\n        return root1, root2\n\n    # If the discriminant is zero, there is only one real root\n    elif disc == 0:\n        root1 = -b / (2*a)\n        root2 = -b / (2*a)\n        return root1\n\n    # If the discriminant is negative, there are two complex conjugate roots\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # calculate the discriminant of the quadratic equation\n    discriminant = b**2 - 4*a*c\n\n    # calculate the two solutions of the quadratic equation\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n\n    # sort the solutions in ascending order\n    x1, x2 = sorted((x1, x2))\n\n    # return the first solution (which is the directrix)\n    return x1"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Find the discriminant of the quadratic equation\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # The directrix is the point where the equation crosses the x-axis\n        directrix = (-b + discriminant**0.5)/(2*a)\n    \n    elif discriminant == 0:\n        # The directrix is the point where the equation has a vertical tangent line\n        directrix = -b/(2*a)\n    \n    else:\n        # The directrix is the point where the equation has a horizontal tangent line\n        directrix = -c/(2*b)\n        \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Solve for the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive or negative, meaning the parabola has two different roots\n    if discriminant > 0:\n        # Find the two roots of the parabola\n        root1 = (-b + math.sqrt(discriminant)) / (2*a)\n        root2 = (-b - math.sqrt(discriminant)) / (2*a)\n        \n        # Sort the roots in ascending order\n        roots = sorted([root1, root2])\n        \n        # Return the first root\n        return roots[0]\n    \n    # If the discriminant is zero, the parabola has one root\n    elif discriminant == 0:\n        root = -b / (2*a)\n        return root\n    \n    # If the discriminant is negative, the parabola has no real roots\n    else:\n        return \"No real roots\""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in list1:\n            if i in list2:\n                return True\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for element in list1:\n        if element in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # check if the two lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    # iterate over each element in list1\n    for element in list1:\n        # check if the element is also in list2\n        if element in list2:\n            return True\n    # if no common element was found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # check if the lists have the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # check if there is at least one element that is in both lists\n    for element in list1:\n        if element in list2:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    half_height = height / 2\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    base_area = 0.5 * base1 * (height - half_height) + 0.5 * base2 * (height - half_height)\n\n    if base_area > area:\n        median = 0.5 * (base1 + base2)\n    else:\n        median = 0.5 * (base1 + base2) - 0.5 * half_height\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the length of the median trapezium given its base lengths and height.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n    \n    # Calculate the length of each half of the trapezium\n    half_base1 = base1 / 2\n    half_base2 = base2 / 2\n    \n    # Calculate the length of the top half of the trapezium\n    top_half = area / half_base1\n    \n    # Calculate the length of the bottom half of the trapezium\n    bottom_half = area / half_base2\n    \n    # Calculate the median length of the trapezium\n    median = max(top_half, bottom_half)\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the length of the base that is taller than the height\n    taller_base = max(base1, base2)\n    \n    # Calculate the length of the base that is shorter than the height\n    shorter_base = min(base1, base2)\n    \n    # Calculate the length of the shorter base that meets the area constraint\n    shorter_base_length = (area / shorter_base) ** 0.5\n    \n    # Calculate the length of the longer base that meets the area constraint\n    longer_base_length = (area / longer_base) ** 0.5\n    \n    # Calculate the length of the trapezium that meets the area constraint\n    trapezium_length = (shorter_base_length + longer_base_length) / 2\n    \n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    #Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    #Calculate the length of the base1 side\n    base1_length = (area - base2**2) / base1\n\n    #Calculate the length of the base2 side\n    base2_length = area / base2\n\n    #Calculate the length of the hypotenuse\n    hypotenuse_length = 0.5 * (base1_length + base2_length)\n\n    #Find the perimeter of the trapezium\n    perimeter = 2 * (base1_length + base2_length + hypotenuse_length)\n\n    #Calculate the area of the trapezium using Heron's formula\n    area_trapezium = 0.5 * base1 * (base1_length + base2_length)\n\n    #Calculate the median length of the trapezium\n    if perimeter == area_trapezium:\n        median_length = 0.5 * (base1_length + base2_length)\n    elif perimeter > area_trapezium:\n        median_length = hypotenuse_length\n    else:\n        median_length = base1_length\n\n    return median_length\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the length of the base of the trapezium\n    base = (area / height) * base1\n    \n    # Calculate the length of the top of the trapezium\n    top = (area / height) * base2\n    \n    # Calculate the length of the trapezium\n    trapezium = 2 * (base + top)\n    \n    # Calculate the median length of the trapezium\n    median = trapezium / 2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium\n    trapezium_length = (base1 + base2) * height / 2\n    \n    # Calculate the difference between the base and the height\n    difference = abs(base1 - base2)\n    \n    # Calculate the median length\n    median_length = (trapezium_length + difference) / 2\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1+base2)/2 * height\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n    \n    # Calculate the area of the triangle formed by the base of each trapezium and the height\n    base1_triangle = 0.5 * area * base1\n    base2_triangle = 0.5 * area * base2\n    \n    # Calculate the length of the midpoint of the longest side of the trapezium\n    midpoint = (base1 + base2 + height) / 2\n    \n    # Calculate the median of the lengths of the two triangles\n    median1 = max(base1_triangle, base2_triangle)\n    median2 = min(base1_triangle, base2_triangle)\n    \n    # Calculate the median of the two midpoints\n    median3 = (midpoint + base1) / 2\n    median4 = (midpoint + base2) / 2\n    \n    # Calculate the median of the two medians\n    median = (median1 + median2 + median3 + median4) / 4\n    \n    # Return the median\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # Calculate the length of the two halves of the trapezium\n    half_height = height / 2\n    half_area = area / 2\n    half_length1 = half_area / base1\n    half_length2 = half_area / base2\n\n    # Determine the median length of the trapezium\n    if half_length1 <= half_length2:\n        median_length = half_length1\n    else:\n        median_length = half_length2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    # Calculate the length of the base of each trapezium\n    trapezium1_length = 0.5 * base1\n    trapezium2_length = 0.5 * base2\n\n    # Calculate the area of the trapeziums\n    trapezium1_area = 0.5 * base1 * height\n    trapezium2_area = 0.5 * base2 * height\n\n    # Calculate the length of the trapezium\n    trapezium_length = trapezium1_length + trapezium2_length\n\n    # Calculate the area of the trapezium\n    trapezium_area = trapezium1_area + trapezium2_area\n\n    # Calculate the median length of the trapezium\n    median_length = 0.5 * trapezium_length\n\n    # Calculate the area of the median trapezium\n    median_area = 0.5 * trapezium_length * height\n\n    # Calculate the percentage difference between the areas of the two trapeziums\n    percentage_difference = abs(median_area - trapezium_area) / trapezium_area * 100\n\n    # Determine which trapezium is the median trapezium based on the percentage difference\n    if percentage_difference > 25:\n        return f\"The median length of the trapezium is {median_length:.2f}.\"\n    else:\n        return f\"The median length of the other trapezium is {median_length:.2f}.\""
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # Calculate the midpoints of the trapezium\n    mid1 = 0.5 * perimeter\n    mid2 = mid1 + base1 + base2\n\n    # Calculate the lengths of the trapezium segments\n    l1 = math.sqrt(area1 * height)\n    l2 = math.sqrt(area2 * height)\n\n    # Calculate the lengths of the trapezium medians\n    m1 = 0.5 * (l1 + l2)\n    m2 = 0.5 * (l1 - l2)\n\n    # Calculate the area of the median trapezium\n    area_median = area1 + area2 + (l1 * l2) * 0.5\n\n    # Calculate the median length of the trapezium\n    median_length = math.sqrt(area_median * 0.5)\n\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # Check if the number entered is greater than any element of the array\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n\n    # If the number is greater than all the elements of the array, return False\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a+b\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'\\ba\\w*\\bc\\w*\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string and returns True if it has an a followed by one or more b's, and False otherwise.\n    '''\n    pattern = r'a(?=b{1,})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba\\w*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a.*b\"\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba\\w*\\b\\d{1,}\\b\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a(b)+')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(?=[^a]*b)')\n    result = pattern.search(text)\n    if result:\n        return result.start(), result.end()\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its last digit.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the last digit of the input number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return last_Digit(n // 10) + n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return last_Digit(n // 10) + n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int(str(n)[-1])"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function returns the negative numbers in the given list.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negatives = []\n    for num in list1:\n        if num < 0:\n            negatives.append(num)\n    return negatives"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # create an empty list to store the odd characters\n    odd_chars = []\n    # loop through each character in the input string\n    for char in str1:\n        # check if the character is odd\n        if char % 2!= 0:\n            # if it is odd, add it to the odd_chars list\n            odd_chars.append(char)\n    # join the odd characters into a string and return it\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(c for c in str1 if c.isalpha())"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha() and char.islower():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            if int(char) % 2!= 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if ord(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalpha():\n            if int(char) % 2 == 0:\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_chars = []\n    for char in string:\n        if ord(char) % 2!= 0:\n            odd_chars.append(char)\n    return \"\".join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the even characters\n    result = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is an even number, add it to the result string\n        if int(char) % 2 == 0:\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(string):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in string if char.isalnum()])"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j] == test_list[len(test_list)-1-i]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i == j:\n                continue\n            if (test_list[i], test_list[j]) in test_list[j:i:-1] or (test_list[j], test_list[i]) in test_list[i:j:-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j] and test_list[j] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_number = 1\n    for num in L:\n        single_number *= num\n    return single_number"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 0\n    for num in L:\n        if num < 0:\n            num = abs(num)\n        single += num\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to store the result\n    result = 0\n\n    # iterate over the list of integers\n    for num in L:\n        # check if the current number is multiple of 2\n        if num % 2 == 0:\n            # add the number to the result\n            result += num\n\n    # return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total = total * num\n    return total\n"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 1\n    for num in L:\n        single *= num\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 1\n    for i in L:\n        single *= i\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize a variable to store the single integer\n    single_int = 0\n\n    # Loop through each element in the list\n    for num in L:\n        # If the current element is a multiple of 10, add it to the single integer\n        if num % 10 == 0:\n            single_int += num\n        # If the current element is a multiple of 5 but not a multiple of 10, add it to the single integer\n        elif num % 5 == 0 and num % 10!= 0:\n            single_int += num\n        # If the current element is not a multiple of either 5 or 10, add it to the single integer\n        else:\n            single_int += num\n\n    # Return the single integer\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*er\\b', text)\n    \n    # If there are no adverbs, return None\n    if not adverbs:\n        return None\n    \n    # Find the index of the first adverb\n    start_index = text.find(adverbs[0])\n    \n    # Find the end index of the first adverb\n    end_index = start_index + len(adverbs[0])\n    \n    # Return a list of tuples containing the adverb and its index in the sentence\n    return [(adverb, start_index) for adverb in adverbs]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Create a regular expression pattern to match adverbs\n    pattern = r\"\\b\\w+(?:\\s+\\w+)*\\s+\\w+\\b\"\n\n    # Find all the matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n\n    # Extract the adverb and its position from the matches\n    adverbs = [(match, text.find(match)) for match in matches[0]]\n\n    # Sort the adverbs based on their position in the sentence\n    adverbs.sort(key=lambda x: x[1])\n\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Create a regular expression pattern to match adverbs\n    pattern = r'\\b([a-zA-Z]+) ([a-zA-Z]+)s?\\b'\n\n    # Use the re.findall() method to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # If no matches are found, return None\n    if not matches:\n        return None\n\n    # Extract the first match and return it as a tuple\n    return (matches[0][0], matches[0][1])"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b(?:a|an|the|that|these|those|this|those|there|whose|which|whom|whose|whichever|whatever|whichever|who|whom|whose|whatever)\\b')\n    \n    # Find all adverbs in the text and their positions in the sentence\n    matches = pattern.finditer(text)\n    \n    # Initialize a dictionary to store the adverbs and their positions\n    adverb_positions = {}\n    \n    # Iterate over the matches and add them to the dictionary\n    for match in matches:\n        adverb = match.group(0)\n        position = match.start()\n        \n        # If the adverb is already in the dictionary, update its position\n        if adverb in adverb_positions:\n            adverb_positions[adverb] = max(adverb_positions[adverb], position)\n        else:\n            adverb_positions[adverb] = position\n    \n    # Return the dictionary with adverbs and their positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define the regular expression pattern for finding adverbs\n    pattern = r'\\b\\w+ing\\b|\\b\\w+ed\\b|\\b\\w+es\\b'\n    # use the regular expression pattern to find all occurrences of adverbs in the text\n    matches = re.findall(pattern, text)\n    # return a dictionary with the adverbs as keys and their positions as values\n    return {match: text.index(match) for match in matches}"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b\\w*[aeiouAEIOU][a-z]*\\b'\n\n    # Use the re.findall() function to find all the adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Define an empty list to store the adverb positions\n    positions = []\n\n    # Loop through all the adverbs found\n    for i, adverb in enumerate(adverbs):\n        # Check if the current adverb is a proper adverb\n        if adverb.endswith('er') or adverb.endswith('est') or adverb.endswith('est'):\n            # If the current adverb is a proper adverb, append its position to the list of positions\n            positions.append(i)\n\n    # Return the list of adverb positions\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regular expression pattern for adverbs\n    pattern = r'\\b(can|could|should|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will|could|may|might|must|shall|should|will"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w+ed\\b', text)\n    \n    # Find their positions in the sentence\n    adverb_positions = [m.start() for m in re.finditer(r'\\b\\w+ed\\b', text)]\n    \n    return adverbs, adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define a pattern for finding adverbs\n    pattern = r'\\b([a-z]+)\\s*([a-z]*\\b(as|at|by|on|to|from|with|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind|through|under|over|beside|beneath|behind|above|below|around|across|along|behind"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define the regular expression pattern to match adverbs\n    adverb_pattern = re.compile(r'\\b([a-zA-Z]+)\\b')\n    \n    # Find all the matches in the given text\n    matches = adverb_pattern.findall(text)\n    \n    # Initialize a dictionary to store the positions and adverbs\n    adverbs = {}\n    \n    # Iterate over the matches and store their positions and adverbs in the dictionary\n    for i, match in enumerate(matches):\n        # Check if the match is already present in the dictionary\n        if match in adverbs:\n            # If it is, add the position of the match to the list of positions of the adverb\n            adverbs[match].append(i)\n        else:\n            # If it's not, add the match to the dictionary with the position as the list of positions of the adverb\n            adverbs[match] = [i]\n    \n    # Sort the dictionary based on the position of the adverb\n    sorted_adverbs = sorted(adverbs.items(), key=lambda x: x[1][0])\n    \n    # Return the sorted list of adverbs and their positions\n    return sorted_adverbs"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Formula for surface area of a cube\n    surface_area = 6 * l * l\n\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * math.pi * (l ** 3)\n    print(\"The surface area of the cube is:\", area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2) + 12 * l + 8\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2  # 6 times the volume of the cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    positive_ratio = positive_count / len(nums)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return count / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = array('i', [0])\n    neg = array('i', [0])\n    for num in nums:\n        if num > 0:\n            pos.itemset(0, pos.item(0) + 1)\n        else:\n            neg.itemset(0, neg.item(0) + 1)\n    if pos.item(0) == 0:\n        return 0\n    else:\n        return pos.item(0) / (pos.item(0) + neg.item(0))"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = array('i', [0])\n    neg_count = array('i', [0])\n    \n    for num in nums:\n        if num > 0:\n            pos_count.append(1)\n        elif num < 0:\n            neg_count.append(1)\n        else:\n            continue\n    \n    pos_num = pos_count.item()\n    neg_num = neg_count.item()\n    \n    if neg_num == 0:\n        return 0\n    else:\n        return pos_num / neg_num"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array of integers from the input list\n    arr = array('i', nums)\n    \n    # Count the number of positive numbers in the array\n    positive_count = arr.count(1)\n    \n    # Calculate the ration of positive numbers\n    ration = positive_count / len(nums)\n    \n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers and counts the number of positive numbers in it.\n    '''\n    # Create a new array to store the positive numbers\n    positive = array('i')\n\n    # Iterate over each number in the input array\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # Append the positive number to the new array\n            positive.append(num)\n\n    # Calculate the ratio of positive numbers to the total number of numbers\n    ratio = len(positive) / len(nums)\n\n    # Print the result\n    print(f\"The ratio of positive numbers to the total number of numbers is {ratio:.2f}\")"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for num in nums:\n        if num > 0:\n            positives += 1\n    return positives / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    arr = array('i', nums)\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            count += 1\n    return count / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    \n    # Loop through each number in the array\n    for num in nums:\n        \n        # If the number is positive, add it to the positive count\n        if num > 0:\n            positive_count += 1\n        \n        # If the number is negative, add it to the negative count\n        elif num < 0:\n            negative_count += 1\n        \n        # If the number is zero, add it to the zero count\n        elif num == 0:\n            zero_count += 1\n            \n    # Calculate the ration of positive numbers to all numbers in the array\n    positive_ratio = positive_count / len(nums)\n    \n    # Return the result as a tuple with the counts and the ration\n    return (positive_count, negative_count, zero_count, positive_ratio)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')  # initialize largest to negative infinity\n    for num in list1:\n        if num < 0:\n            largest = max(largest, num)\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list of numbers as input and returns the largest negative number in the list.\n    '''\n    max_num = list1[0]  # initialize the max_num to be the first number in the list\n    \n    for num in list1:\n        if num < 0 and num > max_num:  # check if the number is negative and larger than the current max_num\n            max_num = num  # update the max_num if the current number is larger\n    \n    return max_num  # return the max_num as the output"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    neg_num = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > neg_num:\n            neg_num = list1[i]\n    return neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as an input and returns the largest negative number found in the list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative integer in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list of integers as input and returns the largest negative number present in the list.\n    '''\n    largest = -float('inf') #initialize largest with smallest possible value\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num\n    return largest "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Initialize a variable to store the largest negative number\n    largest_neg = float('-inf')\n    # Iterate over each element in the list\n    for num in list1:\n        # If the current element is negative, update the largest_neg variable\n        if num < 0:\n            largest_neg = max(largest_neg, num)\n    # Return the largest negative number\n    return largest_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][-K:])"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[K:])\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(i[:k]) for i in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = (tup[0], tup[1][K:])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n\n    # iterate through each tuple in the list\n    for tup in test_list:\n        # initialize a variable to store the trimmed tuple\n        trimmed_tup = ()\n\n        # iterate through each element in the tuple and trim each element by k\n        for elem in tup:\n            trimmed_elem = elem[K:] if elem[:K] == () else elem[:K]\n            trimmed_tup += (trimmed_elem,)\n\n        # add the trimmed tuple to the list of trimmed tuples\n        trimmed_list.append(trimmed_tup)\n\n    # return the list of trimmed tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Loop through each element in the tuple\n        for j in range(len(test_list[i])):\n            # If the current element is greater than k, trim the tuple by k\n            if test_list[i][j] > K:\n                test_list[i] = test_list[i][:j] + test_list[i][j+1:]\n                break"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup)[:K]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t) for t in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j > K:\n                del test_list[i][j]"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize an empty result list\n    result = []\n    # iterate through both tuples\n    for i in range(len(test_tup1)):\n        # multiply the corresponding elements of the two tuples and append the result to the result list\n        result.append(test_tup1[i] * test_tup2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # iterate through the tuples and multiply each element\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = [test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))]\n        return result\n    else:\n        return \"The two tuples should have the same length.\""
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples should be equal.\")\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] * test_tup2[i])\n        return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    \n    for elem in tup:\n        if elem in count:\n            result[elem] = count[elem]\n    \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = Counter(tup)\n    total_count = sum(count_dict.values())\n    for key in count_dict:\n        count_dict[key] = count_dict[key]/total_count*100\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst) \n    for i in tup: \n        if i in count: \n            count[i] += 1 \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function takes a tuple and a list as input and returns a dictionary containing the count of occurrence of each element in the list in the tuple.\n    \"\"\"\n    count_dict = Counter(tup)\n    count_dict['None'] = 0 # To count the number of times 'None' element is present in the tuple\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n    for i in range(len(tup)):\n        if tup[i] in count_dict:\n            if tup[i] in result:\n                result[tup[i]] += 1\n            else:\n                result[tup[i]] = 1\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    return Counter(tup)\n    \ntup = (1,2,3,4,5)\nlst = [1,2,3,4,5]\nprint(count_Occurrence(tup, lst))"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count = Counter(tup)\n    for i in lst:\n        count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for element in lst:\n        counter[element] += 1\n    return counter"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Creating a Counter object from the list \n    count_dict = Counter(lst) \n\n    # Using the Counter object to count the occurrence of all elements of the tuple \n    result = [] \n    for i in tup: \n        if i in count_dict: \n            result.append(count_dict[i]) \n\n    return result "
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    total_sum = 0\n    for i in range(n):\n        total_sum += perrin_numbers[i]\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers.\n\n    Parameters:\n    n (int): The number of terms to calculate.\n\n    Returns:\n    int: The sum of the Perrin numbers.\n    \"\"\"\n    s = 0\n    p = 1\n    for i in range(1, n+1):\n        s += p\n        p = (3 * p) + 1\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i\n    return sum\n\nprint(cal_sum(10)) # Output: 55"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the perrin numbers is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    sum_of_perrin_numbers = 0\n\n    # iterate for n number of times\n    for i in range(1, n+1):\n        perrin_number = i*i - 1\n        perrin_numbers.append(perrin_number)\n        sum_of_perrin_numbers += perrin_number\n\n    return perrin_numbers, sum_of_perrin_numbers\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 3, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n    total_sum = 0\n\n    for num in perrin_numbers:\n        if num < n:\n            total_sum += num\n\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_num = 1\n    sum_perrin = 0\n    \n    for i in range(1, n+1):\n        sum_perrin += perrin_num\n        perrin_num += 1\n    \n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3 - 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n    \"\"\"\n    if size > len(str_list):\n        print(\"Size is greater than length of list.\")\n        return\n    \n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n            \n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of string values and a specified size of strings to extract.\n    It returns a list of extracted string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer representing the size of the strings to be extracted.\n    It returns a new list containing the extracted strings from the original list.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) <= size:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a specified size as input and returns a new list of strings\n    containing the specified size of strings from the input list.\n    \"\"\"\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # Initialize an empty list to store the extracted strings\n    extracted_str = []\n    \n    # Loop through the list of strings\n    for i in l:\n        # If the length of the current string is equal to the specified size, append it to the extracted list\n        if len(i) == l:\n            extracted_str.append(i)\n    \n    # Return the extracted list\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer value for the desired size of the extracted strings.\n    The function returns a new list of strings of the specified size.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        extracted_list.append(str_list[i][:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts strings from a list of strings of a specified size.\n\n    :param str_list: list of strings to extract strings from\n    :param size: size of each string to extract\n    :return: list of extracted strings\n    \"\"\"\n\n    # Create an empty list to store extracted strings\n    extracted_strings = []\n\n    # Loop through the list of strings\n    for i in range(len(str_list)):\n        # Extract a string of the specified size from the list\n        extracted_strings.append(str_list[i][:size])\n\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract the specified size of strings from a list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \"\"\"\n    # Remove whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Convert the string to lowercase\n    text1 = text1.lower()\n    # Remove all whitespaces from the string\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    # remove leading and trailing whitespaces\n    text3 = text2.strip()\n    # return the modified string\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    # Remove all whitespaces using regular expression\n    text = re.sub('\\s+','', text)\n    # Remove extra spaces at the end\n    text = text.strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    # Remove extra spaces at the start and end of the string\n    text3 = re.sub(r'^\\s+', '', text2)\n    text4 = re.sub(r'\\s+$', '', text3)\n    # Return the final string without whitespaces\n    return text4"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_value = sale_amount - actual_cost\n    if loss_value > 0:\n        return loss_value\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        loss = sale_amount - actual_cost \n        return loss \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss >= 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumOfEvenFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of all even factors of n.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    if n > 1 and n % 2 == 0:\n        even_sum += n\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Check if the number is even \n    if n % 2 == 0 : \n        return 0\n\n    # Calculate the sum of even factors \n    sum = 0\n    for i in range(3, int(math.sqrt(n))+1, 2): \n        while n % i == 0 : \n            n = n // i\n            sum += i\n\n    # Add the remaining factor to the sum if it is even \n    if n > 2 : \n        sum += n\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_even_factors = 0\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_even_factors += i\n            \n    if n > 2:\n        sum_of_even_factors += n\n        \n    return sum_of_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even += i\n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n        i += 1\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes an integer as input and returns the sum of even factors of the number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        while n % i == 0:\n            sum += i\n            n = n // i\n    if n > 1:\n        sum += n\n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+[zZ]\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        print(f'Match found at index {match.start()} with value \"{match.group()}\":')\n        print(text[match.start():match.end()])\n    else:\n        print('No match found.')"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Find all words containing 'z' in the text\n    wordz_words = re.findall(r'\\b(z)\\w*\\b', text)\n    # Return the list of words containing 'z'\n    return wordz_words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\w+z\\w+', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z0-9]+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b[zZ]')\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if the given month number is between 1 and 12\n    if not (1 <= monthnum2 <= 12):\n        return \"Invalid month number\"\n    \n    # Check if the given month number contains 31 days\n    if monthnum2 == 2:\n        return \"2\"\n    elif (monthnum2 % 2) == 0:\n        return \"30\"\n    else:\n        return \"31\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum > 12:\n        return \"Invalid month number\"\n    elif monthnum % 2 == 0:\n        if monthnum == 2:\n            return \"31 days\"\n        else:\n            return days[monthnum-1]\n    else:\n        return days[monthnum-1]"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum2 in months:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    else:\n        print(\"Invalid Month Number!\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1, 13) and monthnum2 in month:\n        print(\"The given month number contains 31 days.\")\n    elif monthnum2 in range(1, 13) and monthnum2 not in month:\n        print(\"The given month number does not contain 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_dict = {'1': 31, '2': 28, '3': 31, '4': 30, '5': 31, '6': 30, '7': 31, '8': 31, '9': 30, '10': 31, '11': 30, '12': 31}\n    if monthnum in month_dict:\n        return month_dict[monthnum]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if the month number has 31 days and False otherwise.\n    \"\"\"\n    if monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    elif 1 <= monthnum <= 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Invalid month number.\")\n        return\n    else:\n        if monthnum2 == 2:\n            if ((year % 4 == 0 and year % 100!= 0) or year % 400 == 0):\n                print(\"31 days.\")\n            else:\n                print(\"29 days.\")\n        else:\n            print(\"30 days.\")"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1] # using slicing to reverse the string\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through the list of strings\n    for i in range(len(stringlist)):\n        # Reverse the current string\n        stringlist[i] = stringlist[i][::-1]\n    # Return the reversed list of strings\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop through each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string using the `reverse()` method\n        stringlist[i] = stringlist[i][::-1]\n    # return the modified list\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop through each string in the list\n    for i in range(len(stringlist)):\n        # split the string into individual characters\n        chars = list(stringlist[i])\n        # reverse the order of the characters in the list\n        chars.reverse()\n        # join the characters back into a string\n        stringlist[i] = ''.join(chars)\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list of sublists and returns the sublist having\n    the minimum length. If there are multiple sublists having same minimum\n    length, it returns the first one found.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst)\n    min_length = length\n    min_list = []\n    for i in range(length):\n        for j in range(length):\n            if i!= j:\n                sub_list = lst[i:j]\n                if len(sub_list) < min_length:\n                    min_length = len(sub_list)\n                    min_list = sub_list\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = None\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = []\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    \n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l*b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]\\w+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define the pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Use the pattern to find all uppercase substrings in the string\n    uppercase_matches = pattern.findall(str1)\n\n    # Iterate over all uppercase matches and replace them with an empty string\n    for match in uppercase_matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower() # convert string to lowercase to match regex pattern\n    pattern = r'(?i)\\b[a-z]+\\b' # regex pattern to match uppercase substrings\n    matches = re.findall(pattern, str1) # find all matches in string\n    for match in matches:\n        str1 = re.sub(r'\\b' + match + r'\\b', '', str1) # remove uppercase substrings from string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    uppercase_substrings = pattern.findall(str1)\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '', 1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]\\w+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase letters\n    pattern = re.compile(r'[^a-zA-Z]+')\n    # find all matches of the pattern in the string\n    matches = pattern.findall(str1)\n    # join the matches into a single string and return it\n    return ''.join(matches)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regex pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n\n    # use search() method to find all matches in the string\n    matches = pattern.findall(str1)\n\n    # iterate over the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n\n    Parameters:\n    string (str): A string containing uppercase substrings.\n\n    Returns:\n    str: The input string with uppercase substrings removed.\n    \"\"\"\n\n    # Use a regular expression to find all uppercase substrings\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    matches = re.findall(pattern, string)\n\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        string = string.replace(match, '')\n\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.append(Extract(item)[0])\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.append(item[0])\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a new list where each sublist has its first element extracted.\n    '''\n    new_lst = []\n    for i in lst:\n        if isinstance(i, list):\n            new_lst.append(i[0])\n        else:\n            new_lst.append(i)\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for sublist in lst:\n        if isinstance(sublist, list):\n            return sublist[0]\n    return []"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Find the length of the list\n    n = len(list1)\n\n    # Initialize a list to store the combinations\n    combinations = []\n\n    # Iterate over all possible indices for the first element\n    for i in range(n):\n        # Initialize a list to store the combination\n        combination = [list1[i]]\n\n        # Iterate over all possible indices for the remaining elements\n        for j in range(i+1, n):\n            # Add the next element to the combination\n            combination.append(list1[j])\n\n            # Append the combination to the list of combinations\n            combinations.append(combination)\n\n            # Remove the last element from the combination\n            combination.pop()\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list2 = []\n\n    for i in range(1, len(list1)+1):\n        for j in range(1, len(list1)+1):\n            if i!= j:\n                combination = list1[i-1], list1[j-1]\n                list2.append(combination)\n\n    return list2"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # create an empty list to store the combinations\n    result = []\n\n    # sort the list in ascending order\n    list1.sort()\n\n    # loop through all possible subsets of the sorted list\n    for i in range(len(list1)+1):\n        subset = []\n        for j in range(i):\n            subset.append(list1[j])\n        result.append(subset)\n\n    # return the list of all combinations\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations of its elements.\n    \"\"\"\n    n = len(lst)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            print(\" \".join(map(str, list1[i:j+1])))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize an empty list to store the combinations\n    combinations = []\n    \n    # Loop through each element in the list\n    for i in range(len(list1)):\n        # Initialize an empty list to store the combination of the current element\n        current_combination = []\n        \n        # Loop through each element after the current one\n        for j in range(i+1, len(list1)):\n            # Append the combination of the current element and the next element to the list\n            current_combination.append(list1[i]+list1[j])\n        \n        # Append the current combination to the list of all combinations\n        combinations.append(current_combination)\n    \n    # Return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        new_list = list1.copy()\n        del new_list[i]\n        for j in range(len(new_list) + 1):\n            comb = tuple(new_list[:j])\n            if j == len(new_list):\n                result.append(comb)\n            else:\n                for k in combinations_list(new_list[j:]):\n                    result.append(comb + k)\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Given an array of integers, find the maximum product subarray.\n\n    :param arr: array of integers\n    :return: maximum product subarray\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here, min_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr or len(arr) == 0:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        max_product = max(max_product, max_ending_here)\n        min_product = min(min_product, min_ending_here)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product *= -1\n            \n        current_product *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is negative, set the current_product to 1\n        if arr[i] < 0:\n            current_product = 1\n        # Update the current_product\n        else:\n            current_product *= arr[i]\n\n        # If the current product is greater than the max_product, update the max_product\n        if current_product > max_product:\n            max_product = current_product\n\n    # Return the maximum product subarray\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n        current_product *= arr[i]\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_ending_here *= arr[i]\n            min_ending_here = 1\n        elif arr[i] < 0:\n            min_ending_here *= arr[i]\n            max_ending_here = 1\n        else:\n            max_ending_here, min_ending_here = 1, 1\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n    \n    for i in range(1, len(arr)):\n        current_product = max(current_product * arr[i], arr[i])\n        max_product = max(max_product, current_product)\n    \n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[list(dict.keys())[0]]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return values.count(values[0]) == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values())!= 1:\n        return False\n    else:\n        for value in dict.values():\n            if value!= dict[list(dict.keys())[0]]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()\n    if len(value) == 1:\n        return True\n    for i in value:\n        if value.count(i)!= 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(\"All values are same in the dictionary\")\n    else:\n        print(\"Some values are different in the dictionary\")"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if value == dict.values()[0]:\n            count += 1\n        else:\n            return False\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Check if the length of the dictionary is same as the n\n    if len(dict)!= n:\n        return False\n\n    # Loop through the dictionary and compare each value with the first value\n    for value in dict.values():\n        if value!= dict.values()[0]:\n            return False\n\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    This function takes in a dictionary as input and returns a new dictionary with all empty items removed.\n    '''\n    return {k:v for k,v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    for key, value in dict1.items():\n        if value is None or value == '':\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_ending_here = arr[0]\n    min_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            max_so_far = max(max_so_far, max_ending_here)\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            min_so_far = min(min_so_far, min_ending_here)\n        else:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n    \n    for i in range(1, n):\n        max_product_ending_here = max(arr[i], max_product_ending_here*arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # Create an empty list to store the cumulative product of increasing subsequences\n    c_product = [1] * n\n    \n    # Calculate the cumulative product of increasing subsequences\n    for i in range(1, n):\n        c_product[i] = c_product[i-1] * arr[i]\n    \n    # Initialize variables to store the maximum product and the starting and ending indices of the increasing subsequence\n    max_product = 0\n    start = 0\n    end = 0\n    \n    # Traverse through the cumulative product array and find the maximum product formed by multiplying numbers of an increasing subsequence\n    for i in range(1, n):\n        if c_product[i] > max_product:\n            max_product = c_product[i]\n            start = i-1\n            end = i\n            \n    # Return the maximum product formed by multiplying numbers of an increasing subsequence\n    return max_product * arr[start] * arr[end]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * n  # Initialize the array dp with all 1's\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize variables to keep track of the maximum subsequence ending at each index\n    max_ending_here = [0] * n\n    max_so_far = [0] * n\n\n    # Initialize variables to keep track of the minimum subsequence ending at each index\n    min_ending_here = [0] * n\n    min_so_far = [0] * n\n\n    # Initialize the maximum subsequence ending at index 0\n    max_ending_here[0] = arr[0]\n    max_so_far[0] = arr[0]\n\n    # Iterate over the array from 1 to n-1\n    for i in range(1, n):\n        # Calculate the maximum subsequence ending at index i\n        if arr[i] > max_ending_here[i-1] * arr[i]:\n            max_ending_here[i] = arr[i]\n            max_so_far[i] = max_ending_here[i]\n        else:\n            max_ending_here[i] = max_ending_here[i-1] * arr[i]\n            max_so_far[i] = max_so_far[i-1]\n\n        # Calculate the minimum subsequence ending at index i\n        if arr[i] < min_ending_here[i-1] * arr[i]:\n            min_ending_here[i] = arr[i]\n            min_so_far[i] = min_ending_here[i]\n        else:\n            min_ending_here[i] = min_ending_here[i-1] * arr[i]\n            min_so_far[i] = min_so_far[i-1]\n\n    # The maximum product formed by multiplying numbers of an increasing subsequence of the array is the maximum product of the maximum subsequence ending at each index\n    return max(max_so_far)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Returns the maximum product formed by multiplying numbers of an increasing subsequence of `arr`.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # initialize max_product and curr_product\n    max_product = max_sum = arr[0]\n\n    # initialize left and right pointers\n    left, right = 0, 1\n\n    while right < n:\n        # if the next element is greater, update max_sum and max_product\n        if arr[right] > arr[max_sum]:\n            max_sum = right\n\n        # update curr_product\n        curr_product = arr[max_sum] * arr[right]\n\n        # update max_product if curr_product is greater\n        if curr_product > max_product:\n            max_product = curr_product\n\n        # move right pointer to the next element\n        right += 1\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0] * arr[1], arr[0] * arr[2], arr[1] * arr[2])\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers in an increasing subsequence of the array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    max1 = arr[0]\n    max2 = max1 * arr[0]\n    max3 = max1 * max2\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max3 = max2\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max3 = max2\n            max2 = arr[i]\n        elif arr[i] > max3:\n            max3 = arr[i]\n\n    return max3"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    # initialize the result tuple with the first two elements\n    result = (test_tup[0] + test_tup[1],)\n    # iterate over the remaining elements\n    for i in range(2, length):\n        # add the next element to the previous element and append the result to the result tuple\n        result = (result[-1] + test_tup[i],) + result\n    # return the result tuple with the pairwise additions of the neighboring elements\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"The tuple should contain at least two elements.\"\n    else:\n        n = len(test_tup)\n        for i in range(1, n-1):\n            test_tup[i] += test_tup[i-1] + test_tup[i+1]\n        return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        raise ValueError(\"The given tuple should have at least two elements.\")\n    result = 0\n    for i in range(1, len(test_tup)):\n        result += test_tup[i] - test_tup[i-1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    return sum(zip(*test_tup)[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through the tuple and add the adjacent elements\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    \n    # Return the result\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return sum(test_tup[i:i+2] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n\n    Args:\n        test_tup (tuple): A tuple of numbers to find the pairwise addition of its neighboring elements.\n\n    Returns:\n        int: The pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n\n    # Check if the tuple has at least two elements\n    if len(test_tup) < 2:\n        raise ValueError(\"The given tuple must have at least two elements.\")\n\n    # Initialize the sum of the neighboring elements to 0\n    sum_neighbors = 0\n\n    # Loop through the tuple and add the neighboring elements\n    for i in range(1, len(test_tup)-1):\n        sum_neighbors += test_tup[i]\n\n    # Return the sum of the neighboring elements\n    return sum_neighbors"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the sum variable to zero\n    pairwise_sum = 0\n\n    # Loop through the tuple and add the neighboring elements\n    for i in range(len(test_tup) - 1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n\n    # Return the pairwise sum\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    neighboring_elements = []\n    for i in range(len(test_tup)-1):\n        neighboring_elements.append(test_tup[i] + test_tup[i+1])\n    return neighboring_elements"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    for i in range(n):\n        if i < n - 1:\n            test_tup[i] += test_tup[i+1]\n    return test_tup"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two parameters, arr (a list) and n (an integer).\n    It returns the product of the array multiplication modulo n.\n    '''\n    # Initialize the result variable to 1\n    result = 1\n\n    # Iterate through each element in the array\n    for i in arr:\n        # Multiply the result by the current element and modulo n\n        result = (result * i) % n\n\n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two arguments - an array and a number n.\n    The function returns the product of the array multiplication modulo n.\n\n    Example:\n    arr = [2, 3, 4]\n    n = 7\n    Output: 21\n\n    '''\n    \n    # Initialize the product to 1\n    product = 1\n    \n    # Loop through the array and multiply each element with the product\n    for num in arr:\n        product = (product * num) % n\n        \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array and a number n and finds the remainder of the \n    product of the array with n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two parameters, an array and a number n.\n    It returns the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr: \n        result = (result*num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # Initialize the product and the remainder\n    product = 1\n    remainder = arr[0]\n    \n    # Iterate over the array and multiply each element with the product and the remainder\n    for i in range(1, len(arr)):\n        product = (product * remainder) % n\n        remainder = (remainder * arr[i]) % n\n        \n    # Return the product modulo n\n    return product % n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # check if the list is empty\n    if len(l) == 0:\n        return False\n    # check if the list has only one element\n    if len(l) == 1:\n        return True\n    # check if the list has at least two elements\n    elif len(l) >= 2:\n        # initialize the first and second elements of the list\n        first = l[0]\n        second = l[1]\n        # loop through the list starting from the third element\n        for i in range(2, len(l)):\n            # check if the current element is equal to the previous element + 1\n            if l[i] == first + 1:\n                # if it is, continue with the loop\n                continue\n            else:\n                # if it's not, return False\n                return False\n        # if the loop completes without returning False, return True\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            print(f\"The element at index {i} is consecutive.\")\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n):\n        if l[i]!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            count += 1\n        else:\n            count = 0\n    if count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, False otherwise.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    This function checks whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, and False otherwise.\n    '''\n\n    # Initialize variables to keep track of the current and previous numbers\n    current = None\n    prev_num = None\n\n    # Iterate through the list\n    for num in l:\n        # Check if the current number is consecutive to the previous one\n        if (current is not None) and (num == current + 1):\n            # If it is, update the previous number to the current number\n            prev_num = current\n\n        # If the current number is not consecutive to the previous one, reset the previous number\n        else:\n            prev_num = num\n\n        # Update the current number to the current number being checked\n        current = num\n\n    # If the previous number is not None, it means there were consecutive numbers in the list\n    if prev_num is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = []\n    for item in test_list1:\n        if item in test_list2 and item not in intersection:\n            intersection.append(item)\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1.sort()\n    test_list2.sort()\n    i = j = 0\n    intersect_list = []\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] < test_list2[j]:\n            i += 1\n        elif test_list1[i] > test_list2[j]:\n            j += 1\n        else:\n            intersect_list.append(test_list1[i])\n            i += 1\n            j += 1\n    return intersect_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_set = set()\n\n    # Loop through each tuple in the first list and add each element to the set\n    for tuple1 in test_list1:\n        for element in tuple1:\n            unique_set.add(element)\n\n    # Loop through each tuple in the second list and remove any elements that are not in the unique set\n    for tuple2 in test_list2:\n        for element in tuple2:\n            if element in unique_set:\n                unique_set.remove(element)\n\n    # Create a new set with the unique elements from both lists\n    intersection_set = set(unique_set)\n\n    # Convert the set to a tuple and return it\n    return tuple(intersection_set)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a dictionary to store the elements from both lists\n    dict_intersection = {}\n    for elem in test_list1 + test_list2:\n        dict_intersection[elem] = True\n    \n    # Create a list to store the intersection of elements\n    intersection_list = []\n    for elem in test_list1:\n        if elem in dict_intersection and dict_intersection[elem]:\n            intersection_list.append(elem)\n    \n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create an empty list to store the common elements\n    common_elements = []\n    # loop through each element in the first list\n    for element1 in test_list1:\n        # loop through each element in the second list\n        for element2 in test_list2:\n            # if both elements are equal, add it to the common_elements list\n            if element1 == element2:\n                common_elements.append(element1)\n    # return the common_elements list\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Converting the lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Finding the intersection of sets\n    intersection = set1.intersection(set2)\n    # Converting the intersection back to a list and returning it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create two sets to store the unique elements of each list\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find the intersection of the two sets and convert it back to a tuple\n    intersection = tuple(set1.intersection(set2))\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # converting the two given lists to sets to remove duplicates and sort them\n    set1 = set(sorted(test_list1))\n    set2 = set(sorted(test_list2))\n    \n    # creating an empty set to store the intersection of the two sets\n    intersection = set()\n    \n    # iterating over the first set and checking if each element is present in the second set\n    for i in set1:\n        if i in set2:\n            intersection.add(i)\n    \n    # converting the set back to a list and returning it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set to store unique elements of the first list\n    unique_set1 = set(test_list1)\n    # Create an empty set to store the common elements of the first list and the second list\n    common_set = set()\n    # Loop through the unique elements of the first list\n    for element in unique_set1:\n        # Check if the element is present in the second list\n        if element in test_list2:\n            # Add the element to the common set\n            common_set.add(element)\n    # Convert the common set to a list\n    common_list = list(common_set)\n    # Return the common list\n    return common_list\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Create a set of tuples from both lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set to a list and sort it based on the first element of each tuple\n    sorted_intersection = sorted(list(intersection), key=lambda x: x[0])\n\n    return sorted_intersection"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # split the string into a list of characters\n    lst = list(str1)\n    # iterate over the list and replace the characters\n    for i in range(len(lst)):\n        if lst[i] == ch:\n            lst[i] = newch\n    # convert the list back into a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1])\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items()))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    # Count the frequency of each value in the dictionary\n    counter = Counter(dict1.values())\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # count the occurrences of each element in the dictionary\n    c = Counter(dict1)\n    # sort the dictionary based on the values of its elements\n    sorted_dict = dict(sorted(c.items(), key=lambda x: x[1], reverse=True))\n    # return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the smallest and largest values in the array\n    smallest = max(nums)\n    largest = min(nums)\n\n    # Find the sum of the smallest and largest values\n    total = smallest + largest\n\n    return total"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # Return the sum of the largest and smallest values\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # Calculate the sum of the maximum and minimum values\n    big_sum = max_val + min_val\n    # Return the sum of the maximum and minimum values\n    return big_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Initialize variables to hold the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n\n    # Loop through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Find the smallest and largest value in the array\n    smallest = nums[0]\n    largest = nums[-1]\n    \n    # Calculate the sum of the smallest and largest value\n    sum_of_smallest_largest = smallest + largest\n    \n    # Return the sum of the smallest and largest value\n    return sum_of_smallest_largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = float('-inf')\n    min_val = float('inf')\n    \n    # Find the maximum and minimum values in the array\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether the string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all its characters are in lowercase and False otherwise.\n    '''\n    if all(char.islower() for char in string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'[a-z]+')\n    return lowercase_pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Args:\n        string (str): The string from which to remove lowercase substrings.\n\n    Returns:\n        str: The modified string with lowercase substrings removed.\n    \"\"\"\n\n    # Use regular expression to find all lowercase substrings in the string\n    lowercase_substrings = re.findall('[a-z]+', string)\n\n    # Iterate over all lowercase substrings and remove them from the string\n    for substring in lowercase_substrings:\n        string = string.replace(substring, '')\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    str2 = re.sub(pattern, '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings using regular expressions\n    str2 = re.sub(r'\\b[a-z]+\\b', '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)\\b[a-z]+\\b')\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str2)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the string\n    substrings = re.findall(r'[a-z]+', str1)\n    # Remove all lowercase substrings from the string\n    str1 = ''.join([char for char in str1 if char.isupper()])\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 1000"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n    # Get the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the input number to string\n    str_num = str(n)\n    # Find the first digit in the string\n    first_digit = str_num[0]\n    # Return the first digit\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer as input and returns its first digit.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Extract the first digit of the input number\n    first_digit = n // 10**len(str(n))\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the given number to string\n    num_str = str(n)\n    # Get the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Get the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer\n    first_int = int(first_char)\n    # Return the first integer value\n    return first_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_num = int(str(n)[0])\n    return first_num"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num%2!=0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list containing only the odd integers in the input list.\n    '''\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1, n+1)]\n    sum_cubes = sum(cubes)\n    sum_numbers = sum(range(1, n+1))\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum(x**3 for x in range(1, n+1))\n    sum_numbers = sum(range(1, n+1))\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize variables to store the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n\n    # Calculate the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n\n    # Calculate the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n\n    # Return the difference between the two sums\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(num**3 for num in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)\n\nprint(difference(10))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_natural\n    \n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    \n    for i in range(n+1):\n        sum_of_cubes += i ** 3\n        sum_of_numbers += i\n        \n    return abs(sum_of_cubes - sum_of_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        sum_of_natural_numbers += i\n    \n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of cubes of the first n natural numbers\n    cubes = sum(x**3 for x in range(n+1))\n\n    # sum of the first n natural numbers\n    sums = sum(range(1,n+1))\n\n    # calculate the difference between the two sums\n    return abs(cubes-sums)\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        xor = A[i]\n        for j in range(i+1, N):\n            xor = xor^A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    xor_count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                xor_count += 1\n    return xor_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count\n\nA = [int(x) for x in input().split()]\nN = len(A)\nresult = find_Odd_Pair(A, N)\nprint(result)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for i in range(N):\n        if A[i] in count_dict:\n            count_dict[A[i]] += 1\n        else:\n            count_dict[A[i]] = 1\n    \n    # Create a list to store the pairs\n    pair_list = []\n    \n    # Iterate over the elements of the dictionary\n    for key in count_dict:\n        # If the count is odd, add the pair to the list\n        if count_dict[key] % 2!= 0:\n            pair_list.append((key,key))\n    \n    # Return the length of the pair list\n    return len(pair_list)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a Python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    xor_sum = 0\n    for i in range(N):\n        xor_sum ^= A[i]\n        for j in range(i+1,N):\n            xor_sum ^= A[j]\n            if xor_sum & 1:\n                count += 1\n                xor_sum ^= A[i]\n                xor_sum ^= A[j]\n            xor_sum ^= A[i]\n            xor_sum ^= A[j]\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Iterate through each element of the list A\n    for i in range(N) : \n\n        # Iterate through each element of the list A again\n        for j in range(i+1,N) : \n\n            # XOR the two elements and check if the result is odd\n            if (A[i] ^ A[j]) % 2!= 0 :\n\n                # Increment the count variable\n                count += 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(char) ^ 32) if char.isupper() else char for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(c) ^ 32) if c.islower() else c for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize variables to store the sum of per-digit differences\n    total = 0\n    # Loop through each digit in the two integers\n    for digit in str(n1) + str(n2):\n        # Convert the current digit to an integer and add it to the sum of per-digit differences\n        total += int(digit) - int(digit)\n    # Return the total sum of per-digit differences\n    return total"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    n1_str = str(n1)\n    n2_str = str(n2)\n    for i in range(len(n1_str)):\n        diff += abs(int(n1_str[i]) - int(n2_str[i]))\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    for i in range(10):\n        diff = abs(n1 - n2) // 10 ** i\n        digit_sum += diff * (10 ** i)\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        diff += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        diff += abs(n1 // 10 ** i - n2 // 10 ** i)\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    difference = abs(n1 - n2)\n    sum_diff = 0\n    while difference > 0:\n        digit = difference % 10\n        sum_diff += digit ** 2\n        difference //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the numbers to lists of digits\n    num1_digits = [int(d) for d in str(n1)]\n    num2_digits = [int(d) for d in str(n2)]\n\n    # Find the difference between the two lists of digits\n    diff = [abs(num1_digits[i] - num2_digits[i]) for i in range(len(num1_digits))]\n\n    # Sum up the differences\n    return sum(diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize the sum variable to 0\n    sum_diff = 0\n    \n    # Loop through each digit of the two numbers\n    for i in range(10):\n        # Get the digit at position i of n1 and n2\n        digit_n1 = n1 // (10 ** i) % 10\n        digit_n2 = n2 // (10 ** i) % 10\n        \n        # Calculate the difference between the digits and add it to the sum variable\n        diff = abs(digit_n1 - digit_n2)\n        sum_diff += diff\n        \n    # Return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    n1 = int(str(n1))\n    n2 = int(str(n2))\n\n    sum_of_differences = 0\n    for i in range(len(str(n1))):\n        sum_of_differences += abs(n1%10 - n2%10)\n        n1 //= 10\n        n2 //= 10\n\n    return sum_of_differences"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    def recursive_digit_distance(num1, num2):\n        if len(str(num1))!= len(str(num2)):\n            return abs(num1 - num2)\n        else:\n            return sum([recursive_digit_distance(int(str(num1)[i]), int(str(num2)[i])) for i in range(len(str(num1)))] + [num1 - num2])\n\n    return recursive_digit_distance(n1, n2)"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = a[i]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(len(a)):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize two pointers to keep track of the starting and ending indices of the current subarray\n    start = 0\n    end = 0\n\n    # Initialize the maximum sum seen so far\n    max_sum = float('-inf')\n\n    # Loop through the array\n    while end < size:\n        # If the current subarray's sum is greater than the maximum sum seen so far, update the maximum sum\n        if a[end] + a[start] > max_sum:\n            max_sum = a[end] + a[start]\n\n        # If the current subarray's sum is negative, reset the subarray\n        if a[end] < 0:\n            start += 1\n\n        # Move the ending index one position to the right\n        end += 1\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes a list of integers and a size as arguments.\n    It finds the sum of the largest contiguous sublist in the list.\n    \"\"\"\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(arr, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, size):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    elif size == 2:\n        if a[0] > a[1]:\n            return a[0] + a[1]\n        else:\n            return a[1] + a[0]\n    else:\n        max_sum = float('-inf')\n        for i in range(size):\n            for j in range(i, size):\n                current_sum = sum(a[i:j+1])\n                max_sum = max(max_sum, current_sum)\n        return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize the maximum sum and the current sum to zero\n    max_sum = 0\n    current_sum = 0\n    \n    # Loop through the list and calculate the sum of the current subarray\n    for i in range(size):\n        current_sum += a[i]\n        \n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # If the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union = set(test_tup1) | set(test_tup2)\n    return sorted(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert tuples to lists for easier manipulation\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n\n    # find the union of the two lists using set union\n    union_list = list(set(test_list1 + test_list2))\n\n    # sort the union list in ascending order\n    union_list.sort()\n\n    # convert the sorted union list back to a tuple\n    union_tup = tuple(union_list)\n\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert tuples to lists to work with lists\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n    \n    # find the union of the two lists\n    union_list = list(set(tup1_list) | set(tup2_list))\n    \n    # sort the list in ascending order\n    union_list.sort()\n    \n    # convert the sorted list back to a tuple\n    union_tup = tuple(union_list)\n    \n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples\n    new_tup = test_tup1 + test_tup2\n    \n    # sort the new tuple in ascending order\n    new_tup.sort()\n    \n    # output the sorted tuple\n    print(new_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same number of elements.\")\n        return\n    \n    # Convert the input tuples into sets to remove duplicates\n    tup1_set = set(test_tup1)\n    tup2_set = set(test_tup2)\n    \n    # Find the union of the sets\n    union_set = tup1_set.union(tup2_set)\n    \n    # Convert the union set back into a tuple and sort it in ascending order\n    union_tup = tuple(sorted(union_set))\n    \n    print(\"Union of the elements in the given tuples:\", union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # get the union of the two tuples using set()\n    union_set = set(test_tup1 + test_tup2)\n    \n    # convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    \n    # output the union in sorted order\n    for element in union_list:\n        print(element)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # First, flatten the input tuples into lists\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n\n    # Find the union of the two lists\n    union_list = list(set(tup1_list + tup2_list))\n\n    # Sort the union list in ascending order and convert it back to a tuple\n    union_tup = tuple(sorted(union_list))\n\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Initialize an empty list to store the union\n    union = []\n\n    # Iterate through each element of the first tuple and append it to the union list\n    for element in test_tup1:\n        union.append(element)\n\n    # Iterate through each element of the second tuple and append it to the union list\n    for element in test_tup2:\n        union.append(element)\n\n    # Sort the union list in ascending order\n    union.sort()\n\n    # Return the sorted union list\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Create a new set to store the union of the elements of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it in ascending order\n    sorted_union = sorted(list(union_set))\n    # Output the sorted union of the elements of the two tuples\n    print(\"The sorted union of the elements of the two tuples is:\", sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # use set() function to remove duplicates from test_tup1\n    unique_tup1 = set(test_tup1)\n    \n    # use set() function to remove duplicates from test_tup2\n    unique_tup2 = set(test_tup2)\n    \n    # use union() function to find the union of unique_tup1 and unique_tup2\n    union_set = unique_tup1.union(unique_tup2)\n    \n    # convert the union_set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    \n    # output the sorted union_list\n    print(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j-i+1 > maxLength:\n                maxLength = j-i+1\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst, index=0, length=0, current_length=0, max_length=0):\n    '''\n    This function takes a list and returns the length of the longest sublist.\n    '''\n    if index == len(lst):\n        if current_length > max_length:\n            max_length = current_length\n        return max_length\n    \n    length += 1\n    if current_length + length > max_length:\n        max_length = current_length + length\n    \n    return Find_Max_Length(lst, index + 1, length, current_length + length, max_length)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n\n    # Loop through each element in the list\n    for i in range(len(lst)):\n        # Check if the element is the start of a new sublist\n        if i == 0:\n            current_length = 1\n        else:\n            # Add 1 to the current length if it's not the start of a new sublist\n            current_length += 1\n        # Update the maximum length if necessary\n        if current_length > max_length:\n            max_length = current_length\n\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize maximum length as 0\n    max_length = 0\n\n    # Iterate through the list\n    for i in range(len(lst)):\n\n        # Initialize the current length as 1\n        current_length = 1\n\n        # Iterate through the rest of the list\n        for j in range(i+1, len(lst)):\n\n            # Check if the current element is the same as the next element\n            if lst[j] == lst[j+1]:\n\n                # If it is, increment the current length by 1\n                current_length += 1\n\n            else:\n\n                # If it's not, update the maximum length if the current length is greater\n                if current_length > max_length:\n                    max_length = current_length\n\n                # Reset the current length to 1\n                current_length = 1\n\n        # Update the maximum length if the current length is greater\n        if current_length > max_length:\n            max_length = current_length\n\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initializing variables to keep track of the maximum length and the current length\n    max_len = 0\n    curr_len = 0\n\n    # Iterating through the list\n    for i in range(len(lst)):\n        # If the current element is greater than the previous element, increase the current length\n        if lst[i] > lst[i-1]:\n            curr_len += 1\n        else:\n            # If the current element is less than or equal to the previous element, reset the current length to 1\n            curr_len = 1\n        # If the current length is greater than the maximum length, update the maximum length\n        if curr_len > max_len:\n            max_len = curr_len\n\n    # Returning the maximum length found\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if max_length < j-i:\n                max_length = j-i\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        max_length = max(max_length, len(lst[i]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize max_len to 0\n    max_len = 0\n\n    # Iterate through each sublist in the list\n    for i in range(len(lst)):\n        # Initialize sublist_len to 0\n        sublist_len = 0\n        # Iterate through the remaining sublist elements\n        for j in range(i+1, len(lst)):\n            # Increment sublist_len by 1\n            sublist_len += 1\n            # Update max_len if the current sublist_len is greater\n            if sublist_len > max_len:\n                max_len = sublist_len\n\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=[\\s\\.,;:!?])\"(?=[^\\\"]*\"\\s*(?:$|[\\.,;:!?]))'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    # Define regular expression pattern to find all occurrences of quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # Use re.findall() function to find all matches in the string\n    matches = re.findall(pattern, text)\n\n    # Initialize empty list to store the extracted values\n    values = []\n\n    # Loop through all matches and extract the values\n    for match in matches:\n        # Remove any leading or trailing whitespace from the value\n        value = match.strip()\n        # Add the value to the list of extracted values\n        values.append(value)\n\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(?:[^\"]|\"\")*(?<!\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    matches = re.findall(pattern, text, re.DOTALL)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(\\w+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\\\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<=\")(?=\\w|[,.:;!?])')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and returns a list of all values found between quotation marks in the string.\n    '''\n    pattern = r'\"(?:[^\"\\\\]|\\\\.)*?(?:\\\\.)?\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    # Initialize a counter variable to keep track of the number of pairs\n    count = 0\n    \n    # Sort the input array in ascending order\n    arr.sort()\n    \n    # Iterate through the sorted array\n    for i in range(n-1):\n        # If the current element is not equal to the next element, increment the counter\n        if arr[i]!= arr[i+1]:\n            count += 1\n    \n    # Return the final count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n): \n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Convert the word to a list of characters\n    char_list = list(word)\n    # Join the list into a string\n    return ''.join(char_list)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    This function splits a string into characters.\n\n    Parameters:\n    word (str): The string to split.\n\n    Returns:\n    list: A list of characters in the string.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize sum to 0\n    sum_of_digits = 0\n    # convert n to a string\n    n_str = str(n)\n    # iterate through each digit of n_str and add it to sum_of_digits\n    for digit in n_str:\n        sum_of_digits += int(digit)\n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # initialize the sum variable to 0\n    total = 0\n    # loop through each digit in the list and add it to the total\n    for digit in digits:\n        total += digit\n    # return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # loop through each digit of the number\n    while n > 0:\n        # get the last digit of the number and add it to the sum\n        sum_of_digits += n % 10\n        # remove the last digit from the number\n        n //= 10\n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Get the digits of n\n    digits = [int(d) for d in str(n)]\n    # Compute the sum of digits\n    total = sum(digits)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a string\n    str_num = str(n)\n    # initialize the sum variable to 0\n    sum_ = 0\n    # iterate through the characters of the string\n    for char in str_num:\n        # convert each character to an integer\n        digit = int(char)\n        # add the integer to the sum\n        sum_ += digit\n    # return the sum\n    return sum_"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a list of digits\n    digits = list(str(n))\n    # Initialize the sum variable\n    sum = 0\n    # Loop through each digit and add it to the sum\n    for digit in digits:\n        sum += int(digit)\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the input number to a string and split it into individual digits\n    digits_str = str(n)\n    digits = [int(digit) for digit in digits_str]\n    # Sum up the digits and return the result\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] <= list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Initialize the variable to keep track of whether the list is sorted or not\n    is_sorted = True\n    # Traverse through the list from the second element to the last element\n    for i in range(1, len(list1)):\n        # If the current element is less than or equal to the previous element, then the list is not sorted\n        if list1[i] <= list1[i-1]:\n            is_sorted = False\n            break\n    return is_sorted"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is already sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append({})\n    return empty_dicts"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the given list of lists\n    for i in range(len(list1)):\n        # Convert the sublist to a string and split it into a list\n        temp = ''.join(list1[i])\n        # Sort the sublist using the sorted() function\n        list1[i] = sorted(temp)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    # loop through each sublist of strings in the given list\n    for sublist in list1:\n        # sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Initialize an empty list to store the unique numbers\n    unique_nums = []\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is not already in the unique_nums list, add it\n        if num not in unique_nums:\n            unique_nums.append(num)\n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    # Create a set of unique numbers from the given lists\n    unique_nums = set(sum(nums, []))\n\n    # Convert the set back to a list and remove duplicates\n    result = list(unique_nums)\n    result = list(set(result))\n\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Use set to remove duplicates from each list\n    for i in range(len(nums)):\n        nums[i] = set(nums[i])\n    # Convert each list to a list of lists\n    nums = [list(num) for num in nums]\n    # Use set to remove duplicates from the final list of lists\n    for i in range(len(nums)):\n        nums[i] = list(set(nums[i]))\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    # create an empty dictionary to store the unique numbers\n    unique_nums = {}\n    \n    # iterate through each list in the input list\n    for num_list in nums:\n        \n        # iterate through each number in the list\n        for num in num_list:\n            \n            # check if the number is already in the dictionary\n            if num in unique_nums:\n                \n                # if the number is already in the dictionary, remove it from the list\n                num_list.remove(num)\n                \n                # if the list is now empty after removing the duplicate number, remove the key from the dictionary\n                if not num_list:\n                    unique_nums.pop(num)\n            \n            # if the number is not already in the dictionary, add it to the dictionary with its list as the value\n            else:\n                unique_nums[num] = num_list\n                \n    # return the dictionary containing the unique numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set(nums)\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Initialize a set to store the unique numbers in the list\n    unique_nums = set()\n\n    # Iterate through the list and add each unique number to the set\n    for num in list_data:\n        unique_nums.add(num)\n\n    # Calculate the product of the unique numbers in the set\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    # Remove duplicates from the list and keep only the unique elements\n    unique_list = list(set(list_data))\n    # Calculate the product of the unique elements\n    product = 1\n    for element in unique_list:\n        product *= element\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = sorted(list(set(list_data)))\n    return unique_nums[0] * unique_nums[-1]"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_set = set(list_data)\n    product = 1\n\n    for num in unique_set:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of unique numbers from the list\n    unique_nums = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a set from the input list\n    unique_nums = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data) # remove duplicates\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    if len(unique_nums) == 0:\n        return 0\n    else:\n        return unique_nums[0] * unique_product(unique_nums[1:])"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Calculate the product of the unique numbers in a given list.\n\n    :param list_data: a list of numbers\n    :return: the product of the unique numbers in the list\n    '''\n    unique_nums = set(list_data)  # convert list to set of unique numbers\n    product = 1  # initialize product to 1\n    \n    for num in unique_nums:\n        product *= num  # multiply by each unique number\n    \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = math.pi * r**2 * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: surface area of the cylinder\n    \"\"\"\n    return 2 * 3.14 * r**2 + 2 * 3.14 * h * r"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * pi * r * h  # formula for surface area of a cylinder\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h  # Formula for surface area of a cylinder"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # convert radius and height to meters\n    r = r * 1000\n    h = h * 1000\n\n    # calculate the area of the base of the cylinder\n    A = 2 * 3.14159 * r * r\n\n    # calculate the surface area of the cylinder\n    S = 2 * 3.14159 * r * h\n\n    return S, A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * pi * r * r + 2 * pi * r * h + pi * h * h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * (r**2 + h**2)\n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while j < len(A):\n        if A[j] == B[i]:\n            i += 1\n            if i == len(B):\n                return True\n        j += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    elif len(A) == len(B):\n        return A == B\n    else:\n        for i in range(len(A)):\n            if A[i] in B:\n                A.pop(i)\n                return is_Sub_Array(A,B)\n            else:\n                return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): \n        return False\n    if len(B) == 0: \n        return True\n    i = 0\n    j = 0\n    while j < len(A): \n        if A[j] == B[0]: \n            i = j \n            while i < len(A) and A[i] == B[0]: \n                i += 1 \n            if i == len(A): \n                return True \n            j = i + 1 \n        else: \n            j += 1 \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not isinstance(A, list) or not isinstance(B, list):\n        return False\n    elif len(A) > len(B):\n        return False\n    \n    i = 0\n    j = 0\n    n = len(A)\n    m = len(B)\n    while i < n and j < m:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n            \n    return j == m"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) >= len(B):\n        for i in range(len(A) - len(B) + 1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not isinstance(A, list) or not isinstance(B, list):\n        return False\n    \n    A.sort()\n    B.sort()\n    \n    i = 0\n    j = 0\n    \n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    \n    return j == len(B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B):\n    # check if the first list is empty\n    if len(A) == 0:\n        return True\n\n    # find the index of the last element of the first list\n    last_index = len(A) - 1\n\n    # iterate over the second list\n    for i in range(len(B)):\n        # check if the current element of the second list is equal to the first element of the first list\n        if B[i] == A[0]:\n            # if yes, move the last index of the first list to the current index and repeat the process\n            last_index = i\n            continue\n\n        # if the current element of the second list is not equal to the first element of the first list, \n        # set the last index of the first list to the current index minus 1\n        last_index = i - 1\n\n        # check if the last index of the first list is greater than or equal to the length of the second list\n        if last_index < len(A) - len(B) + 1:\n            break\n\n    # if the loop completes without finding any mismatch, the second list is a sublist of the first list\n    return True if last_index == len(A) - len(B) else False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize factorial variable and last digit variable\n    factorial = 1\n    last_digit = 0\n    \n    # loop through each digit of the number\n    for i in str(n):\n        # convert digit to integer\n        digit = int(i)\n        \n        # calculate the factorial of the current digit\n        factorial *= digit\n        \n        # find the last digit in the factorial\n        last_digit = factorial % 10\n    \n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Calculate the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n        \n    # Extract the last digit of the factorial and return it\n    return int(factorial % 10)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a number as input and finds the last digit of its factorial.\n    '''\n    fact = 1\n    while n > 0:\n        fact = fact * n\n        n = n - 1\n    return fact % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    # find the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # get the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the result variable to 0\n    last_digit = 0\n\n    # Find the factorial of the input number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Extract the last digit from the factorial and store it in the last_digit variable\n    last_digit = int(str(factorial)[-1])\n\n    # Return the last_digit variable\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a number as input and returns the last digit of its factorial.\n    '''\n    if n < 0:\n        n = -n  # to make the factorial calculation work for negative numbers as well\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10  # calculates the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize variables\n    factorial = 1\n    last_digit = 0\n\n    # calculate factorial\n    for i in range(1, n+1):\n        factorial *= i\n\n    # find last digit\n    last_digit = factorial % 10\n\n    # return last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Initialize the result variable with 1\n    result = 1\n    \n    # Loop through each digit in the input number\n    for i in range(len(str(n))):\n        # Get the current digit\n        digit = int(str(n)[i])\n        \n        # Calculate the factorial of the current digit\n        factorial = 1\n        for j in range(1, digit+1):\n            factorial *= j\n        \n        # Add the factorial of the current digit to the result\n        result += factorial\n    \n    # Return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = int(factorial % 10)\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes three lists of equal length, and returns a single flat list\n    that contains all the elements of the original lists interleaved.\n    '''\n    # Initialize an empty list to store the interleaved elements\n    interleaved_list = []\n    # Initialize two pointers for each list\n    i = j = k = 0\n    # While there are still elements in the lists to be processed\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        # Add the first element of the first list to the interleaved list\n        interleaved_list.append(list1[i])\n        # Move both pointers for the first list one step forward\n        i += 1\n        j += 1\n        # Add the second element of the second list to the interleaved list\n        interleaved_list.append(list2[j])\n        # Move both pointers for the second list one step forward\n        j += 1\n        k += 1\n        # Add the third element of the third list to the interleaved list\n        interleaved_list.append(list3[k])\n        # Move both pointers for the third list one step forward\n        k += 1\n    # If there are any remaining elements in the first list\n    if i < len(list1):\n        # Add the remaining elements of the first list to the interleaved list\n        interleaved_list.extend(list1[i:])\n    # If there are any remaining elements in the second list\n    if j < len(list2):\n        # Add the remaining elements of the second list to the interleaved list\n        interleaved_list.extend(list2[j:])\n    # If there are any remaining elements in the third list\n    if k < len(list3):\n        # Add the remaining elements of the third list to the interleaved list\n        interleaved_list.extend(list3[k:])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # check that all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3) or len(list2)!= len(list3):\n        return \"Error: Lists must have the same length.\"\n    # concatenate all lists\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes three lists of the same length and returns a single flat list\n    that contains all the elements of all the input lists in the order given.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('All input lists should have the same length.')\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to hold the final interleaved list\n    interleaved_list = []\n\n    # iterate through each list and add its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # return the final interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes 3 lists as input and returns a single list\n    that contains all elements of all input lists in a single list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list containing the elements that are different between the two tuples.\n\n    :param test_tup1: A tuple of integers.\n    :param test_tup2: A tuple of integers.\n    :return: A list containing the elements that are different between the two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of all the elements that are present in one tuple but not in the other.\n    \"\"\"\n    # create an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # loop through each element in the first tuple\n    for element in test_tup1:\n        # check if the element is present in the second tuple\n        if element not in test_tup2:\n            # if it's not present, add it to the dissimilar list\n            dissimilar_list.append(element)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Get the number of elements in each tuple\n    tup1_size = len(test_tup1)\n    tup2_size = len(test_tup2)\n\n    # Initialize a list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through each element in the tuple\n    for i in range(tup1_size):\n        # Check if the element is different between the two tuples\n        if test_tup1[i]!= test_tup2[i]:\n            # If it's different, add it to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the dissimilar elements list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Set up an empty list to store the dissimilar elements\n    dissimilar_elements = []\n\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element is not in the second tuple\n        if test_tup1[i] not in test_tup2:\n            # If it is, add it to the dissimilar_elements list\n            dissimilar_elements.append(test_tup1[i])\n\n    # Return the dissimilar_elements list\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    # Loop through each element in the first tuple\n    for item1 in test_tup1:\n        # Check if the element is present in the second tuple\n        if item1 not in test_tup2:\n            # If it's not, add it to the dissimilar list\n            dissimilar_list.append(item1)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Define an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # Append the element to the dissimilar list if it is not equal\n            dissimilar_list.append(test_tup1[i])\n    \n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # initialize an empty set to store the dissimilar elements\n    dissimilar = set()\n\n    # loop through each element in the first tuple\n    for element in test_tup1:\n        # check if the element is present in the second tuple\n        if element not in test_tup2:\n            # if the element is not present in the second tuple, add it to the dissimilar set\n            dissimilar.add(element)\n\n    # return the dissimilar set\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of their dissimilar elements.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        if len(tup) % 2 == 0:\n            for item in tup:\n                new_tuple.append(even_fnc(item))\n        else:\n            new_tuple.append(tup)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for i in test_tuple:\n        if isinstance(i, (tuple, list)):\n            new_list.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                new_list.append(i)\n    return new_list\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            result.append(even_ele(i, even_fnc))\n        else:\n            result.append(even_fnc(i))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # iterate through each element in the nested tuple\n    for elem in test_tuple:\n        # check if the element is an even number using the even_fnc function\n        if even_fnc(elem):\n            # if the element is even, append it to a new list\n            new_list.append(elem)\n    # return the new list\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        else:\n            result.append(even_fnc(i))\n    \n    return result\n\n\ndef even_num(num):\n    if num % 2 == 0:\n        return num\n    else:\n        return 0\n\ndef even_str(str):\n    if str % 2 == 0:\n        return str\n    else:\n        return \"\"\n\ntest_tuple = (1, 2, (3, 4), 5, \"6\", (7, 8, 9), \"10\")\nprint(even_ele(test_tuple, even_num)) # Output: [0, 2, 6, 0, 0, 0, 0]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def process_subtuple(subtuple):\n        if isinstance(subtuple, tuple):\n            return [even_fnc(item) for item in subtuple]\n        else:\n            return subtuple\n    \n    return tuple(process_subtuple(subtuple) for subtuple in test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elements = []\n    for element in test_tuple:\n        if type(element)!= tuple:\n            uneven_elements.append(element)\n        else:\n            uneven_elements.extend(even_ele(element, even_fnc))\n    return even_fnc(uneven_elements)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple([even_fnc(x) for x in test_tuple if even_fnc(x)])"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for elem in test_tuple:\n        if type(elem) == tuple:\n            new_list.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            new_list.append(elem)\n    return new_list"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # formula to find surface area of a square pyramid using Heron's formula\n    A = b * s / 2\n    S = (4 * A * s) ** 0.5\n    return S"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*b*b*s + 2*b*b*s + 6*b*b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base_edge = b\n    height = s\n    area = 4 * base_edge * height\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b*s*2) + (b*b*2)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * s) + (b * s) + 2 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #calculating the area of the square base\n    base_area = b * b\n    \n    #calculating the area of the pyramid\n    pyramid_area = 2 * (b * s + s * s + b * s)\n    \n    #adding the areas and returning the result\n    total_area = base_area + pyramid_area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #calculating the surface area of the square pyramid\n    surface = 2*(b*s) + (b**2)*s**2 + (s**2)*b**2 + 2*(b*s)*b**2 + (b*s**2)*s**3 + (s**3)*b**3\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Formula to find surface area of a square pyramid\n    surface = 2 * b * s + 6 * b * b + 2 * s * s\n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 6*(b*s**2)/2 + 6*(b**2*s)/3 + 24*(b**2*s**2)/2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(base, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * base * height + 2 * (base + height) * base"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Check if a dictionary is empty.\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty.\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    This function takes a dictionary as input and checks if it is empty or not.\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1) * catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * (n - 1) + 1) // (n + 1) * catalan_number(n - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n-1) / n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    catalan_numbers = [1]\n    for i in range(1, num+1):\n        catalan_numbers.append(4*i*(len(catalan_numbers)-i-1))\n    return catalan_numbers[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Create a list to store the catalan numbers\n    catalan_numbers = [1]\n    # Calculate the nth catalan number using a loop\n    for i in range(2, num+1):\n        catalan_numbers.append(2*i - 1)\n        for j in range(i):\n            catalan_numbers[i] += catalan_numbers[j]*catalan_numbers[i-j-1]\n    return catalan_numbers[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    if n < 0:\n        raise ValueError(\"Invalid input\")\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return catalan_number(n-1) * 4 * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        catalan_list = [1]\n        for i in range(2, n+1):\n            catalan_list.append(2*i - 1)\n            for j in range(1, i):\n                catalan_list[j] += catalan_list[j-1]\n        return catalan_list[n-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2*num-1) * catalan_number(num-1) / num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number.\n    '''\n    if n < 0:\n        raise ValueError('n must be non-negative')\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + (2*n-1) * catalan_number(n-2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Use the re.findall() function to find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of the adverbs ending with ly\n    positions = []\n\n    # Loop through the matches and find their positions in the text\n    for match in matches:\n        # Use the start() and end() methods of the match object to get the positions of the match in the text\n        start = text.find(match)\n        end = start + len(match)\n        positions.append((start, end))\n\n    # Return a list of tuples containing the positions of the adverbs ending with ly and their lengths\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern for matching adverbs ending with \"ly\"\n    pattern = r'\\b\\w*ly\\b'\n    \n    # Use the re.finditer() function to find all non-overlapping matches of the pattern in the input string\n    matches = re.finditer(pattern, text)\n    \n    # Initialize an empty list to store the positions of all matches\n    positions = []\n    \n    # Iterate over all matches and append their positions to the positions list\n    for match in matches:\n        positions.append(match.start())\n    \n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match the adverbs ending with ly\n    pattern = re.compile(r'(?<=\\W|^)(ly)$', re.IGNORECASE)\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Create a list to store the positions of the adverbs\n    positions = []\n\n    # Iterate over the matches and add their positions to the list\n    for match in matches:\n        positions.append(match.start())\n\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w+ly\\b'\n\n    # use the pattern to search for adverbs in the given text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # iterate through the matches and print the adverb and its positions\n    for match in matches:\n        adverb = match.group()\n        start = match.start()\n        end = match.end()\n        print(f'Adverb: {adverb}, Start: {start}, End: {end}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # use regular expressions to find all adverbs ending with \"ly\"\n    matches = re.findall(r'\\bly\\b', text, flags=re.IGNORECASE)\n\n    # loop through the matches and find their positions in the text\n    for match in matches:\n        # use string slicing to extract the word before the match\n        before_match = text[:text.find(match)]\n        # use regular expressions to find all words ending with \"ly\"\n        ly_words = re.findall(r'\\bly\\b', before_match, flags=re.IGNORECASE)\n        # loop through the ly_words and find their positions in the text\n        for ly_word in ly_words:\n            # print the position of the match in the text\n            print(\"The adverb '{}' starts at position {}\".format(match, before_match.index(ly_word)))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define the pattern for adverbs ending with ly\n    pattern = r'(?<=[^a-zA-Z])(ly)[^a-zA-Z]*(?=[a-zA-Z])'\n\n    # find all matches in the text using the pattern\n    matches = re.finditer(pattern, text)\n\n    # loop through the matches and extract the positions of adverbs ending with ly\n    adverbs = []\n    for match in matches:\n        adverbs.append(match.start())\n\n    # return the list of adverb positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Use a regular expression to find all instances of \"ly\" at the end of a word\n    pattern = re.compile(r'\\b\\w+(ly|ed|ies|ing|edly|ingly)\\b')\n    matches = pattern.findall(text)\n\n    # Iterate over all matches and return the positions and adverbs\n    for match in matches:\n        positions = pattern.finditer(text)\n        start_position = next(p.start() for p in positions if p.group() == match)\n        end_position = next(p.end() for p in positions if p.group() == match).rstrip()\n        adverb = text[start_position:end_position].strip()\n        yield start_position, end_position, adverb"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    adverbs = re.findall(r'\\b[a-zA-Z]+\\sly\\b', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all the matches of adverb ending with ly in the text\n    matches = re.findall(r'\\bly\\b', text)\n\n    # Iterate over the matches and store the position and adverb in a list\n    positions = []\n    for match in matches:\n        # Find the position of the match in the original text\n        position = text.find(match)\n\n        # Add the position and adverb to the list\n        positions.append((position, match))\n\n    # Sort the list of positions by their position in the original text\n    sorted_positions = sorted(positions, key=lambda x: x[0])\n\n    # Return the list of positions and their adverbs\n    return sorted_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b(\\w+)\\s*ly\\b'\n    # Use the re.finditer() function to iterate over all non-overlapping matches of the pattern\n    matches = re.finditer(pattern, text)\n    # Initialize a list to store the positions of the adverbs\n    positions = []\n    # Iterate over all matches and add their positions to the list\n    for match in matches:\n        positions.append(match.start())\n    # Return the list of positions\n    return positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a list of items and an integer n, returns the n most expensive items in the list.\n    '''\n    # Create a min-heap of size n\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the n most expensive items in the list\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to find the n most expensive items\n    heap = []\n    for item in items:\n        # If heap is empty or the item is less than or equal to the smallest item in the heap, add item to heap\n        if not heap or item <= heap[0][0]:\n            heapq.heappush(heap, (item, len(heap)+1))\n        # If heap is not empty and the item is greater than the smallest item in the heap, remove the smallest item and add the item to heap\n        elif item > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (item, len(heap)+1))\n    # Return the n most expensive items and their indices in the original dataset\n    return [(item, i) for i, item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n\n    # Use a min-heap to keep track of the n most expensive items\n    min_heap = []\n\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # If the heap size exceeds n, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): List of items to consider.\n        n (int): Number of most expensive items to find.\n\n    Returns:\n        list: List of n most expensive items.\n    \"\"\"\n    # Create a min heap with max-heapify function\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n\n    # Extract the n most expensive items from the heap\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Initialize an empty min heap\n    heap = []\n\n    # Iterate through the dataset and add each item to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n    # Return the top n most expensive items from the heap\n    return heapq.nsmallest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item['price'], item['name']))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    - items: a list of dictionaries representing items in the dataset, with keys \"price\" and \"name\".\n    - n: the number of items to find.\n\n    Returns:\n    - A list of dictionaries representing the n most expensive items in the dataset.\n    '''\n\n    # Convert the items list to a heap with a custom key function for sorting by price\n    heap = [(item['price'], item) for item in items]\n    heapq.heapify(heap)\n\n    # Extract the n most expensive items from the heap\n    result = []\n    for _ in range(n):\n        price, item = heapq.heappop(heap)\n        result.append(item)\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a dataset of items and the number of items to be returned.\n    The function returns the n most expensive items in the dataset.\n    '''\n    # Sort the dataset in decreasing order of price\n    items.sort(key=lambda x: x[1], reverse=True)\n\n    # Return the top n items\n    return items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    \n    # Add all the items to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n        \n    # Get the n most expensive items from the heap\n    most_expensive = []\n    for i in range(n):\n        most_expensive.append(heapq.heappop(heap))\n        \n    return most_expensive"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    \n    return heap[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    # Check if the length of the list is less than n\n    if len(l) < n:\n        print(\"The list is not long enough to split at the nth element.\")\n        return\n    \n    # Split the list at the nth element and add the first part to the end\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l.insert(n, l[:n])\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n == 0:\n        return l, []\n    elif n < 0 or n >= len(l):\n        return None\n    else:\n        mid = len(l) // 2\n        l1, l2 = split_Arr(l[:mid], n)\n        return l1 + [l[mid]] + l2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is less than or equal to 1\n    if len(l) <= 1:\n        return l\n\n    # find the index of the nth element\n    index = len(l) // n\n    # if the nth element exists\n    if index > 0:\n        # get the first part of the list\n        first_part = l[:index]\n        # get the last part of the list\n        last_part = l[index:]\n        # concatenate the last part with the first part\n        result = first_part + last_part\n    else:\n        result = []\n\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return []\n    elif n >= len(l):\n        return [l[n:]]\n    else:\n        mid = len(l) // 2\n        l1 = l[:mid]\n        l2 = l[mid:]\n        return split_Arr(l1, n) + [l2]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Check if n is valid\n    if n > len(l):\n        print(\"Invalid index\")\n        return []\n    elif n < 0:\n        print(\"Invalid index\")\n        return []\n    else:\n        # Split the list at the nth element\n        first = l[:n]\n        second = l[n:]\n        # Add the first part to the end of the list\n        result = second + first\n        return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"Error: List should have at least n elements\"\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    return l[-n:] + l[:-n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"The index is greater than the length of the list.\"\n    else:\n        split_list = l[:n] + l[n:]\n        return split_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(n):\n        new_list.append(l[i])\n    new_list.extend(l[:n])\n    return new_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(lst):\n    '''\n    This function converts a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    elif len(nums) == 2:\n        return max(nums) - min(nums)\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        diff = max_val - min_val\n        return diff + big_diff(nums[1:])"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Get the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) < 2:\n        raise ValueError(\"List should have at least two values to calculate the difference.\")\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty.\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        diff = max_num - min_num\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sorting the list in ascending order\n    nums.sort()\n    # Returning the difference between the two values\n    return abs(nums[len(nums)-1] - nums[0])"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    \n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    \n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == i**2:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store perfect squares between a and b\n    perfect_squares = []\n    # loop through values of n between a and b\n    for n in range(int(a**0.5), int(b**0.5) + 1):\n        # check if n is a perfect square\n        if n*n == a:\n            perfect_squares.append(n)\n        if n*n == b:\n            perfect_squares.append(n)\n    # return the list of perfect squares between a and b\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num == perfect_square(num):\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num**0.5 == int(num**0.5):\n            squares.append(num**0.5)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # initialize a list to store the perfect squares\n    perfect_squares_list = []\n    # iterate through the range of the given numbers\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        if num ** 0.5 == int(num ** 0.5):\n            # append the perfect square to the list\n            perfect_squares_list.append(num)\n    # return the list of perfect squares\n    return perfect_squares_list\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == i**2:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # create an empty list to store perfect squares\n    perfect_squares_list = []\n    # loop through the range of numbers between a and b\n    for i in range(int(a**0.5), b+1):\n        # check if i is a perfect square\n        if i**2 == i:\n            perfect_squares_list.append(i)\n    return perfect_squares_list"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n    return (rect_x, rect_y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the point in polar coordinates.\n    theta (float): The angle of the point in polar coordinates in radians.\n\n    Returns:\n    (float, float): The coordinates of the point in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes two arguments, r and theta, which are the distance and angle from the origin in polar coordinates.\n    It returns the corresponding x and y coordinates in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_new = r * cmath.cos(theta)\n    y_new = r * cmath.sin(theta)\n    return x_new, y_new"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The magnitude of the polar coordinate.\n    theta (float): The angle of the polar coordinate.\n\n    Returns:\n    tuple: The rectangular coordinates as (x, y).\n    '''\n    # Convert radians to degrees\n    theta = theta * 180.0 / cmath.pi\n\n    # Calculate the x and y components\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    # Convert the components to float and return as tuple\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates (r, theta) to rectangular coordinates (x, y).\n    \n    Args:\n    r (float): The radius of the circle.\n    theta (float): The angle in radians.\n    \n    Returns:\n    x (float): The x-coordinate of the point.\n    y (float): The y-coordinate of the point.\n    \"\"\"\n    \n    # Convert radius and angle to complex numbers\n    z = cmath.rect(r*cmath.exp(1j*theta))\n    \n    # Extract real and imaginary parts of the complex number\n    x = z.real\n    y = z.imag\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the point.\n    theta (float): The angle in radians.\n\n    Returns:\n    (float, float): The x and y coordinates of the point.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates (r, theta) to rectangular coordinates using the cmath module.\n\n    Args:\n        r (float): The radius.\n        theta (float): The angle in radians.\n\n    Returns:\n        (float, float): The rectangular coordinates (x, y).\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, x.imag)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Use the slice notation to access the first and last elements\n    first = newList[0]\n    last = newList[-1]\n\n    # Use the index notation to replace the last element with the first element\n    newList[-1] = first\n\n    # Use the index notation to replace the first element with the last element\n    newList[0] = last\n\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has more than one element\n    if len(newList) > 1:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # check if the length of the list is 0 or 1\n    if len(newList) <= 1:\n        return newList\n    else:\n        # interchange the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least two elements\")\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) >= 2:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    count = 0\n    total = 0\n    for i in range(n+1):\n        if i <= k:\n            count += 1\n            total += (n-i+1) * (i+1)\n        else:\n            break\n    return total // count"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function takes two parameters n and k, which are integers. \n    It returns the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the variables to store the sum of products\n    sum = 0\n    prod = 1\n\n    # Calculate the product of consecutive binomial co-efficients\n    for i in range(1,k+1):\n        prod = (n-i+1)*prod\n\n    # Add the last term of the sum\n    sum += prod\n\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    bin_coeff = 1\n    for i in range(1, n+1):\n        bin_coeff *= i\n    result = bin_coeff // (factorial(n) // factorial(k) // factorial(n-k))\n    return result\n\n\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a number using recursion.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Check if the input values are valid\n    if n < 0 or k < 0 or k > n: \n        return \"Invalid input values\"\n\n    # Initialize variables\n    A = 1\n    B = 1\n    C = 1\n\n    # Calculate the product of consecutive binomial co-efficients\n    for i in range(1,k+1): \n        A = (A*i)//k\n        B = (B*(n-i+1))//k\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    sum_A_B_C = A*B*C\n\n    return sum_A_B_C"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    if k == n:\n        return 1\n    if k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k-1) * (n-k+1) // k"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    else:\n        sum = 0\n        for i in range(n-k+1):\n            sum += i*(n-i)*(k-i)\n        return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function takes two arguments, n and k, which represent the number of terms in the sum and the number of terms to be included in each term.\n    The function returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        return (binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n//2:\n        k = n-k\n\n    a = [1] * (n+1)\n    a[0] = 0\n    a[1] = 1\n\n    b = [1] * (n+1)\n    b[0] = 0\n    b[1] = 1\n\n    for i in range(2, n+1):\n        a[i] = (a[i-1] + a[i-2]) % 1000000007\n        b[i] = (b[i-1] + b[i-2]) % 1000000007\n\n    result = 0\n    for i in range(1, k+1):\n        result = (result + a[i]*b[n-i]) % 1000000007\n\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two arguments, n and k, which are integers. It returns the sum of the product of the binomial coefficients.\n    \"\"\"\n    if k > n or k < 0:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    elif k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        ip_list = ip.split('.')\n        for i in range(len(ip_list)):\n            if ip_list[i] == '0':\n                ip_list.pop(i)\n            else:\n                break\n        return '.'.join(ip_list)\n    else:\n        return 'Invalid IP address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression to match ip address with zeroes\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    # Check if the ip address matches the pattern\n    if re.match(pattern, ip):\n        # Remove leading zeroes from each octet\n        ip = re.sub(r'^0+', '', ip)\n        # Replace any remaining zeroes with a single dot\n        ip = re.sub(r'0*\\Z', '.', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes\n    ip = re.sub('^0+', '', ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r\"^0*(?=\\d)\", \"\", ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\b0)\\b', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        ip_list = ip.split('.')\n        for i in range(len(ip_list)):\n            if ip_list[i] == '0':\n                ip_list.pop(i)\n        new_ip = '.'.join(ip_list)\n        return new_ip\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define regular expression pattern for matching ip address\n    pattern = r'^([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}$'\n\n    # Use regular expression to match ip address\n    match = re.match(pattern, ip)\n\n    # If matched, remove leading zeroes from ip address and return it\n    if match:\n        ip = match.group(1)\n        for char in ip:\n            if char == '0':\n                ip = ip.replace(char, '')\n        return ip\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regex to remove leading zeroes\n    ip = re.sub(r'^\\d+\\.0+\\.0+\\.0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # define regular expression pattern for an ip address\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    # check if the input matches the ip address pattern\n    if re.match(pattern, ip):\n        # extract the octets from the ip address\n        octets = ip.split('.')\n        # iterate over the octets and remove leading zeroes\n        for i in range(len(octets)):\n            if octets[i] == '0':\n                octets[i] = ''\n        # reconstruct the ip address with the removed leading zeroes\n        ip = '.'.join(octets)\n        # return the new ip address\n        return ip\n    else:\n        # raise an exception if the input does not match the ip address pattern\n        raise ValueError('Input does not match the ip address pattern')"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number in the list.\n    If the list does not have at least 2 elements, it returns None.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    else:\n        even_num = None\n        odd_num = None\n        for i in lst:\n            if i % 2 == 0:\n                even_num = i\n                break\n        for i in lst:\n            if i % 2 == 1:\n                odd_num = i\n                break\n        if even_num is None or odd_num is None:\n            return None\n        else:\n            return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2!= 0]\n    if len(even) > 0 and len(odd) > 0:\n        return even[0] - odd[0]\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    diff = abs(even_num - odd_num)\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return abs(count_even - count_odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num - num\n\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize variables to store even and odd numbers\n    even = None\n    odd = None\n\n    # Loop through the list and check if the number is even or odd\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                # Set even number as first even number\n                even = num\n            else:\n                # Calculate difference between even and current number\n                diff = even - num\n                # Return difference if found\n                if diff!= 0:\n                    return diff\n        elif odd is None:\n            # Set odd number as first odd number\n            odd = num\n        else:\n            # Calculate difference between odd and current number\n            diff = odd - num\n            # Return difference if found\n            if diff!= 0:\n                return diff\n\n    # If no difference is found, return None\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num += num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num += num\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # check if the given list is empty\n    if len(list1) == 0:\n        print(\"Error: List is empty.\")\n        return\n    \n    # initialize variables for even and odd number\n    even_num = 0\n    odd_num = 0\n    \n    # loop through the list and find the first even and first odd number\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        elif num % 2!= 0:\n            odd_num = num\n    \n    # check if both even and odd numbers have been found\n    if even_num == 0 or odd_num == 0:\n        print(\"Error: Both even and odd numbers have not been found.\")\n        return\n    \n    # calculate the difference between the first even and first odd number\n    diff = even_num - odd_num\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = list1[0]\n    first_odd = list1[-1]\n    diff = first_even - first_odd\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    swaps = 0\n    # create a dictionary to store the frequency of characters in the strings\n    freq1 = {}\n    freq2 = {}\n    for i in range(n):\n        freq1[str1[i]] = freq1.get(str1[i], 0) + 1\n        freq2[str2[i]] = freq2.get(str2[i], 0) + 1\n\n    # iterate through the strings and count the number of swaps required to convert them\n    for i in range(n):\n        if freq1[str1[i]] > freq2[str2[i]]:\n            # swap the characters in the strings\n            str1[i], str2[i] = str2[i], str1[i]\n            swaps += 1\n            freq1[str1[i]] -= 1\n            freq2[str2[i]] -= 1\n        elif freq2[str2[i]] > freq1[str1[i]]:\n            # swap the characters in the strings\n            str1[i], str2[i] = str2[i], str1[i]\n            swaps += 1\n            freq1[str1[i]] -= 1\n            freq2[str2[i]] -= 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    min_swaps = float('inf')\n\n    for i in range(n):\n        dp[i][i] = 0\n        if str1[i]!= str2[i]:\n            dp[i][i + 1] = 1\n            min_swaps = min(min_swaps, 1)\n        for j in range(i + 2, n):\n            if str1[i]!= str2[j]:\n                dp[i][j] = dp[i + 1][j] + 1\n                min_swaps = min(min_swaps, dp[i][j])\n\n    return min_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2): \n    n = len(str1) \n    dp = [[0]*(n+1) for i in range(2)]\n    dp[0][0] = 0\n    dp[0][1] = -1\n    for i in range(n): \n        if str1[i] == str2[i]: \n            dp[1][i+2] = dp[0][i] \n        else: \n            dp[1][i+2] = 1 + min(dp[0][i], dp[1][i]) \n    return dp[1][n+2] "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the given binary strings to integer arrays\n    arr1 = [int(x) for x in str1]\n    arr2 = [int(x) for x in str2]\n\n    # Initialize variables to store the minimum number of swaps required and the swapping pairs\n    min_swaps = float('inf')\n    pairs = []\n\n    # Iterate through the binary strings and swap the corresponding bits\n    for i in range(len(str1)):\n        if arr1[i]!= arr2[i]:\n            if arr1[i] == 1:\n                arr1[i], arr2[i] = 0, 1\n            else:\n                arr1[i], arr2[i] = 1, 0\n\n            # Store the swapping pair\n            pairs.append((arr1[i], arr2[i]))\n\n            # Check if the minimum number of swaps found so far is lesser\n            if len(pairs) < min_swaps:\n                min_swaps = len(pairs)\n\n    return min_swaps, pairs"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    n = len(str1)\n\n    # Create a list to store swaps required for each digit\n    swaps = [0] * 10\n\n    # Initialize the list with 0 swaps for each digit in str2\n    for i in range(n):\n        swaps[int(str2[i])] = 0\n\n    # Iterate through the digits in str1 and swap the digits that are required\n    for i in range(n):\n        # If the corresponding digits in str1 and str2 are different\n        if str1[i]!= str2[i]:\n            # Find the index of the digit in str1 that is greater than the digit in str2\n            digit = int(str1[i])\n            index = digit\n            while index < n and int(str1[index]) == digit:\n                index += 1\n            # Swap the digits that are required\n            for j in range(digit, index):\n                str1[j], str1[j+1] = str1[j+1], str1[j]\n                swaps[int(str2[j])] += 1\n                swaps[int(str2[j+1])] -= 1\n\n    # Find the minimum number of swaps required\n    min_swaps = float('inf')\n    for i in range(10):\n        min_swaps = min(min_swaps, swaps[i])\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both the binary strings into lists of 1's and 0's\n    binary1 = [int(x) for x in str1]\n    binary2 = [int(x) for x in str2]\n\n    # Sort the binary lists in descending order\n    binary1.sort(reverse=True)\n    binary2.sort(reverse=True)\n\n    # Calculate the length of the lists and count the minimum swaps required\n    n1 = len(binary1)\n    n2 = len(binary2)\n    min_swaps = abs(n1 - n2)\n\n    # Iterate through the binary lists and count the number of swaps required to convert them\n    i = 0\n    j = 0\n    while i < n1 and j < n2:\n        if binary1[i] == binary2[j]:\n            i += 1\n            j += 1\n        else:\n            if binary1[i] == 1:\n                min_swaps += 1\n            elif binary1[i] == 0:\n                min_swaps -= 1\n            if binary2[j] == 1:\n                min_swaps += 1\n            elif binary2[j] == 0:\n                min_swaps -= 1\n\n            # If one list has reached the end, the other list must have at least one more element to make a swap\n            if i == n1:\n                min_swaps += 1\n            elif j == n2:\n                min_swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the binary strings into integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # Determine the difference between the two integers\n    diff = abs(int1 - int2)\n\n    # Initialize a variable to keep track of the number of swaps\n    swaps = 0\n\n    # Iterate through the difference between the two integers\n    while diff > 0:\n        # If the difference is odd, swap the last bit\n        if diff & 1:\n            str1 = str1[:len(str1)-1] + str1[len(str1)-1] + str1[0]\n            str2 = str2[:len(str2)-1] + str2[len(str2)-1] + str2[0]\n            diff = diff >> 1\n        else:\n            diff = diff >> 1\n\n        # Increment the number of swaps\n        swaps += 1\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Converting the strings into integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # Finding the length of both numbers\n    n1 = len(str1)\n    n2 = len(str2)\n    # Finding the maximum length of the numbers\n    max_len = max(n1, n2)\n    # Initializing the minimum number of swaps to infinity\n    min_swaps = float('inf')\n    # Looping through all possible pairs of digits in the numbers\n    for i in range(max_len):\n        # Extracting the i-th digit from both numbers\n        d1 = num1 // 2**i\n        d2 = num2 // 2**i\n        # Checking if the digit is equal\n        if d1 == d2:\n            continue\n        # Finding the number of swaps required to convert the digits\n        swaps = 0\n        while (d1!= d2):\n            # If d1 is greater than d2, then increment d1 and swap it with d2\n            if d1 > d2:\n                d1 -= 1\n                d2 += 1\n                swaps += 1\n            # If d1 is less than d2, then increment d2 and swap it with d1\n            elif d1 < d2:\n                d2 -= 1\n                d1 += 1\n                swaps += 1\n        # Updating the minimum number of swaps if the current pair has a smaller number of swaps\n        min_swaps = min(min_swaps, swaps)\n    # Returning the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Initialize variables\n    n = len(str1)\n    swaps = 0\n\n    # Compare the two binary numbers\n    for i in range(n):\n        if str1[i] == '0' and str2[i] == '1':\n            swaps += 1\n        elif str1[i] == '1' and str2[i] == '0':\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        return \"Invalid input\"\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    diff = num1 ^ num2\n    count = 0\n    while diff!= 0:\n        diff &= (diff - 1)\n        count += 1\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = sys.getsizeof(tuple_list)\n    return tuple_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # convert the tuple to a byte array\n    byte_array = bytearray(tuple_list)\n    \n    # calculate the size of the byte array in bytes\n    size_in_bytes = len(byte_array) * sys.getsizeof(byte_array[0])\n\n    # return the size in bytes\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import sys\n    if isinstance(tuple_list, tuple):\n        return sys.getsizeof(tuple_list)\n    elif isinstance(tuple_list, list):\n        return sum([tuple_size(x) for x in tuple_list])\n    else:\n        raise TypeError(\"Expected a tuple or a list of tuples\")"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #initialize the size variable to 0\n    size = 0\n\n    #iterate over each element in the tuple list\n    for element in tuple_list:\n        #check the type of the element\n        if isinstance(element, int):\n            #if the element is an integer, add its size to the size variable\n            size += sys.getsizeof(element)\n        elif isinstance(element, float):\n            #if the element is a float, add its size to the size variable\n            size += sys.getsizeof(element)\n        elif isinstance(element, str):\n            #if the element is a string, add its size to the size variable\n            size += sys.getsizeof(element)\n        elif isinstance(element, bytes):\n            #if the element is a bytes, add its size to the size variable\n            size += sys.getsizeof(element)\n        else:\n            #if the element is not an integer, float, string, or bytes, add the size of the object to the size variable\n            size += sys.getsizeof(element)\n\n    #return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize a variable to store the size in bytes\n    size_in_bytes = 0\n    \n    # Loop through the tuple elements and add their size in bytes to the variable\n    for element in tuple_list:\n        size_in_bytes += sys.getsizeof(element)\n    \n    # Return the size of the tuple\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        size = sys.getsizeof(tup)\n        total_size += size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size of each tuple in bytes.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # Compare the two arrays\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i] # if the elements are equal, return the first element in the first array\n            i += 1\n            j += 1\n    \n    # If k is larger than the length of the longer array, return the value from the longer array\n    if k > len(arr1):\n        return arr2[k-len(arr1)]\n    else:\n        return arr1[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # find the length of both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # check if the arrays are of equal length\n    if n1!= n2:\n        print(\"Error: Arrays must be of equal length\")\n        return None\n\n    # merge the two arrays into one\n    merged_arr = arr1 + arr2\n\n    # find the index of kth element\n    for i in range(k):\n        if i < n1:\n            j = i\n        else:\n            j = i - n1\n        if j < n2:\n            if merged_arr[i] > merged_arr[j]:\n                kth = merged_arr[i]\n                break\n            else:\n                kth = merged_arr[j]\n                break\n        else:\n            kth = merged_arr[i]\n            break\n\n    return kth"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    i = 0\n    j = 0\n    while i < m and j < n:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n        if k == 1:\n            return arr1[i-1]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize variables\n    i = 0\n    j = 0\n    \n    # Find the kth element from both arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If the elements are equal, increment i and continue searching in arr1\n            i += 1\n            \n    # If the kth element is not found, return None\n    if k > len(arr1) + len(arr2) - 1:\n        return None\n        \n    # Return the kth element from arr1\n    if k <= len(arr1):\n        return arr1[k - 1]\n        \n    # Return the kth element from arr2\n    else:\n        return arr2[k - len(arr1) - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    if i == len(arr1):\n        return arr2[j-k+1]\n    else:\n        return arr1[i-k+1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m, n = len(arr1), len(arr2)\n    # Initialize two pointers to find kth element\n    i, j = 0, 0\n    # Iterate through both arrays\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If elements are equal, increment both pointers and compare\n            i += 1\n            j += 1\n    # If there are still elements in the first array left, kth element is the last element in the array\n    if i < m:\n        return arr1[i-1]\n    # If there are still elements in the second array left, kth element is the last element in the array\n    else:\n        return arr2[j-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = j = 0\n    \n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n    \n    if i < n1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < len(arr2):\n        return find_kth(arr2, arr1, k)\n\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # Find the middle indices of the two arrays\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n    \n    # Find the median of the two arrays\n    if len(arr1) % 2 == 0:\n        median1 = (arr1[mid1] + arr1[mid1+1]) / 2\n    else:\n        median1 = arr1[mid1]\n        \n    if len(arr2) % 2 == 0:\n        median2 = (arr2[mid2] + arr2[mid2+1]) / 2\n    else:\n        median2 = arr2[mid2]\n        \n    # If k is greater than the median of the two arrays, find the kth element in the left half of the first array\n    if k > median1:\n        return find_kth(arr1[:mid1], arr2, k)\n        \n    # If k is less than the median of the two arrays, find the kth element in the right half of the second array\n    elif k < median2:\n        return find_kth(arr1, arr2[:mid2], k)\n        \n    # If k is equal to the median of the two arrays, return it\n    else:\n        return k"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    This function checks whether a given number is Armstrong or not.\n    '''\n    # Convert the number to a string\n    str_number = str(number)\n\n    # Initialize a variable to keep track of the sum of the cubes of digits\n    sum_of_cubes = 0\n\n    # Iterate over each digit in the string and add its cube to the sum\n    for digit in str_number:\n        cube = int(digit) ** 3\n        sum_of_cubes += cube\n\n    # Check if the sum is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits = [int(digit) for digit in str(number)]\n    power = len(digits)\n\n    sum_of_digits = 0\n    for digit in digits:\n        sum_of_digits += digit ** power\n\n    return number == sum_of_digits"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    # convert the number to a string\n    n_str = str(n)\n    # calculate the sum of the cubes of the digits\n    sum_of_cubes = sum([int(digit)**3 for digit in n_str])\n    # compare the sum of cubes with the original number\n    return sum_of_cubes == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(num):\n    num_str = str(num)\n    sum = 0\n    power = len(num_str)\n    for digit in num_str:\n        digit = int(digit)\n        sum += digit ** power\n    return num == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number_string = str(number)\n    \n    # Initialize variables for sum of digits and sum of squares\n    sum_of_digits = 0\n    sum_of_squares = 0\n    \n    # Iterate through each digit in the number string\n    for digit in number_string:\n        # Convert the digit to an integer\n        digit = int(digit)\n        \n        # Calculate the sum of digits\n        sum_of_digits += digit\n        \n        # Calculate the sum of squares of digits\n        sum_of_squares += digit ** 2\n        \n    # Check if the sum of squares is equal to the original number\n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check whether a given number is an Armstrong number or not.\n    \"\"\"\n    if not isinstance(number, int):\n        return False\n    \n    n = number\n    ar_num = 0\n    while n > 0:\n        digit = n % 10\n        ar_num += digit ** 3\n        n //= 10\n    \n    return ar_num == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Convert the number to a string and remove any non-numeric characters\n    number_str = ''.join(filter(str.isdigit, str(number)))\n\n    # Calculate the sum of the cube of each digit in the number\n    sum_of_cubes = sum([int(digit)**3 for digit in number_str])\n\n    # Check if the sum of cubes of digits is equal to the original number\n    if sum_of_cubes == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    length = len(str(num))\n    sum = 0\n    power = 1\n    \n    for i in range(length):\n        digit = num % 10\n        sum += digit ** power\n        power += 1\n        num //= 10\n        \n    if num == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_len = len(num_str)\n    sum_of_squares = 0\n    \n    for i in range(num_len):\n        digit = int(num_str[i])\n        square = digit * digit\n        sum_of_squares += square\n        \n    if sum_of_squares == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    power = len(str(number))\n    sum_of_powers = 0\n    \n    for digit in str(number):\n        sum_of_powers += int(digit) ** power\n    \n    return sum_of_powers == number\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(n):\n        sum += i + 1\n        count += 1\n    average = sum / count\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer as input and returns a tuple with the sum and average of the first n natural numbers.\n    \"\"\"\n    # Initialize the sum and count variables\n    sum = 0\n    count = 0\n    # Iterate through the first n numbers and add them to the sum\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    # Calculate the average and return the result as a tuple\n    return (sum, sum/count)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    avg = total / count\n    return total, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns a tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    # Initialize sum and count variables\n    sum = 0\n    count = 0\n    \n    # Loop through first n natural numbers\n    for i in range(1, n+1):\n        # Add each number to sum and increment count\n        sum += i\n        count += 1\n        \n    # Calculate average and return as a tuple\n    average = sum / count\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number+1):\n        sum += i\n\n    average = sum/number\n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum/number\n    print(\"Sum of first\", number, \"natural numbers is:\", sum)\n    print(\"Average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"Sum of the first\", number, \"natural numbers is:\", sum)\n    print(\"Average of the first\", number, \"natural numbers is:\", average)\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    total = 0\n    count = 0\n\n    # loop to calculate sum of first n natural numbers\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    \n    # calculate average\n    average = total / count\n    \n    # return tuple with sum and average\n    return (total, average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f'{n} is even.')\n    else:\n        print(f'{n} is odd.')"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is even\")\n    else:\n        print(f\"{n} is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    \n    # Loop through each character in the string and update the frequency dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Loop through the frequency dictionary and find the first repeated character\n    for key, value in freq_dict.items():\n        if value == max(freq_dict.values()):\n            return key"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # loop through each character in the string again and return the first repeated character\n    for char in str1:\n        if char_count[char] == 2:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return \"None\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize variables\n    char_dict = {}\n    repeated_char = None\n\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_dict:\n            # if it is, return the character and its index\n            repeated_char = char\n            break\n        # if the character is not in the dictionary, add it and its index to the dictionary\n        else:\n            char_dict[char] = str1.index(char)\n\n    # return the first repeated character\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    # Find the first repeated character by looping through each character in the string and checking if its count is greater than 1\n    for char in str1:\n        if char_count[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the characters and their counts\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through the dictionary and find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Convert the string to lowercase for case-insensitive comparison\n    str1 = str1.lower()\n    # Initialize a dictionary to keep track of characters and their counts\n    char_count = {}\n    # Iterate through the string and update the character count dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # Iterate through the dictionary to find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    num = 0\n    while num <= n:\n        if is_lucid(num):\n            lucid_numbers.append(num)\n        num += 1\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a given number is a lucid number or not.\n    '''\n    if num < 10:\n        return True\n    else:\n        return False"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # initialize an empty list to store lucid numbers\n    lucid_numbers = []\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # loop through all numbers from 1 to i\n        for j in range(1, i+1):\n            # check if j^i is equal to n\n            if j**i == n:\n                # add j to the lucid numbers list\n                lucid_numbers.append(j)\n    # return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            ludic_numbers.append(i)\n        elif i == 2:\n            ludic_numbers.append(i)\n        elif i % 2 == 0:\n            ludic_numbers.append(i)\n        else:\n            is_prime = True\n            for j in range(2, int(i/2)+1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_set = set()\n    i = 1\n\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            lucid_set.add(i)\n            i += 1\n\n    if n > 1:\n        lucid_set.add(n)\n\n    return sorted(lucid_set)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\n\ndef is_lucid(n):\n    '''\n    Write a helper function to check if a number is a lucid number.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        ludic = []\n        for i in range(2, n+1):\n            if i == 2:\n                ludic.append(1)\n            else:\n                ludic.append(i**2)\n            j = 2\n            while i*j <= n:\n                ludic.append(i*j)\n                j += 1\n        return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Helper function to check if a number is a lucid number or not.\n    '''\n    # Initialize a counter and a boolean flag\n    count = 0\n    is_lucid = True\n    # Iterate through the digits of the number\n    for digit in str(num):\n        # Check if the digit is divisible by 3\n        if int(digit) % 3 == 0:\n            count += 1\n            # Check if the count reaches 2\n            if count == 2:\n                is_lucid = False\n                break\n    return is_lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_lucid_numbers(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Create a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p * p <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p * p, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # Print all prime numbers less than or equal to n\n    for p in range(2, n+1):\n        if prime[p]:\n            print(p)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while True:\n        if is_lucid(i):\n            lucid_numbers.append(i)\n            i += 1\n        else:\n            break\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Check if a number is a lucid number or not.\n    A number is a lucid number if its decimal expansion is a power of 5.\n    '''\n    decimal_expansion = []\n    while num > 0:\n        decimal_expansion.append(num % 10)\n        num //= 10\n    for power in range(len(decimal_expansion)):\n        if decimal_expansion[power]!= 0:\n            if decimal_expansion[power] ** 5!= decimal_expansion[power]:\n                return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if all(i%j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words using split() method\n    words = s.split()\n    # initialize an empty list to store reversed words\n    reversed_words = []\n    # loop through each word in the list\n    for word in words:\n        # reverse the word using reverse() method and join() method\n        reversed_word = word[::-1].join()\n        # add the reversed word to the reversed_words list\n        reversed_words.append(reversed_word)\n    # join the reversed_words list into a string using join() method\n    reversed_string =''.join(reversed_words)\n    # return the reversed string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    # split the string into a list of words\n    words = s.split()\n    # reverse each word in the list\n    words = [word[::-1] for word in words]\n    # join the words back into a string with spaces\n    reversed_s =''.join(words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string by spaces\n    words = s.split()\n    # reverse the order of the words\n    words.reverse()\n    # join the words back into a string with spaces\n    reversed_s =''.join(words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    words = s.split() # split the string into words\n    words = words[::-1] # reverse the order of the words\n    return''.join(words) # join the words back into a string with spaces in between"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse the words\n    words = words[::-1]\n    # Join the words with spaces\n    result = \" \".join(words)\n    # Return the reversed string\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse the order of the words in the list using reverse() method\n    words = words[::-1]\n    # join the reversed words into a string with spaces\n    s =''.join(words)\n    # return the reversed string\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string by spaces and reverse each word\n    words = s.split()\n    words = [word[::-1] for word in words]\n    # Join the reversed words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    \"\"\"\n    This function checks if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    '''\n    This function checks whether the given integer is a prime number or not.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    \n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.pi/180*degree\n    return round(radian, 2)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use the re.findall() function to find all substrings that match the pattern\n    matches = re.findall(pattern, text)\n    \n    # Iterate over the matches and return the first match\n    for match in matches:\n        return match"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    This function takes a text string and a regex pattern as input. It then searches for the pattern in the text and returns the matching substring, its start index and its end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[-1][1]\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start = matches[0].start()\n        end = matches[0].end()\n        return matches[0], start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            return match.group(), start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    # Compile the regex pattern\n    regex = re.compile(pattern)\n\n    # Find all matches in the text\n    matches = regex.finditer(text)\n\n    # Iterate through the matches and return the matches, start index, and end index\n    for match in matches:\n        literal = text[match.start():match.end()]\n        start_index = match.start()\n        end_index = match.end()\n        yield literal, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(2, n+1):\n        bell.append(bell[-1] + bell[-2])\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    for i in range(1, n+1):\n        bell += i\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    for i in range(1, n+1):\n        bell = (2 * i * (n - i + 1)) // i\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * (2 * n - 1)) // (2 * n)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        print(a, end=' ')\n        a, b = b, a + b\n\nn = int(input(\"Enter the value of n: \"))\nbell_Number(n)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    \"\"\"\n    This function calculates the nth Bell number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (2**n - 1) // (n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 2 * bell_Number(n-1) - bell_Number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Returns a list with the same elements as the input list, but the k'th element removed.\n    \"\"\"\n    lst.pop(k - 1)\n    return lst"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Make a copy of the list\n    list2 = list1.copy()\n    # Use slicing to remove the kth element\n    list2 = list2[:L] + list2[L+1:]\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L <= 0:\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if len(list1) == 1:\n        return []\n    elif L == 1:\n        return [list1[0]]\n    else:\n        if L % 2 == 0:\n            L = L // 2\n        else:\n            L = (L - 1) // 2\n        return remove_kth_element(list1[L:], L) + list1[:L]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L-1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Removes the k'th element from a list.\n\n    Parameters:\n    list1 (list): the original list\n    L (int): the index of the element to remove\n\n    Returns:\n    list: a new list with the same elements, but the k'th element removed\n    \"\"\"\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L < 0 or L > len(list1):\n        raise ValueError('L should be between 0 and len(list1)')\n    \n    k = len(list1) - L + 1\n    return list1[:k-1] + list1[k:]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the longest row in the matrix\n    max_row_length = len(test_list[0])\n    # Create a new list to store the max values of each column\n    column_maxes = []\n    # Loop through the columns of the matrix\n    for i in range(len(test_list[0])):\n        # Initialize a variable to store the max value found so far\n        current_max = float('-inf')\n        # Loop through the rows of the matrix\n        for row in test_list:\n            # If the current row's value is greater than the current max, update the max value\n            if row[i] > current_max:\n                current_max = row[i]\n        # Append the current max value to the column_maxes list\n        column_maxes.append(current_max)\n    # Return the max value of then'th column\n    return column_maxes[N-1]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    count = 0\n    max_val = -1\n    for row in test_list:\n        if count == 0:\n            max_val = row[N-1]\n        elif count == N-1:\n            max_val = max(max_val, row[N-1])\n        count += 1\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    for row in test_list:\n        print(row)\n\n    # Find the length of the longest row in the matrix\n    max_length = max(len(row) for row in test_list)\n\n    # Iterate through the matrix and find the max of then'th column for each row\n    for i in range(len(test_list)):\n        if i == N-1:\n            col = max(test_list[i])\n        else:\n            col = [row[i] for row in test_list]\n        print(f\"Column {i+1}: {col}\")"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Create a list of lists to store the first row of the matrix\n    matrix = [test_list[0]]\n    # Loop through each row of the matrix\n    for i in range(1, len(test_list)):\n        # Append the i-th row to the matrix\n        matrix.append(test_list[i])\n    # Calculate then'th column of the matrix by taking the N-th index of each row\n    nth_column = [row[N-1] for row in matrix]\n    # Return the maximum value in the nth column\n    return max(nth_column)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # initialize an empty list to store the max values of then'th column\n    max_list = []\n\n    # iterate over each row in the matrix\n    for row in test_list:\n\n        # get then'th column from the row\n        nth_column = [row[i] for i in range(len(row)) if i%N == 0]\n\n        # find the maximum value in then'th column\n        max_val = max(nth_column)\n\n        # append the maximum value to the max_list\n        max_list.append(max_val)\n\n    # return the max_list\n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    \n    for i in range(len(test_list)):\n        max_num = max(test_list[i][N-1])\n        test_list[i][N-1] = max_num\n    \n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize variables\n    max_val = float('-inf')\n    max_index = None\n    count = 0\n    \n    # iterate through the matrix\n    for i in range(len(test_list)):\n        if count == N:\n            break\n        if i == 0:\n            count += 1\n            continue\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n            max_index = i\n    \n    # return the maximum value of then'th column\n    return max_val, max_index"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if N is a valid integer\n    if not isinstance(N, int):\n        raise ValueError(\"N should be an integer.\")\n\n    # Check if the length of the list is greater than 1\n    if len(test_list) <= 1:\n        raise ValueError(\"The matrix should have at least two rows.\")\n\n    # Check if the length of the first row is greater than 1\n    if len(test_list[0]) <= 1:\n        raise ValueError(\"The matrix should have at least two columns.\")\n\n    # Check if N is within the range of columns in the matrix\n    if N > len(test_list[0]):\n        raise ValueError(\"N should be within the range of columns in the matrix.\")\n\n    # Calculate the max of then'th column\n    max_val = 0\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if len(row) > N:\n            if row[N] > max_val:\n                max_val = row[N]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            cum_sum += test_list[i][j-1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return 0\n    \n    # initialize the cumulative sum with the first element of the list\n    cumulative_sum = test_list[0]\n    \n    # loop through the list starting from the second element\n    for i in range(1, len(test_list)):\n        # add the current element to the cumulative sum\n        cumulative_sum += test_list[i]\n    \n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as an argument and returns the cumulative sum of all the values present in the list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n    # iterate over each tuple in the list\n    for tup in test_list:\n        # iterate over each value in the tuple\n        for val in tup:\n            # add the value to the sum\n            sum += val\n    # return the cumulative sum\n    return sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Extract the values from the tuple and add them to the cumulative sum\n        cum_sum += tup[0] + tup[1]\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to keep track of the cumulative sum\n    cum_sum = 0\n    # Loop through each element in the list\n    for i in test_list:\n        # Add the value of the current element to the cumulative sum\n        cum_sum += i\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cum_sum = 0\n    # loop through each element in the tuple list\n    for num in test_list:\n        # add the current element to the cumulative sum\n        cum_sum += num\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n\n    # Loop through each tuple in the input tuple\n    for tup in nums:\n        # Initialize an empty list to store the values in the current tuple\n        values = []\n\n        # Loop through each element in the current tuple\n        for val in tup:\n            # Append each element to the values list\n            values.append(val)\n\n        # Calculate the average value for the current tuple\n        avg = sum(values) / len(values)\n\n        # Append the average to the averages list\n        averages.append(avg)\n\n    # Return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values for each tuple\n    averages = []\n    # Iterate through each tuple in the input tuple of tuples\n    for tuple in nums:\n        # Calculate the average of the tuple\n        avg = sum(tuple) / len(tuple)\n        # Append the average to the list of averages\n        averages.append(avg)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    # Initialize an empty list to store the average values for each tuple\n    avg_list = []\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the sum of all values in the tuple\n        total = sum(tup)\n        # Divide the sum by the length of the tuple to get the average value\n        avg = total / len(tup)\n        # Append the average value to the average list\n        avg_list.append(avg)\n    # Return the average list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the averages\n    averages = []\n    \n    # iterate through each tuple in the input list\n    for tup in nums:\n        # calculate the sum of the values in the tuple\n        total = sum(tup)\n        \n        # calculate the average of the values in the tuple\n        average = total / len(tup)\n        \n        # append the average to the averages list\n        averages.append(average)\n        \n    # return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        average = sum(num) / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        average = sum(tup)/len(tup)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to store the average values\n    avg_list = []\n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # initialize the sum to zero\n        total = 0\n        # loop through each value in the tuple and add it to the sum\n        for val in tup:\n            total += val\n        # calculate the average and append it to the avg_list\n        avg = total / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to store the average values for each tuple\n    averages = []\n    # iterate through each tuple in the tuple of tuples\n    for tup in nums:\n        # calculate the average value for the current tuple\n        avg = sum(tup) / len(tup)\n        # append the average value to the averages list\n        averages.append(avg)\n    # return the averages list\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples should have the same length.\")\n        return\n    \n    # create an empty list to store the result\n    result_list = []\n    \n    # iterate over the elements of the two tuples and perform the modulo operation\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] % test_tup2[i])\n    \n    # return the list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] % test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must have the same length')\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(i % j for i,j in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    return tuple([i % j for i, j in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= 0 or d <= 0:\n        return 0\n    \n    # initialize variables to keep track of current position, minimum number of jumps, and end position\n    pos = 0\n    min_jumps = 0\n    end_pos = d\n    \n    # loop through all the steps\n    for i in range(steps):\n        # if current position is at the end of the line, increment minimum number of jumps\n        if pos == end_pos:\n            min_jumps += 1\n            pos = 0\n        else:\n            # if current position is not at the end of the line, move one unit to the right\n            pos += 1\n            \n    # return the minimum number of jumps required to reach the desired end position\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # initialize variables\n    dp = [[0] * steps for i in range(steps)]\n    dp[0][0] = 1\n    # check for all possible positions\n    for i in range(steps):\n        for j in range(steps):\n            # check if position is valid\n            if (i+j) >= steps or (i-j) < 0 or (i-j) > steps-1:\n                continue\n            # check if we can reach (d, 0) from current position\n            if (i+j) == d:\n                return 1\n            # check if we can reach (d-1, 1) from current position\n            if (i+j) == (d-1):\n                dp[i+1][j+1] = dp[i][j] + 1\n            # check if we can reach (d, 1) from current position\n            if (i+j) == (d+1):\n                dp[i+1][j] = dp[i][j] + 1\n    # if we reach here, we can not reach (d, 0) from origin\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    # check if the given length of steps is odd or not\n    if steps % 2 == 0:\n        steps += 1\n    \n    # calculate the number of jumps required to reach the point of form (d, 0) from origin\n    jumps = 0\n    current_pos = 0\n    while current_pos < steps:\n        current_pos += d\n        if current_pos >= steps:\n            jumps += 1\n        else:\n            continue\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    distance = 0\n    jumps = 0\n    for i in range(steps):\n        distance += d\n        if distance == 0:\n            jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    i = 0\n    j = 0\n    count = 0\n    while i < len(steps) and j >= 0:\n        if j + steps[i] >= d:\n            count += 1\n            j -= steps[i]\n            i += 1\n        else:\n            j += 1\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    steps = abs(steps)\n    jump_count = 0\n    current_position = 0\n    current_distance = 0\n    remaining_steps = steps\n    \n    # Iterate through all the steps\n    while remaining_steps > 0:\n        # Check if we can reach the target point\n        if current_position == 0 and current_distance == d:\n            return jump_count\n        \n        # Move towards the target point\n        if current_distance == 0:\n            # If we reach a straight line, we don't need to move further\n            current_position += 1\n            current_distance += 1\n            remaining_steps -= 1\n        else:\n            # If we need to move up or down\n            if current_distance > d:\n                # If we need to move up\n                if current_position == 0:\n                    # If we are already at the start, we don't need to move further\n                    current_position += 1\n                    current_distance += 1\n                    remaining_steps -= 1\n                else:\n                    # If we need to move up, we need to move further to reach the target point\n                    current_position += 1\n                    current_distance += 1\n                    remaining_steps -= 1\n                    jump_count += 1\n            else:\n                # If we need to move down\n                current_position += 1\n                current_distance += 1\n                remaining_steps -= 1\n                \n    # If we reach here, we couldn't reach the target point\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    # Calculate the number of steps needed to reach the maximum height\n    max_steps = (d - 1) * steps\n    \n    # Check if the number of steps is greater than the number of available steps\n    if max_steps > steps:\n        return 0\n    \n    # Calculate the minimum number of jumps to reach the desired height\n    min_jumps = max_steps // d\n    \n    # If the number of steps is divisible by the maximum height, there is only one possible jump\n    if max_steps % d == 0:\n        return min_jumps\n    \n    # Check if the number of steps is less than the minimum jumps\n    if steps < min_jumps:\n        return 0\n    \n    # Calculate the number of steps left to reach the desired height\n    remaining_steps = steps - min_jumps * d\n    \n    # Check if there are more possible jumps than the remaining steps\n    if remaining_steps < d:\n        return min_jumps\n    \n    # If there are more possible jumps, calculate the number of jumps\n    # using the formula for the minimum number of jumps\n    num_jumps = remaining_steps // d\n    if remaining_steps % d!= 0:\n        num_jumps += 1\n    \n    return min_jumps + num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initialize variables\n    steps_taken = 0\n    jumps_needed = 0\n\n    # loop through the steps and check for points that are at d\n    for i in range(steps):\n        if i % d == 0:\n            steps_taken += d\n            jumps_needed += 1\n\n    # check if we have reached (d, 0)\n    if steps_taken == d:\n        return jumps_needed\n\n    # if we have not reached (d, 0), calculate the minimum number of jumps needed to reach (d, 0)\n    else:\n        min_jumps = min_Jumps(steps - steps_taken, d)\n        return jumps_needed + min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    jumps = 0\n    position = 0\n    current_height = 0\n    next_height = steps[position]\n\n    # Iterate through the steps list\n    while position < len(steps) - 1:\n\n        # If we have reached the next height\n        if current_height == next_height:\n            jumps += 1\n            position += 1\n            current_height = 0\n            next_height = steps[position]\n\n        # If we have reached the end of the list\n        elif position == len(steps) - 2:\n            jumps += 1\n            current_height = 0\n            next_height = 0\n\n        # If we have reached the next height of the next position\n        else:\n            next_height = min(next_height + steps[position + 1], steps[position + 2])\n            position += 1\n\n    # Return the number of jumps\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of the same length\")\n        return None\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return\n    \n    # divide each element of the lists\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have the same length.\")\n        return\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: Cannot divide by zero.\")\n            return\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1/num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists are not same length\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i]/nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # initializing variables\n    num_found = False\n    str_list = list(test_str)\n    \n    # iterating through the string\n    for i in range(len(str_list)):\n        # checking if the current character is a number\n        if str_list[i].isdigit():\n            # moving the number to the end of the list\n            num_found = True\n            str_list.remove(str_list[i])\n            str_list.append(str_list[i])\n        else:\n            # if the current character is not a number, we can move on to the next character\n            if num_found:\n                break\n    \n    # converting the list to a string and returning it\n    return ''.join(str_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = re.findall(r'\\d+', test_str)  # find all the numbers in the string\n    nums_str = ''.join(nums)  # convert the numbers to a string\n    nums_str = nums_str.strip()  # remove leading and trailing spaces\n    nums_str = nums_str.split()  # split the string into words\n    new_str = ''.join(nums_str)  # combine the words with numbers to form a new string\n    new_str = new_str.replace(' ', '')  # remove leading and trailing spaces\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    result = test_str.replace(num_str, '')\n    return result + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    digits = ''\n    non_digits = ''\n    num_count = 0\n\n    # Iterate through each character in the string\n    for char in test_str:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Append the digit to the digits variable\n            digits += char\n        else:\n            # Append the character to the non_digits variable\n            non_digits += char\n\n    # Reverse the digits variable and join it with the non_digits variable\n    reversed_digits = digits[::-1]\n    result = reversed_digits + non_digits\n\n    # Return the result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # initialize variables for the number and character positions\n    num_pos = -1\n    char_pos = 0\n    \n    # loop through the string\n    while char_pos < len(test_str):\n        # check if the current character is a number\n        if test_str[char_pos].isdigit():\n            # move the number to the end of the string\n            num_pos = char_pos\n            while char_pos < len(test_str) and test_str[char_pos].isdigit():\n                char_pos += 1\n            # swap the characters at the positions\n            test_str = test_str[:num_pos] + test_str[num_pos+1:char_pos] + test_str[num_pos]\n        else:\n            # move the character to the end of the string\n            while char_pos < len(test_str) and not test_str[char_pos].isdigit():\n                char_pos += 1\n            # swap the characters at the positions\n            test_str = test_str[:char_pos] + test_str[char_pos+1:]\n        # increment the character position\n        char_pos += 1\n    \n    # return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    number_count = 0\n    string_list = list(test_str)\n    while number_count < len(string_list):\n        if string_list[number_count].isdigit():\n            number_count += 1\n        else:\n            string_list.insert(number_count, string_list.pop(number_count-1))\n    return ''.join(string_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_list = []\n    alph_list = []\n    str_list = list(test_str)\n    num_count = 0\n    alph_count = 0\n\n    # loop through the string and count the numbers and letters\n    for i in str_list:\n        if i.isdigit():\n            num_list.append(i)\n            num_count += 1\n        else:\n            alph_list.append(i)\n            alph_count += 1\n\n    # concatenate the lists and move all the numbers to the end\n    for i in range(num_count):\n        str_list.pop(num_list.index(num_list[i]))\n        str_list.insert(len(str_list)-num_count+i, num_list[i])\n\n    # concatenate the lists and move all the letters to the end\n    for i in range(alph_count):\n        str_list.pop(alph_list.index(alph_list[i]))\n        str_list.insert(len(str_list)-alph_count+i, alph_list[i])\n\n    # return the concatenated string\n    return ''.join(str_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Use regular expression to find all numbers in the string\n    nums = re.findall(r'\\d+', test_str)\n\n    # Sort the numbers in descending order\n    nums.sort(reverse=True)\n\n    # Concatenate the sorted numbers and the original string\n    result = ''.join(nums) + test_str\n\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables for digits and numbers\n    digits = []\n    numbers = []\n\n    # split the string into digits and numbers\n    for char in test_str:\n        if char.isdigit():\n            digits.append(char)\n        else:\n            numbers.append(char)\n\n    # join the digits and numbers back into the string\n    result = ''.join(digits + numbers)\n\n    # return the result string\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables\n    max_size = 1\n    current_size = 1\n    count = 1\n\n    # loop through the list\n    for i in range(1, len(a)):\n        # check if the current number is divisible by the previous number\n        if a[i] % a[i-1] == 0:\n            # add the current number to the current size\n            current_size += 1\n            # check if the current size is greater than the maximum size\n            if current_size > max_size:\n                # update the maximum size\n                max_size = current_size\n            # check if the current number is the last number in the list\n            if i == len(a)-1:\n                # add the current size to the maximum size\n                max_size += current_size\n        # if the current number is not divisible by the previous number, reset the current size to 1\n        else:\n            current_size = 1\n\n    # return the maximum size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # initialize a dictionary to store the count of every number in the list\n    counts = {}\n    \n    # loop through the list and count the occurrences of each number\n    for num in a:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n            \n    # initialize a list to store the largest subset of pairs with divisibility\n    result = []\n    \n    # loop through the list of counts\n    for key, value in counts.items():\n        # if the number has only one occurrence, it cannot be a pair with divisibility\n        if value == 1:\n            continue\n            \n        # find the largest subset of pairs with the current number as the first number\n        first_num = key\n        second_num = (key + 1) % 10\n        \n        # add the pair with the current number to the result list\n        result.append((first_num, second_num))\n        \n        # loop through the list of counts again to find the largest subset with the current number as the second number\n        for key2, value2 in counts.items():\n            # if the number has only one occurrence, it cannot be a pair with divisibility\n            if value2 == 1:\n                break\n            \n            # check if the current number and the current number + 1 (mod 10) are in the same subset of pairs\n            if value2 == value and (key2 == first_num or (key2 == (first_num + 1) % 10)):\n                # add the pair with the current number and the current number + 1 to the result list\n                result.append((first_num, (key2 + 1) % 10))\n                break\n    \n    # return the size of the largest subset of pairs with divisibility\n    return len(result)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    current_size = 0\n    for num in a:\n        if num % 2 == 0:\n            current_size += 1\n            max_size = max(max_size, current_size)\n        else:\n            current_size = 0\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    max_size = 0\n    subsets = [[]]\n\n    for num in a:\n        for subset in subsets:\n            if subset[-1] % num == 0:\n                subset.append(num)\n                if len(subset) > max_size:\n                    max_size = len(subset)\n            else:\n                break\n\n        if len(subsets[-1]) == 0 or subsets[-1][-1] % num == 0:\n            subsets[-1].append(num)\n            if len(subsets[-1]) > max_size:\n                max_size = len(subsets[-1])\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    mod = 1000000007\n    dp = [1] * n\n\n    for i in range(1, n):\n        dp[i] = (dp[i] + dp[i - 1]) % mod\n\n    max_size = 1\n    max_sum = 0\n\n    for i in range(n):\n        if i > 0:\n            dp[i] = (dp[i] + dp[i - 1] - dp[i - 2]) % mod\n\n        if dp[i] % 2 == 0 and i + 1 < n and dp[i + 1] % 2 == 1:\n            size = dp[i] // 2\n            sum_ = 0\n            for j in range(i + 1, i + size + 1):\n                sum_ += a[j]\n            if sum_ > max_sum:\n                max_size = size\n                max_sum = sum_\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Parameters:\n    a (list): A list of integers.\n\n    Returns:\n    int: The size of the largest subset of a that satisfies the condition.\n\n    \"\"\"\n    # Create a dictionary to store the count of each number in the list\n    count_dict = {}\n    for num in a:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Sort the dictionary by the number of times each number appears\n    sorted_count_dict = dict(sorted(count_dict.items(), key=lambda item: item[1], reverse=True))\n\n    # Initialize variables to keep track of the largest subset found so far and its size\n    largest_subset_size = 0\n    current_subset = []\n\n    # Iterate over the sorted dictionary to find the largest subset that satisfies the condition\n    for num, count in sorted_count_dict.items():\n        if sum(current_subset) % num == 0:\n            current_subset.append(num)\n            largest_subset_size = max(largest_subset_size, len(current_subset))\n        else:\n            break\n\n    # Return the size of the largest subset that satisfies the condition\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Find the maximum number in the list\n    max_num = max(a)\n\n    # Initialize the largest subset size to 1 (for the empty list)\n    largest_size = 1\n\n    # Iterate over all possible combinations of two numbers\n    for i in range(max_num + 1):\n        for j in range(max_num + 1):\n            # Calculate the size of the subset (i.e. the number of pairs that can be made)\n            subset_size = (a.count(i) * a.count(j)) // 2\n\n            # Update the largest subset size if necessary\n            if subset_size > largest_size:\n                largest_size = subset_size\n\n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return 0\n\n    # Sort the input list\n    a.sort()\n\n    # Initialize variables\n    subset_size = 0\n    current_sum = 0\n    max_size = 0\n\n    # Iterate through the list\n    for i in range(len(a)):\n        # Add the current element to the subset\n        current_sum += a[i]\n\n        # Check if the current subset is divisible by the next element\n        if current_sum % a[i] == 0:\n            # If it is, update the maximum subset size found so far\n            subset_size += 1\n            if subset_size > max_size:\n                max_size = subset_size\n\n        # Check if there is a subset that can be extended by adding the current element\n        if i < len(a) - 1:\n            # Add the next element to the current sum to check for a subset that can be extended\n            next_sum = current_sum + a[i + 1]\n\n            # Check if the next subset is divisible by the next element\n            if next_sum % a[i + 1] == 0:\n                # If it is, update the maximum subset size found so far\n                subset_size = 1\n                current_sum = next_sum\n                if subset_size > max_size:\n                    max_size = subset_size\n\n    # Return the maximum subset size found\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in descending order\n    a.sort(reverse=True)\n    n = len(a)\n    \n    # Initialize variables\n    max_size = 0\n    current_size = 0\n    \n    # Iterate through the list\n    for i in range(n):\n        # If the current number is divisible by the next number, update the size of the current subset\n        if a[i] % a[i+1] == 0:\n            current_size += 1\n            # Update the maximum size if necessary\n            if current_size > max_size:\n                max_size = current_size\n        # If the current number is not divisible by the next number, reset the current subset size\n        else:\n            current_size = 0\n            \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    def is_divisible(num):\n        return num % 2 == 0\n    \n    # Find the size of the largest subset that is divisible by every other number\n    size = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if is_divisible(a[i]) and is_divisible(a[j]):\n                size += 1\n                if size > 1:\n                    return size\n    \n    return size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists\n    combined_list = arr1 + arr2\n\n    # Sort the combined list\n    combined_list.sort()\n\n    # Find the length of the combined list\n    length = len(combined_list)\n\n    # Calculate the median index\n    median_index = length // 2\n\n    # Calculate the median\n    if length % 2 == 0:\n        median = (combined_list[median_index - 1] + combined_list[median_index]) / 2\n    else:\n        median = combined_list[median_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Concatenate the two lists and sort it\n    total_list = sorted(arr1 + arr2)\n\n    # Calculate the median index\n    median_index = n // 2\n\n    # If the length of the list is odd, the median is the middle element\n    if n % 2 == 1:\n        median = total_list[median_index]\n\n    # If the length of the list is even, the median is the average of the middle two elements\n    else:\n        median = (total_list[median_index - 1] + total_list[median_index]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge two sorted arrays into one\n    merged = arr1 + arr2\n    \n    # Find the median index\n    median_index = n // 2\n    \n    # Check if the array size is odd\n    if n % 2 == 1:\n        median = merged[median_index]\n    else:\n        # Find the median values of two middle elements\n        median1 = merged[median_index]\n        median2 = merged[median_index - 1]\n        \n        # Find the average of the two medians\n        median = (median1 + median2) / 2\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays into a single sorted array\n    merged = arr1 + arr2\n    merged.sort()\n    # Check if the length of the merged array is odd or even\n    if n % 2 == 0:\n        # If the length of the merged array is even, return the average of the middle two elements\n        median = (merged[n//2-1] + merged[n//2]) / 2\n    else:\n        # If the length of the merged array is odd, return the middle element\n        median = merged[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 1:\n        # Find the middle element\n        mid = n // 2\n        # Compare the middle elements of the first two lists\n        if arr1[mid - 1] > arr2[mid]:\n            return get_median(arr2[:mid], arr1, mid)\n        else:\n            return get_median(arr1[:mid], arr2, mid)\n    else:\n        # Find the middle elements of the first two lists\n        mid1 = n // 2\n        mid2 = mid1 + 1\n        if arr1[mid1 - 1] > arr2[mid2]:\n            # Check if the middle element of arr1 is greater than arr2[mid2]\n            # If so, then we have a median\n            if arr1[mid1] > arr2[mid2 - 1]:\n                return (arr1[mid1] + arr2[mid2 - 1]) / 2\n            else:\n                return arr1[mid1]\n        else:\n            # Check if the middle element of arr2 is greater than arr1[mid1]\n            # If so, then we have a median\n            if arr2[mid2] > arr1[mid1 - 1]:\n                return (arr2[mid2] + arr1[mid1 - 1]) / 2\n            else:\n                return arr2[mid2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    merged = arr1 + arr2\n    merged.sort()\n    if n % 2 == 0:\n        return (merged[n//2-1] + merged[n//2])/2\n    else:\n        return merged[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two arrays into one\n    merged = arr1 + arr2\n\n    # Sort the merged array\n    sorted_merged = sorted(merged)\n\n    # Calculate the middle index\n    middle_index = n // 2\n\n    # If the length of the array is odd, the median is the middle element\n    if n % 2 == 1:\n        median = sorted_merged[middle_index]\n\n    # If the length of the array is even, the median is the average of the two middle elements\n    else:\n        median1 = sorted_merged[middle_index]\n        median2 = sorted_merged[middle_index - 1]\n        median = (median1 + median2) / 2\n\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Calculate the median index\n    median_index = n // 2\n    # Return the median value\n    return merged_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    # Sort the concatenated array\n    arr.sort()\n    # Calculate the length of the array\n    length = len(arr)\n    # Calculate the median index\n    if length % 2 == 0:\n        median_index = length // 2\n    else:\n        median_index = (length + 1) // 2\n    # Return the median value\n    return arr[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single list\n    merged_list = arr1 + arr2\n\n    # Find the median index\n    median_index = n // 2\n\n    # If the length of the merged list is odd, the median is in the middle index\n    if n % 2!= 0:\n        median = merged_list[median_index]\n\n    # If the length of the merged list is even, the median is in the average of the two middle indexes\n    else:\n        median = (merged_list[median_index - 1] + merged_list[median_index]) / 2\n\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the nth power of each number in a list.\n\n    Args:\n        nums: A list of numbers.\n        n: The exponent to raise each number to.\n\n    Returns:\n        A list of n-th powers of the numbers in the input list.\n    \"\"\"\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n, and computes the n-th power of each number in the list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the nth power of each number in a list.\n\n    Parameters:\n    nums (list): A list of numbers.\n    n (int): The power to compute.\n\n    Returns:\n    list: A list containing the nth power of each number in the input list.\n    \"\"\"\n\n    # Create an empty list to store the nth powers\n    n_powers = []\n\n    # Loop through each number in the input list\n    for num in nums:\n        # Compute the nth power of the current number and append it to the n_powers list\n        nth_power = num ** n\n        n_powers.append(nth_power)\n\n    return n_powers"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is in uppercase or not.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are uppercase, False otherwise.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"The list should have at least two elements\")\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        print(\"The new list is:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    # First element is first position\n    temp = newList[0]\n    # Set first element to the last element\n    newList[0] = newList[-1]\n    # Set last element to the temporary element\n    newList[-1] = temp\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # swapping the first and last element of the list using index slicing\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # initialize variables\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    # swap elements\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    # return newList\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if list is empty\n    if len(newList) == 0:\n        return \"Error: List is empty.\"\n    \n    # check if list has only one element\n    if len(newList) == 1:\n        return \"Error: List has only one element.\"\n    \n    # if list has more than one element, swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        print(\"The list must have at least 2 elements to swap.\")\n        return\n    \n    # Interchange the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Print the swapped list\n    print(\"Swapped list:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculating the semi-circle radius\n    semi_radius = r / 2\n    \n    # Calculating the area of the largest triangle inscribed in the semicircle\n    a = 3 * semi_radius ** 2\n    \n    # Calculating the area of the smallest triangle inscribed in the semicircle\n    b = 4 * r ** 2\n    \n    # Calculating the area of the smallest triangle that can be inscribed in the semicircle\n    c = semi_radius ** 2\n    \n    # Calculating the area of the largest triangle that can be inscribed in the semicircle\n    largest_area = max(a, b, c)\n    \n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Formula for the area of the largest triangle that can be inscribed in a semicircle with radius r\n    # area = 2r(1 - cos(A))\n    # A = arccos((1 - (2r^2)/(2))/2)\n\n    # A = arccos((1 - (r^2)/(2*r^2))/2)\n    # A = 2*asin(r^2/2)\n\n    # Using the fact that A = pi/2 - arctan(sqrt(r^2/2))\n    # A = pi/2 - 2*asin(sqrt(r^2/2))\n\n    # Using the identity pi/2 - arctan(x) = pi/2 + arctan(x)\n    # A = pi/2 + 2*atan(sqrt(r^2/2))\n\n    # Using the identity 1 - cos(A) = (1 - cos(2*A)) / 2\n    # A = 2*atan(sqrt(r^2/2))\n\n    # Using the formula for the area of a triangle:\n    # area = 1/2 * base * height\n    # base = sqrt(r^2/2)\n    # height = 2 * sqrt(r^2/2)\n\n    # area = 1/2 * sqrt(r^2/2) * 2 * sqrt(r^2/2)\n    # area = 2r^2\n\n    # area = 2r^2\n\n    area = 2 * r ** 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (3 * r ** 2) / (4 * math.tan(math.pi / 3))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    area = 0\n    for i in range(1, 30):\n        area += (2 * r) ** i / (2 * i + 1)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    #Formula to calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    area = 0.5 * (3 * r**2)\n\n    #Return the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2*r*r\n    \n    # Calculate the area of the triangle with sides of length r and semi-perimeter\n    area = 0.5*r*r*r\n    \n    # Calculate the area of the smallest triangle that can be inscribed in the semicircle\n    smallest_area = 0.5*r*r*r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    largest_area = 0.5*semi_perimeter*semi_perimeter\n    \n    # Return the area of the largest triangle\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 2 * r\n    return (s * (s - math.sqrt(s**2 - 4 * r**2)) / 2)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the circle\n    semi_perimeter = 2 * math.pi * r\n    \n    # Calculate the area of the largest triangle\n    area = (semi_perimeter * (semi_perimeter - 3 * r) ** 0.5) / 4\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-diameter of the semicircle\n    semi_diameter = 2 * r\n    \n    # calculate the area of the largest triangle inscribed in the semicircle\n    area = 0.5 * semi_diameter * math.sin(math.pi / 3)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    \n    # finding the area of the smallest triangle that can be inscribed in the semicircle\n    area1 = ((2*r)**2)*3.14\n    \n    # finding the area of the largest triangle that can be inscribed in the semicircle\n    area2 = ((r**2)**(1/2))*((r**2)**(1/2))*((2*r)**(1/2))*3.14\n    \n    # finding the area of the largest triangle that can be inscribed in the largest possible semicircle\n    area3 = 3.14*(r**2)*((2*r)**(1/2))\n    \n    # returning the maximum area of any triangle that can be inscribed in the semicircle\n    return max(area1, area2, area3)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if i!= array[i]:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    array.sort()\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if i!=array[i]:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A list of natural numbers.\n        start (int): The index of the first element of the array to consider.\n        end (int): The index of the last element of the array to consider.\n\n    Returns:\n        int: The smallest missing number in the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if not end:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if mid > 0 and array[mid] == mid:\n            start = mid + 1\n        elif mid < len(array) - 1 and array[mid + 1] == mid + 1:\n            end = mid\n        elif mid > 0 and mid < len(array) - 1:\n            if array[mid - 1] < array[mid] and array[mid] < array[mid + 1]:\n                end = mid\n            else:\n                start = mid + 1\n        else:\n            return mid\n\n    return len(array) + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # If end is not provided, find the maximum number in the array\n    if end is None:\n        end = max(array)\n    \n    # Iterate over the numbers in the array, checking for missing numbers\n    for i in range(start, end+1):\n        # If we find a number that is not in the array, return it as the missing number\n        if i not in array:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # If the list is empty or has only one element, return 1.\n    if len(array) <= 1:\n        return 1\n\n    # If the list has multiple elements, find the first missing number using binary search.\n    left, right = start, end if end is not None else len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If the list contains duplicate elements, the first missing number will be the largest number in the array.\n    return max(array) + 1 if array[-1]!= len(array) else max(array) + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Initialize a list to store the adjacent coordinates\n    adj = []\n\n    # Iterate through all the coordinates in the list\n    for i in range(len(ele)):\n        # If the current coordinate is not the last element in the list\n        if i < len(ele) - 1:\n            # Append the next coordinate to the adjacent list\n            adj.append(tuple(ele[:i] + ele[i+1:]))\n        # If the current coordinate is the last element in the list\n        else:\n            # Append the first coordinate to the adjacent list\n            adj.append(tuple(ele[:i] + ele[0:i+1]))\n\n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i, j = ele\n    adj_list = []\n    for x in range(max(0, i-1), min(i+2, len(grid)-1)):\n        for y in range(max(0, j-1), min(j+2, len(grid[0])-1)):\n            if (x, y)!= ele and grid[x][y] == ele and (x, y) not in sub:\n                adj_list.append((x, y))\n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adjacent = []\n\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            x_new, y_new = x + i, y + j\n            if x_new >= 0 and y_new >= 0 and x_new < len(sub) and y_new < len(sub[0]):\n                adjacent.append((x_new, y_new))\n\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if isinstance(ele, tuple) and len(ele) == 2:\n        x, y = ele\n        adj = [\n            (x+1, y),\n            (x-1, y),\n            (x, y+1),\n            (x, y-1),\n            (x+1, y+1),\n            (x-1, y+1),\n            (x+1, y-1),\n            (x-1, y-1)\n        ]\n        if sub:\n            return list(set(adj) - set(sub))\n        else:\n            return adj\n    else:\n        raise ValueError(\"Invalid coordinate tuple\")"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            if i!= x or j!= y:\n                adjacent.append((i, j))\n    return adjacent + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Get the adjacent coordinates of the current element\n    x, y = ele\n    adj_x = [x + dx for dx in [-1, 0, 1]]\n    adj_y = [y + dy for dy in [-1, 0, 1]]\n\n    # Append the adjacent coordinates to the sublist\n    sub += [(x, y) for x in adj_x for y in adj_y if not (x == x_lim or y == y_lim)]\n\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    if ele[0]-1 >= 0:\n        sub.append((ele[0]-1, ele[1]))\n    if ele[0]+1 < rows:\n        sub.append((ele[0]+1, ele[1]))\n    if ele[1]-1 >= 0:\n        sub.append((ele[0], ele[1]-1))\n    if ele[1]+1 < cols:\n        sub.append((ele[0], ele[1]+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = []\n    x, y = ele\n    # add top-left corner\n    adjacent.append((x-1, y-1))\n    adjacent.append((x-1, y))\n    adjacent.append((x-1, y+1))\n    # add top row\n    adjacent.append((x, y-1))\n    # add top-right corner\n    adjacent.append((x+1, y-1))\n    adjacent.append((x+1, y))\n    adjacent.append((x+1, y+1))\n    # add right row\n    adjacent.append((x+1, y))\n    # add bottom-right corner\n    adjacent.append((x+1, y+1))\n    adjacent.append((x, y+1))\n    adjacent.append((x-1, y+1))\n    # add bottom row\n    adjacent.append((x, y+1))\n    # add bottom-left corner\n    adjacent.append((x-1, y+1))\n    adjacent.append((x-1, y))\n    adjacent.append((x-1, y-1))\n    # add left row\n    adjacent.append((x-1, y))\n    # add the sublist of adjacent coordinates\n    adjacent.extend(sub)\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extract adjacent coordinates from the coordinate tuple\n    x, y = ele\n    adj_x = [x+1, x-1]\n    adj_y = [y+1, y-1]\n\n    # Combine adjacent coordinates with the original coordinate tuple\n    adj = [(x,y) for x in adj_x for y in adj_y]\n\n    # Add the current coordinate tuple to the list of subsets\n    sub.append(ele)\n\n    # Recursively call the function for each adjacent coordinate\n    for coord in adj:\n        adjac(coord, sub)\n\n    # Return the list of subsets\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacents = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return adjacents + sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Remove spaces and convert to lowercase\n    text = text.replace(' ', '_').lower()\n    # Replace underscore with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Splitting the string into words\n    words = text.split()\n    # Looping through the words\n    for i in range(len(words)):\n        # Replacing spaces with underscores\n        if words[i] =='':\n            words[i] = '_'\n        # Replacing underscores with spaces\n        elif words[i] == '_':\n            words[i] =''\n    # Joining the words back into a string\n    new_text =''.join(words)\n    # Returning the new string with the replaced spaces and underscores\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Define a dictionary to map spaces to underscores and vice versa\n    space_dict = {' ': '_', '_':''}\n    # Iterate through each character in the string\n    for char in text:\n        # If the character is a space, replace it with the corresponding underscore in the dictionary\n        if char =='':\n            text = text.replace(' ', space_dict[char])\n        # If the character is an underscore, replace it with the corresponding space in the dictionary\n        elif char == '_':\n            text = text.replace('_', space_dict[char])\n    # Return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char.isspace():\n            result += \"_\"\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    # initialize an empty list to store the modified string\n    modified_string = []\n    # iterate through the characters in the input string\n    for char in text:\n        # check if the character is a space\n        if char =='':\n            # append an underscore to the modified string\n            modified_string.append('_')\n        else:\n            # append the original character to the modified string\n            modified_string.append(char)\n    # join the modified string back into a single string\n    result = ''.join(modified_string)\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    space_regex = r'\\s'\n    underscore_regex = r'_+|\\s+'\n\n    # Replace spaces with underscores\n    text = re.sub(space_regex, '_', text)\n\n    # Replace underscores with spaces\n    text = re.sub(underscore_regex,'', text)\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Create a list of words in the string\n    words = text.split()\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If the word contains whitespace, replace it with an underscore\n        if'' in words[i]:\n            words[i] = words[i].replace(' ', '_')\n        # If the word does not contain whitespace, replace it with a space\n        else:\n            words[i] = words[i].replace('_','')\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list.pop(zero_index)\n        num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    \n    for i, num in enumerate(num_list):\n        if num == 0:\n            zero_index = i\n            break\n    \n    if zero_index!= -1:\n        num_list.pop(zero_index)\n        num_list.append(0)\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize an empty list to store non-zero elements\n    non_zero_list = []\n\n    # Iterate over the given list\n    for num in num_list:\n        # If the element is not zero, append it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # Append all zeroes to the end of the non_zero_list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(num_list[i])\n\n    # Return the non-zero list\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        return num_list[:zero_index] + num_list[zero_index+1:]"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two variables to keep track of the index of the first non-zero and the last non-zero\n    non_zero_index = 0\n    last_non_zero_index = len(num_list) - 1\n    \n    # Loop through the list from left to right\n    for i in range(len(num_list)):\n        # If the current element is zero, swap it with the last non-zero element and decrement the last non-zero index\n        if num_list[i] == 0:\n            num_list[non_zero_index], num_list[i] = num_list[i], num_list[non_zero_index]\n            last_non_zero_index -= 1\n            non_zero_index += 1\n    \n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers - one at the beginning of the list and one at the end of the list\n    i = 0\n    j = len(num_list)-1\n    \n    # Move all non-zero elements to the end of the list\n    while i <= j:\n        while num_list[i]!= 0 and i <= j:\n            i += 1\n        while num_list[j] == 0 and i <= j:\n            j -= 1\n        if i <= j:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n    \n    # Move all zeroes to the end of the list\n    while i <= j:\n        while num_list[i] == 0 and i <= j:\n            i += 1\n        while num_list[j]!= 0 and i <= j:\n            j -= 1\n        if i <= j:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    # iterate through the list and move zeroes to the end of the list\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n            return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        for j in range(len(num_list)-1, zero_index-1, -1):\n            num_list[j], num_list[j+1] = num_list[j+1], num_list[j]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two variables: one to keep track of the current index and the other to keep track of the index where the zeroes should be moved\n    current_index = 0\n    zero_index = -1\n    \n    # Loop through each element of the list\n    for i in range(len(num_list)):\n        # If the current element is not zero, increment the current index\n        if num_list[i]!= 0:\n            current_index += 1\n            # If the current element is zero, remember its index so that it can be moved to the end of the list\n            if num_list[i] == 0:\n                zero_index = current_index\n        # If the current element is zero and the zero_index has been initialized, swap the current element with the element at the zero_index\n        if num_list[i] == 0 and zero_index!= -1:\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n\n    Parameters:\n        arr: list\n            A list of integers.\n        n: int\n            The size of the list.\n\n    Returns:\n        int: The sum of xor of all pairs of numbers in the given list.\n\n    \"\"\"\n    # XOR all pairs of numbers in the list\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and an integer n as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # XOR of all pairs\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    \n    # XOR of first and last elements\n    xor_sum ^= arr[0] ^ arr[n-1]\n    \n    # XOR of first and middle elements\n    xor_sum ^= arr[0] ^ arr[n//2]\n    \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = arr[i] ^ arr[j]\n            sum_xor += xor_sum\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all elements in the list\n    xor = sum([x^y for x in arr for y in arr if x!=y])\n    \n    # XOR of all pairs of elements\n    xor_pairs = sum([x^y for x in arr for y in arr if x!=y for z in arr if z!=y])\n    \n    # Return the XOR of all elements and pairs of elements\n    return xor_pairs ^ xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    n = len(iterable)\n    # Convert the list into a max heap\n    for i in range(n//2-1, -1, -1):\n        hq.heapify(iterable, i, n)\n\n    # Extract elements from the heap one by one and append them to a new list\n    result = []\n    while n > 0:\n        result.append(iterable[0])\n        hq.heappop(iterable)\n        n -= 1\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min heap\n    hq.heapify(iterable)\n\n    # Remove the first element of the min heap and append it to the result list\n    result = []\n    while iterable:\n        result.append(iterable[0])\n        hq.heappop(iterable)\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable and returns a sorted list using the heap_sort algorithm.\n    '''\n    # Convert the list to a heap\n    heap = list(iterable)\n    hq.heapify(heap)\n    # Sort the heap using the heapsort algorithm\n    sorted_heap = []\n    while heap:\n        sorted_heap.append(heapq.heappop(heap))\n    return sorted_heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max heap from the input list\n    max_heap = hq.nsmallest(len(iterable), iterable)\n    # create a new list to store the sorted elements\n    sorted_list = []\n    # extract the maximum element from the heap repeatedly until the heap is empty\n    while max_heap:\n        # add the maximum element to the new list and remove it from the heap\n        sorted_list.append(max_heap.pop())\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the input list to a max heap\n    hq.heapify(iterable)\n    # Remove the maximum element from the heap\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort.\n    '''\n    # Create a max-heap from the given list\n    hq.heapify(iterable)\n    # Remove the max element from the heap and append it to the result list\n    result = [hq.heappop(iterable)]\n    while iterable:\n        # Remove the smallest element from the heap and append it to the result list\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    heap = hq.heapify(iterable)\n    # extract elements from the heap and put them in a new list\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    # reverse the sorted list to obtain the sorted order\n    return sorted_list[::-1]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sort the given list using a heap sort algorithm.\n\n    Args:\n    iterable (list): The list to be sorted.\n\n    Returns:\n    The sorted list.\n    \"\"\"\n\n    # Build a max-heap from the list.\n    heap = [None] * len(iterable)\n    for i in range(len(iterable)):\n        heap[i] = iterable[i]\n        hq.heappush(heap, None)\n\n    # Pop the max-heap and insert it into a new list in ascending order.\n    result = []\n    while heap:\n        max_value = heapq.heappop(heap)\n        result.append(max_value)\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list(iterable)\n    n = len(heap)\n\n    # Build heap (rearrange array)\n    for i in range(n//2-1, -1, -1):\n        hq.heapify(heap, i, n)\n\n    # One by one extract an element from heap\n    for i in range(n-1, 0, -1):\n        # Move current root to end\n        heapq.heapreplace(heap, heap[0])\n        # call max_heapify on the reduced heap\n        hq.heapify(heap, 0, i)\n\n    # Return sorted list\n    return heap"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost: float\n        The actual cost of the item.\n    sale_amount: float\n        The amount sold.\n\n    Returns:\n    bool\n        True if the given amount has no profit and no loss, else False.\n    \"\"\"\n    if actual_cost < sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        print(\"Yes, it has no profit and no loss.\")\n    else:\n        print(\"No, it has a profit or loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    It returns True if the sale amount is greater than or equal to the actual cost and less than or equal to the actual cost plus the sale amount.\n    Otherwise, it returns False.\n    \"\"\"\n\n    if sale_amount >= actual_cost and sale_amount <= actual_cost + sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit > 0:\n        print(\"The sale amount is less than the actual cost.\")\n        return False\n    elif profit == 0:\n        print(\"The sale amount is equal to the actual cost.\")\n        return True\n    else:\n        print(\"The sale amount is more than the actual cost.\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost >= sale_amount:\n        print(\"No Profit and No Loss\")\n    else:\n        print(\"No Profit\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Checks whether the given amount has no profit and no loss\n    \"\"\"\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit of ${:.2f}\".format(profit))\n        print(\"The given amount has a loss of ${:.2f}\".format(loss))"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount: \n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost > sale_amount:\n        return False, \"Actual cost is greater than sale amount\"\n    elif actual_cost < sale_amount:\n        return True, \"Actual cost is less than sale amount\"\n    else:\n        return None, \"No profit or loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_loss = sale_amount - actual_cost\n    if profit_loss >= 0: \n        print(\"The sale amount has no profit and no loss.\")\n    else:\n        print(\"The sale amount has a loss.\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 10:\n        return round(32 + (0.6215*t)-(11.37*(v**0.16)) + (0.3965*t*v**0.16))\n    else:\n        return round(32 + (0.6215*t)-(0.761*(v**0.16))+ (0.3965*t*v**0.16))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = (v * 1.60934) / 1.80044\n    f = math.floor(c + 0.5)\n    return f"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n\n    \"\"\"\n\n    # Define the constants for the calculation\n    a = 216.7\n    b = 237.3\n    c = 100.4\n\n    # Calculate the wind chill index\n    wci = round(math.floor(c * (b * (t - 273.15) / (t - 273.15 + (a * (t - 273.15)) / b))) * 0.5)\n\n    # Return the wind chill index\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit\n    t_f = (t * 1.8) + 32\n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * t_f) / (t_f + 243.5))\n    # Convert wind chill index to rounded integer\n    wci = math.ceil(wci)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    wc = ((17.5 * math.log(v)) / (237.3 + math.log(v))) - 459.67\n\n    # Calculate the frost point temperature\n    fp = math.exp((17.2694 * t) / (t + 237.31))\n\n    # Calculate the wind chill scale\n    sc = fp - wc\n\n    # Calculate the wind chill index\n    wci = sc * 100 / 5.67\n\n    # Round the wind chill index to the next integer\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit and calculate the wind chill index\n    fahrenheit = (t * 1.8) + 32\n    wind_chill_index = int(math.floor(v / (6 * fahrenheit + 1.8)))\n\n    # Return the wind chill index rounded to the nearest integer\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill index using the given formula\n    # (13.12 + 0.6215*t - 11.37*math.log(v)-0.3965*t + 0.2146*math.log(v)*math.log(v))/557.62\n    wci = round((13.12 + 0.6215 * t - 11.37 * math.log(v) - 0.3965 * t + 0.2146 * math.log(v) * math.log(v)) / 557.62)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert wind speed and temperature from Km/h and Celsius to m/s and degrees Fahrenheit respectively\n    v_mps = v * 1.60934\n    t_f = (t * 1.8) + 32\n\n    # Calculate the absolute temperature difference between the air and the given temperature\n    delta_t = abs(t_f - 212.0)\n\n    # Calculate the effective temperature at the given wind speed\n    t_e = math.sqrt(v_mps ** 2 + delta_t ** 2)\n\n    # Calculate the wind chill index using the formulas provided in the problem statement\n    w_chill = 35.74 + 0.6215 * t_e - 35.75 * math.log(t_e) + 0.4275 * math.log(t_e) ** 2\n\n    # Round the wind chill index to the nearest integer\n    w_chill = round(w_chill)\n\n    return w_chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 0 or t < -100 or t > 50:\n        return \"Invalid input\"\n    elif t >= 0 and v >= 5 and v <= 15:\n        return 0\n    elif v >= 16 and v <= 25:\n        return math.ceil(t * (v - 16) / 14) + 32\n    elif v >= 26 and v <= 35:\n        return math.ceil(t * (v - 26) / 10) + 32\n    elif v >= 36 and v <= 45:\n        return math.ceil(t * (v - 36) / 5) + 32\n    elif v >= 46 and v <= 55:\n        return math.ceil(t * (v - 46) / 3) + 32\n    elif v >= 56:\n        return math.ceil(t * (v - 56) / 2) + 32"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = (16.67*(t-273.15))/(243.04+(t-273.15))\n    k = (0.6215*math.log(v))/(17.67*c)\n    wind_chill_index = 25.0/9.0*k\n    \n    # Round the wind chill index to the nearest integer\n    wind_chill_index = int(math.ceil(wind_chill_index))\n    \n    return wind_chill_index"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():  # check if name starts with uppercase letter\n            continue  # skip this name\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Remove names starting with a lowercase letter\n    sample_names = [name for name in sample_names if not name[0].islower()]\n    # Sum the length of the remaining names\n    total_length = sum(len(name) for name in sample_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the total length of the names\n    total_length = 0\n    # loop through each name in the list\n    for name in sample_names:\n        # if the name starts with a lowercase letter, remove it from the list\n        if name[0].islower():\n            sample_names.remove(name)\n        # if the name doesn't start with a lowercase letter, add its length to the total length\n        else:\n            total_length += len(name)\n    # return the total length of the names after removing the lowercase letters\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name[0].isupper()]  # filter out names that start with a lowercase letter\n    lengths = [len(name) for name in names]  # calculate the length of each filtered name\n    return sum(lengths)  # return the sum of the lengths of the filtered names"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_without_lowercase = []\n    for name in sample_names:\n        if name[0].isupper():\n            names_without_lowercase.append(name)\n    sum_of_lengths = sum([len(name) for name in names_without_lowercase])\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_of_lengths = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_of_lengths += len(name)\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Remove the names that start with a lowercase letter\n    names_without_lowercase = [name for name in sample_names if not name[0].islower()]\n    \n    # Calculate the sum of the length of the names\n    total_length = sum(len(name) for name in names_without_lowercase)\n    \n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # Remove all the parenthesis from the string\n    items = re.sub(r'\\([^()]*\\)', '', items)\n\n    # Split the string into a list of words\n    words = items.split()\n\n    # Remove all the words with a single character\n    words = [word for word in words if len(word) > 1]\n\n    # Join the words back into a string\n    items =''.join(words)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes in a string as input and returns a string with the parenthesis removed.\n    '''\n    # Remove all the parenthesis from the string\n    items = re.sub('\\([^)]*\\)', '', items)\n    \n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\((.*?)\\)\"\n    result = re.sub(pattern, \"\", items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string of items and removes the parenthesis and what is inbetween them from the string.\n    '''\n    pattern = r'\\(.*?\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Remove the space before and after the parenthesis\n    items = re.sub(r'\\s*\\([^)]*\\)\\s*', '', items)\n    # Return the final string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis and what's inbetween them\n    items = re.sub(r'\\(.*?\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # define a regex pattern to match a string with parentheses\n    pattern = r'\\([^)]*\\)'\n\n    # use the pattern to find all occurrences of the pattern in the input string\n    matches = re.findall(pattern, items)\n\n    # loop through the matches and remove the parentheses and what is inbetween them\n    for match in matches:\n        # split the match into a list of items, where each item is the name of the parenthesis\n        items_list = match.split()\n\n        # loop through the items list and replace each item with the name of the parenthesis\n        for i, item in enumerate(items_list):\n            if item == '(':\n                items_list[i] = items_list[i+1]\n            elif item == ')':\n                items_list[i] = items_list[i-1]\n\n        # join the items list back into a string\n        items_str =''.join(items_list)\n\n        # replace the matched match with the updated string\n        items = items.replace(match, items_str)\n\n    # return the updated string with the parentheses removed\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define a function to find the sum of the squares of the first n natural numbers\n    def sum_of_squares(n):\n        return (n * (n+1))**2\n\n    # Calculate the sum of the squares of the first n natural numbers\n    sum_squares = sum_of_squares(n)\n\n    # Use the formula for the nth nonagonal number: (n^2 + (2n-1)^2) / 2\n    nonagonal = (sum_squares + ((2*n-1)**2)) / 2\n\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return n * (n - 1) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Compute the sum of the numbers from 1 to n\n    sum_nums = (n * (n + 1)) // 2\n    \n    # Compute the nth nonagonal number\n    nth_nonagonal = (n * (n + 1)) // 2 - (n - 1)\n    \n    return nth_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * (n - 1) + 1) / 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1, n+1):\n        if i*i == 2*n-1:\n            return i\n    return None"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return (n*(n+1))//2\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # We start by initializing two variables, `row` and `col`, to 1\n    row, col = 1, 1\n\n    # We then loop n times, counting up to n/2\n    for i in range(n//2):\n        # We calculate the value of the current nonagonal number\n        val = row + col\n\n        # We print the value of the nonagonal number\n        print(val, end=' ')\n\n        # We update the values of `row` and `col` for the next iteration\n        row += 1\n        col += 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += i\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    nonagonal = 0\n    for i in range(1, n + 1):\n        nonagonal += i * (2 * i - 1)\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables\n    a, b = 1, 1\n    # loop through the range n\n    for i in range(1, n+1):\n        # calculate the nth nonagonal number\n        c = a + b\n        # update variables for next iteration\n        a, b = b, c\n    # return the nth nonagonal number\n    return b"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # remove punctuation and convert to lowercase\n    text = re.sub(r'[^\\w\\s]', '', text).lower()\n\n    # split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # check each word to see if it contains 'z'\n    for i in range(len(words)):\n        if words[i][0] == 'z' or words[i][-1] == 'z':\n            return True\n\n    # if no word contains 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b[zZ]'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]*z\\b'\n    result = re.search(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz_pattern = re.compile(r'\\b(z)[^a-zA-Z]*(?:(?<=\\w)(?=[^a-zA-Z]*z[^a-zA-Z]*\\b)|(?<=\\b)(?=[^a-zA-Z]*z[^a-zA-Z]*\\w))\\b', re.IGNORECASE)\n    matches = wordz_pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n\n    # define the pattern to search for 'z'\n    pattern = r'\\b[a-zA-Z]+[zZ]\\b'\n\n    # search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # check if the pattern was found and return the result\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?:[^z]|z(?!.*z)|z(?!.*z))\\w+\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function takes a string as input and returns True if it contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]*z\\b[a-zA-Z]*')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<=\\b)z(?=\\b)'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define the regex pattern to find the 'z' except at the start and end of the word\n    pattern = r'\\b[a-zA-Z]+z[a-zA-Z]+\\b'\n    # Find all the words in the text that match the given regex pattern\n    words = re.findall(pattern, text)\n    # Check if any words contain the 'z' except at the start and end of the word\n    if 'z' not in words:\n        return False\n    else:\n        return True"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array from k to n-1\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initialize two pointers \n    left = 0\n    right = k - 1\n    \n    # swap elements at left and right positions \n    input[left], input[right] = input[right], input[left]\n    \n    # reverse the remaining elements of the array \n    while left < right: \n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    \n    # return the modified array \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize the index of the first element of the array\n    first = 0\n\n    # Initialize the index of the last element of the array\n    last = k-1\n\n    # Initialize a temporary variable to store the value of the last element\n    temp = input[last]\n\n    # Loop through the array from the first element to the last element\n    while first < last: \n        # Swap the value of the first and last elements\n        input[first], input[last] = input[last], input[first] \n        # Move the indices of the first and last elements\n        first += 1 \n        last -= 1\n\n    # Reverse the array from the first element to the k-1 element\n    input[0:k] = input[0:k][::-1]\n\n    # Reverse the array from the k-1 element to the last element\n    input[k:len(input)] = input[k:len(input)][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes an array and a position k as input and returns the reversed array upto the given position.\n    \"\"\"\n    # First reverse the array starting from the second element\n    input.reverse()\n\n    # Then reverse the array starting from the position k\n    input[0:k].reverse()\n\n    # Finally reverse the array starting from the first element\n    input.reverse()\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    reverse_list = []\n    reverse_index = 0\n    for i in range(n-1, -1, -1):\n        if i <= k-1:\n            reverse_list.append(input[i])\n            reverse_index += 1\n        else:\n            break\n    return reverse_list"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if k is less than or equal to the length of the array\n    if k > len(input):\n        return \"Invalid input\"\n    \n    # Create a new array to store the reversed portion of the input array\n    reversed_array = []\n    \n    # Iterate over the input array from index 0 to k-1 (inclusive)\n    for i in range(k):\n        reversed_array.append(input[i])\n    \n    # Reverse the reversed array\n    reversed_array.reverse()\n    \n    # Concatenate the reversed array with the rest of the input array\n    output = reversed_array + input[k:]\n    \n    # Return the output array\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    \"\"\"\n    This function takes an array and a position k as input and reverses the array upto that position.\n    \"\"\"\n    # convert the array to a list\n    arr_list = list(input)\n\n    # reverse the array from k to the last index\n    arr_list[k-1:][::-1] = arr_list[0:k]\n\n    # convert the list back to a numpy array\n    arr_array = np.array(arr_list)\n\n    return arr_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from index 0 to k-1\n    input = input[::-1][:k]\n\n    # Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) < k:\n        print(\"Input array should have at least\", k, \"elements.\")\n        return\n    else:\n        reverse_array = input[:k][::-1]\n        reverse_array += input[k:]\n        return reverse_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Calculate the length of the input array\n    length = len(input)\n\n    # If k is greater than or equal to the length of the array, swap all elements\n    if k >= length:\n        for i in range(length):\n            j = length - 1 - i\n            input[i], input[j] = input[j], input[i]\n\n    # If k is less than the length of the array, swap the first k elements and the remaining elements\n    else:\n        # Reverse the first k elements\n        for i in range(k):\n            j = length - 1 - i\n            input[i], input[j] = input[j], input[i]\n\n        # Reverse the remaining elements\n        for i in range(k, length):\n            j = length - 1 - i\n            input[i], input[j] = input[j], input[i]\n\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # add the dictionary to the tuple using the update() method\n    test_tup = test_tup.update(test_dict)\n    # return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a list of tuples\n    new_list = list(test_dict.items())\n    # Concatenate the tuple with the new list\n    new_tuple = tuple(test_tup) + tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Check if the tuple is empty and if so, return the dictionary as a tuple\n    if not test_tup:\n        return tuple([test_dict])\n    # Check if the dictionary is empty and if so, return the original tuple as is\n    elif not test_dict:\n        return test_tup\n    # If the tuple and dictionary are not empty, add the dictionary to the tuple and return it\n    else:\n        return tuple(test_tup) + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.append(test_dict)\n    return tuple(test_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    # Create a new dictionary with the key-value pairs from the test_dict\n    new_dict = dict(test_dict)\n    # Append the new dictionary to the test_tup\n    test_tup += (new_dict,)\n    # Return the updated test_tup\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Concatenate the tuple with the dictionary\n    return (test_tup + tuple(test_dict.items()))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # add test_dict to test_tup using dictionary comprehension\n    result_tup = tuple((test_tup + {k: v}) for k, v in test_dict.items())\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a list of tuples\n    list_dict = [(key, test_dict[key]) for key in test_dict]\n    # Append the list of tuples to the tuple\n    new_tuple = test_tup + tuple(list_dict)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    max_average = float('-inf')\n    visited = [[False] * N for _ in range(N)]\n\n    def dfs(x, y, total_cost):\n        if x == N - 1 and y == N - 1:\n            nonlocal max_average\n            if total_cost > max_average:\n                max_average = total_cost\n            return\n        if x < N and y < N and not visited[x][y]:\n            visited[x][y] = True\n            dfs(x + 1, y, total_cost + cost[x][y])\n            dfs(x, y + 1, total_cost + cost[x][y])\n            visited[x][y] = False\n\n    dfs(0, 0, 0)\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables to store maximum average, visited cells, and current path\n    max_avg = 0\n    visited_cells = []\n    current_path = [[0, 0]]\n    \n    # Loop through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            # Check if current cell is part of the current path\n            if [i, j] in current_path:\n                # If it is, check if we can move right or down\n                if j < len(cost[0]) - 1:\n                    if i < len(cost) - 1:\n                        # If we can, add the current cell and move right\n                        current_path.append([i, j+1])\n                    else:\n                        # If we can't move down, we can move right\n                        current_path.append([i, j+1])\n                else:\n                    if i < len(cost) - 1:\n                        # If we can, add the current cell and move down\n                        current_path.append([i+1, j])\n                    else:\n                        # If we can't move down or right, we can add the current cell\n                        current_path.append([i, j])\n            # Check if we can move down or right from the current cell\n            if j < len(cost[0]) - 1:\n                if i < len(cost) - 1:\n                    # If we can, add the current cell and move right\n                    current_path.append([i, j+1])\n                else:\n                    # If we can't move down, we can move right\n                    current_path.append([i, j+1])\n            else:\n                if i < len(cost) - 1:\n                    # If we can, add the current cell and move down\n                    current_path.append([i+1, j])\n                else:\n                    # If we can't move down or right, we can add the current cell\n                    current_path.append([i, j])\n            # Compute the total cost and the number of visited cells in the current path\n            cost_in_path = sum([cost[i][j] for cell in current_path for i, j in cell])\n            num_cells = len(current_path)\n            # If the total cost in the path is greater than the maximum average seen so far, update the maximum average and visited cells\n            if cost_in_path > max_avg:\n                max_avg = cost_in_path\n                visited_cells = current_path\n    # Return the maximum average and visited cells in the path\n    return max_avg, visited_cells\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    \n    for i in range(N):\n        for j in range(i+1, N):\n            path = [0]*(N*N)\n            visited = [0]*(N*N)\n            path[i*N+j] = cost[i][j]\n            visited[i*N+j] = 1\n            \n            avg = 0\n            curr_cost = 0\n            curr_path = 1\n            \n            while curr_path < N*N:\n                if (i+1)*N+j in visited:\n                    if path[i*N+j+1] > 0 and path[i*N+j] > 0:\n                        avg += path[i*N+j] / visited[i*N+j]\n                        curr_cost += path[i*N+j]\n                        curr_path += 1\n                if (i+1)*N+j+1 in visited:\n                    if path[i*N+j] > 0 and path[i*N+j+1] > 0:\n                        avg += path[i*N+j+1] / visited[i*N+j+1]\n                        curr_cost += path[i*N+j+1]\n                        curr_path += 1\n                \n                if i*N+j+1 in visited:\n                    if path[i*N+j] > 0 and path[i*N+j+1] > 0:\n                        avg += path[i*N+j+1] / visited[i*N+j+1]\n                        curr_cost += path[i*N+j+1]\n                        curr_path += 1\n                if i*N+j in visited:\n                    if path[i*N+j+1] > 0 and path[i*N+j] > 0:\n                        avg += path[i*N+j] / visited[i*N+j]\n                        curr_cost += path[i*N+j]\n                        curr_path += 1\n                \n                if (i+1)*N+j-1 in visited:\n                    if path[i*N+j] > 0 and path[i*N+j-1] > 0:\n                        avg += path[i*N+j-1] / visited[i*N+j-1]\n                        curr_cost += path[i*N+j-1]\n                        curr_path += 1\n                \n                if (i+1)*N+j in visited:\n                    if path[i*N+j-1] > 0 and path[i*N+j] > 0:\n                        avg += path[i*N+j-1] / visited[i*N+j-1]\n                        curr_cost += path[i*N+j-1]\n                        curr_path += 1\n                \n                if i*N+j-1 in visited:\n                    if path[i*N+j] > 0 and path[i*N+j-1] > 0:\n                        avg += path[i*N+j-1] / visited[i*N+j-1]\n                        curr_cost += path[i*N+j-1]\n                        curr_path += 1\n                \n                if i*N+j in visited:\n                    if path[i*N+j-1] > 0 and path[i*N+j] > 0:\n                        avg += path[i*N+j-1] / visited[i*N+j-1]\n                        curr_cost += path[i*N+j-1]\n                        curr_path += 1\n                \n                if (i+1)*N+j+1 in visited:\n                    if path[i*N+j+1] > 0 and path[i*N+j] > 0:\n                        avg += path[i*N+j+1] / visited[i*N+j+1]\n                        curr_cost += path[i*N+j+1]\n                        curr_path += 1\n                \n                if (i+1)*N+j-1 in"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False] * N for _ in range(N)]\n    max_avg = float('-inf')\n    path = []\n\n    def dfs(x, y, total_cost, path_len):\n        if x == N - 1 and y == N - 1:\n            avg = total_cost / path_len\n            max_avg = max(max_avg, avg)\n            return\n\n        if visited[x][y]:\n            return\n\n        visited[x][y] = True\n        dfs(x + 1, y, total_cost + cost[x][y], path_len + 1)\n        dfs(x, y + 1, total_cost + cost[x][y], path_len + 1)\n        visited[x][y] = False\n\n    for i in range(N):\n        for j in range(N):\n            if not visited[i][j]:\n                dfs(i, j, cost[i][j], 1)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*(N+1) for _ in range(N+1)]\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i == j:\n                dp[i][j] = cost[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]\n    return dp[N][N] / (N*(N-1)//2)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    max_avg = float('-inf')\n    \n    def dfs(i, j, visited):\n        if i == N-1 and j == N-1:\n            total_cost = sum(cost[i][j])\n            visited.append((i, j))\n            if total_cost > max_avg:\n                max_avg = total_cost\n            return total_cost\n        \n        if i < N and j < N and not (i, j) in visited:\n            visited.append((i, j))\n            dfs(i+1, j, visited)\n            dfs(i, j+1, visited)\n            visited.pop()\n    \n    for i in range(N):\n        dfs(0, i, [])\n    \n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    for i in range(N-1):\n        for j in range(N-1):\n            if cost[i][j] == cost[i+1][j] or cost[i][j] == cost[i][j+1]:\n                temp = 0\n                temp += cost[i][j]\n                temp += cost[i+1][j]\n                temp += cost[i][j+1]\n                temp += cost[i+1][j+1]\n                temp /= 4\n                if temp > max_avg:\n                    max_avg = temp\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def dfs(r, c, current_cost, total_cost, visited, res):\n        if r == len(cost)-1 and c == len(cost[0])-1:\n            res.append(current_cost/len(visited))\n            return\n        visited.add((r,c))\n        if r < len(cost) and c < len(cost[0]):\n            dfs(r+1, c, current_cost+cost[r][c], total_cost+cost[r][c], visited, res)\n            dfs(r, c+1, current_cost+cost[r][c], total_cost+cost[r][c], visited, res)\n        visited.remove((r,c))\n    \n    max_average = float('-inf')\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            visited = set()\n            current_cost = 0\n            total_cost = 0\n            dfs(i, j, current_cost, total_cost, visited, [])\n            max_average = max(max_average, max(res))\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for j in range(1, N):\n        dp[j][0] = cost[j][0]\n        dp[0][j] = cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            if cost[i][j] > cost[i][j-1] and cost[i][j] > cost[i-1][j]:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    return max_avg // (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    def isSafe(i, j, r, c, N):\n        return 0 <= i < N and 0 <= j < N and (cost[i][j] == 0 or (cost[i][j] == 1 and (r > 0 or c > 0)))\n\n    def dfs(i, j, r, c, path_sum, N):\n        path_sum += cost[i][j]\n        path_count += 1\n\n        if i == N-1 and j == N-1:\n            max_avg = max(max_avg, path_sum/path_count)\n            return\n\n        if isSafe(i+1, j, r, c, N):\n            dfs(i+1, j, r, c, path_sum, N)\n        if isSafe(i, j+1, r, c, N):\n            dfs(i, j+1, r, c, path_sum, N)\n\n    N = len(cost)\n    max_avg = float('-inf')\n    path_sum = 0\n    path_count = 0\n    dfs(0, 0, 0, 0, 0, N)\n\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create a new dictionary to store the filtered students\n    filtered_students = {}\n    \n    # Loop through each student\n    for name, (height, weight) in students.items():\n        # Check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # Add the student to the filtered_students dictionary\n            filtered_students[name] = (height, weight)\n    \n    # Return the filtered_students dictionary\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, min_height, min_weight):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    # Filter out students with height and weight below the minimum\n    filtered_students = {name: height_weight for name, height_weight in students.items() if height_weight[0] > min_height and height_weight[1] > min_weight}\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            result[name] = data\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    power_sum = 0\n\n    while power > 0:\n        base_digit = base % 10\n        base_sum += base_digit\n        power_sum += power % 10\n        base //= 10\n        power //= 10\n\n    return base_sum + power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Initialize a variable to store the sum of digits\n    digit_sum = 0\n\n    # Iterate through the digits of the base and add them to the digit_sum\n    for digit in base_str:\n        digit_sum += int(digit)\n\n    # Calculate the result by raising the digit_sum to the specified power\n    result = digit_sum ** power\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert the base to a string so we can work with its digits\n    base_str = str(base)\n\n    # Initialize the sum variable to 0\n    sum_digits = 0\n\n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Add the digit to the sum variable\n        sum_digits += int(digit)\n\n    # Calculate the result\n    result = sum_digits ** power\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for digit in str(base):\n        sum += int(digit) ** power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    power_base = base ** power\n    for digit in str(power_base):\n        total += int(digit)\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Convert the base to a string so that we can easily access its digits\n    base_str = str(base)\n    \n    # Loop through each digit in the base string and add it to the sum variable to the power of the power argument\n    for digit in base_str:\n        sum += int(digit)**power\n    \n    # Return the sum of all digits raised to the specified power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum_digits = 0\n    for digit in str(base):\n        sum_digits += int(digit) ** power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string to allow string slicing\n    base_str = str(base)\n    # Initialize a variable to hold the sum\n    sum_digits = 0\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Multiply the integer digit by the power to the power of the current iteration\n        digit_power = pow(digit_int, power)\n        # Add the digit power to the sum\n        sum_digits += digit_power\n    # Return the sum\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    while power > 0:\n        digit = base % 10\n        base_sum += digit ** power\n        base = base // 10\n        power -= 1\n    return base_sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'(?<=\")(.*?)(?=\")'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # create a regular expression pattern to find values between quotation marks \" \"\n    pattern = r'\"([^\"]*)\"'\n    \n    # find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text1)\n    \n    # extract the values between quotation marks \" \" and return them as a list\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"([^\"]|\\\\\")*\"')\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"' # Find any sequence of zero or more characters not followed by a double quote\n    matches = re.findall(pattern, text) # Find all matches in the text\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\\\")([^\\\"]*)|(?=\\\")([^\\\"]*)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # initialize the result tuple with the first two elements of the input tuple\n    result_tup = (test_tup[0] * test_tup[1],)\n    \n    # loop through the remaining elements of the input tuple\n    for i in range(2, len(test_tup)):\n        # add the previous element multiplied by the next element to the result tuple\n        result_tup += (test_tup[i] * result_tup[-1],)\n    \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    length = len(test_tup)\n    result_tup = ()\n    for i in range(length-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) // 2\n    result = []\n    for i in range(n):\n        result.append(test_tup[i] * test_tup[i+n])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    result = []\n    for i in range(n):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # Concatenate the two lists\n    new_list = lst1 + lst2\n    # Return the sum of all elements in the new list\n    return new_list"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # initialize the sum list\n    sum_lst = []\n    # add elements of each list to the sum list\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i]+lst2[i])\n    # return the sum list\n    return sum_lst"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [i+j for i,j in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for key, group in groupby(enumerate(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(sorted(nums))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Remove consecutive duplicates from the list using itertools.groupby\n    result = [item for key, group in groupby(nums)]\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    return list(groupby(nums, lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a dictionary to store the counts of consecutive duplicates\n    count_dict = {}\n    # iterate through the list and count consecutive duplicates\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    # create a list to store the unique consecutive duplicates\n    unique_nums = []\n    # iterate through the dictionary and add the keys to the list\n    for key, value in count_dict.items():\n        if value == 1:\n            unique_nums.append(key)\n    # return the unique consecutive duplicates\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the list by its indices and iterate over the groups\n    for key, group in groupby(enumerate(nums), lambda x: x[0] - x[1]):\n        # check if the first element of the group is the same as the second\n        if group[0] == group[1]:\n            # if it is, remove the first element of the group\n            del group[0]\n\n    # return the modified list\n    return list(nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(lambda x: x[0], groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Create a list of tuples containing the index and value of each element in the original list\n    indexed_nums = [(i, nums[i]) for i in range(len(nums))]\n\n    # Group the indexed numbers by their indices and use the consecutive() function to create a new list\n    # containing the values that are consecutive duplicates\n    consecutive_nums = list(consecutive(indexed_nums))\n\n    # Create a new list containing only the values from the original list that are not consecutive duplicates\n    non_consecutive_nums = [num for i, num in indexed_nums if i not in [x[0] for x in consecutive_nums]]\n\n    return non_consecutive_nums\n\ndef consecutive(indexed_nums):\n    '''\n    Use the itertools.groupby() function to group the indexed numbers by their indices.\n    The consecutive() function will then iterate over each group and return the consecutive duplicates.\n    '''\n    for _, group in groupby(indexed_nums, lambda x: x[0]):\n        for i, num in group:\n            if i == 0 or num!= indexed_nums[i-1][1]:\n                yield num"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    for key, group in groupby(nums):\n        yield key"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = 2 * r * math.tan(math.pi/6) * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area using Heron's formula\n    area = math.sqrt(r**2 * h**2 + r**2 + h**2)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (2*r*h)/(math.sin(math.pi/2))\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function takes in the radius r and the height h of a cone and returns the lateral surface area.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n\n    # Use the formula for the area of a cone: A = \u03c0r\u00b2h\n    return math.pi*r**2*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Calculating the lateral surface area of the cone\n    lateral_area = (math.pi * r ** 2) + (math.pi * r * h) + (math.pi * h ** 2)\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Find the area of the base cone\n    area_base = math.pi * r**2\n    \n    # Find the height of the base cone\n    height_base = h/2\n    \n    # Find the lateral surface area of the base cone\n    lateral_base = area_base * height_base\n    \n    return lateral_base"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi * r**2) / 3 + (h * math.tan(math.pi/6))**2"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the area of the cone using the formula: A = pi*(r^2 + h^2)\n    A = math.pi * (r**2 + h**2)\n    # calculate the lateral surface area of the cone using the formula: As = 2*pi*r*h\n    As = 2*math.pi*r*h\n    # return the result as a tuple\n    return (A, As)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[^\\w\\s]', '', text).replace(' ', ':').replace(',', ':').replace('.', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern for matching spaces, commas, and dots\n    pattern = re.compile(r'([,\\.])')\n    \n    # Replace the pattern matches with a colon\n    text = pattern.sub(':', text)\n    \n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[,\\. ]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)  # replace multiple spaces with a single colon\n    text = re.sub(r'\\W+', ':', text)  # replace all non-alphanumeric characters with a colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # define regular expression pattern\n    pattern = r\"\\s|,|\\.|\"\n    # use re.sub() method to replace all occurrences of pattern with a colon\n    result = re.sub(pattern, \":\", text)\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[\\s,\\.]'\n    text = re.sub(pattern, ':', text)\n    return text\n\ntext = \"This is a sample text with some, commas and dots.\"\nprint(replace_specialchar(text))"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^\\w\\s]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the regular expression pattern\n    pattern = re.compile(r'\\s*,\\s*|\\s*\\.\\s*')\n    # use the pattern to replace all occurrences of spaces, commas, or dots with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r\"([,\\.])\")\n    result = pattern.sub(r':', text)\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # loop through the array until the element is found\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    # if the element is not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize index to -1\n    index = -1\n\n    # Initialize left and right pointers\n    left = 0\n    right = len(A) - 1\n\n    # While left pointer is less than right pointer\n    while left <= right:\n\n        # Calculate mid index\n        mid = left + (right - left) // 2\n\n        # If x is found at mid index\n        if A[mid] == x:\n\n            # If mid is the first occurrence, update index\n            if index == -1:\n                index = mid\n\n            # Move right pointer to mid index + 1\n            right = mid - 1\n\n        # If x is greater than mid element\n        elif A[mid] > x:\n\n            # Move left pointer to mid index + 1\n            left = mid + 1\n\n        # If x is less than mid element\n        else:\n\n            # Move right pointer to mid index - 1\n            right = mid - 1\n\n    # Return index\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize the first occurrence index to -1\n    first_occurrence = -1\n    # iterate over the array\n    for i in range(len(A)):\n        # check if the current element is equal to x\n        if A[i] == x:\n            # if it is, check if it is the first occurrence\n            if first_occurrence == -1:\n                first_occurrence = i\n            # if it is not the first occurrence, return the index of the first occurrence\n            else:\n                return first_occurrence\n    # if the array is exhausted and no occurrence is found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if i < len(A) and A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x, and returns the index of the first occurrence of x in A.\n    If x is not present in A, the function returns -1.\n\n    Example:\n    A = [1, 2, 3, 4, 5]\n    x = 3\n    Output: 2\n    \"\"\"\n\n    # Initialize the left and right pointers to the start and end of the array\n    left = 0\n    right = len(A) - 1\n\n    # While left pointer is less than or equal to the right pointer\n    while left <= right:\n        # Calculate the midpoint of the array\n        mid = (left + right) // 2\n\n        # If the mid element is equal to the target element\n        if A[mid] == x:\n            # If the mid element is the first occurrence of x, return its index\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n\n            # If x is present at the left of mid element, search for x from the left of mid to the right\n            else:\n                right = mid - 1\n\n        # If the mid element is less than the target element\n        elif A[mid] < x:\n            # If x is present at the right of mid element, search for x from mid to the left\n            if mid == len(A) - 1 or A[mid+1]!= x:\n                return mid\n\n            # If x is present at the left of mid element, search for x from mid to the left\n            else:\n                left = mid + 1\n\n        # If the mid element is greater than the target element\n        else:\n            # If x is present at the left of mid element, search for x from mid to the left\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n\n            # If x is present at the right of mid element, search for x from the left of mid to the right\n            else:\n                right = mid - 1\n\n    # If the target element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A (list): A sorted array of numbers.\n        x (int): A number to search for in the array.\n\n    Returns:\n        int: The index of the first occurrence of `x` in `A`. If `x` is not found in `A`, returns -1.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n    A (list): List of numbers.\n    x (int): The number to search for.\n\n    Returns:\n    int: The index of the first occurrence of x in A, or -1 if x is not found.\n    \"\"\"\n    # initialize index of first occurrence to -1\n    index = -1\n\n    # loop through the array\n    for i in range(len(A)):\n        # if the current number matches the target number, update the index and break out of the loop\n        if A[i] == x:\n            index = i\n            break\n\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the first element greater than or equal to x\n    i = bisect_left(A, x)\n    # check if the first element greater than or equal to x is equal to x\n    if i < len(A) and A[i] == x:\n        return i\n    # if the first element greater than or equal to x is not equal to x,\n    # return -1 (indicating that x is not present in A)\n    else:\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index variable to -1\n    index = -1\n    # Initialize the count variable to 0\n    count = 0\n    # Traverse the sorted array\n    for i in range(len(A)):\n        # Check if the current element is equal to x\n        if A[i] == x:\n            # Increment the count variable\n            count += 1\n            # Check if the count variable is equal to 1\n            if count == 1:\n                # Update the index variable to the current index i\n                index = i\n            # If the count variable is greater than 1, return the current index i\n            elif count > 1:\n                return i\n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            dp[i] += dp[j]*arr[i]\n    return sum(dp)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_arr = arr[i:j+1]\n            prod = 1\n            for num in sub_arr:\n                prod *= num\n            res += prod\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # initialize variables\n    n = len(arr)\n    sum_of_subarrays = 0\n\n    # calculate products of subarrays\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n        sum_of_subarrays += product\n\n    return sum_of_subarrays"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        # Calculate the sum of products of all sublists ending with i\n        product_sum = 1\n        for j in range(i):\n            product_sum *= arr[j]\n        # Add this sum to the result\n        result += product_sum\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    This function takes a list of integers as input and returns the sum of products of all possible sublists of the input list.\n    '''\n\n    # Sort the input list in ascending order\n    arr.sort()\n\n    # Initialize variables for sum and product of current subarray\n    sum_of_products = 0\n    current_product = 1\n\n    # Iterate through the input list\n    for i in range(len(arr)):\n        # Update the current subarray and its product\n        current_subarray = arr[i:i+len(arr)//2]\n        current_product *= current_subarray[-1]\n\n        # Update the sum of products with the current product\n        sum_of_products += current_product\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    MOD = 1000000007\n    # Calculate the sum of all subarrays\n    sum_of_subarrays = sum(arr)\n    # Create a 2D matrix to store the products of all sublists\n    subarray_products = [[0]*n for i in range(n)]\n    for i in range(n):\n        subarray_products[i][i] = arr[i]\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            subarray_products[i][j] = (subarray_products[i][j] + subarray_products[i][j-1] - subarray_products[i][j-length]) % MOD\n    # Calculate the sum of products of all subarrays\n    sum_of_products = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_of_products += subarray_products[i][j]\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize two variables to store the sum of products of subarrays\n    # and the maximum product of a subarray\n    max_sum = 0\n    curr_sum = 1\n    # Loop through all subarrays and calculate the sum of products\n    for i in range(n):\n        for j in range(i, n):\n            curr_sum *= arr[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize a list to store the sum of products of subarrays\n    subarray_sum = [0] * (n+1)\n    # Initialize a list to store the sum of products of subarrays from left to right\n    left_sum = [0] * (n+1)\n    # Initialize a list to store the sum of products of subarrays from right to left\n    right_sum = [0] * (n+1)\n    # Initialize a list to store the product of all subarrays from left to right\n    left_prod = [1] * (n+1)\n    # Initialize a list to store the product of all subarrays from right to left\n    right_prod = [1] * (n+1)\n    # Initialize a list to store the sum of products of all possible sublists of a given list\n    sublist_sum = [0] * (n+1)\n    # Initialize a boolean variable to mark if we are in the left or right subarray\n    is_left = True\n    # Traverse through the array\n    for i in range(1, n+1):\n        # If we are in the left subarray, update the sum of products of subarrays from left to right\n        if is_left:\n            left_sum[i] = left_sum[i-1] + arr[i-1]\n            left_prod[i] = left_prod[i-1] * arr[i-1]\n        # If we are in the right subarray, update the sum of products of subarrays from right to left\n        else:\n            right_sum[i] = right_sum[i-1] + arr[i-1]\n            right_prod[i] = right_prod[i-1] * arr[i-1]\n        # Update the sum of products of all possible sublists of a given list\n        if is_left:\n            sublist_sum[i] = sublist_sum[i-1] + left_sum[i]\n        else:\n            sublist_sum[i] = sublist_sum[i-1] + right_sum[i]\n        # Update the product of all subarrays from left to right and from right to left\n        if i > 1:\n            left_prod[i] = left_prod[i-1] * left_sum[i]\n            right_prod[i] = right_prod[i-1] * right_sum[i]\n        # Update the sum of products of all subarrays from left to right and from right to left\n        if is_left:\n            subarray_sum[i] = subarray_sum[i-1] + left_prod[i]\n        else:\n            subarray_sum[i] = subarray_sum[i-1] + right_prod[i]\n        # Change the value of is_left to mark if we are in the left or right subarray\n        is_left = not is_left\n    # Calculate the sum of products of all possible sublists of a given list\n    sublist_prod = sublist_sum[-1]\n    # Calculate the sum of products of all subarrays\n    subarray_prod = subarray_sum[-1]\n    # Calculate the sum of products of all possible sublists of a given list\n    return sublist_prod - subarray_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # find sum of products of all subarrays\n    subarray_products = []\n    for i in range(1, len(arr) + 1):\n        subarray_products.append(1)\n        for j in range(1, i + 1):\n            subarray_products[-1] *= arr[j - 1]\n    # find sum of products of all subarrays in reverse order\n    subarray_products_reverse = []\n    for i in range(len(arr) - 1, -1, -1):\n        subarray_products_reverse.append(1)\n        for j in range(1, i + 1):\n            subarray_products_reverse[-1] *= arr[j - 1]\n    # find sum of products of all sublists\n    sublist_products = [subarray_products[i] * subarray_products_reverse[j] for i in range(len(subarray_products)) for j in range(len(subarray_products_reverse)) if i!= j]\n    # find sum of products of all sublists in reverse order\n    sublist_products_reverse = [subarray_products_reverse[i] * subarray_products[j] for i in range(len(subarray_products_reverse)) for j in range(len(subarray_products)) if i!= j]\n    # sum of products of all sublists\n    return sum(sublist_products) + sum(sublist_products_reverse)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_product = [1] * (n + 1)\n    suffix_product = [1] * (n + 1)\n    \n    # compute prefix and suffix products\n    for i in range(1, n + 1):\n        prefix_product[i] = prefix_product[i - 1] * arr[i - 1]\n        suffix_product[n - i] = suffix_product[n - i + 1] * arr[n - i]\n    \n    # compute sum of products\n    prefix_sum = 0\n    suffix_sum = 0\n    for i in range(1, n + 1):\n        prefix_sum += prefix_product[i]\n        suffix_sum += suffix_product[i]\n    \n    return prefix_sum + suffix_sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Remove the first and last bit\n    n = n & 0xFFFFFFFE\n    \n    # Toggle every other bit except the first and last bit\n    n = n ^ ((n & 0x55555555) << 1) ^ ((n & 0xAAAAAAAA) >> 1)\n    \n    # Add the first and last bit back\n    n = n | 0x00000001\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # first bit is the leftmost bit, last bit is the rightmost bit\n    first_bit = n & 1\n    last_bit = n & (2**31 - 1)\n    \n    # toggle first and last bit\n    n ^= first_bit ^ last_bit\n    \n    # toggle middle bits\n    middle_bits = n & ((1 << 31) - 2)\n    n ^= middle_bits\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # create a new number where the first and last bits are toggled\n    first_bit = (n >> 31) & 0x1\n    last_bit = (n << 1) & 0x1\n    new_num = first_bit ^ last_bit ^ (n & 0x7FFFFFFF)\n    \n    # remove the first and last bits\n    new_num &= 0x7FFFFFFF\n    \n    # return the new number\n    return new_num"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n\n    # Get the middle index of the number\n    middle = num_bits // 2\n\n    # Extract the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (2 ** middle - 1)\n\n    # Toggle the middle bits and combine with the first and last bits\n    middle_bits = (n ^ last_bit ^ first_bit) & (2 ** middle - 1)\n\n    # Combine the middle_bits with the first and last bits\n    n = (first_bit << middle) | (middle_bits << (middle + 1)) | (last_bit >> middle)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initializing the variable to store the result\n    result = 0\n    \n    # Bitwise XOR of the number and the number with the last bit set\n    result = n ^ (n & ~(0b1 << (n.bit_length()-1)))\n    \n    # Bitwise XOR of the result and the number with the first bit set\n    result = result ^ (result & ~(0b1 << 0))\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 0\n    else:\n        # Convert binary number to a list of digits\n        binary_list = [int(digit) for digit in bin(n)[2:]]\n        # Toggle the middle bit\n        middle_bit = binary_list[len(binary_list)//2]\n        binary_list[len(binary_list)//2] = not middle_bit\n        # Convert the list of digits back to a binary number\n        binary_str = ''.join([str(digit) for digit in binary_list])\n        # Convert the binary number back to an integer\n        result = int(binary_str, 2)\n        return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    mask = 1\n    left_half = n & mask\n    \n    for i in range(1, 31, 2):\n        mask = mask << 1\n        mask = mask | 1\n        if (left_half & mask) == 0:\n            n = n ^ mask\n    \n    right_half = n >> 31\n    \n    n = right_half ^ left_half\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Split the binary representation of n into two parts: first part excluding the last bit, and second part excluding the first bit.\n    first_part = bin(n & (2**(len(bin(n)[2:])-2)-1))[2:]\n    second_part = bin(n & (2**(len(bin(n)[2:])-2)-2))[2:]\n    # Combine the two parts.\n    final_part = first_part + second_part[1:]\n    # Convert the binary string to an integer.\n    final_n = int(final_part, 2)\n    return final_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Extract the first and last bits\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n    \n    # Toggle the bits except the first and last ones\n    bits = (n ^ (first_bit ^ last_bit)) & ((1 << 30) - 1)\n    \n    # Combine the first and last bits with the toggled bits\n    result = (bits ^ first_bit ^ last_bit) | (first_bit << 30) | (last_bit << 31)\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the length of the binary representation of the number\n    length = len(bin(n)[2:])\n    # initialize the result to 0\n    result = 0\n    \n    # iterate over the bits from the second to the second to the last bit\n    for i in range(1, length-2):\n        # toggle the bit\n        if (n & (1<<i)) == 0:\n            result |= (1<<i)\n        else:\n            result &= ~(1<<i)\n            \n    # return the result\n    return result"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif index == len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    if idx!= len(a):\n        if a[idx] == x:\n            return idx\n        elif a[idx] < x:\n            return left_insertion(a[idx+1:], x)\n    return len(a)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Find the left insertion point\n    index = bisect.bisect_left(a, x)\n    # If the value is not found, insert it at the end of the array\n    if index == len(a):\n        a.append(x)\n        return len(a) - 1\n    # If the value is found, return the left index of the value\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Using the bisect module in Python, we can find the left insertion point of the value x in the list a.\n    index = bisect.bisect_left(a, x)\n    # If the value x is not found in the list a, the index variable will be the insertion point for x.\n    if index == len(a):\n        return len(a)\n    # If the value x is found in the list a, we need to find the left insertion point for x.\n    # We can use binary search to find the left insertion point for x.\n    left = index\n    right = index - 1\n    while left > 0 and a[left] > x:\n        left -= 1\n    while right < len(a) - 1 and a[right] < x:\n        right += 1\n    return left + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return left_insertion(a[index+1:], x)\n    else:\n        return left_insertion(a[:index], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n        a (list): sorted list of values\n        x (int): value to locate insertion point for\n\n    Returns:\n        int: index of left insertion point\n    \"\"\"\n    left = bisect.bisect_left(a, x)\n    if left == len(a):\n        return left\n    elif a[left] == x:\n        return left\n    elif a[left - 1] == x:\n        return left - 1\n    else:\n        return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    return re.match(regex, string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match: \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    return re.match(regex, string) is not None"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return 1\n    # recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def nth_triangular_number(n):\n        return (n * (n + 1)) // 2\n\n    def count_digits(n):\n        count = 0\n        while n:\n            count += 1\n            n //= 10\n        return count\n\n    smallest_triangular_number = nth_triangular_number(n)\n\n    if is_prime(count_digits(smallest_triangular_number)):\n        return -1\n\n    for i in range(1, n + 1):\n        triangular_number = nth_triangular_number(i)\n        if is_prime(count_digits(triangular_number)):\n            return i - 1\n\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    # Find number of possible triangular numbers with n digits\n    num = math.comb(10**n, n)\n\n    # Find number of possible triangular numbers with n+1 digits\n    num += math.comb(10**(n+1), n+1)\n\n    # Find smallest combination of n objects from a set of 10^n\n    smallest = math.comb(10**n, n)\n\n    # Find smallest combination of n+1 objects from a set of 10^(n+1)\n    smallest += math.comb(10**(n+1), n+1)\n\n    # Find smallest triangular number with n digits\n    index = smallest\n\n    # Find smallest triangular number with n+1 digits\n    index += math.comb(10**n, n)\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function calculates the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Maximum number of digits of the smallest triangular number\n    max_digits = math.floor(math.log10(2 * n + 1)) + 1\n    \n    # Initialize a matrix to store the triangular numbers\n    triangular_matrix = [[0] * max_digits for _ in range(n + 1)]\n    \n    # Fill the matrix with the first n triangular numbers\n    for i in range(n + 1):\n        triangular_matrix[i][0] = i\n        \n    # Fill the remaining elements of the matrix using the formula T(i,j) = T(i-1,j-1) + T(i-1,j)\n    for i in range(1, n + 1):\n        for j in range(1, max_digits):\n            triangular_matrix[i][j] = triangular_matrix[i-1][j-1] + triangular_matrix[i-1][j]\n            \n    # Initialize an empty list to store the indices of the smallest triangular numbers\n    smallest_triangular_numbers = []\n    \n    # Find the indices of the smallest triangular numbers\n    for i in range(n + 1):\n        smallest_triangular_numbers.append(triangular_matrix[i][0])\n    \n    # Sort the indices of the smallest triangular numbers in ascending order\n    smallest_triangular_numbers.sort()\n    \n    # Return the index of the smallest triangular number with n digits\n    return smallest_triangular_numbers[n-1]"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the factorial of n-1 using math.factorial() function\n    factorial = math.factorial(n-1)\n    \n    # Calculate the smallest triangular number with n digits\n    smallest_triangular = 5**(2*n-3) * factorial // (math.factorial(2*n-3) * math.factorial(3))\n    \n    # Calculate the index of smallest triangular number with n digits\n    index = int(math.log10(smallest_triangular))\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Initialize a variable'm' to store the maximum value of n\n    m = 10**(n-1)\n\n    # Loop through all possible values of'm'\n    for i in range(1, m):\n        # Calculate the value of 'n' digit triangular number\n        t = i * (i+1) * (2*i+1)\n        # Calculate the value of the smallest triangular number with 'n' digits\n        smallest_t = t * (t+1) // 2\n        # Check if the smallest triangular number is smaller than the current value of'm'\n        if smallest_t < m:\n            m = smallest_t\n            # Print the index of the smallest triangular number with 'n' digits\n            print(t)\n\n    # If the loop ends without finding the smallest triangular number, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        for i in range(3, n+1):\n            for j in range(1, int(math.sqrt(i))+1):\n                if i % j == 0:\n                    break\n            else:\n                return i\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function finds the index of the smallest triangular number with n digits.\n    \n    Args:\n    n (int): The number of digits in the smallest triangular number.\n    \n    Returns:\n    int: The index of the smallest triangular number with n digits.\n    '''\n    \n    # Calculate the value of the smallest triangular number with n digits\n    triangular = math.factorial(n) / (math.factorial(n-1) * math.factorial(n-2))\n    \n    # Calculate the index of the smallest triangular number\n    index = int(math.log10(triangular))\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0 \n    elif n == 2: \n        return 1 \n    else: \n        for i in range(2, n+1): \n            min_num = i ** 2\n            for j in range(1, i): \n                min_num = min(min_num, j * (i - j))\n            print(min_num, end=\" \")\n        return i "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def count_set_bits(num):\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n    \n    def lcm(a, b):\n        return (a * b) // math.gcd(a, b)\n    \n    def gcd(a, b):\n        if a == 0:\n            return b\n        return gcd(b % a, a)\n    \n    def smallest_triangular_number(n):\n        k = 0\n        while True:\n            k += 1\n            triangular_num = (k * (k+1)) // 2\n            if is_prime(triangular_num):\n                num_bits = count_set_bits(triangular_num)\n                if num_bits == n:\n                    return k\n    \n    def smallest_prime_with_n_digits(n):\n        k = smallest_triangular_number(n)\n        lcm_prime = math.lcm(2, 3)\n        count = 0\n        while True:\n            if is_prime(k) and (count == 0 or count == lcm_prime):\n                return k\n            k += 1\n            count += 1\n    \n    return smallest_prime_with_n_digits(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n\n    # Function to find the smallest triangular number with n digits\n    def find_SmallestTriangular(n):\n        # Find the first triangular number greater than 10^n - 1\n        tri = 10**(n-1) + 1\n        \n        while True:\n            # Find the next triangular number by adding the current one to the sum of its digits\n            tri_digits = [int(d) for d in str(tri)]\n            sum_digits = sum(tri_digits)\n            tri += sum_digits\n            \n            # Check if the next triangular number has n digits\n            if len(str(tri)) == n:\n                # Return the index of the smallest triangular number\n                return math.floor(tri / 10**n)\n            \n    # Find the index of the smallest triangular number with n digits\n    return find_SmallestTriangular(n)"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    result = {}\n    # Loop through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Add the key-value pair to the dictionary\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    result_dict = {}\n    # loop through the tuple\n    for i in range(len(test_tup)-1):\n        # add the current adjacent pair as a key-value pair to the dictionary\n        key = test_tup[i],\n        value = test_tup[i+1],\n        result_dict[key] = value\n    # return the resulting dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    i = 0\n    while i < len(test_tup):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Create an empty dictionary\n    my_dict = {}\n    \n    # Iterate through the tuple and add adjacent elements as key-value pairs\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        my_dict[key] = value\n    \n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Define an empty dictionary to hold key-value pairs\n    result_dict = {}\n    # Loop through the tuple and add each adjacent element as a key-value pair to the dictionary\n    for i in range(0, len(test_tup)-1, 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a string are the same or not.\n    \"\"\"\n    # first, check if the string is empty\n    if len(s) == 0:\n        return True\n    \n    # check if all the characters are the same\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    \n    # if we get to this point, all characters are the same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string s as input and returns True if all the characters in the string are same, else False.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check if the string is empty or not\n    if len(s) == 0:\n        return True\n    \n    # Get the first character of the string\n    first_char = s[0]\n    \n    # Check if all the characters in the string are the same as the first character\n    for char in s:\n        if char!= first_char:\n            return False\n    \n    # If all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert string to list\n    lst = list(s)\n    # Initialize a boolean variable to store the result\n    result = True\n    # Loop through the list of characters\n    for i in range(len(lst)):\n        # If the first character is not equal to the second character, set the result to False\n        if lst[i]!= lst[0]:\n            result = False\n            break\n    # Return the result\n    return result"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:]) == s[0]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # check if the length of the string is 0 or 1\n    if len(s) <= 1:\n        return True\n\n    # get the first character of the string\n    first_char = s[0]\n\n    # iterate over the string and check if all characters are same or not\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n\n    # if all characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        first = s[0]\n        for i in range(1, len(s)):\n            if first!= s[i]:\n                return False\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in s:\n        count += 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in the given string are the same or not.\n\n    :param s: string - The string to be checked for all characters being the same or not.\n    :return: bool - True if all characters in the string are the same, False otherwise.\n    \"\"\"\n    # Find the first character of the string\n    first_char = s[0]\n\n    # Iterate over the remaining characters of the string\n    for char in s[1:]:\n        # If the first character is not the same as the current character, return False\n        if char!= first_char:\n            return False\n\n    # If the loop completes without returning False, all characters are the same, so return True\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1 + math.sqrt(5)) / 2\n    area = (4 / 3) * s * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/2 * side * side * side\n    area = (1/6) * math.pi * side * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side * (1/3)\n    area = (a * (a - math.sqrt(5)) * (a + math.sqrt(5))) / 5\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter\n    sp = (side*2) + (side*2) + (side*2)\n\n    # calculate the area\n    area = (sp * (sp - side**2) * (sp - (side/2)**2) * (sp - (side/3)**2)) ** 0.5\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return 1/3 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.25\n\n    # Calculate the area using Heron's formula\n    area = (s * (s - side) * (s - side) * (s - side) * (s - side)) ** 0.5\n\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side/2\n    b = math.sqrt(3)*a\n    c = a*math.sqrt(3)\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**(1/3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/6 * side**2 * (math.sqrt(2) + math.sqrt(3))"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n  # To handle the case when m is greater than or equal to n\n    list.extend(list[:m])  # Shifting the elements to the right by m positions\n    list[m:] = list[:m] * n  # Replacing the first m elements with the last m elements\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # Check if m is less than n\n    if m < n:\n        # Move all items to the left by m\n        list = list[-m:] + list[:-m]\n    else:\n        # Move all items to the left by n\n        list = list[-n:] + list[:-n]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    n = len(list)\n    m = m % n\n\n    list.extend(list[:m])\n    list[:m] = []\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # If m is greater than n, return the list as it is\n    if m > n:\n        return list\n    \n    # If m is zero, return the list as it is\n    elif m == 0:\n        return list\n    \n    # If m is negative, make m positive by adding n to it\n    else:\n        m = m % n\n        # Create a new list to store the rotated elements\n        rotated_list = []\n        # Traverse the list from the last element to the second last element\n        for i in range(n-1, m-1, -1):\n            # Add each element to the new list\n            rotated_list.append(list[i])\n        # Add the last element to the new list\n        rotated_list.append(list[m-1])\n        # Traverse the list from the second last element to the first element\n        for i in range(m, n):\n            # Add each element to the new list\n            rotated_list.append(list[i])\n        # Return the new list\n        return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function takes a list and an integer n as input and returns the rotated list by n items.\n    \"\"\"\n    # Convert the list to a list of tuples so that we can rotate it.\n    lst = list(enumerate(lst))\n    # Get the number of items to be rotated.\n    n = n % len(lst)\n    # Rotate the list by n items.\n    lst = lst[-n:] + lst[:-n]\n    # Convert the list back to a list.\n    rotated_lst = [item[1] for item in lst]\n    return rotated_lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # calculate the number of items to be rotated\n    k = n - m if n - m >= 0 else 0\n    # initialize the new list\n    new_list = [0] * n\n    # copy the items to the new list\n    for i in range(n):\n        new_list[(i + k) % n] = list[i]\n    # replace the original list with the rotated list\n    list[:] = new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    if m > n:\n        return list\n    elif m == 0:\n        return list\n    else:\n        # shift elements to the right by m places\n        list = list[m:] + list[:m]\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # If the rotation count is greater than or equal to the length of the list,\n    # simply return the list as it is.\n    if m >= n:\n        return list\n    \n    # Find the last m items of the list.\n    last_m_items = list[-m:]\n    \n    # Remove the last m items from the list.\n    list = list[:-m]\n    \n    # Append the last m items to the beginning of the list.\n    list.extend(last_m_items)\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    # reverse the list\n    list.reverse()\n    # shift all the elements of the list by m positions to the right\n    for i in range(n-m):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    # reverse the list again\n    list.reverse()\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_values = None\n    for val in test_tup:\n        if val is None:\n            none_values = True\n            break\n    return none_values"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for item in test_tup:\n        if item is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(x % digit == 0 for digit in str(x)) and startnum <= x <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    return lambda x: all(x % i == 0 for i in range(10))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda num: all(digit in str(num) for digit in str(num))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda num: all(int(d) % int(num) == 0 for d in str(num)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n\n    >>> divisible_by_digits(100, 999)\n    [111111111, 123456789, 234567890, 345678901, 456789012, 567890123, 678901234, 789012345, 890123456, 901234567]\n    \"\"\"\n    return [num for num in range(startnum, endnum + 1) if all(int(digit) % num == 0 for digit in str(num))]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Function to check if a number is divisible by every digit it contains\n    def is_divisible_by_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if digit == 0:\n                continue\n            if num % digit!= 0:\n                return False\n        return True\n    \n    # Function to generate all numbers within a given range that are divisible by every digit they contain\n    def generate_numbers(startnum, endnum):\n        return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n    \n    # Calling the generate_numbers function and printing the output\n    numbers = generate_numbers(startnum, endnum)\n    print(numbers)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*r**2*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * (1 - math.cos(math.radians(a)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    if a > 360:\n        return None\n    else:\n        area = r * r * math.sin(math.radians(a)) / 2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is within the range of 0 to 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector using the formula A = r^2 * sin(angle)\n    A = r**2 * math.sin(math.radians(a/360))\n    \n    # Return the area of the sector\n    return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is valid\n    if a > 360:\n        return None\n    # Calculate area using formula\n    area = r * math.sin(math.radians(a))\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n    # calculate area of the sector\n    A = math.pi * r**2 * (a/360)\n    return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * (a / 360)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"The angle is larger than 360 degrees.\")\n        return None\n    \n    # Calculate the area of the sector using the formula A = pi * r^2 * sin(a/180*pi)\n    area = math.pi * r**2 * math.sin(a * (math.pi/180))\n    \n    return area\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store the lengths of LCS for all prefixes of X, Y and Z\n    L = [[[0] * (o+1) for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the 3D table using dynamic programming\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[j-1] == Y[i-1] and X[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j][k-1])\n\n    # Find the length of LCS for the given sequence using backtracking\n    i = n\n    j = m\n    k = o\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[j-1] == Y[i-1] and X[j-1] == Z[k-1]:\n            lcs = X[j-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i-1][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    def lcs(X, Y): \n        \"\"\"\n        Helper function to find the length of the longest common subsequence\n        \"\"\"\n        m = len(X)\n        n = len(Y)\n        dp = [[0] * (n+1) for i in range(m+1)]\n        for i in range(1, m+1): \n            for j in range(1, n+1): \n                if X[i-1] == Y[j-1]: \n                    dp[i][j] = dp[i-1][j-1] + 1\n                else: \n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[m][n]\n\n    # Find the length of the LCS for each subsequence\n    len_X = lcs(X, X)\n    len_Y = lcs(Y, Y)\n    len_Z = lcs(Z, Z)\n\n    # Find the LCS of the subsequences\n    lcs_X_Y = lcs(X, Y)\n    lcs_Y_Z = lcs(Y, Z)\n    lcs_X_Z = lcs(X, Z)\n\n    # Find the LCS of all three subsequences\n    lcs_all = lcs(X, Y)\n    if len_Y > len_Z: \n        if len_Y > len_X: \n            lcs_all = lcs(Y, Z)\n        else: \n            lcs_all = lcs(X, Z)\n    else: \n        if len_Z > len_X: \n            lcs_all = lcs(Z, X)\n        else: \n            lcs_all = lcs(Y, X)\n\n    # Return the LCS of all three subsequences\n    return lcs_all"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # creating a 3D matrix to store LCS values\n    dp = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n    \n    # filling the first row and first column of the matrix\n    for i in range(1, m+1):\n        dp[0][i][0] = 0\n        \n    for j in range(1, n+1):\n        dp[j][0][0] = 0\n        \n    for k in range(1, o+1):\n        dp[0][0][k] = 0\n    \n    # filling the rest of the matrix\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k]\n                elif X[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j][k-1]\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i-1][j-1][k])\n    \n    # backtracking to find the LCS\n    i = m\n    j = n\n    k = o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n            j -= 1\n        elif X[i-1] == Z[k-1]:\n            i -= 1\n            k -= 1\n        else:\n            j -= 1\n            k -= 1\n    \n    # returning the LCS as a string\n    lcs = ''.join(lcs[::-1])\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    # length of X, Y and Z\n    n, m, l = len(X), len(Y), len(Z)\n    # table to store length of LCS for subsequences\n    L = [[0] * (l + 1) for _ in range(n + 1)]\n    # initialize L[i][j] with 0 for all i and j\n    for i in range(n + 1):\n        for j in range(l + 1):\n            L[i][j] = 0\n    # fill L[i][j] with length of LCS for substrings X[0..i-1] and Y[0..j-1] and Z[0..k-1]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, l + 1):\n                if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1], L[i - 1][j - 1]) + 1\n    # return LCS length\n    return L[n][m]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # creating a table to store lengths of subsequences of lengths 0 to p\n    T = [[0] * (p+1) for i in range(m+1)]\n\n    # filling the table from the bottom up\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    T[i][j][k] = T[i-1][j-1][k-1] + 1\n                elif T[i-1][j][k] > T[i][j-1][k]:\n                    T[i][j][k] = T[i-1][j][k]\n                elif T[i][j-1][k] > T[i][j][k-1]:\n                    T[i][j][k] = T[i][j-1][k]\n\n    # the length of LCS is stored in T[m][n][p]\n    return T[m][n][p]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a 2D table to store lengths of longest common subsequences of all prefixes of X, Y, and Z\n    LCS = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # Fill in LCS[i][j] with length of LCS of X[0..i-1], Y[0..j-1], and Z[0..k-1]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    LCS[i][j] = LCS[i - 1][j - 1] + 1\n                else:\n                    LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1], LCS[i - 1][k - 1])\n\n    # Print LCS of X, Y, and Z using LCS[m][n]\n    lcs = [X[i - 1] for i in range(1, m + 1) if LCS[i][n] == LCS[i - 1][n - 1]]\n    lcs.reverse()\n    lcs.append(Z[p - 1])\n    lcs.reverse()\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # Create a 3D table to store the lengths of longest common subsequences \n    # for all prefixes of X, Y and Z\n    LCS = [[[0] * (p+1) for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the table in bottom up manner.\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1])\n\n    # Print the LCS of all prefixes\n    for i in range(n, -1, -1):\n        for j in range(m, -1, -1):\n            for k in range(p, -1, -1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    print(X[i-1], end=\" \")\n                    break\n            if k < p:\n                break\n        if j < m:\n            break\n    print()"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X) \n    m = len(Y) \n    p = [[0] * (m + 1) for _ in range(n + 1)] \n    max_len = 0 \n    max_x = \"\" \n    max_y = \"\" \n    for i in range(n + 1): \n        for j in range(m + 1): \n            if i == 0 or j == 0: \n                p[i][j] = 0 \n            elif X[i - 1] == Y[j - 1]: \n                p[i][j] = p[i - 1][j - 1] + 1 \n                if p[i][j] > max_len: \n                    max_len = p[i][j] \n                    max_x = X[i - 1] * max_len \n                    max_y = Y[j - 1] * max_len \n    return max_x, max_y "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    # creating a table to store lengths of longest common suffix\n    L = [[0 for j in range(p + 1)] for i in range(m + 1)]\n\n    # filling values in L[][] in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # using L[][] to print the lcs\n    lcs = \"\"\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        elif L[i - 1][j][k] == L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Check if all the strings are of equal length \n    if len(X)!= len(Y) or len(X)!= len(Z): \n        return \"Error: All the strings must be of equal length.\"\n    \n    # Create a table to store the length of LCS of all prefixes \n    t = [[0 for j in range(len(Z)+1)] for i in range(len(X)+1)] \n\n    # Fill the table \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Z)+1): \n            if X[i-1] == Z[j-1]: \n                t[i][j] = t[i-1][j-1] + 1\n            else: \n                t[i][j] = max(t[i-1][j], t[i][j-1]) \n\n    # Reconstruct the LCS by tracing back through the table \n    LCS = [] \n    i, j = len(X), len(Z) \n    while i!= 0 and j!= 0: \n        if X[i-1] == Z[j-1]: \n            LCS.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif t[i-1][j] > t[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # Reverse the LCS \n    LCS.reverse() \n\n    return LCS "
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Find all the words in the string\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Add spaces between the words starting with capital letters\n    result = []\n    for word in words:\n        if word[0].isupper():\n            result.append(word +'')\n        else:\n            result.append(word)\n    \n    # Join the words with spaces and return\n    return ''.join(result).strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    matches = re.findall(pattern, str1)\n    result =''.join(matches)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = re.compile(r'\\b\\w*[A-Z]\\w*\\b')\n    return pattern.sub(r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = r'\\b\\w+(?=[A-Z])'\n    words = re.findall(pattern, str1)\n    capitalized_words = [word.capitalize() for word in words]\n    return''.join(capitalized_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Loop through the words and replace capital letters with spaces\n    for i in range(len(words)):\n        # If the first letter of the word is capital, add a space before it\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    \n    # Join the words with spaces and return the final result\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # define a regular expression pattern to match the capitalized words in the string\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    # use re.findall() method to extract all the words from the string that match the given pattern\n    words = re.findall(pattern, str1)\n    # loop through the words and insert spaces between them\n    output =''.join(words)\n    return output"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all special characters from the string\n    str1 = re.sub('[^a-zA-Z\\s]', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Define a regular expression pattern to check if a word starts with capital letters\n    pattern = r'\\b[A-Z]'\n    # Loop through each word and add a space before it if it starts with capital letters\n    for i in range(len(words)):\n        if re.match(pattern, words[i]):\n            words[i] ='' + words[i]\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return pattern.sub(r'\\1 ', string)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Split the string into a list of words\n    words = re.findall(r'\\b\\w+\\b', string)\n\n    # Convert the list to a string, capitalizing the first letter of each word and joining the words with spaces\n    result =''.join(word.capitalize() for word in words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define regular expression pattern to match words with capital letters\n    pattern = re.compile(r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\b[A-Z][a-z]+\\b')\n\n    # Find all matches in the string\n    matches = pattern.findall(str1)\n\n    # Iterate over matches and replace each with a space\n    for i in range(len(matches)):\n        # Replace match with a space and insert a space before the first word of the next match\n        str1 = re.sub(matches[i],'' + matches[i], str1, flags=re.IGNORECASE)\n\n    # Remove extra space at the beginning of the string\n    str1 = re.sub('^ +', '', str1)\n\n    return str1"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # convert all the strings to integers\n    nums_int = [int(num) for num in nums_str]\n    # sort the integers in ascending order\n    nums_int.sort()\n    # convert the sorted integers back to strings and return the result\n    return [str(num) for num in nums_int]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: [int(s) if s.isdigit() else s for s in x.split('.')])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all strings of numbers in the list to numeric values\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Convert the sorted list back to strings\n    sorted_nums = [str(num) for num in nums]\n    \n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    # convert all strings to float values\n    nums = [float(num) for num in nums_str]\n    # sort the list of float values using the built-in sort function\n    nums.sort()\n    # convert the sorted list back to strings\n    sorted_nums = [str(num) for num in nums]\n    # return the sorted list of strings\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(int(num_str))\n        except ValueError:\n            continue\n    return sorted(nums)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: (int(x) if x.isdigit() else float('inf'), x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to float and sort them\n    nums = list(map(float, nums_str))\n    nums.sort()\n    # Convert back to strings and return\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings to a list of numbers\n    nums = [int(num) for num in nums_str]\n    # Sort the list of numbers\n    nums.sort()\n    # Convert the sorted list of numbers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings of numbers as input and returns the sorted list of strings in ascending order.\n    \"\"\"\n    nums_str.sort(key=lambda x: [int(i) if i.isdigit() else float(i) for i in x.split(\".\")])\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Adding the tuple to the list\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Add the given tuple to the given list\n    test_list += test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for num in test_tup:\n        test_list.append(num)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Add test_tup to test_list\n    test_list.append(test_tup)\n    # Return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Loop through each element in the test list\n    for i in range(len(test_list)):\n        # If the current element is a tuple, add it to the test list\n        if isinstance(test_list[i], tuple):\n            test_list[i] += test_tup\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # If the index is greater than the length of the array, return True\n    if i > len(arr):\n        return True\n\n    # If the value at the index is greater than the value at the left child index, return False\n    if arr[i] > arr[2*i]:\n        return False\n\n    # Recursively call the function for the left and right child indexes\n    return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n    if arr[i] <= arr[(i - 1) // 2]:\n        return False\n    return check_min_heap_helper(arr, i - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[2*i+1]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef is_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n    \n    if arr[i] < arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n\n    if arr[i] < arr[parent(i)]:\n        return False\n\n    return check_min_heap_helper(arr, parent(i))\n\n\ndef parent(i):\n    '''\n    Given an index, return the index of its parent.\n    '''\n    return (i - 1) // 2\n\n\ndef is_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n    if i == 0:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Initialize min value\n    min_val = arr[0]\n    \n    # Traverse through the array from index 1 to i-1\n    for j in range(1, i):\n        # Check if the current element is smaller than the minimum element\n        if arr[j] < min_val:\n            min_val = arr[j]\n            \n    # If the minimum element is at index i, it means the array is a min heap\n    if arr[i] == min_val:\n        return True\n    else:\n        return False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n        \ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    \n    for i in range(n//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n    \n    return True\n    \n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 0\n    l = 1\n    while l < n:\n        j += 1\n        k = j\n        while k > 1:\n            j += 1\n            k //= j\n        if l > n:\n            break\n        l += 1\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*jacobsthal_num(n-1)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        prev_num = 0\n        num = 1\n        for i in range(2, n+1):\n            temp = num\n            num = prev_num + num\n            prev_num = temp\n        return num\n    else:\n        prev_num = 1\n        num = 0\n        for i in range(2, n+1):\n            temp = num\n            num = prev_num + num\n            prev_num = temp\n        return num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1]\n    for i in range(2, n + 1):\n        jacobsthal_numbers.append(jacobsthal_numbers[-1] + jacobsthal_numbers[-2])\n    return jacobsthal_numbers[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # Initialize the first two terms\n    num1 = 0\n    num2 = 1\n    # Initialize the first term as the sum of the first two terms\n    jacobsthal_num = num1 + num2\n    # Loop through the remaining terms\n    for i in range(2, n+1):\n        # Find the next term using the formula\n        next_term = 2 * num1 - num2\n        # Update the values of num1 and num2\n        num1 = num2\n        num2 = next_term\n        # Add the next term to the current jacobsthal number\n        jacobsthal_num += next_term\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number. \n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        j = n + 1\n        while True:\n            k = j * (n + 1) // 2\n            if k > n:\n                break\n            j = k\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 1, 1\n    for i in range(n):\n        a, b = b, a + b\n    return b"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize a dictionary to store the count of each element in the list\n    count_dict = {}\n    # Initialize a list to store the minimum k records\n    min_list = []\n\n    # Iterate through the list of tuples\n    for i in test_list:\n        # Get the key from the tuple and increment its value\n        key = i[0]\n        if key in count_dict:\n            count_dict[key] += 1\n        else:\n            count_dict[key] = 1\n\n        # If the count is greater than or equal to K, add the tuple to the minimum k list\n        if count_dict[key] >= K:\n            min_list.append(i)\n\n        # If the count is less than K, remove the first element of the tuple from the list\n        else:\n            count_dict[key] -= 1\n            min_list.remove(i)\n\n    # If the length of the minimum k list is less than K, add the remaining elements from the dictionary\n    if len(min_list) < K:\n        for key in count_dict:\n            if count_dict[key] >= K:\n                min_list.append((key, count_dict[key]))\n\n    # Sort the minimum k list in ascending order by the first element of the tuple\n    min_list.sort()\n\n    # Return the minimum k list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a dictionary to store the number of records for each key\n    record_count = {}\n\n    # iterate through the tuple list and update the count of each key in the dictionary\n    for key, value in test_list:\n        if key in record_count:\n            record_count[key] += 1\n        else:\n            record_count[key] = 1\n\n    # sort the dictionary by values in descending order\n    sorted_record_count = sorted(record_count.items(), key=lambda x: x[1], reverse=True)\n\n    # return the minimum k records as a list of tuples\n    return sorted_record_count[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Sort the list based on second element of tuple\n    test_list.sort(key=lambda x: x[1])\n    # Initialize minimum k to first k records in the list\n    min_k = test_list[:K]\n    # Initialize counter for kth smallest record\n    k_count = K\n    # Iterate through the list\n    for i in range(K, len(test_list)):\n        # If the current element is smaller than the kth smallest record, update the kth smallest record and counter\n        if test_list[i][1] < min_k[0][1]:\n            min_k = [test_list[i]]\n            k_count = 1\n        # If the current element is equal to the kth smallest record, add it to the list and increment the counter\n        elif test_list[i][1] == min_k[0][1]:\n            min_k.append(test_list[i])\n            k_count += 1\n        # If the current element is larger than the kth smallest record and k count is less than K, add the current element to the list and increment the counter\n        elif test_list[i][1] > min_k[0][1] and k_count < K:\n            min_k.append(test_list[i])\n            k_count += 1\n        # If the current element is larger than the kth smallest record and k count is greater than or equal to K, remove the smallest kth smallest record from the list and decrement the counter\n        elif test_list[i][1] > min_k[0][1] and k_count >= K:\n            min_k.pop(0)\n            k_count -= 1\n    # Return the minimum k records\n    return min_k"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples in ascending order of the key\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n    \n    # Initialize an empty dictionary to store the count of each key\n    count_dict = {}\n    \n    # Iterate through the sorted list of tuples\n    for item in sorted_list:\n        # For each tuple, increment the count associated with the key in the dictionary\n        if item[0] in count_dict:\n            count_dict[item[0]] += 1\n        else:\n            count_dict[item[0]] = 1\n    \n    # Find the key with the minimum count\n    min_key = min(count_dict, key=count_dict.get)\n    \n    # Return the key and its count\n    return min_key, count_dict[min_key]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    # Create an empty list to store the minimum k records\n    min_list = []\n\n    # Iterate over the test list\n    for i in range(len(test_list)):\n        # If the length of the min_list is less than K, append the current element to the list\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        # Otherwise, compare the current element with the minimum element in the min_list\n        else:\n            # If the current element is smaller than the minimum element, replace the minimum element with the current element\n            if test_list[i] < min_list[0]:\n                min_list = [test_list[i]]\n            # If the current element is equal to the minimum element, append it to the list\n            elif test_list[i] == min_list[0]:\n                min_list.append(test_list[i])\n\n    # Return the minimum K records in a list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize a variable to store the minimum value of k\n    minimum = float('inf')\n\n    # Initialize a variable to store the count of minimum k records\n    count = 0\n\n    # Traverse the list and check if the count of minimum k records is less than K\n    for i in range(len(test_list)):\n        if count < K:\n            if test_list[i][0] == minimum:\n                count += 1\n            else:\n                minimum = test_list[i][0]\n                count = 1\n\n    # Return the minimum value of k\n    return minimum"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list of tuples by first element in ascending order\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # initialize min_list as an empty list\n    min_list = []\n\n    # loop through the sorted list\n    for i in range(len(sorted_list)):\n        # if the length of min_list is less than K, append the current element to min_list\n        if len(min_list) < K:\n            min_list.append(sorted_list[i])\n\n        # if the length of min_list is equal to K, find the minimum element in min_list and remove it from min_list\n        elif len(min_list) == K:\n            min_list = sorted_list[:K]\n            min_list.append(sorted_list[i])\n\n    # return min_list as a list of tuples\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    This function will take in a list of tuples and return the minimum K elements from the list.\n    '''\n    \n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for item in test_list:\n        if item[0] in count_dict:\n            count_dict[item[0]] += 1\n        else:\n            count_dict[item[0]] = 1\n    \n    # Find the minimum K elements and store them in a new list\n    min_list = []\n    for item in count_dict:\n        if count_dict[item] >= K:\n            min_list.append(item)\n    \n    # Sort the new list in ascending order\n    min_list.sort()\n    \n    # Return the minimum K elements from the sorted list\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list in ascending order based on the first element of each tuple\n    test_list = sorted(test_list)\n\n    # Initialize minimum count and minimum value\n    min_count = K\n    min_value = test_list[0][0]\n\n    # Loop through the sorted list and update minimum count and minimum value\n    for i in range(K, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_count = i - K + 1\n            min_value = test_list[i][1]\n\n    return min_count, min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples based on the second element in each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize variables to store minimum and maximum values\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    # Iterate through the list of tuples and update minimum and maximum values\n    for i in range(K):\n        if i < len(test_list):\n            min_val = min(min_val, test_list[i][1])\n        if i < len(test_list) - 1:\n            max_val = max(max_val, test_list[i+1][1])\n\n    # Return minimum value greater than or equal to the maximum value\n    return max_val if min_val < max_val else min_val"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common_elements = []\n    \n    # iterate through each index in the lists\n    for i in range(len(l1)):\n        # check if the element at the current index is present in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            # if it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to hold the common elements\n    common_elements = []\n\n    # Loop over each element in the first list\n    for i in range(len(l1)):\n        # If the element is in the second list\n        if l1[i] in l2:\n            # Check if the element is in the third list\n            if l1[i] in l3:\n                # If it is, add it to the common elements list\n                common_elements.append(l1[i])\n\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    # Create a list to store common elements\n    common_elements = []\n\n    # Iterate through each index in the lists\n    for i in range(len(l1)):\n        # If the current element in l1 is in l2 and l3 at the same index, add it to the common_elements list\n        if l1[i] in l2[i:len(l2)] and l1[i] in l3[i:len(l3)]:\n            common_elements.append(l1[i])\n\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Initialize an empty dictionary to store the index of each element in each list\n    index_dict = {}\n    \n    # Loop through each element in l1\n    for i in range(len(l1)):\n        # If the element is not already in the index dictionary, add it\n        if l1[i] not in index_dict:\n            index_dict[l1[i]] = [i]\n        # Otherwise, append the index to the list of indices for that element\n        else:\n            index_dict[l1[i]].append(i)\n    \n    # Loop through each element in l2\n    for i in range(len(l2)):\n        # If the element is not already in the index dictionary, add it\n        if l2[i] not in index_dict:\n            index_dict[l2[i]] = [i]\n        # Otherwise, append the index to the list of indices for that element\n        else:\n            index_dict[l2[i]].append(i)\n    \n    # Loop through each element in l3\n    for i in range(len(l3)):\n        # If the element is not already in the index dictionary, add it\n        if l3[i] not in index_dict:\n            index_dict[l3[i]] = [i]\n        # Otherwise, append the index to the list of indices for that element\n        else:\n            index_dict[l3[i]].append(i)\n    \n    # Loop through each element in index_dict\n    common_elements = []\n    for key, value in index_dict.items():\n        # If the length of the list of indices for the element is the same as the number of lists we have,\n        # then the element is common for all three lists\n        if len(set(value)) == len(l1) + len(l2) + len(l3):\n            common_elements.append(key)\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a dictionary to store the number of occurrences of each element in l1 and l2\n    count1 = {}\n    count2 = {}\n    for i in range(len(l1)):\n        count1[l1[i]] = count1.get(l1[i], 0) + 1\n        count2[l2[i]] = count2.get(l2[i], 0) + 1\n    \n    # Initialize an empty list to store the common elements\n    common = []\n    \n    # Iterate over the elements in l1\n    for i in range(len(l1)):\n        # If the element appears in l2 and l3 at the same index, add it to the common list\n        if l1[i] in count1 and l1[i] in count2 and count1[l1[i]] == count2[l1[i]]:\n            common.append(l1[i])\n    \n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_elements:\n            common_elements.append(l2[i])\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_elements:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Check if the list is empty\n    if len(numbers) < 2:\n        print(\"The list must have at least 2 elements.\")\n        return\n    \n    # Find the smallest number\n    smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    \n    # Find the second smallest number\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    # Print the result\n    print(f\"The second smallest number is: {second_smallest}\")"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        smallest = second_smallest(numbers[1:])\n        return min(numbers[0], smallest)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = max(numbers)\n        second_smallest = min(numbers, key=lambda x: abs(x - smallest))\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n\n    :param numbers: A list of integers.\n    :return: An integer representing the second smallest number in the list.\n    \"\"\"\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Check if there are at least two numbers in the list\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least two numbers.\")\n\n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Check if the list is empty\n    if len(numbers) == 0:\n        return \"The list is empty\"\n    \n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        smallest = second_smallest(numbers[1:])\n        return min(smallest, min(numbers[0], numbers[-1]))"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.b*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\b*b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(?!b)')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\"\n\ntext = \"apple bananas\"\nresult = text_match_zero_one(text)\nprint(result)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*(?=\\b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b.*'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # create a set to store unique strings in the list\n    unique_strings = set(test_list)\n\n    # initialize a dictionary to store the count of reverse pairs\n    reverse_pair_count = {}\n\n    # iterate over the unique strings\n    for string in unique_strings:\n        # convert the string to a list\n        string_list = list(string)\n        # reverse the list\n        reverse_list = string_list[::-1]\n        # convert the reversed list to a string\n        reverse_string = ''.join(reverse_list)\n\n        # check if the reversed string is in the set\n        if reverse_string in unique_strings:\n            # increment the count of the reverse pair\n            if reverse_list not in reverse_pair_count:\n                reverse_pair_count[reverse_list] = 1\n            else:\n                reverse_pair_count[reverse_list] += 1\n\n    # return the count of reverse pairs\n    return reverse_pair_count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # If one of the strings is a palindrome and the other is not, count as a reverse pair.\n            if test_list[i] == test_list[i][::-1] and test_list[j]!= test_list[j][::-1]:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for string in test_list:\n        if string == string[::-1]:\n            count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    # Create a dictionary to store the count of reverse pairs\n    count_dict = {}\n\n    # Loop through the list of strings\n    for string in test_list:\n        # Convert the string to a list of characters\n        char_list = list(string)\n        # Reverse the list of characters\n        char_list.reverse()\n        # Convert the reversed list of characters back to a string\n        reverse_string = ''.join(char_list)\n        # Check if the reversed string is present in the dictionary\n        if reverse_string in count_dict:\n            # If it is, increment the count by 1\n            count_dict[reverse_string] += 1\n        # If the reversed string is not present in the dictionary, add it as a key with a value of 1\n        else:\n            count_dict[reverse_string] = 1\n\n    # Return the count of reverse pairs\n    return count_dict"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function counts the pairs of reverse strings in a list of strings.\n    \"\"\"\n    counts = []\n    for string in test_list:\n        for i in range(len(string)):\n            for j in range(i+1, len(string)+1):\n                if string[i:j] == string[j:i][::-1]:\n                    counts.append((string[i], string[j]))\n    return len(counts)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in list1:\n        for j in i:\n            if tuple(j) not in count_dict:\n                count_dict[tuple(j)] = 0\n            count_dict[tuple(j)] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = set()\n    for item in list1:\n        if isinstance(item, list):\n            sublists.add(tuple(item))\n    result = {}\n    for sublist in sublists:\n        result[sublist] = list1.count(sublist)\n    return result"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublist_count = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist not in unique_sublist_count:\n            unique_sublist_count[sublist] = 1\n        else:\n            unique_sublist_count[sublist] += 1\n    return unique_sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in list1:\n        if tuple(i) not in count:\n            count[tuple(i)] = 1\n        else:\n            count[tuple(i)] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) == list:\n            list2.extend(i)\n        else:\n            list2.append(i)\n    list2 = list(set(list2))\n    count = {}\n    for i in list2:\n        count[i] = list1.count(i)\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each tuple\n    count_dict = {}\n    # Loop through each element in the list\n    for elem in list1:\n        # Convert the element to a tuple and check if it exists in the dictionary\n        if tuple(elem) in count_dict:\n            # If it does, increment its count by 1\n            count_dict[tuple(elem)] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            count_dict[tuple(elem)] = 1\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert the list to a set to remove duplicates and convert back to list\n    unique_lists = list(set(list1))\n    # Create a dictionary to store the count of each list\n    list_count = {}\n    # Iterate through the unique lists\n    for i in range(len(unique_lists)):\n        # Create a tuple of the current unique list\n        current_tuple = tuple(unique_lists[i])\n        # Check if the tuple is already present in the dictionary\n        if current_tuple in list_count:\n            # If it is, increment its count by 1\n            list_count[current_tuple] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            list_count[current_tuple] = 1\n    # Return the dictionary containing the count of each list\n    return list_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary where every sublist is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for i in range(len(lst)):\n        if i > 0 and lst[i] == lst[i-1]:\n            continue\n        for j in range(i+1, len(lst)):\n            if j > i+1 and lst[j] == lst[j-1]:\n                continue\n            sublist = lst[i:j+1]\n            sublist = tuple(sublist)\n            if sublist not in unique_dict:\n                unique_dict[sublist] = 1\n            else:\n                unique_dict[sublist] += 1\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each sublist\n    count_dict = {}\n\n    # Iterate over each element in the list\n    for element in list1:\n        # Convert the list to a tuple and add it to the dictionary\n        count_dict[tuple(element)] = count_dict.get(tuple(element), 0) + 1\n\n    # Return the dictionary of unique sublists and their counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sorted(sublist))\n        if tuple_sublist in sublist_counts:\n            sublist_counts[tuple_sublist] += 1\n        else:\n            sublist_counts[tuple_sublist] = 1\n    return sublist_counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    if \".\" in num:\n        parts = num.split(\".\")\n        if len(parts) == 2:\n            int_part = parts[0]\n            dec_part = parts[1]\n            if len(int_part) <= 9 and len(dec_part) <= 2:\n                return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        decimal_number = float(num)\n        if isinstance(decimal_number, float) and decimal_number.is_integer():\n            fractional_part = str(decimal_number).split('.')[1]\n            if len(fractional_part) <= 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the number is a string\n    if not isinstance(num, str):\n        return False\n    \n    # check if the number contains only digits\n    if not num.isdigit():\n        return False\n    \n    # remove leading and trailing zeros\n    num = num.strip('0')\n    \n    # split the number into integer and fractional parts\n    int_part, frac_part = num.split('.')\n    \n    # check if the number has a maximum of 2 digits in the fractional part\n    if len(frac_part) > 2:\n        return False\n    \n    # check if the integer part has no more than 1 digit\n    if int_part.isdigit() and len(int_part) > 1:\n        return False\n    \n    # check if the integer part and fractional part are integers\n    int_part = int(int_part)\n    frac_part = int(frac_part)\n    if not int_part.is_integer() or not frac_part.is_integer():\n        return False\n    \n    # check if the integer part and fractional part have the same number of digits\n    if int(int_part + frac_part)!= num:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Check if the input contains only digits and dots\n    if not all(char.isdigit() or char == '.' for char in num):\n        return False\n\n    # Check if the input starts and ends with a dot\n    if num[0]!= '.' or num[-1]!= '.':\n        return False\n\n    # Check if the input has only one dot and it is followed by a digit\n    if '.' in num and num.count('.') > 1 and not num[num.index('.')+1].isdigit():\n        return False\n\n    # Check if the number is a valid decimal with a precision of 2\n    decimal = 0\n    count = 0\n    for char in num:\n        if char == '.':\n            count += 1\n            continue\n        if count == 1:\n            if not char.isdigit():\n                return False\n            decimal = decimal * 10 + int(char)\n        else:\n            if not char.isdigit():\n                return False\n            decimal = decimal * 10 + int(char)\n    if count == 1:\n        if decimal == 0:\n            return False\n        if decimal / 10!= int(decimal / 10):\n            return False\n    else:\n        if decimal == 0 or decimal / 10!= int(decimal / 10):\n            return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        num = num.split('.')\n        if len(num) > 2:\n            return False\n        elif len(num[0]) > 1 and num[0][-1] == '0':\n            return False\n        elif len(num[1]) > 2:\n            return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        decimal_part = num.split('.')[-1]\n        if len(decimal_part) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    # Check if the input number is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Split the number into integer and decimal parts\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    \n    # Check if both parts are integers\n    try:\n        int(parts[0])\n        int(parts[1])\n    except ValueError:\n        return False\n    \n    # Check the length of the decimal part\n    if len(parts[1]) > 2:\n        return False\n    \n    # Check if the decimal part only contains digits\n    for digit in parts[1]:\n        if not digit.isdigit():\n            return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    \n    # Check if the number has at most 2 decimal places\n    num = num.split('.')\n    if len(num[1]) > 2:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    dot_count = 0\n    for char in num:\n        if char == '.':\n            dot_count += 1\n            if dot_count > 1:\n                return False\n        elif not char.isdigit():\n            return False\n    return dot_count == 1"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.')!= 1:\n        return False\n    decimal_part, integer_part = num.split('.')\n    if len(integer_part) > 10 or len(decimal_part) > 2:\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # initialize a set to store unique elements\n    unique_set = set()\n    \n    # iterate through each element in the list\n    for i in arr:\n        # add the element to the set if it's not already in it\n        if i not in unique_set:\n            unique_set.add(i)\n    \n    # check if the size of the set is 1 or not\n    if len(unique_set) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains multiple distinct elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count += 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = False\n    for i in arr:\n        if arr.count(i) == 1:\n            unique = True\n            break\n        else:\n            unique = False\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct = []\n    for num in arr:\n        if num not in distinct:\n            distinct.append(num)\n    if len(distinct) == 1:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 in [4, 6, 9, 11]:\n            return False\n        else:\n            return True\n    elif monthnum3 % 2 == 1:\n        if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        else:\n            return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2:\n            return True\n        elif monthnum3 in [4, 6, 9, 11]:\n            return True\n        elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n    else:\n        if monthnum3 == 2:\n            return False\n        elif monthnum3 in [4, 6, 9, 11]:\n            return False\n        elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            return True\n        elif monthnum3 == 2 and (year % 4!= 0 or (year % 100 == 0 and year % 400!= 0)):\n            return False\n        else:\n            return days[monthnum3-1] == 30\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    month_list = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                if year % 4 == 0 and year % 100 == 0 and year % 400!= 0:\n                    return True\n                elif year % 4 == 0 and year % 100!= 0 and year % 400 == 0:\n                    return False\n            else:\n                return False\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            return False\n        else:\n            return True\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if monthnum3 in days_in_month:\n        if days_in_month[monthnum3] == 30:\n            print(f\"{monthnum3} contains 30 days.\")\n        else:\n            print(f\"{monthnum3} does not contain 30 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in month_to_day_counts:\n        if month_to_day_counts[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Dictionary of month names and their number of days\n    month_names = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    # Check if the given month number exists in the dictionary\n    if monthnum3 in month_names.keys():\n        # Check if the number of days in the given month is 30 or not\n        if month_names[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13) and monthnum3 % 2 == 0:\n        if monthnum3 == 2 and (year.is_leap(year) or year % 400 == 0):\n            days_in_month[1] = 29\n        if monthnum3 <= 7:\n            return days_in_month[monthnum3-1]\n        else:\n            return 31\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # check whether month number is in range of 1 to 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n\n    # check whether month number contains 30 days or not\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() # sort the array\n    min_diff = float('inf') # initialize minimum difference to infinity\n    \n    for i in range(n):\n        diff = arr[i+1] - arr[i] # calculate difference between current element and next element\n        if diff < min_diff: # update minimum difference if current difference is less than minimum\n            min_diff = diff\n    \n    return min_diff # return the minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    # Sort the given array\n    arr.sort()\n    \n    # Initialize minimum difference and the indices of the minimum elements\n    diff = arr[1] - arr[0]\n    min_ind1 = 0\n    min_ind2 = 1\n    \n    # Loop through the sorted array and compare the differences\n    for i in range(2, n):\n        if arr[i] - arr[i-1] < diff:\n            diff = arr[i] - arr[i-1]\n            min_ind1 = i-1\n            min_ind2 = i\n        elif arr[i] - arr[i-1] == diff:\n            min_ind2 = i\n            \n    # Return the minimum difference\n    return diff, min_ind1, min_ind2"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array of integers and the size of the array as arguments, and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = float('inf')\n\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    i, j = 0, n - 1\n\n    # Traverse the array using two pointers\n    while i < j:\n        # Calculate the difference between the current elements\n        diff = arr[j] - arr[i]\n\n        # If the difference is smaller than the current minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n        # If the difference is positive, move the left pointer to the right\n        if diff > 0:\n            i += 1\n        # If the difference is negative, move the right pointer to the left\n        else:\n            j -= 1\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the minimum difference to be the difference between the first and last element\n    min_diff = arr[n-1] - arr[0]\n    # Traverse the array and find the minimum difference between pairs of elements\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize variables\n    min_diff = arr[-1] - arr[0]\n    curr_diff = abs(arr[-1] - arr[0])\n\n    # Iterate over the array and update the minimum difference and current difference\n    for i in range(1, n):\n        curr_diff = abs(arr[i] - arr[i-1])\n        min_diff = min(min_diff, curr_diff)\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n):\n    # Initialize min_diff with the value of the first element in the array\n    min_diff = abs(arr[0] - arr[1])\n\n    # Loop through the rest of the array\n    for i in range(2, n):\n        # Calculate the difference between the current element and the previous element in the array\n        diff = abs(arr[i] - arr[i-1])\n\n        # If the difference is less than the current minimum difference, update min_diff\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(string):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n):\n    if n == 1:\n        return 1\n    else:\n        x = math.log(n, 10)\n        y = x + 0.5\n        return int(y)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n == 1:\n        return 1\n\n    # Initialize variables\n    polite = 1\n    last_polite = 1\n\n    # Loop to find nth polite number\n    for i in range(2, n + 1):\n        # Calculate current polite number\n        current_polite = math.ceil(math.log(i, 2))\n        # Check if it's greater than the last polite number\n        if current_polite > last_polite:\n            polite = current_polite\n            last_polite = current_polite\n        # Increment last polite number\n        last_polite += 1\n\n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if is_prime(n):\n            return n\n        return nth_polite_number(n - 1) + 1\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    '''\n\n    # Define a dictionary to store the numbers which are not prime\n    not_primes = {1, 4, 6, 8, 10, 12, 15, 18, 20, 22, 24, 26, 28, 30, 32, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99}\n\n    # Initialize variables to count the number of prime numbers less than or equal to n\n    prime_count = 0\n    prime_index = 0\n\n    # Loop through the prime numbers less than or equal to n\n    while prime_index < 100 and prime_count < n:\n\n        # Check if the current prime number is prime\n        is_prime = True\n        for i in range(2, int(math.sqrt(prime_index)) + 1):\n            if prime_index % i == 0:\n                is_prime = False\n                break\n\n        # If the current prime number is prime, increment the prime count\n        if is_prime:\n            prime_count += 1\n\n        # Increment the index for the next prime number\n        prime_index += 1\n\n    # If the nth polite number is not in the not_primes dictionary, return -1\n    if n not in not_primes:\n        return -1\n\n    # Return the nth polite number if it is in the not_primes dictionary\n    return n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num): \n        '''\n        Helper function to check if a number is prime or not.\n        '''\n        if num < 2: \n            return False\n        for i in range(2, int(math.sqrt(num)) + 1): \n            if num % i == 0: \n                return False\n        return True\n    \n    def nth_polite_number(n, count=0): \n        '''\n        Recursive function to generate nth polite number.\n        '''\n        if n == count: \n            return 1\n        elif is_prime(n): \n            return nth_polite_number(n, count + 1)\n        else: \n            return nth_polite_number(n + 1, count)\n    \n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n and returns the n-th polite number.\n    A polite number is a number that can be represented as the sum of the first n natural numbers.\n    \"\"\"\n    polite_numbers = [0]\n    current_number = 1\n    next_number = 1\n\n    for i in range(1, n+1):\n        current_number = current_number + next_number\n        next_number = i + 1\n        if current_number > 0:\n            polite_numbers.append(current_number)\n\n    return polite_numbers[n-1]\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_polite(n/2)\n    else:\n        return not is_polite((n-1)//2)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables\n    num = 1\n    count = 1\n    result = 0\n\n    while count < n:\n        # Increment num\n        num += 1\n\n        # Check if num is a polite number\n        if num % 2 == 1 and num % 3!= 0:\n            result += num\n            count += 1\n\n        # Check if num is a uncountable polite number\n        elif num % 2 == 0 and num % 5!= 0:\n            result += num\n            count += 1\n\n    return result"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    polite_numbers = {1: 2, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}\n    for i in range(10, n+1):\n        polite_numbers[i] = 2 * i + 1\n\n    return polite_numbers[n]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    This function checks if a given number is a polite number or not. \n    A polite number is a positive integer that is divisible by 5. \n    For example, 15, 25, 35, 45, 55, 65, 75, 85, and so on are polite numbers. \n    '''\n    # Finding the nth polite number \n    if n % 2 == 0:\n        # If n is even, then it is not a polite number \n        return False\n    else:\n        # n is odd, then check if it is divisible by 5 \n        i = 2\n        while i <= n:\n            if n % i == 0:\n                # If n is divisible by i, then it is not a polite number \n                return False\n            i += 1\n        # If n is not divisible by 5, then it is a polite number \n        return True"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    if len(l1) < 2:\n        return []\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list as an argument and returns a list of all pairs of consecutive items in the list.\n    '''\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i],lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Given a list, return a list of all pairs of consecutive items in the list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append((l1[i],l1[i+1]))\n    return l2"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and a sum and returns the count of pairs whose sum is equal to'sum'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Count the number of pairs whose sum is equal to'sum' in the given list of numbers 'arr'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    n = len(arr)\n\n    # Sort the given list of numbers in non-decreasing order\n    arr.sort()\n\n    # Traverse the sorted list to find the pairs whose sum is equal to the given sum\n    for i in range(n - 1):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue  # ignore pairs with same elements\n        for j in range(i + 1, n):\n            if arr[j] == sum - arr[i]:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    This function counts the number of pairs whose sum is equal to'sum'.\n    The function gets as input a list of numbers and the sum,\n    and returns the number of pairs whose sum is equal to'sum'.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = list(set(li1)-set(li2))\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #Creating an empty list to store the difference\n    diff_list = []\n    #Iterating over each element in the list1 and checking if it exists in list2\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    #Iterating over each element in the list2 and checking if it exists in list1\n    for j in li2:\n        if j not in li1:\n            diff_list.append(j)\n    #Returning the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as inputs and returns the difference between them.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns their difference.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # create an empty list to store the difference\n    diff = []\n    # loop through both lists\n    for i in li1:\n        # if the item is not in the second list, add it to the difference list\n        if i not in li2:\n            diff.append(i)\n    # return the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize a variable to store the sum of fourth power of odd numbers\n    total = 0\n    \n    # Iterate through the first n odd natural numbers\n    for i in range(n):\n        # Find the fourth power of the odd number\n        fourth_power = i ** 4\n        \n        # Add the fourth power to the total\n        total += fourth_power\n    \n    # Return the total sum of fourth power of odd numbers\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    i = 1\n    while i <= n:\n        total += i**4\n        i += 2\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_odd_fourth_powers = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_odd_fourth_powers += i**4\n    return sum_odd_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    sum = 0\n\n    for i in range(1, n+1, 2):\n        sum += i**4\n\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n): \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n: \n        sum += i**4\n        i += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0:\n        return \"Invalid input.\"\n    else:\n        sum = 0\n        for i in range(1, 2*n+1, 2):\n            sum += i**4\n        return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Create a stack to store the opening parenthesis\n    stack = deque()\n\n    # Iterate through each character of the expression\n    for char in exp:\n        # If the character is an opening parenthesis\n        if char == '(':\n            # Add it to the stack\n            stack.append(char)\n        # If the character is a closing parenthesis\n        elif char == ')':\n            # If the stack is empty, the expression is not balanced\n            if not stack:\n                return False\n            # Pop the top parenthesis from the stack\n            stack.pop()\n        # If the character is an opening or closing parenthesis, it's not balanced\n        else:\n            return False\n\n    # If the stack is not empty, the expression is not balanced\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. \n    \"\"\"\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char == '(':\n                continue\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in ['(', '{', '['] and top_char!= char:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # create a stack to store opening and closing parenthesis\n    stack = deque()\n\n    # traverse through the expression from left to right\n    for char in exp:\n        # if the character is an opening parenthesis\n        if char == '(':\n            # push it onto the stack\n            stack.append(char)\n        # if the character is a closing parenthesis\n        elif char == ')':\n            # if the stack is empty or the top character is not an opening parenthesis\n            if not stack or stack[-1]!= '(':\n                # return False as the expression is not balanced\n                return False\n            # pop the opening parenthesis from the stack\n            stack.pop()\n\n    # if the stack is empty, the expression is balanced\n    if not stack:\n        return True\n    # if the stack is not empty, the expression is not balanced\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c in \"()\":\n            stack.append(c)\n        elif c == \")\" and not stack or (c == \"]\" and not stack[0] == \"[\") or (c == \"}\" and not stack[0] == \"{\"):\n            return False\n        else:\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack or stack.pop() not in close_brackets:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # creating a stack for balanced expression\n    stack = []\n    # traversing through the expression\n    for i in exp:\n        # if current character is an opening bracket, push it into the stack\n        if i == '(':\n            stack.append(i)\n        # if current character is a closing bracket, pop the last opening bracket from the stack\n        elif i == ')':\n            if not stack:\n                return False\n            elif stack.pop()!= '(':\n                return False\n    # if all opening brackets are popped from the stack, then the expression is balanced\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    new_str = \" \".join(new_words)\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    # Split the given string into a list of words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words that are not k length\n    result = []\n    \n    # Loop through the list of words\n    for word in words:\n        # Check if the length of the word is not equal to k\n        if len(word)!= K:\n            # If the word is not k length, add it to the result list\n            result.append(word)\n    \n    # Join the words in the result list into a single string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # loop through the words\n    for i in range(len(words)):\n        # check if the length of the word is less than K\n        if len(words[i]) < K:\n            # if yes, remove it from the list of words\n            words.pop(i)\n            # decrement the index of the loop\n            i -= 1\n    # join the list of words into a string\n    new_str = \" \".join(words)\n    # return the new string\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the filtered words\n    filtered_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the current word is greater than K\n        if len(word) > K:\n            # If it is, add it to the filtered list\n            filtered_words.append(word)\n\n    # Join the filtered words back into a string\n    filtered_str =''.join(filtered_words)\n\n    return filtered_str"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return (matches, [match.start() for match in matches])\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start_index = text.find(match[0])\n            end_index = text.find(match[1])\n            print(f\"Match found at index {start_index} and end at index {end_index}: {match}\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for matchNum, match in enumerate(matches, start=1):\n            return (match.start(), match.end(), match.group())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return (result.group(), result.start(), result.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    try:\n        match = re.search(pattern, text)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None\n    except Exception as e:\n        print(e)\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    try:\n        matches = re.findall(pattern, text)\n        if not matches:\n            return None\n        else:\n            return matches\n    except Exception as e:\n        print(e)\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        result = [(match.start(), match.end()) for match in matches]\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            odd_count += 1\n        if odd_count == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if not all(nums[j] % 2 == 1 for j in range(i, len(nums))):\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # Initialize variables\n    odd_found = True\n    count = 0\n\n    # Loop through the list and count the odd numbers at odd indices\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                count += 1\n                if count % 2 == 1:\n                    odd_found = False\n\n    # Return the result\n    return odd_found"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n\n    # Iterate through each index of the list\n    for i in range(len(nums)):\n        # Check if the current index contains odd numbers\n        if nums[i] % 2 == 1 and i % 2!= 0:\n            return False\n\n    # If all indexes contain odd numbers, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if any(nums[i] % 2 == 0 for nums[i] in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    prev_char = None\n    for char in test_str:\n        if char in vowels and prev_char in vowels:\n            count += 1\n        prev_char = char\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if (test_str[i] in vowels and test_str[i+1] in vowels):\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(1, len(test_str)-1):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 2):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels) and (test_str[i+2] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    # Initialize a counter to keep track of the number of vowels\n    num_vowels = 0\n    \n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # Check if the character is a vowel\n        if test_str[i] in ['a', 'e', 'i', 'o', 'u']:\n            # Check if the character is a neighbor to the right\n            if i < len(test_str) - 1 and test_str[i+1] in ['a', 'e', 'i', 'o', 'u']:\n                num_vowels += 1\n    \n    # Return the number of vowels found\n    return num_vowels"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to keep track of non-repeated elements\n    seen = set()\n\n    # loop through the list and add each element to the set\n    for elem in arr:\n        if elem not in seen:\n            seen.add(elem)\n\n    # calculate the sum of the non-repeated elements\n    result = 0\n    for elem in arr:\n        if elem not in seen:\n            result += elem\n\n    return result"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to store unique elements of the list\n    unique_dict = {}\n    # loop through each element of the list\n    for num in arr:\n        # if the element is not in the dictionary, add it as a key with a value of 1\n        if num not in unique_dict:\n            unique_dict[num] = 1\n        # if the element is already in the dictionary, increment its value by 1\n        else:\n            unique_dict[num] += 1\n    # initialize the sum to 0\n    sum = 0\n    # loop through each key in the dictionary and add its value to the sum\n    for key, value in unique_dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store the unique elements of the list\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of unique elements\n    sum_unique_elements = 0\n    # Iterate over the unique elements of the list\n    for element in unique_elements:\n        # Add the unique element to the sum of unique elements\n        sum_unique_elements += element\n    # Return the sum of unique elements\n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # initialize sum variable to zero\n    sum = 0\n    # loop through unique set\n    for element in unique_set:\n        # add element to sum\n        sum += element\n    # return sum of non-repeated elements\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n\n    # create a set to store unique elements\n    unique_set = set(arr)\n\n    # initialize a variable to store the sum of unique elements\n    unique_sum = 0\n\n    # iterate through the set and add each element to the sum\n    for elem in unique_set:\n        unique_sum += elem\n\n    # return the sum of unique elements\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_elements = set(arr)\n    # convert the set to a list and sort it\n    sorted_unique_elements = sorted(list(unique_elements))\n    # initialize the sum variable to 0\n    sum = 0\n    # iterate through the sorted list and add each element to the sum\n    for element in sorted_unique_elements:\n        sum += element\n    # return the sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # initialize sum to 0\n    sum = 0\n    # loop through unique set to add up elements\n    for num in unique_set:\n        sum += num\n    # return sum of unique set\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_list = list(set(arr))\n    return sum(unique_list)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)  # create a set of unique elements in the list\n    non_repeated_sum = sum(unique_elements)  # calculate the sum of unique elements\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of all unique elements in the list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_set = set(arr)\n    # Initialize a variable to store the sum of the unique elements\n    sum_of_unique = 0\n    # Iterate over the unique set and add each element to the sum\n    for element in unique_set:\n        sum_of_unique += element\n    # Return the sum of the unique elements\n    return sum_of_unique"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list, pack consecutive duplicates of the same element into sublists.\n\n    Args:\n    lst: A list of elements.\n\n    Returns:\n    A list of sublists, where each sublist contains only one occurrence of the same element as the previous sublist.\n    \"\"\"\n\n    # Define a lambda function that extracts the value from each group\n    extract_value = lambda x: x[0]\n\n    # Group the list by the same element and apply the lambda function to the group\n    grouped = groupby(lst, extract_value)\n\n    # Convert the grouped iterator to a list\n    packed = list(grouped)\n\n    # Filter out the empty sublists\n    return [sublist for sublist in packed if sublist]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list by consecutive elements\n    grouped = groupby(enumerate(list1), lambda x: x[0] == x[1] - 1)\n\n    # Initialize an empty list to store the sublists\n    sublists = []\n\n    # Loop through each group and create sublists\n    for key, group in grouped:\n        sublists.append(list(group))\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    packed_list = []\n\n    for key, group in grouped_list:\n        if len(list(group)) > 1:\n            sublist = list(group)\n            packed_list.append(sublist)\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_lst = groupby(lst)\n    result = []\n    for k, g in grouped_lst:\n        if len(list(g)) > 1:\n            result.append(list(g))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for k,g in groupby(list1):\n        if len(list(g)) > 1:\n            new_list.append(list(g))\n    return new_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pack_consecutive_duplicates(lst):\n    grouped_lst = list(groupby(lst))\n    result = []\n    for i, group in grouped_lst:\n        if len(list(group)) == 1:\n            continue\n        result.extend(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a list of sublists containing consecutive duplicates of the input list.\n    '''\n    # use groupby() function to group the list elements by their indices\n    grouped = groupby(enumerate(lst))\n\n    # create an empty list to store sublists containing consecutive duplicates\n    sublists = []\n\n    # iterate through the grouped list and add sublists to the sublists list\n    for key, group in grouped:\n        # check if the current group is a consecutive sequence of duplicates\n        if len(list(group)) > 1:\n            # create a sublist containing consecutive duplicates of the group elements\n            sublist = [lst[i] for i in group[0] + 1]\n            # append the sublist to the sublists list\n            sublists.append(sublist)\n\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(g) for k, g in groupby(lst) if k == lst[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = {}\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            groups[list1[0]] = [list1[0]]\n        else:\n            groups[list1[0]] = list(group)\n    return groups"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = [tuple(x) for x in list1]  # convert list to tuple\n    list2 = list(set(list1))  # remove duplicate tuples\n    list3 = {}\n    for tup in list2:\n        list3[tup] = list1.count(tup)  # count occurrences\n    return list3"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in list1:\n        if not isinstance(i, list):\n            continue\n        for j in i:\n            if isinstance(j, list):\n                continue\n            if not isinstance(j, tuple):\n                j = (j,)\n            if j in sublists:\n                sublists[j] += 1\n            else:\n                sublists[j] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary\n    count_dict = {}\n\n    # Iterate over each element in the list\n    for elem in list1:\n\n        # Check if the current element is a list\n        if isinstance(elem, list):\n\n            # Check if the list is already in the dictionary\n            if elem in count_dict:\n\n                # Increment the count for the list\n                count_dict[elem] += 1\n\n            # If the list is not in the dictionary, add it with a count of 1\n            else:\n                count_dict[elem] = 1\n\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count_dict[tuple(list1[i])] = count_dict.get(tuple(list1[i]), 0) + 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list lst and returns a dictionary where every list in lst is turned to a tuple and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if sublist not in count:\n                count[sublist] = 1\n            else:\n                count[sublist] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary\n    sublist_count = {}\n    \n    # Iterate over each element in the list\n    for sublist in list1:\n        # Convert the list to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple is already in the dictionary\n        if sublist_tuple not in sublist_count:\n            # If not, add it with a count of 1\n            sublist_count[sublist_tuple] = 1\n        else:\n            # If it is, increment its count by 1\n            sublist_count[sublist_tuple] += 1\n    \n    # Return the dictionary\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    d = {}\n    \n    # Iterate through the list\n    for i in list1:\n        # Convert the list to a tuple\n        t = tuple(i)\n        # Check if the tuple is already in the dictionary\n        if t in d:\n            # Increment the count for the tuple\n            d[t] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            d[t] = 1\n    \n    # Return the dictionary with counts\n    return d"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    sublist_count = {}\n    \n    # Iterate through the list of lists\n    for sublist in list1:\n        # Turn the sublist into a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in sublist_count:\n            # Increment the value of the tuple in the dictionary\n            sublist_count[sublist_tuple] += 1\n        else:\n            # Otherwise, add the tuple and its count to the dictionary\n            sublist_count[sublist_tuple] = 1\n    \n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Create a set of tuples to store unique tuples in the test_list\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n\n    # Iterate over each tuple in the unique_tuples set\n    for combination in combinations(unique_tuples, len(unique_tuples[0])):\n        # Calculate the sum of the combination\n        combination_sum = sum(combination)\n\n        # Check if the combination_sum is in the test_list\n        if combination_sum in test_list:\n            # Print the combination\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    def is_valid_combination(combination, target_sum):\n        \"\"\"\n        Check if the given combination has a sum equal to the target sum.\n        \"\"\"\n        return sum(combination) == target_sum\n    \n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            if is_valid_combination(comb, target_sum):\n                print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as input and returns a list of all the combinations of sums with tuples in the input list.\n    The combinations are calculated using the itertools.combinations function from the module itertools.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    if (sum(test_list[i:j+1]), sum(test_list[j:k+1]), sum(test_list[k:l+1]), sum(test_list[l:])) in result:\n                        continue\n                    result.append((sum(test_list[i:j+1]), sum(test_list[j:k+1]), sum(test_list[k:l+1]), sum(test_list[l:])))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # sort the list\n    sorted_list = sorted(test_list)\n\n    # create a set of all the possible combinations of sums with tuples\n    combinations_set = set()\n\n    for i in range(len(sorted_list)):\n        for j in range(i+1, len(sorted_list)+1):\n            combinations_set.add(tuple(sorted_list[i:j]))\n\n    # convert the set to a list and return the result\n    return list(combinations_set)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            for k in range(j+1, len(test_list)+1):\n                for l in range(k+1, len(test_list)+1):\n                    for m in range(l+1, len(test_list)+1):\n                        combinations_list.append((test_list[i], test_list[j], test_list[k], test_list[l], test_list[m]))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum(test_list[i]) == sum(test_list[j]) and sum(test_list[j]) == sum(test_list[k]):\n                    print(\"Combination found: \", test_list[i], test_list[j], test_list[k])\n    return"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Iterate through the tuples in the list\n    for i in range(len(test_list)):\n        # Iterate through the remaining tuples in the list\n        for j in range(i+1, len(test_list)):\n            # Calculate the sum of the current two tuples\n            current_sum = test_list[i][0] + test_list[j][0]\n            # Check if the current sum is equal to the target sum\n            if current_sum == target_sum:\n                # Create a list of the two tuples and append it to the result list\n                result_list.append((test_list[i], test_list[j]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = sum(test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i:j+1]) == total:\n                print(tuple(test_list[i:j+1]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # create a dictionary to store the number of tuples with each sum\n    count = {}\n    for tup in test_list:\n        for i in tup:\n            if i not in count:\n                count[i] = 1\n            else:\n                count[i] += 1\n\n    # find all possible combinations of sums\n    comb = []\n    for i in range(1, len(count)+1):\n        for tup in combinations(test_list, i):\n            total = sum(tup)\n            if total not in count:\n                count[total] = 0\n            count[total] += 1\n            if count[total] == 1:\n                comb.append(tup)\n\n    # sort the combinations by sum in ascending order\n    comb = sorted(comb, key=lambda x: x[0])\n\n    return comb"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1 and count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the square root of n\n    sqrt_n = math.sqrt(n)\n\n    # Initialize the count of divisors\n    count = 0\n\n    # Loop through all integers from 1 to the square root of n\n    for i in range(1, int(sqrt_n)+1):\n        # If n is divisible by i, increment the count\n        if n % i == 0:\n            count += 1\n\n    # If the count of divisors is even, return True\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    # check if the input is even\n    if n % 2 == 0:\n        print(n, \"is even.\")\n    else:\n        # calculate the number of divisors\n        num_divisors = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                num_divisors += 1\n        if n > 2:\n            num_divisors += 1\n        # check if the count of divisors is even\n        if num_divisors % 2 == 0:\n            print(n, \"has an even number of divisors.\")\n        else:\n            print(n, \"has an odd number of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    divisor = 2\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            count += 1\n        divisor += 1\n    if n > 2:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # calculate the number of divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n\n    # count the number of divisors\n    count = len(divisors)\n\n    # check if the count of divisors is even or odd\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors is even and False otherwise.\n    \"\"\"\n    divisor_count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divisor_count += 1\n    if n > 1:\n        divisor_count += 1\n    if divisor_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    def factors(num):\n        '''\n        Generate all the factors of a number.\n        '''\n        factors = []\n        i = 1\n        while i <= num:\n            if num % i == 0:\n                factors.append(i)\n            i += 1\n        return factors\n\n    def count_divisors_even(n):\n        '''\n        Count the number of even divisors of a given number n.\n        '''\n        divisors = factors(n)\n        count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                count += 1\n                if n // i!= i:\n                    count += 1\n        return count\n\n    def count_divisors_odd(n):\n        '''\n        Count the number of odd divisors of a given number n.\n        '''\n        divisors = factors(n)\n        count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                count += 1\n                if n // i!= i:\n                    count += 1\n        return count\n\n    divisors_count = count_divisors_even(n)\n    even_count = count_divisors_even(n)\n    odd_count = count_divisors_odd(n)\n\n    if divisors_count % 2 == 0 and even_count == odd_count:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n // i)\n\n    return sum(divisors) % 2 == 0"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            result += arr[j]\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_arr = []\n    for i in range(n):\n        left = 0\n        while left < i:\n            right = left + 1\n            while right < i and right < 2 * left + 1:\n                sum_arr.append(arr[left:right+1])\n                right += 1\n            left += 1\n    return sum(sum_arr)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        if i % 2 == 0:\n            temp_sum = 0\n            for j in range(i, n):\n                temp_sum += arr[j]\n                if j - i + 1 % 2 == 1:\n                    sum += temp_sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:\n                sum += arr[j] - arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:\n                sum += sum_subarray(arr[i:j+1])\n    return sum\n\ndef sum_subarray(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    total = 0\n    n = len(arr)\n    \n    for i in range(n):\n        # Check if the current element is odd length\n        if i < n // 2:\n            if arr[i] % 2 == 0:\n                # Add the even length subarray to the total\n                total += arr[i]\n                # Move the current index to the next odd length element\n                i += 1\n            else:\n                # Add the odd length subarray to the total\n                total += arr[i]\n        else:\n            # Add the remaining even length subarray to the total\n            total += sum(arr[i:n])\n    \n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\n    Parameters:\n    arr (list): list of integers\n\n    Returns:\n    int: the sum of all odd length subarrays\n    '''\n\n    if not arr:\n        return 0\n\n    sum_arr = []\n\n    for i in range(len(arr)):\n        if i == 0 or (i > 0 and arr[i] % 2!= 0):\n            curr_sum = 0\n            for j in range(i, len(arr)):\n                curr_sum += arr[j]\n                sum_arr.append(curr_sum)\n\n    return sum(sum_arr) % (10**9 + 7)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum += arr[i]\n        else:\n            sum += arr[i] - arr[i-1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            sub_arr = arr[i:j]\n            sum += sum(sub_arr)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of odd length subarrays\n    odd_sum = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is odd\n        if i % 2 == 1:\n            # Sum the odd length subarrays\n            odd_sum += sum(arr[i-odd_length:i+1])\n\n    return odd_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    :param r: Red component of the color in the range 0-255.\n    :param g: Green component of the color in the range 0-255.\n    :param b: Blue component of the color in the range 0-255.\n    :return: Hue, Saturation and Value components of the color in the range 0-360, 0-100 and 0-100, respectively.\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    if max_val == min_val:\n        h = s = 0\n    else:\n        if delta == 0:\n            s = 0\n        else:\n            s = delta / max_val\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h / 6\n        if h < 0:\n            h = h + 1\n        h = h * 360\n\n    v = max_val * 100\n    s = s * 100\n    h = h % 360\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert an RGB color (red, green, blue) to HSV (hue, saturation, value) color space.\n\n    :param r: int, red component value (0-255)\n    :param g: int, green component value (0-255)\n    :param b: int, blue component value (0-255)\n    :return: tuple of floats (hue, saturation, value)\n    \"\"\"\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    value = max_color / 255.0\n\n    if delta == 0:\n        hue = 0\n    elif max_color == r:\n        hue = ((g - b) / delta) % 6\n    elif max_color == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    if hue < 0:\n        hue += 6\n\n    saturation = delta / (1 - abs(2 * value - 1))\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    Parameters:\n    r (int): Red component of the color.\n    g (int): Green component of the color.\n    b (int): Blue component of the color.\n\n    Returns:\n    tuple: (hue, saturation, value) tuple representing the HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    value = cmax\n\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    if hue < 0:\n        hue += 6\n\n    saturation = delta / (1 - abs(2 * cmax - 1))\n\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes the red, green, and blue values of an RGB color and returns the hue, saturation, and value components of the HSV color.\n    \n    :param r: The red value of the color in the range [0, 255]\n    :param g: The green value of the color in the range [0, 255]\n    :param b: The blue value of the color in the range [0, 255]\n    :return: A tuple containing the HSV values of the color in the range [0, 1]\n    \"\"\"\n    \n    r, g, b = r / 255, g / 255, b / 255  # Convert RGB values to range [0, 1]\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:  # max_val == b\n        hue = 4 + (r - g) / delta\n    \n    hue = hue % 6\n    \n    if hue < 0:\n        hue += 6\n    \n    saturation = delta / (max_val + delta) if max_val!= 0 else 0\n    \n    value = max_val\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / delta)\n    elif max_val == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n\n    if h < 0:\n        h += 360\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    if s == 0:\n        v = 0\n    else:\n        v = max_val\n\n    # Convert HSV to RGB\n    r_h, g_h, b_h = 0, 0, 0\n    if s == 0:\n        r_h, g_h, b_h = max_val, max_val, max_val\n    else:\n        if h == 0:\n            r_h, g_h, b_h = max_val, v, 0\n        elif h == 120:\n            r_h, g_h, b_h = v, max_val, 0\n        elif h == 240:\n            r_h, g_h, b_h = 0, max_val, max_val\n        elif h < 60:\n            r_h, g_h, b_h = 0, max_val, (h / 60) * max_val\n        elif h < 180:\n            r_h, g_h, b_h = (h / 60) * max_val, max_val, 0\n        elif h < 240:\n            r_h, g_h, b_h = 0, (h / 60) * max_val, max_val\n        else:\n            r_h, g_h, b_h = (h / 60) * max_val, max_val, 0\n\n        if delta == 0:\n            g_h, b_h = 0, 0\n        else:\n            g_h, b_h = (b - r) / delta, (r - g) / delta\n\n        if b_h < 0:\n            b_h += 1\n\n        if b_h > 1:\n            b_h -= 1\n\n        if g_h < 0:\n            g_h += 1\n\n        if g_h > 1:\n            g_h -= 1\n\n    r, g, b = r_h, g_h, b_h\n\n    return (int(r * 255), int(g * 255), int(b * 255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n\n    if max_rgb == min_rgb:\n        h = s = 0\n    else:\n        if max_rgb == r:\n            h = (g - b) / delta\n        elif max_rgb == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        if h < 0:\n            h += 6\n\n        s = delta / max_rgb\n\n    v = max_rgb\n\n    hsv = (h * 360, s * 100, v * 100)\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts rgb color to hsv color.\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h * 60\n    if h < 0:\n        h += 360\n\n    v = cmax\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes in RGB color values as inputs and returns the HSV color values as a tuple.\n    '''\n    r, g, b = r / 255, g / 255, b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    h = 0\n    s = 0\n    v = cmax\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h / 6\n    s = delta / (1 - abs(2 * cmax - 1))\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    if max_value == min_value:\n        h = 0\n    else:\n        if max_value == r:\n            h = (g - b) / (max_value - min_value)\n        elif max_value == g:\n            h = 2 + (b - r) / (max_value - min_value)\n        else:\n            h = 4 + (r - g) / (max_value - min_value)\n\n        h = h * 60.0\n\n        if h < 0:\n            h += 360.0\n\n    if max_value == 0:\n        s = 0\n    else:\n        s = (max_value - min_value) / max_value\n\n    v = max_value\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        if cmax == r:\n            h = ((g - b) / delta) % 6\n        elif cmax == g:\n            h = (b - r) / delta + 2\n        else:\n            h = (r - g) / delta + 4\n        h = h / 6\n        if h < 0:\n            h += 1\n        s = delta / (1 - abs(2 * cmax - 1))\n    v = cmax\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    '''\n\n    # Initialize variables for even and odd numbers\n    even_count = 0\n    odd_count = 0\n\n    # Loop through the list to count even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # If even_count is greater than odd_count, then multiply the first even and odd numbers\n    if even_count > odd_count:\n        return lst[0] * lst[1]\n    # If odd_count is greater than even_count, then multiply the last even and odd numbers\n    else:\n        return lst[-2] * lst[-1]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n            even_product *= i\n        else:\n            odd_count += 1\n            odd_product *= i\n\n    if even_count == 0 or odd_count == 0:\n        return \"The list does not contain any even or odd number.\"\n\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0:\n        return 0\n    else:\n        return list1[0] * list1[-1]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and first odd number of the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return lst[0] * lst[0]\n    else:\n        return -1"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    result = 1\n    for i in list1:\n        if i % 2 == 0:\n            even *= i\n        else:\n            odd *= i\n        result = even * odd\n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as an argument and returns the product of the first even and odd numbers in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count == 1 and odd_count == 1:\n            product = num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    product = 1\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n\n    if even_count == 0 or odd_count == 0:\n        return \"List is empty or has only one number.\"\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    # Loop through the list\n    for num in list1:\n        # Check if the number is even\n        if num % 2 == 0:\n            even_count += 1\n        # Check if the number is odd\n        elif num % 2!= 0:\n            odd_count += 1\n            \n        # If the number is even or odd, multiply it with the product\n        if num % 2 == 0 and even_count > 0:\n            product *= num\n        elif num % 2!= 0 and odd_count > 0:\n            product *= num\n            \n    # Return the product\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to list of strings\n    str_list = [x.strip() for x in test_str.split(',')]\n    # Convert each string to integer and append to new list\n    int_list = [int(x) for x in str_list]\n    # Convert new list to tuple and return\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        tuple_num = eval(test_str)\n        if isinstance(tuple_num, tuple):\n            for num in tuple_num:\n                if not isinstance(num, int):\n                    raise ValueError(\"All elements in the tuple must be integers.\")\n            return tuple_num\n        else:\n            raise TypeError(\"The input string is not a valid tuple.\")\n    except (SyntaxError, NameError, TypeError, ValueError) as e:\n        print(f\"Error: {e}\")"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert tuple string to integer tuple\n    test_tuple = tuple(int(x) for x in test_str.strip(\"()\").split(\",\"))\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space\n    tuple_str = test_str.split(', ')\n    \n    # Convert each string to integer\n    int_tuple = tuple(int(i) for i in tuple_str)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # check if test_str is a string\n    if not isinstance(test_str, str):\n        raise TypeError(\"Input must be a string.\")\n\n    # remove whitespace and split the string into a list of tokens\n    tokens = test_str.split()\n\n    # create a list of integer values from the tokens\n    int_list = [int(token) for token in tokens]\n\n    # create a tuple of integer values from the list\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple string to a list of strings\n    list_str = test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\"'\", \"\").replace(\",\", \"\").split()\n    \n    # Convert each string in the list to an integer\n    int_tuple = tuple(int(i) for i in list_str)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the tuple string into a list of integers\n    int_list = [int(num) for num in test_str.split()]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if isinstance(test_str, tuple):\n        return tuple([int(i) for i in test_str])\n    else:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Convert each string to an integer and append to a list of integers\n    int_list = [int(i) for i in str_list]\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a tuple string as input and returns an integer tuple.\n    \"\"\"\n    # Split the string by commas and spaces\n    string_list = test_str.split(',')\n\n    # Convert each element in the list to an integer\n    int_list = [int(x.strip()) for x in string_list]\n\n    # Convert the list to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Initialize the left and right pointers\n    left = 0\n    right = len(a) - 1\n    \n    # Perform binary search on the sorted array to find the insertion point\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # The value was not found in the sorted array, so insert it at the rightmost position\n    return right + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Initialize variables\n    left, right = 0, len(a) - 1\n    mid = 0\n\n    # Binary search to find the right insertion point\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the value is found, return the mid index\n        if a[mid] == x:\n            return mid\n\n        # If the value is smaller, search in the right half\n        elif a[mid] < x:\n            left = mid + 1\n\n        # If the value is greater, search in the left half\n        else:\n            right = mid - 1\n\n    # If the value is not found, return the left insertion point\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Using the binary search algorithm to find the right insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b){3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a.*b{3}\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1,3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{2}b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\s+\\w+\\s+b{3}\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b){3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[a][b]{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba\\w{2}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a single list\n    new_list = test_list + [test_str]\n    # Convert the list into a tuple\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and string to create a single string\n    new_str = ''.join(test_list) + test_str\n    # Split the single string into a list of characters\n    new_list = list(new_str)\n    # Create a tuple from the list of characters\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + str(item) for item in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # concatenate the two lists\n    new_list = test_list + [test_str]\n    # convert the list to tuple\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    new_list = tuple(test_list)\n    # concatenate the tuple and string\n    new_tuple = (new_list, test_str)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_list)\n    new_tuple += (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_list_tuple = tuple(test_list)\n    # Concatenate the string and the list tuple\n    new_tuple = (test_str + str(new_list_tuple))\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the list and string and convert it to a list\n    combined_list = list(test_list) + [test_str]\n    # Convert the list to a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if sum(1 for num in nums[i:] if num % 2 == 0)!= 0:\n            return False\n    \n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(x % 2 for x in nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0 and (nums[i] % 2 == 0 or nums[i] == 0):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_found = True\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            even_found = False\n            break\n    return even_found"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Loop through the list\n    for i in range(len(nums)):\n        # Check if the index is even\n        if i % 2 == 0:\n            # If it is, check if there are any even numbers in that position\n            if sum(num for num in nums[i:] if num % 2 == 0) % 2 == 0:\n                return False\n    # If we made it through the loop without returning False, then all the even indexes have even numbers\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    # Initialize a counter for even positions\n    even_count = 0\n    \n    # Iterate through the list\n    for i in range(len(nums)):\n        # Check if the current index is even\n        if i % 2 == 0:\n            # Check if the current index contains an even number\n            if nums[i] % 2 == 0:\n                # Increment the even counter\n                even_count += 1\n                \n    # Return whether all even positions contain even numbers\n    return even_count == len(nums)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_list.append(i)\n    return tuple(new_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for element in test_tup:\n        if not isinstance(element, tuple):\n            result.append(element)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # loop through each element in the tuple\n    for elem in test_tup:\n        # check if the element is a tuple\n        if isinstance(elem, tuple):\n            # if it is a tuple, recursively call the function\n            remove_nested(elem)\n        # if the element is not a tuple, remove it from the tuple\n        else:\n            test_tup.remove(elem)\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Define a function to remove nested tuples\n    def remove_nested_helper(nested_tup):\n        new_tup = []\n        for item in nested_tup:\n            if type(item)!= tuple:\n                new_tup.append(item)\n        return new_tup\n    \n    # Helper function to remove nested tuples\n    def remove_nested_tuples(tup):\n        new_tup = []\n        for item in tup:\n            if type(item)!= tuple:\n                new_tup.append(item)\n            else:\n                new_tup += remove_nested_helper(item)\n        return new_tup\n    \n    # Call the helper function\n    return remove_nested_tuples(test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_helper(inner_tup):\n        nonlocal test_tup\n        return test_tup.remove(inner_tup)\n    return tuple(filter(lambda x: isinstance(x, tuple), test_tup))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        return test_tup\n    else:\n        return tuple(remove_nested(elem) for elem in test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for item in test_tup:\n        if type(item) == tuple:\n            test_tup.remove(item)\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize a new empty list to store the flattened version of the tuple\n    flattened_tup = []\n    # Loop through each element in the tuple\n    for element in test_tup:\n        # If the element is a tuple, flatten it\n        if type(element) == tuple:\n            flattened_tup += element\n        # If the element is not a tuple, append it to the flattened list\n        else:\n            flattened_tup.append(element)\n    # Return the flattened list as the output\n    return flattened_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_lists(input_list):\n    '''\n    This function takes a list of lists as input and returns the total number of lists in the list.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n            count += count_list(sublist)\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n    arr (list): A sorted array.\n    x (int): An element to search for in the array.\n\n    Returns:\n    int: The index of the last occurrence of x in arr.\n\n    \"\"\"\n    # Initialize the left pointer to 0 and the right pointer to the last index of the array\n    left = 0\n    right = len(arr) - 1\n\n    # Find the index of the last occurrence of x\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Return the index of the last occurrence of x\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the last position variable to -1\n    last_position = -1\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is equal to the search element\n        if arr[i] == x:\n            # Update the last position variable to the current index\n            last_position = i\n    \n    # Return the last position variable\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two parameters - an array 'arr' and a value 'x'. The function\n    iterates through the array from the end to the beginning and returns the index\n    of the last occurrence of 'x'. If 'x' is not present in the array, the function\n    returns -1.\n    \"\"\"\n    # Initialize a variable 'last_index' to -1\n    last_index = -1\n    # Iterate through the array from the end to the beginning\n    for i in range(len(arr)-1, -1, -1):\n        # If the current element is equal to 'x', set 'last_index' to the current index\n        if arr[i] == x:\n            last_index = i\n    # Return the last_index value\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Find the index of the element x in the array\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If element is not found, return -1\n    if left > right:\n        return -1\n\n    # Find the last occurrence of the element in the sorted array\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments:\n    arr: A sorted array.\n    x: An element to be searched.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == x:\n            # if element is found, find its last occurrence in the sorted array\n            left_index, right_index = mid, mid\n            \n            while left_index > 0 and arr[left_index - 1] == x:\n                left_index -= 1\n                \n            while right_index < len(arr) - 1 and arr[right_index + 1] == x:\n                right_index += 1\n                \n            return right_index\n        elif arr[mid] < x:\n            # if element is in the right half of the array\n            left = mid + 1\n        else:\n            # if element is in the left half of the array\n            right = mid - 1\n    \n    # if element is not found in the array\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # binary search to find the last position of x in the array\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # element not found"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in an array and an element x and returns the last index of x in the array.\n\n    Args:\n    arr (list): the sorted array\n    x (any): the element to search for in the array\n\n    Returns:\n    int: the last index of x in the array, or -1 if x is not found in the array\n    \"\"\"\n\n    # initialize the last index to -1\n    last_index = -1\n\n    # loop through the array and check if the current element is equal to x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments: an array and an element x.\n    It returns the last index of the element x in the array. If the element is not present in the array, it returns -1.\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n    \n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    This function takes a sorted array and an element x as input and returns the last position of the element x in the array.\n    If the element x is not present in the array, then it returns -1.\n    '''\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n    \n    # Check if x is present in the array\n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If x is not present in the array, then return -1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w+b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?i)a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a[^b]*b')\n    return pattern.search(text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key, value in dict.items():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(2, n+1, 2))"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    odd_sum = 0\n    for i in range(l, r + 1, 2):\n        odd_sum += i\n    return odd_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n < 0:\n        print(\"Please enter a non-negative integer.\")\n    else:\n        sum = 0\n        for i in range(1, n+1, 2):\n            sum += i\n        print(\"The sum of all odd natural numbers between 1 and\", n, \"is:\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum = 0\n\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initializing sum variable\n    sum = 0\n    # iterating from l to r\n    for i in range(l, r+1):\n        # checking if i is odd\n        if i % 2!= 0:\n            # adding i to sum\n            sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_array(arr):\n    '''\n    This function takes an array as an input and returns the sum of all the elements in the array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n\n    # initializing the sum to zero\n    total = 0\n\n    # iterating over the array and adding each element to the sum\n    for num in arr:\n        total += num\n\n    # returning the sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    if d >= 32:\n        return 0\n    elif d < 0:\n        return left_rotate(n, -d)\n    else:\n        result = 0\n        for i in range(d):\n            result = (result << 1) | (n & 1)\n            n >>= 1\n        return (result << 32 - d) | (n >> d)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to a binary string\n    binary_str = bin(n)[2:]\n\n    # Check if d is greater than or equal to the length of the binary string\n    if d >= len(binary_str):\n        return n << (d - len(binary_str))\n    else:\n        # Remove the leading zeros from the binary string\n        binary_str = binary_str.lstrip('0')\n\n        # Pad the binary string with leading zeros to be d bits long\n        binary_str = binary_str.zfill(d)\n\n        # Convert the padded binary string back to an integer\n        result = int(binary_str, 2)\n\n        # Return the rotated integer\n        return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    d %= 32\n    if d == 0:\n        return n\n    elif d >= 32:\n        return n & mask\n    else:\n        return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    return ((n << d) & mask) | ((n & mask) >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to a binary string\n    num_bin = bin(n)[2:]\n    \n    # Calculate the number of bits to rotate\n    num_rotated = d % len(num_bin)\n    \n    # Calculate the number of bits to keep\n    num_to_keep = 32 - num_rotated\n    \n    # Calculate the new binary string\n    new_bin = num_bin[num_rotated:] + num_bin[:num_rotated]\n    \n    # Convert the binary string back to an integer\n    new_num = int(new_bin, 2)\n    \n    return new_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates the given number left by the given number of bits.\n    n: the number to be rotated.\n    d: the number of bits to rotate.\n    \"\"\"\n    # Check if the number is 32 bit\n    if d >= 32:\n        print(\"Number is too large to rotate left.\")\n        return n\n\n    # If the number is less than 32 bits, rotate the number left by d bits\n    shift = 32 - d\n    return (n << shift) | (n >> d)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the input number to binary representation\n    binary = bin(n)[2:]\n    \n    # check if the input number is negative\n    if n < 0:\n        # add 2^32 to the binary representation to make it positive\n        binary = '1' + '0'*(32-len(binary)) + binary\n    \n    # find the number of zeroes at the beginning of the binary representation\n    zeros = binary.find('0')\n    \n    # if d is greater than the number of zeroes in the binary representation, shift all the bits to the right by d and add 0s at the beginning\n    if d > zeros:\n        binary = '0'*(d-zeros) + binary\n    \n    # if d is less than the number of zeroes in the binary representation, shift all the bits to the left by d and add 0s at the beginning\n    elif d < zeros:\n        binary = binary[:zeros] + '0'*(d-zeros)\n    \n    # convert the binary representation back to integer\n    rotated_number = int(binary, 2)\n    \n    # if the rotated number is negative, we need to add 2^32 to it to make it positive\n    if rotated_number < 0:\n        rotated_number += (1 << 32)\n    \n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the binary representation of the number to a 32 bit integer\n    n = int(n, 2)\n\n    # rotate the bits left by d bits\n    n = (n << d) | (n >> (32 - d))\n\n    # convert the 32 bit integer back to binary and return it as a string\n    return bin(n)[2:]"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Initialize a variable to hold the original number\n    original_number = n\n    # Initialize a variable to hold the left rotated number\n    left_rotated_number = 0\n    \n    # Iterate through each bit of the number\n    for bit in range(32):\n        # Check if the current bit is a 1\n        if (original_number & (1 << bit)):\n            # If it is, shift the leftmost bit to the left by d and add it to the left rotated number\n            left_rotated_number |= (1 << (bit + d))\n        else:\n            # If it's a 0, leave the leftmost bit as is\n            pass\n        \n        # Shift the original number to the right by 1\n        original_number = (original_number >> 1)\n    \n    return left_rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Extract the last d bits of n\n    mask = 0xffffffff << d\n    last_d_bits = n & mask\n\n    # Rotate the first d bits to the right\n    rotated = n >> d\n    rotated |= last_d_bits << (32 - d)\n\n    return rotated"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    # Use regex to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    # Return the modified string\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as an argument and removes all whitespaces from it.\n    '''\n    # Use regular expression to remove all whitespaces\n    text = re.sub('\\s+', '', text)\n    # Return the modified string\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == z and y == x:\n        count += 1\n    if x == y and y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    # Check if all three integers are equal\n    if x == y == z:\n        return 1\n    elif x!= y!= z:\n        return 2\n    else:\n        return 0"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    equal_count = 0\n    for num in [x, y, z]:\n        if x == num:\n            equal_count += 1\n    return equal_count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n\n    for i in range(x, y+1):\n        if i == x:\n            continue\n        if i == y:\n            continue\n        if i == z:\n            continue\n        if i == x+1:\n            continue\n        if i == y+1:\n            continue\n        if i == z+1:\n            continue\n        if i == x-1:\n            continue\n        if i == y-1:\n            continue\n        if i == z-1:\n            continue\n        if i == x*2:\n            continue\n        if i == y*2:\n            continue\n        if i == z*2:\n            continue\n        if i == x/2:\n            continue\n        if i == y/2:\n            continue\n        if i == z/2:\n            continue\n        if i == x**2:\n            continue\n        if i == y**2:\n            continue\n        if i == z**2:\n            continue\n        count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    # initialize a counter variable to keep track of the number of equal numbers\n    count = 0\n    \n    # iterate over the three integers and check if they are equal\n    for i in range(3):\n        for j in range(3):\n            if i!= j and x == y and y == z or x == z and z == y and y == i or x == y and y == z and z == i:\n                count += 1\n    \n    # return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(max(x, y, z)):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    # initialize variables\n    count = 0\n\n    # loop through the given list and count the number of equal numbers\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n\n    # return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for num in [x, y, z]:\n        if num == x or num == y or num == z:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if all elements are same\n    if all(arr[i] == arr[0] for i in range(n)):\n        return 0\n\n    # Find the pivot element\n    pivot = arr[n // 2]\n    # Initialize count and store the index of pivot\n    count = 0\n    pivot_index = -1\n\n    # Iterate through the array\n    for i in range(n):\n        if arr[i] < pivot:\n            arr[i], arr[count] = arr[count], arr[i]\n            count += 1\n            pivot_index = i\n\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Finding the first increasing subsequence\n    i = 0\n    while i < n - 1 and arr[i] >= arr[i + 1]:\n        i += 1\n    if i == 0:\n        return 0\n    # Calculating the number of rotations required\n    count = 0\n    for j in range(n):\n        if arr[j] < arr[i - 1]:\n            count += 1\n            i = j\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Perform a bubble sort to sort the array\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    count = 0\n    # Iterate over the sorted array and count the number of rotations\n    for i in range(n):\n        if i == 0 or i == n-1:\n            count += 1\n        elif arr[i-1] > arr[i] and arr[i+1] < arr[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] < arr[n-i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    if len(arr) <= 1:\n        return 0\n\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] < arr[right]:\n            right = mid\n        else:\n            left = mid + 1\n\n    return right"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Find the first and last elements of the array\n    first = arr[0]\n    last = arr[-1]\n    # Count the number of rotations required\n    count = 0\n    while first < last:\n        # Calculate the mid point of the array\n        mid = (first + last) // 2\n        # Check if the mid element is greater than the first element\n        if mid > first:\n            # If yes, then the first element must be smaller than the mid element\n            # So we need to rotate the array\n            count += 1\n            first = mid\n        else:\n            # If no, then the last element must be greater than the mid element\n            # So we need to rotate the array\n            count += 1\n            last = mid\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array of integers and returns the minimum number of rotations required to generate a sorted array.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The minimum number of rotations required to generate a sorted array.\n\n    \"\"\"\n    # Check if the array is already sorted or not\n    if sorted(arr) == arr:\n        return 0\n\n    # Initialize a flag variable to keep track of whether we need to rotate the array\n    need_to_rotate = False\n\n    # Loop through each element of the array and check if it's greater than the next element\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            # If it's greater than the next element, we need to rotate the array\n            need_to_rotate = True\n            break\n\n    # If we didn't need to rotate the array, return 0\n    if not need_to_rotate:\n        return 0\n\n    # Initialize a counter variable to keep track of the number of rotations\n    count = 0\n\n    # Loop through each element of the array and compare it to the next element\n    while True:\n        if arr[0] > arr[1]:\n            # If the first element is greater than the second element, we can rotate the array\n            arr[0], arr[1] = arr[1], arr[0]\n            count += 1\n        else:\n            # If we reach here, we know the array is already sorted\n            return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return i+1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    # First, check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # Then, check if the array is already sorted in reverse\n    if arr == sorted(arr, reverse=True):\n        return 0\n    # If the array is not sorted, count the number of rotations required\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if n is a perfect square else False.\n    \"\"\"\n    # Check if n is less than 2\n    if n < 2:\n        return False\n\n    # Initialize the loop counter\n    i = 1\n\n    # Initialize the square root of n\n    square_root = n\n\n    # Perform the loop until the square root becomes less than 1\n    while square_root >= 1:\n\n        # Check if the square root is greater than n/i\n        if square_root > n / i:\n            return False\n\n        # Increment the loop counter\n        i += 1\n\n        # Recalculate the square root\n        square_root = (square_root + n / i) / 2\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether a given number is a perfect square or not.\n    \"\"\"\n    # Check if the given number is positive or zero\n    if n < 0:\n        return False\n    \n    # Use binary search algorithm to check if the given number is a perfect square or not\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If the number is not a perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Convert the number to an integer\n    n = int(n)\n    # Check if the number is negative or zero\n    if n < 0 or n == 0:\n        return False\n    # Check if the number is a perfect square using a while loop\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks if a given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # check if the number is less than 1\n    if n < 1:\n        return False\n\n    # check if the number is equal to 1\n    elif n == 1:\n        return True\n\n    # check if the number is equal to 2\n    elif n == 2:\n        return True\n\n    # check if the number is a perfect square by iterating from 1 to sqrt(n)\n    else:\n        for i in range(1, int(n ** 0.5) + 1):\n            if n == i ** 2:\n                return True\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Initialize the square root of the given number\n    root = n ** 0.5\n\n    # Check if the square root is an integer\n    if root.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    '''\n    # Find the square root of n using the math module\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is an integer and the difference between n and its square is less than or equal to 1\n    if sqrt_n * sqrt_n == n and sqrt_n - n <= 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether the given number is a perfect square or not.\n\n    Args:\n    n (int): the number to check for perfect square\n\n    Returns:\n    bool: True if n is a perfect square, False otherwise.\n    '''\n    import math\n    \n    # check if the number is a perfect square\n    root = math.sqrt(n)\n    if root == int(root):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt_n = math.sqrt(n)\n    return int(sqrt_n) ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if a given number is a perfect square or not.\n\n    :param n: A positive integer\n    :return: True if n is a perfect square, False otherwise.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Initialize variables to store the product and whether it is even or odd\n    product = 1\n    is_even = True\n    \n    # Iterate through the list and multiply each element with the current product\n    for i in range(len(arr)):\n        product *= arr[i]\n        \n        # If the product becomes odd, it means the product is odd\n        if product % 2!= 0:\n            is_even = False\n    \n    # Return whether the product is even or odd\n    return is_even"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(f\"The product of the numbers in the list is even: {product}\")\n    else:\n        print(f\"The product of the numbers in the list is odd: {product}\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    \n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of numbers as input and returns True if the product of all the numbers is even, else False.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize a variable to store the product of numbers in the list\n    product = 1\n\n    # Iterate through each number in the list\n    for num in arr: \n        # Multiply the current number with the product variable\n        product *= num\n\n    # Check if the product of numbers is even or not\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and the index of the maximum sum\n    max_sum = lists[0][0]\n    max_sum_index = 0\n    \n    # Loop through each sublist in the list of lists\n    for i in range(1, len(lists)):\n        # Loop through each element in the current sublist\n        for j in range(len(lists[i])):\n            # Add the current element to the sum of the current sublist\n            current_sum = lists[i][j] + lists[i][j+1] +... + lists[i][j+len(lists[i])-1]\n            \n            # If the sum is greater than the maximum sum, update the maximum sum and the index of the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_index = i\n                \n    # Return the list in the sublist at the maximum sum index\n    return lists[max_sum_index]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of the maximum sum and its corresponding sublist\n    max_sum = 0\n    max_sublist = []\n\n    # Loop through each sublist in the input list\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n\n        # If the sum is greater than the current maximum sum, update the maximum sum and the corresponding sublist\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_sublist = sublist\n\n    # Return the sublist that maximizes the sum\n    return max_sublist"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == 0 and j == 0:\n                max_sum = lists[i][j]\n                max_list.append(lists[i][j])\n                continue\n            current_sum = lists[i][j] + max_list[j-1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lists[i][:j+1]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # find the maximum sum of all possible sublists\n    max_sum = sum(max(sublist) for sublist in itertools.product(*lists))\n    # find the sublist whose sum is the maximum\n    max_sublist = [sublist for sublist in itertools.product(*lists) if sum(sublist) == max_sum][0]\n    return max_sublist"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables for the sum of lists and the list with the maximum sum\n    max_sum = 0\n    max_list = []\n    \n    # loop through each list in the list of lists\n    for i in range(len(lists)):\n        # initialize variables for the current list and the current sum\n        current_sum = 0\n        current_list = lists[i]\n        \n        # loop through each element in the current list and add it to the sum\n        for j in range(len(current_list)):\n            current_sum += current_list[j]\n        \n        # compare the current sum to the maximum sum found so far\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = current_list\n    \n    # return the maximum sum list found\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = []\n\n    # Iterate through all lists in the given list of lists\n    for lst in lists:\n        # Calculate the sum of all elements in the list\n        sum_lst = sum(lst)\n\n        # If the sum is greater than the current maximum, update the maximum sum and the corresponding list\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n\n    # Return the maximum sum and list\n    return max_sum, max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for list_ in lists:\n        current_sum = sum(list_)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list_\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Find the maximum sum of the first list in each sublist\n    sublists = [max(sublist) for sublist in lists]\n    \n    # Find the maximum sum of the sublists\n    max_sublist_sum = max(sublists)\n    \n    # Find the sublist that results in the maximum sum\n    max_sublist = sublists[sublists.index(max_sublist_sum)]\n    \n    # Return the max_sublist\n    return max_sublist"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables\n    max_sum = 0\n    max_list = []\n\n    # loop through each list in the input list\n    for lst in lists:\n        # initialize variables\n        current_sum = 0\n\n        # loop through each element in the list\n        for num in lst:\n            # add the element to the current sum\n            current_sum += num\n\n            # if the current sum is greater than the maximum sum so far, update the maximum sum and the corresponding list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst\n\n    # return the maximum sum and list\n    return max_sum, max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function takes a string as input and returns the maximum run of uppercase characters in the string.\n    \"\"\"\n    uppercase_count = 0\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            uppercase_count = 0\n            current_run = 0\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            max_run += 1\n        else:\n            max_run = 0\n        i += 1\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    prev_char = ''\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n                prev_char = char\n        else:\n            current_run = 0\n    return max_run, prev_char"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 0\n    start_index = 0\n    end_index = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 1\n\n        if count > max_count:\n            max_count = count\n            start_index = i - count\n            end_index = i\n        elif count == max_count:\n            end_index = i\n\n    return test_str[start_index:end_index+1]\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables for maximum run and current run\n    max_run = 0\n    current_run = 0\n\n    # iterate through the string\n    for char in test_str:\n        # check if the character is uppercase\n        if char.isupper():\n            # if it is, increment the current run\n            current_run += 1\n            # if the current run is greater than the maximum run so far, update the maximum run\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            # if it's not, reset the current run to 0\n            current_run = 0\n\n    # return the maximum run of uppercase characters found\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n        else:\n            curr_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start = 0\n    max_count = 0\n    max_run = \"\"\n\n    for i in range(len(test_str)):\n        if test_str[i] == test_str[i].upper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_run = test_str[start:i+1]\n            start = i+1\n            count = 0\n\n    if count > max_count:\n        max_run = test_str[start:]\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    max_count = 0\n    start = 0\n    end = 0\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                start = i - max_count + 1\n                end = i\n        else:\n            count = 1\n    return test_str[start:end+1]\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_length = 0\n    current_char = test_str[0]\n    run_start = 0\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            if i - run_start + 1 > run_length:\n                run_length = i - run_start + 1\n                run_start = i\n        else:\n            current_char = test_str[i]\n            run_start = i\n            \n    if run_length > 1:\n        return test_str[run_start:run_start+run_length]\n    else:\n        return None"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables to keep track of the maximum run and the last uppercase character\n    max_run = 0\n    last_uppercase = None\n    \n    # iterate through the string and keep track of the run of uppercase characters\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            # if we encounter a new uppercase character, start a new run\n            if last_uppercase is None:\n                max_run = 1\n                last_uppercase = i\n            # if we encounter the same uppercase character, extend the current run\n            else:\n                max_run += 1\n                last_uppercase = i\n    \n    # return the maximum run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there are no odd numbers in the list, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple of elements and an integer K as input and returns True if the tuple contains K and False otherwise.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and a K value as input and returns a boolean value indicating if the tuple contains the k value or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    for i in range(len(test_tup)):\n        if K in test_tup[i]:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of test_tup1 and test_tup2 must be equal.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    # loop through each element of the second tuple\n    for i in range(len(test_tup2)):\n        # compare the corresponding elements of the two tuples\n        if test_tup1[i] > test_tup2[i]:\n            # if the first element is larger, return False\n            return False\n    # if we make it through the loop without finding any larger elements, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(\"The element in the first tuple ({}) is not smaller than the corresponding element in the second tuple ({}).\".format(test_tup1[i], test_tup2[i]))\n            return False\n    \n    print(\"All elements in both tuples are smaller than their corresponding elements in the second tuple.\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]