[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to lists for easier comparison\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    \n    # Loop through the lists to find the shared elements\n    shared_list = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            shared_list.append(test_list1[i])\n    \n    # Return the shared list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # check if the two lists are empty\n    if not test_tup1 or not test_tup2:\n        return []\n\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return []\n\n    # convert the tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n\n    # convert the set back to a list\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_list = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_list.append(item)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_list.append(elem)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elems.append(elem)\n    return shared_elems"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared = set1.intersection(set2)\n    return list(shared)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is not a prime number, and False otherwise.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes a number as an input and returns True if it is not a prime number, otherwise False.\n    \"\"\"\n\n    # Check if the number is less than 2 (since 1 is not a prime number).\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by any number between 2 and the square root of the number.\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    # If the number is not divisible by any number between 2 and the square root of the number, it is a prime number.\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    A function to identify non-prime numbers using the following criteria:\n    1. Check if the number is less than 2 (not prime).\n    2. Check if the number is divisible by any number from 2 to the square root of the number (not prime).\n    3. Check if the number is divisible by 1 (not prime).\n    \"\"\"\n\n    # Check if the number is less than 2 (not prime).\n    if n < 2:\n        return True\n\n    # Check if the number is divisible by any number from 2 to the square root of the number (not prime).\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    # Check if the number is divisible by 1 (not prime).\n    if n % 1 == 0:\n        return True\n\n    # If all checks passed, then the number is prime.\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number, and False otherwise.\n    '''\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    This function checks if a given number is not prime or not.\n\n    Args:\n    n (int): The number to check if it's prime or not.\n\n    Returns:\n    bool: True if the given number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is not a prime number,\n    and False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function checks whether a given number is prime or not.\n    \"\"\"\n\n    # If the number is less than 2, then it is not prime.\n    if n < 2:\n        return False\n\n    # Loop through all the numbers from 2 to the square root of the given number.\n    for i in range(2, int(math.sqrt(n))+1):\n        # If the number is divisible by i, then it is not prime.\n        if n % i == 0:\n            return False\n\n    # If the loop completes, then the number is prime.\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a heapq object\n    heap = hq.heapify(nums)\n    # extract the n largest integers from the heap and store them in a new list\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap with the first n elements of the list\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, nums[i])\n    # add the remaining elements to the heap in descending order\n    for i in range(n, len(nums)):\n        heapq.heappushpop(max_heap, nums[i])\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of integers and returns the n largest integers in descending order.\n    '''\n    # create a min-heap of size n\n    heap = hq.nsmallest(n, nums)\n    \n    # return the min-heap as the result\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a min heap to store the n largest numbers\n    min_heap = []\n    for num in nums:\n        # If the heap is empty or the current number is smaller than the smallest number in the heap,\n        # add the current number to the heap.\n        if len(min_heap) < n or num > min_heap[0]:\n            heapq.heappush(min_heap, num)\n        # If the heap is full and the current number is larger than the smallest number in the heap,\n        # remove the smallest number from the heap and add the current number to the heap.\n        elif num < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n    # Return the n largest numbers from the heap in descending order.\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap,num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert list to heap\n    heap = hq.nlargest(n, nums)\n    # extract largest n elements from heap\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the input list to a max-heap\n    hq.heapify(nums)\n    # remove the largest n elements from the heap and store them in a new list\n    largest_nums = [hq.heappop(nums) for i in range(n)]\n    # return the largest n elements in descending order\n    return sorted(largest_nums, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list of numbers to a heap\n    hq.heapify(nums)\n\n    # Extract the n largest integers from the heap\n    largest = []\n    while len(largest) < n:\n        largest.append(hq.heappop(nums))\n\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and an integer n and returns the n largest integers from the list in descending order.\n    '''\n    # Convert the list to a min-heap\n    heap = hq.nsmallest(n, nums)\n    \n    # Get the n largest integers from the heap\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n, len(nums)):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert the integer to binary string and count the number of ones in the string\n    binary_x = bin(x)[2:]\n    count = binary_x.count('1')\n\n    # if the count of ones is equal to the number of bits in the binary representation, then the two numbers differ at one bit position\n    if count == len(binary_x):\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x & (x-1) == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x == 0:\n        return False\n    \n    # Find the highest bit position\n    highest_bit = 0\n    while x > 0:\n        x = x >> 1\n        highest_bit += 1\n    \n    # Check whether the two numbers differ at one bit position only or not\n    if (x & ((1 << highest_bit) - 1))!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    else:\n        n = 0\n        while x > 0:\n            n += 1\n            x >>= 1\n        return x!= 1 << (n-1)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check if x is a power of two\n    if x < 1:\n        return False\n\n    # Convert x to binary and check if it contains only one 1\n    binary_str = bin(x)[2:]\n    if len(binary_str) == 1 and binary_str!= '0':\n        return False\n\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n\n    Args:\n        x: an integer\n\n    Returns:\n        True if the two numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    if x == 0:\n        return False\n    if x == 1:\n        return False\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return False\n\n    while x > 1:\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            x = 3 * x + 1\n\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Initialize count variable to zero\n    count = 0\n    \n    # Loop through each bit of the two numbers\n    for i in range(32):\n        # Get the value of the i-th bit of both numbers\n        bit1 = (x >> i) & 1\n        bit2 = (y >> i) & 1\n        \n        # If both bits are different, increment the count\n        if bit1!= bit2:\n            count += 1\n            \n    # Check if the count is equal to 1, i.e., the two numbers differ at one bit position only\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    #if x is equal to 0, then it is a power of two \n    if x == 0: \n        return True \n\n    #if x is odd, then it is not a power of two \n    if x % 2!= 0: \n        return False \n\n    #if x is even, then it is a power of two \n    return is_Power_Of_Two(x/2)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    \n    # Print the results\n    print(matches)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use the re.findall() method to find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words that are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    \n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use a regular expression to find all words that are at least 4 characters long\n    pattern = r'\\b\\w+\\b'\n    matches = re.findall(pattern, text)\n    # Return the list of words that meet the criteria\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use a regular expression to find all words that are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # initialize an empty list to hold the squares of the numbers\n    squares = []\n    # iterate over each number in the input list\n    for num in nums:\n        # add the square of the number to the squares list\n        squares.append(num*num)\n    # return the squares list\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num*num for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    str_len = len(str)\n    if str_len == 1:\n        return 0\n    count = 0\n    for i in range(str_len):\n        if str[i]!= str[str_len - i - 1]:\n            count += 1\n        if count == str_len // 2:\n            return 1\n    return count + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Check if the input string is palindrome or not\n    if str == str[::-1]:\n        return 0\n    \n    # Initialize two pointers, left and right, to point to the first and last characters of the string, respectively\n    left = 0\n    right = len(str) - 1\n    \n    # Initialize a variable 'rotations' to 0\n    rotations = 0\n    \n    # Iterate while the left pointer is less than the right pointer\n    while left < right:\n        \n        # Check if the characters at the left and right pointers are equal\n        if str[left]!= str[right]:\n            \n            # If they are not, then the string is not a palindrome and we can stop iterating\n            break\n        \n        # If they are equal, then we need to rotate the string by one character to get the same string\n        else:\n            left += 1\n            right -= 1\n            rotations += 1\n            \n    # Return the number of rotations needed to get the same string\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    # Check if the input string is equal to its reverse. If it is, return 0.\n    if str == str[::-1]:\n        return 0\n    \n    # Find the length of the input string.\n    n = len(str)\n    \n    # Create a new string with all the characters of the input string.\n    new_str = str * n\n    \n    # Iterate through the new string and reverse it.\n    for i in range(n//2):\n        new_str = new_str[1:] + new_str[0]\n    \n    # Check if the new reversed string is equal to the input string. If it is, return 1.\n    if new_str == str:\n        return 1\n    \n    # Otherwise, iterate through the new string and check if the length of the new string is equal to the length of the input string. If it is, return 1.\n    for i in range(n//2):\n        if len(new_str) == len(str):\n            return 1\n    \n    # If none of the above conditions are true, return the minimum number of rotations required to get the same string.\n    return n // 2"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        count = max(count, str.find(str[i], i+1))\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    # Create a dictionary to store the frequency of each character in the string.\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first character with frequency greater than 1.\n    for char in freq:\n        if freq[char] > 1:\n            first_char = char\n            break\n\n    # Initialize a variable to store the minimum number of rotations required.\n    min_rotations = 0\n\n    # Loop through the string again to find all possible rotations of the first character.\n    for i in range(len(str)):\n        # If the current character is equal to the first character, skip it.\n        if str[i] == first_char:\n            continue\n\n        # Check if the current string after removing the first character and the current character is equal to the first character.\n        new_str = str[:i] + str[i+1:]\n        if new_str[0] == first_char:\n            # Increment the minimum number of rotations required.\n            min_rotations += 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n    # Count number of rotations\n    for i in range(1, n):\n        if str[i:n] == str[:i] + str[n:]:\n            count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Check if the string is empty or contains only one character\n    if len(str) <= 1:\n        return 0\n    \n    # Get the length of the string\n    n = len(str)\n    \n    # Initialize the minimum number of rotations to infinity\n    min_rot = float('inf')\n    \n    # Initialize the first and last characters of the string\n    first_char = str[0]\n    last_char = str[n-1]\n    \n    # Loop through all possible rotations\n    for i in range(n-1):\n        \n        # Swap the first and last characters of the string\n        temp = str[i]\n        str[i] = str[n-1]\n        str[n-1] = temp\n        \n        # Check if the resulting string is equal to the original string\n        if str == first_char*n + last_char*n:\n            # If it is, update the minimum number of rotations\n            min_rot = min(min_rot, i+1)\n            \n        # Swap the first and last characters of the string back\n        temp = str[i]\n        str[i] = str[n-1]\n        str[n-1] = temp\n        \n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    # Find the length of the string\n    n = len(str)\n\n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Initialize two pointers, one starting from the beginning of the string and the other starting from the end of the string\n    left = 0\n    right = n - 1\n\n    # Initialize the minimum number of rotations required to get the same string\n    min_rotations = 0\n\n    # Initialize a boolean variable to keep track of whether the characters have been swapped\n    swapped = True\n\n    # Loop until the characters have been swapped\n    while swapped:\n\n        # Swap the characters at the two pointers\n        if str[left] == str[right]:\n            # If the characters are the same, increment the minimum number of rotations required to get the same string\n            min_rotations += 1\n\n            # Increment the left pointer\n            left += 1\n\n            # Decrement the right pointer\n            right -= 1\n\n            # Set the boolean variable to keep track of whether the characters have been swapped\n            swapped = True\n\n        else:\n            # If the characters are not the same, decrement the left pointer\n            left -= 1\n\n            # Set the boolean variable to keep track of whether the characters have been swapped\n            swapped = False\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        if str[i] == str[(i+n-1)%n]:\n            return 1\n    \n    # if no pair is found, the string is a palindrome\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    rotations = 0\n    while n > 1:\n        rotations += 1\n        if n % 2 == 0:\n            mid = n // 2\n            s = s[:mid] + s[mid:]\n        else:\n            mid = (n + 1) // 2\n            s = s[:mid] + s[mid+1:]\n        n = len(s)\n    return rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes two arguments, string s and character ch.\n    It removes the first and last occurrence of ch from the string and returns the modified string.\n    '''\n    # Split the string into two parts based on the position of the first occurrence of ch\n    first_part, second_part = s.split(ch)\n    # Remove the first occurrence of ch\n    first_part = first_part.replace(ch,'',1)\n    # Remove the last occurrence of ch\n    second_part = second_part.replace(ch,'',-1)\n    # Join the two parts of the string again\n    modified_string = first_part + ch + second_part\n    return modified_string"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return s\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return s\n    elif s[0] == ch:\n        return remove_Occ(s[1:],ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1],ch)\n    else:\n        return s[0] + remove_Occ(s[1:],ch)\n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s: \n        return s.replace(ch, \"\", 1) + s.replace(ch, \"\", -1) \n    else: \n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    if not s: # if string is empty, return empty string\n        return ''\n\n    if s[0] == ch: # if first character is same as character to be removed, remove it\n        return remove_Occ(s[1:],ch)\n    elif s[-1] == ch: # if last character is same as character to be removed, remove it\n        return remove_Occ(s[:-1],ch)\n    else: # if neither of the above, recursively remove occurrences of character from both ends of the string\n        return s[0] + remove_Occ(s[1:-1],ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    # remove the first occurrence of the character\n    if s.startswith(ch):\n        s = s[len(ch):]\n    # remove the last occurrence of the character\n    if s.endswith(ch):\n        s = s[:-len(ch)]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character is not in the string\n    if ch not in s:\n        print(\"The character is not present in the string\")\n        return\n    # if the character is present in the string, split the string into list of characters\n    lst = list(s)\n    # remove the first occurrence of the character\n    lst.remove(ch)\n    # remove the last occurrence of the character\n    lst.remove(ch)\n    # join the list of characters into a string\n    new_str = ''.join(lst)\n    return new_str"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    if s.count(ch) == 1:\n        s.remove(ch)\n        s.remove(ch)\n    elif s.count(ch) == 2:\n        s.remove(ch)\n        s.remove(ch)\n        s.remove(ch)\n    else:\n        print(\"No such character exists in the string.\")\n    return \"\".join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    if ch in s:\n        # Remove first occurrence\n        s = s.replace(ch,'',1)\n        # Remove last occurrence\n        s = s.replace(ch,'',-1)\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            M[i][j] = (sum(M[i]) - M[i][j]) * (sum(M[j]) - M[j][j]) + M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Sort the row in ascending order\n        M[i].sort()\n        # Calculate the sum of the row\n        row_sum = sum(M[i])\n        # If the row sum is negative, reverse the row\n        if row_sum < 0:\n            M[i].reverse()\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # loop through each row in the matrix\n    for i in range(len(M)):\n        \n        # initialize the sum of the current row to 0\n        row_sum = 0\n        \n        # loop through each element in the current row\n        for j in range(len(M[i])):\n            \n            # add the element to the row_sum\n            row_sum += M[i][j]\n            \n        # sort the current row in ascending order\n        M[i].sort()\n        \n        # loop through each element in the current row\n        for j in range(len(M[i])):\n            \n            # subtract the current element from the row_sum\n            row_sum -= M[i][j]\n            \n            # if the row_sum is 0, break out of the loop\n            if row_sum == 0:\n                break\n            \n            # otherwise, shift the current element to the end of the row\n            M[i][j], M[i][len(M[i])-1] = M[i][len(M[i])-1], M[i][j]\n    \n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # loop through each element in the current row\n        for j in range(len(M[i])):\n            # loop through each element in the current row again to find the minimum element\n            min_idx = j\n            for k in range(j+1, len(M[i])):\n                if M[i][min_idx] > M[i][k]:\n                    min_idx = k\n            # swap the minimum element with the current element\n            M[i][j], M[i][min_idx] = M[i][min_idx], M[i][j]\n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n\n    # Create a copy of the matrix to avoid modifying the original\n    M = [[x for x in row] for row in M]\n\n    # Traverse through the matrix and calculate the sum of each row\n    for i in range(rows):\n        for j in range(cols):\n            row_sum = sum(M[i])\n            M[i][j] = (M[i][j] + row_sum) % 1000000007\n\n    # Sort the matrix in ascending order\n    for i in range(rows):\n        for j in range(cols-1):\n            if M[i][j] > M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize sum array and temporary array\n    sum_arr = []\n    temp_arr = []\n    \n    # loop through each row of the matrix and find the sum\n    for row in M:\n        row_sum = sum(row)\n        sum_arr.append(row_sum)\n    \n    # sort the sum array in ascending order\n    sorted_sum_arr = sorted(sum_arr)\n    \n    # loop through each row of the matrix and append the row that corresponds to the sum in the sorted sum array\n    for row in M:\n        row_sum = sum(row)\n        for i in range(len(sorted_sum_arr)):\n            if row_sum == sorted_sum_arr[i]:\n                temp_arr.append(row)\n                break\n    \n    # return the final sorted matrix\n    return temp_arr"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    # Create a list of tuples where each tuple contains a row and its sum\n    row_sums = [(row, sum(row)) for row in M]\n\n    # Sort the list of tuples based on the sum of the rows\n    row_sums.sort(key=lambda x: x[1])\n\n    # Create a new matrix with the sorted rows\n    sorted_M = [row for _, row in row_sums]\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row in the matrix\n    sums = [sum(row) for row in M]\n    \n    # Sort the matrix by the row sums in ascending order\n    sorted_M = sorted(M, key=lambda x: sums.index(sum(x)))\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # transpose the matrix to make it easier to sort the rows\n    MT = [[M[j][i] for j in range(len(M))] for i in range(len(M[0]))]\n    # sort the rows using a simple sorting algorithm, like merge sort\n    for j in range(len(M)):\n        MT[j] = sorted(MT[j])\n    # transpose the matrix back to get the sorted matrix\n    SM = [[MT[i][j] for i in range(len(M))] for j in range(len(M[0]))]\n    return SM"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # create a list to store the row sums\n    row_sums = [sum(row) for row in M]\n    # sort the row sums in ascending order\n    row_sums.sort()\n    # create a list to store the sorted matrix\n    sorted_M = []\n    # iterate through the rows and fill the sorted matrix with the rows that have the same sum as in row_sums\n    for i in range(n):\n        row_sum = row_sums[i]\n        sorted_row = [row[j] for j in range(n) if row_sums[j] == row_sum]\n        sorted_M.append(sorted_row)\n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = 0.5 * l * b\n    volume = area * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth and height of a triangular prism as input and returns its volume.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes three parameters l, b, and h representing the length, width, and height of the triangular prism respectively.\n    It calculates the volume of the triangular prism by multiplying the length, width, and height.\n    \"\"\"\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the volume\n    V = 0.5 * l * b * h\n    # return the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h # Formula to calculate the volume of the prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n\n    Args:\n        l (float): Length of the triangular prism.\n        b (float): Base of the triangular prism.\n        h (float): Height of the triangular prism.\n\n    Returns:\n        float: The volume of the triangular prism.\n    \"\"\"\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    print(\"The volume of the triangular prism is: \", V)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z][a-z0-9]*)_([a-z0-9]+)')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z_]+'\n    return bool(re.findall(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]*_[a-z]*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=\\b[a-z]+)(?=_)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z][a-z0-9]*)(_[a-z0-9]*)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return len(matches) == len(text) // 2"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Define the regular expression pattern for lowercase letters and underscores\n    pattern = r'\\b[a-z]*[_]([a-z]+)\\b'\n\n    # Use the re.search() method to search for the pattern in the input string\n    match = re.search(pattern, text)\n\n    # If a match is found, return true\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('([a-z][a-z0-9]*_[a-z0-9]*)')\n    match = pattern.match(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'^([a-z]+)_([a-z]+)_([a-z]+)$'\n    match = re.match(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=\\b)(\\w)(?=\\w)(?!\\1)'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert the first string to a list of characters\n    first_list = list(string)\n    # create a set of characters in the second string\n    second_set = set(string)\n    # initialize an empty list to store the resulting list\n    result_list = []\n    # iterate over the first list and remove characters which are present in the second set\n    for char in first_list:\n        if char not in second_set:\n            result_list.append(char)\n    # convert the resulting list to a string and return it\n    return ''.join(result_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    no_of_chars = 256\n    char_set = set(string2)\n    result = []\n    for char in string1:\n        if char not in char_set:\n            result.append(char)\n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string, chars_to_remove):\n    '''\n    This function takes a string and a list of characters to be removed as input.\n    It then removes the characters from the string which are present in the list.\n    '''\n    list_to_remove = list(chars_to_remove)\n    result = []\n    for char in string:\n        if char not in list_to_remove:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list\n    list_str = list(string)\n\n    # Remove characters from the list which are present in the second string\n    for char in list_str:\n        if char in string:\n            list_str.remove(char)\n\n    # Convert the list back to a string and return it\n    return ''.join(list_str)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n\n    char_list = list(string)\n    char_set = set(char_list)\n\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            char_list.remove(chr(i))\n\n    return ''.join(char_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Parameters:\n    string1 (str): The first string to remove characters from.\n    string2 (str): The second string to keep characters from.\n\n    Returns:\n    str: The modified string with characters from string2 removed.\n    \"\"\"\n    # Convert both input strings to lists of characters\n    list1 = list(string1)\n    list2 = list(string2)\n\n    # Use list comprehension to create a new list with characters from string1 that are not in string2\n    new_list = [char for char in list1 if char not in list2]\n\n    # Convert the new list of characters back to a string and return it\n    return ''.join(new_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    remove_chars = set(string)\n    return [char for char in string if char not in remove_chars]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string, remove_list):\n    \"\"\"\n    Removes characters from a string that are present in a list of characters.\n\n    Args:\n    string (str): The string from which to remove characters.\n    remove_list (list): A list of characters to remove from the string.\n\n    Returns:\n    str: The resulting string after removing the characters from the input string.\n    \"\"\"\n    return ''.join(char for char in string if char not in remove_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_chars = list(string)\n    list_chars.sort()\n    string_chars = ''.join(list_chars)\n    for char in string_chars:\n        if char not in string:\n            string = string.replace(char, '', 1)\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string, to_remove):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = \"\"\n    for char in string:\n        if char not in to_remove:\n            result += char\n    return result\n\nNO_OF_CHARS = 256\ndef remove_char(string, to_remove):\n    '''\n    This function takes two parameters, string and to_remove, and returns a new string with the characters present in the to_remove string removed.\n    '''\n    return str_to_list(string, to_remove)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_nums = set()\n    \n    # Loop through the array and add unique elements to the set\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    \n    # Check if the set has any elements\n    if len(unique_nums) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create a dictionary to store the occurrences of each element in the array\n    occurrences = {}\n\n    for num in arraynums:\n        # check if the element is already in the dictionary\n        if num in occurrences:\n            # if it is, return True\n            return True\n        else:\n            # otherwise, add 1 to the count in the dictionary\n            occurrences[num] = 1\n\n    # if we make it through the loop without finding any duplicates, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store the unique elements of the array\n    unique_nums = set(arraynums)\n    # If the length of the set is equal to the length of the array, it means all elements are unique\n    if len(unique_nums) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    # Otherwise, it means there is at least one duplicate element in the array\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the index of each element in the array\n    index_dict = {}\n    # loop through each element in the array\n    for i, num in enumerate(arraynums):\n        # check if the element exists in the dictionary\n        if num in index_dict:\n            # if it does, return True because the array contains a duplicate element\n            return True\n        # otherwise, add the element to the dictionary with its index\n        index_dict[num] = i\n    # if no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_elements = set(arraynums)\n\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_elements) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a dictionary to store unique elements of the array\n    unique_dict = {}\n\n    # Loop through each element in the array\n    for num in arraynums:\n\n        # If the number is already in the dictionary, return True\n        if num in unique_dict:\n            return True\n\n        # Add the number to the dictionary\n        unique_dict[num] = True\n\n    # If the loop completes without finding any duplicates, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    \n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n                \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    \n    # Check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 10 == 0:\n        return \"The number is a Woodall number.\"\n    else:\n        return \"The number is not a Woodall number.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return \"Woodall\"\n    else:\n        return \"Not Woodall\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x == 1:\n        return \"It's a woodball.\"\n    elif x == 2:\n        return \"It's a woodball!\"\n    elif x == 3:\n        return \"It's a woodball!!\"\n    else:\n        return \"It's not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define the list of valid woodall numbers\n    valid_woodall = [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100]\n\n    # Check if the number is in the valid woodall list\n    if x in valid_woodall:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0:\n        return False\n    elif x < 1:\n        return False\n    elif x % 2 == 0:\n        return is_woodall(x / 2)\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(x**0.5)+1, 2):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    if x < 2:\n        return False\n    i = 2\n    while i * i <= x:\n        if x % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return \"Odd\"\n    else:\n        return \"Even\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 5 == 0:\n        print(\"Woodall\")\n    else:\n        print(\"Not Woodall\")\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num % 2 == 0 or (num % 2 == 1 and (rev(num//2) + 1 == num))"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num < num * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n    # calculate the reverse of the number and add 1\n    reverse_sum = int(reversed_num) + 1\n    # check if the original number is one less than twice the reverse\n    return num < reverse_sum"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    \n    return (rev_num - num) == 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    rev_num = 0\n    temp = num\n    \n    while temp > 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n        \n    if num == rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to string\n    num_str = str(num)\n    \n    # Reverse the string\n    rev_str = num_str[::-1]\n    \n    # Convert the reversed string to an integer\n    rev_num = int(rev_str)\n    \n    # Check if the reversed number is one less than twice the original number\n    if rev_num == num - 2:\n        print(\"The number is one less than twice its reverse.\")\n    else:\n        print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return num == rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num == (2 * rev(str(num)[::-1])) - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Reverse the string\n    reversed_str = num_str[::-1]\n    \n    # Convert the reversed string to an integer\n    reversed_int = int(reversed_str)\n    \n    # Check if the original number is one less than twice the reversed number\n    if num + 1 < reversed_int * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # converting the input number to a string\n    num_str = str(num)\n    # reversing the string\n    rev_str = num_str[::-1]\n    # converting the reversed string to an integer\n    rev_num = int(rev_str)\n    # computing the difference between the original number and the reverse number\n    diff = abs(rev_num - num)\n    # checking if the difference is one less than twice its reverse\n    if diff == 1 or diff == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize max_num to the first number in the list\n    max_num = arr[0]\n    # Loop through the list and compare each digit to the previous largest number\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    # Return the max_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i]*(10**(len(arr)-i-1))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = 0\n    for i in range(len(arr)):\n        num = num * 10 + arr[i]\n    return num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        num = 0\n        for j in range(len(arr[i])):\n            num = num * 10 + int(arr[i][j])\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, arr[i])\n        \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in arr:\n        max_num = max(max_num, i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    # Initialize variables\n    max_num = 0\n    curr_num = 0\n\n    # Loop through the array\n    for digit in arr:\n        # If the current digit is a power of 2, add it to the current number\n        if digit == 2**curr_num:\n            curr_num += 1\n        # Otherwise, add the current number to the maximum number\n        else:\n            max_num = max(max_num, curr_num)\n            curr_num = 0\n\n    # Add the remaining digits to the maximum number\n    max_num = max(max_num, curr_num)\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    def check_digit_sum(digit_sum, curr_num):\n        if digit_sum == 0:\n            return True\n        elif digit_sum > 0:\n            if curr_num % digit_sum == 0:\n                return True\n            else:\n                return False\n        else:\n            return False\n    \n    def check_num(curr_num):\n        if curr_num == 0:\n            return True\n        elif curr_num > 0:\n            if check_digit_sum(curr_num % 10, curr_num // 10):\n                return True\n            else:\n                return False\n        else:\n            return False\n    \n    max_num = 0\n    for num in arr:\n        if check_num(num):\n            if num > max_num:\n                max_num = num\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sorting the given list in ascending order\n    arr.sort()\n    # initializing variables\n    max_num = 0\n    i = 0\n    # iterating over the digits of the given list\n    while i < len(arr):\n        # calculating the product of the current digit and the maximum number formed so far\n        curr_num = arr[i] * max_num\n        # updating the maximum number formed so far\n        max_num = max(max_num, curr_num)\n        # incrementing the index for the next digit\n        i += 1\n    # returning the maximum number formed\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Initializing variables for maximum number and its length\n    max_num = 0\n    max_num_length = 0\n\n    # Looping through all possible numbers from 1 to 999...\n    for i in range(1000):\n        # Converting i to a string and converting it to a list of digits\n        num_str = str(i)\n        num_list = list(num_str)\n\n        # Checking if the given list of digits is a valid number formed with the digits of i\n        valid_number = True\n        for j in range(len(arr)):\n            if num_list[j]!= arr[j]:\n                valid_number = False\n                break\n\n        # If the given list of digits is a valid number formed with the digits of i, then checking if it is greater than the current maximum number\n        if valid_number:\n            if len(num_list) > max_num_length:\n                max_num = int(num_str)\n                max_num_length = len(num_list)\n\n    # Returning the maximum number that can be formed with the given list of digits\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # checking if x is greater than y\n    if x > y:\n        return \"x has an opposite sign to y\"\n    elif x < y:\n        return \"y has an opposite sign to x\"\n    else:\n        return \"Both numbers have the same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return 'Both numbers have positive signs.'\n    elif x < 0 and y < 0:\n        return 'Both numbers have negative signs.'\n    elif x < 0 and y > 0:\n        return 'The first number has positive sign, while the second number has negative sign.'\n    elif x > 0 and y < 0:\n        return 'The first number has negative sign, while the second number has positive sign.'\n    else:\n        return 'Both numbers have same sign.'"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x * y) < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y >= 0) or (x >= 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x == 0 and y == 0:\n        return \"Both numbers are zero.\"\n\n    if x == 0:\n        return \"x is zero but y is not.\"\n\n    if y == 0:\n        return \"y is zero but x is not.\"\n\n    if x*y > 0:\n        return \"The signs are opposite.\"\n\n    else:\n        return \"The signs are not opposite.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # Check if both the integers are positive or both are negative\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers x and y as input and returns True if they have opposite sign, else False.\n    '''\n    if (x < 0) ^ (y < 0): \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        print(\"The signs are opposite.\")\n    elif x > 0 and y > 0:\n        print(\"The signs are opposite.\")\n    elif x < 0 and y > 0:\n        print(\"The signs are opposite.\")\n    elif x > 0 and y < 0:\n        print(\"The signs are opposite.\")\n    else:\n        print(\"The signs are not opposite.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    \"\"\"\n\n    # If x and y have same sign, they will have opposite signs.\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return 10*is_octagonal(n-1) + 5*is_octagonal(n-2)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n - 1)) / 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    if n <= 0:\n        return \"n must be a positive integer\"\n    elif n == 1:\n        return 1\n    else:\n        return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i <= n:\n        j = 1\n        while j <= i:\n            print(i * (3 * i - 1) // 2 + j - 1, end=' ')\n            j += 1\n        print()\n        i += 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def octagonal_formula(n):\n        '''\n        The formula to find the nth octagonal number is:\n        octagonal_number = (n * (2 * n - 1)) / 8\n        '''\n        return (n * (2 * n - 1)) / 8\n    \n    return octagonal_formula(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        if a**2 + b**2 == n:\n            return True\n        elif a**2 + b**2 > n:\n            a -= 1\n        else:\n            b += 1\n        count += 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 0\n    d = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            print(a)\n            c += 1\n        else:\n            print(b)\n            d += 1\n\n        a, b = b, a + b\n\n    print(c, d)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if the given number is an octagonal number and False otherwise.\n    An octagonal number is a positive integer equal to the sum of the squares of its adjacent numbers.\n    For example, 6 is an octagonal number because 6 = 3^2 + 2^2.\n    \"\"\"\n    i = 0\n    total = 0\n    while i <= n:\n        total += i ** 2\n        i += 1\n    return total == n ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (8 * n - 13) // 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Get the list of all numbers from 1 to n\n    numbers = list(range(1, n+1))\n    \n    # Find the sum of all numbers from 1 to n\n    total = sum(numbers)\n    \n    # The nth octagonal number is the number that is 1/8 of the total sum\n    nth_octagonal = total // 8\n    \n    return nth_octagonal"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[sum(int(d) for d in s[i:])] += 1\n    return digit_count[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Define a defaultdict to store the count of substrings with the sum of digits equal to the length of the substring\n    count_substrings = defaultdict(int)\n    # Loop through all possible substrings of length n in s\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Get the substring and calculate its sum of digits\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            # Add the count of substrings with the given sum to the count_substrings defaultdict\n            count_substrings[digit_sum] += 1\n    # Return the sum of the counts of substrings with the sum of digits equal to their length\n    return sum(count_substrings.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with each length\n    substring_count = defaultdict(int)\n    \n    # iterate over all possible substrings of length len(s)\n    for i in range(len(s)):\n        # iterate over all possible substrings of length len(s)-i-1\n        for j in range(i+1, len(s)+1):\n            # calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in s[i:j])\n            \n            # if the substring has a sum of digits equal to its length, increment the count in the dictionary\n            if substring_sum == len(s[i:j]):\n                substring_count[len(s[i:j])] += 1\n                \n    # return the total count of substrings with the given condition\n    return sum(substring_count.values())\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits_sum = sum(int(digit) for digit in substring)\n            if digits_sum == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            digits_sum = sum(int(digit) for digit in substring)\n            if digits_sum == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # initialize a defaultdict to store the count of substrings\n    count_dict = defaultdict(int)\n\n    # loop through each character in the string\n    for i in range(len(s)):\n        # get the substring starting from the i-th character\n        substring = s[i:]\n        # loop through each character in the substring\n        for j in range(len(substring)):\n            # get the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in substring[j:])\n            # check if the sum is equal to the length of the substring\n            if substring_sum == len(substring):\n                # increment the count of substrings in the dictionary\n                count_dict[substring] += 1\n\n    # return the count of substrings\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of substrings with sum equal to their length\n    count = defaultdict(int)\n    \n    # Loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits in the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j]) == len(s[i:j]):\n                # Increment the count of substrings with sum equal to their length\n                count[len(s[i:j])] += 1\n    \n    # Return the count of substrings with sum equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digits = [int(digit) for digit in substring]\n            sum_digits = sum(digits)\n            count[sum_digits] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a dictionary to store the count of substrings with sum of digits equal to their length\n    count = defaultdict(int)\n    \n    # Loop through all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the substring has sum of digits equal to its length\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count[j] += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with the given condition\n    count = defaultdict(int)\n\n    # loop through all possible substrings\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # check if the sum of digits of the substring is equal to its length\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count[substring] += 1\n\n    # return the count of substrings with the given condition\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = float('inf') # initialize smallest as positive infinity\n    \n    for x in xs:\n        if x < smallest:\n            smallest = x\n    \n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list xs and returns the smallest element in the list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    # Initialize smallest number to the first element of the list\n    smallest = xs[0]\n\n    # Iterate through the list and compare each element with the current smallest\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n\n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        test_list (list): List of tuples, where each tuple represents a pair of integers.\n\n    Returns:\n        int: The maximum difference between available pairs in the given tuple list.\n\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    pairs.sort()\n    diff = 0\n    for i in range(1, len(pairs)):\n        diff = max(diff, pairs[i][1] - pairs[i-1][1])\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    pairs.sort()\n    return pairs[-1][1] - pairs[0][0]\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            diff_list.append(diff)\n    max_diff = max(diff_list)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i][1] - test_list[j][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order based on the second element in each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize two variables to keep track of the maximum difference and the minimum difference seen so far\n    max_diff = float('-inf')\n    min_diff = float('inf')\n    \n    # Iterate through the sorted list of tuples\n    for i in range(len(test_list)-1):\n        # Calculate the current difference between the second elements of the tuples at indices i and i+1\n        diff = test_list[i+1][1] - test_list[i][1]\n        \n        # Update the maximum difference and the minimum difference seen so far\n        max_diff = max(max_diff, diff)\n        min_diff = min(min_diff, diff)\n        \n        # If the current difference is greater than the minimum difference seen so far,\n        # it means that there are no more pairs with a larger difference, so we can stop iterating\n        if diff > min_diff:\n            break\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if j!= i:\n                max_diff = max(max_diff, abs(test_list[i][1] - test_list[j][1]))\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the tuple list in ascending order based on the first element of the tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize the maximum difference found so far\n    max_diff = 0\n\n    # Iterate through the sorted tuple list\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the two elements in the tuple\n        diff = test_list[i+1][0] - test_list[i][0]\n        # Update the maximum difference if this difference is greater than the current maximum difference\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple as the sorting key\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sorting the list based on second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Returning the sorted list\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    \n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if isinstance(data_list, list):\n        for item in data_list:\n            if isinstance(item, list):\n                recursive_list_sum(item)\n            else:\n                total_sum += item\n    else:\n        total_sum += data_list\n    return total_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: Add the first element to the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list: # base case\n        return 0\n    else:\n        flattened_list = []\n        for item in data_list:\n            if type(item) == list:\n                flattened_list.extend(recursive_list_sum(item))\n            else:\n                flattened_list.append(item)\n        return recursive_list_sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n    \n    # recursive case: add the first element of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            flat_list += recursive_list_sum(item)\n        return flat_list\n    else:\n        return [data_list]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        head = data_list[0]\n        tail = data_list[1:]\n        new_list = recursive_list_sum(tail)\n        return new_list + head"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten_and_sum(lst):\n        \"\"\"\n        Recursively flatten a list and sum its elements.\n        \"\"\"\n        if not lst:\n            return 0\n        elif isinstance(lst[0], list):\n            return flatten_and_sum(lst[0]) + flatten_and_sum(lst[1:])\n        else:\n            return lst[0] + flatten_and_sum(lst[1:])\n\n    flattened_list = flatten_and_sum(data_list)\n    return flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        flattened_lst = []\n        for item in lst:\n            if isinstance(item, list):\n                flattened_lst.extend(flatten_list(item))\n            else:\n                flattened_lst.append(item)\n        return flattened_lst\n    \n    flattened_data = flatten_list(data_list)\n    total = sum(flattened_data)\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # recursive case: sum the first element and call the function on the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        '''\n        Recursive function to flatten a list.\n        '''\n        result = []\n        for item in lst:\n            if type(item) == list:\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    A Python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and counts the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of partitions\n\n    Returns:\n    int: The number of ways to partition a set of Bell numbers\n    \"\"\"\n    return factorial(n+1) / (factorial(n) * factorial(2*n))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n % 2 == 0:\n        return bell_number(n//2) + bell_number((3*n+1)//2)\n    \n    if n % 2 == 1:\n        return bell_number(n//2) + bell_number((3*n+1)//2) + 1"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n\n    # Initialize a list to store the values of Bell numbers\n    bell = [1]\n\n    # Iterate n times to generate the next Bell number\n    for i in range(2, n+1):\n        # Add the value of the current Bell number to the list\n        bell.append(bell[i-1] + bell[i-2])\n\n    # Return the value of the nth Bell number\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:   \n        return 1   \n    else:   \n        return n * (n-1) // 2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    # Initialize the partition table with zeros\n    p = [0] * (n+1)\n    # The first Bell number is always 1\n    p[1] = 1\n    # Loop over all possible values of n\n    for i in range(2, n+1):\n        # For each value of n, loop over all possible values of k\n        for k in range(i):\n            # For each pair of values, add their product to the partition table\n            p[i] += p[k] * p[i-k-1]\n    return p[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 587869, 2080116, 74290081, 267914296, 9227465792, 35357678917, 118170007152, 4832016738304, 16579208921845758768, 62270207205376074976, 225179981368524859811895, 87178291880000000000000000, 3245404098440071597593309967, 137438953472, 524288, 1, 1]\n\n    # Find the index of the nth Bell number\n    index = n - 1\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through the Bell numbers and count the number of ways to partition the set of Bell numbers\n    for i in range(len(bell_numbers)):\n        if bell_numbers[i] <= bell_numbers[index]:\n            count += bell_numbers[i] // bell_numbers[index]\n\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(n+1):\n        count += i*i\n    return count\n\ndef partition_bell(n):\n    '''\n    Write a function to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += bell_number(i)\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Number of ways to partition the set of Bell numbers:\", partition_bell(n))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2 * bell_number(n-1)) + (2 * bell_number(n-2)) + 1"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the count to 0\n    count = 0\n    \n    # Define the range of numbers that we will consider\n    lower_bound = 1\n    upper_bound = n * (n + 1) // 2\n    \n    # Loop through the range of numbers\n    for num in range(lower_bound, upper_bound + 1):\n        # Check if the number is a Bell number\n        if num % n == 0:\n            count += 1\n    \n    # Return the count of ways to partition the set of Bell numbers\n    return count"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and returns True if it is monotonic and False otherwise.\n    A is assumed to be sorted in non-decreasing order.\n    '''\n    if len(A) == 1:\n        return True\n    \n    if A[0] <= A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[:-1])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    A function to check if an array is monotonic or not.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n\n    for i in range(1, len(A)):\n        if A[i] < A[i - 1]:\n            return False\n        elif A[i] > A[i - 1]:\n            return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    if len(A) < 2:\n        return True\n\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i-1] > A[i]:\n            return False\n        elif A[i-1] < A[i]:\n            return True\n        \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 2:\n        return True\n\n    for i in range(1, len(A)):\n        if A[i-1] > A[i]:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    # check if the array is monotonic in the increasing direction\n    if A[1:] == sorted(A[1:], reverse=True):\n        return True\n    \n    # check if the array is monotonic in the decreasing direction\n    if A[:-1] == sorted(A[:-1]):\n        return True\n    \n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # Get the first and last elements of the array\n    first = A[0]\n    last = A[-1]\n\n    # Check if the first element is smaller than or equal to the last element\n    if first <= last:\n        return True\n\n    # If the first element is greater than the last element, check if the array is monotonic from the right\n    elif first > last:\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n\n    # If the first element is equal to the last element, check if the array is monotonic from the left\n    elif first == last:\n        for i in range(len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if it is monotonic and False otherwise.\n    A monotonic array is an array where either the element to its left is smaller or equal to the element to its right,\n    or vice versa.\n\n    Example:\n    A = [1, 2, 3, 4, 5]\n    Output: True\n\n    A = [1, 2, 4, 5, 3]\n    Output: False\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n            elif A[i] > A[i-1] and A[i-1] < A[0]:\n                return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if it is monotonic, False otherwise.\n    A monotonic array is a sequence in which each element is either increasing or decreasing.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for sub in s:\n        if sub not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s not in l:\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # check if the length of the sublist is equal to the length of the list\n    if len(s) == len(l):\n        # check if the sublist is a sublist of the list\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(l, list):\n        raise TypeError('Input must be a list')\n    \n    if not isinstance(s, list):\n        raise TypeError('Sublist must be a list')\n    \n    if len(l) < len(s):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    count = 0\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                count += 1\n                break\n    if count == len(Input)-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    # create a list to store the lengths of each tuple\n    tuple_lengths = []\n\n    # iterate through the input list of tuples\n    for tup in Input:\n        # append the length of each tuple to the list\n        tuple_lengths.append(len(tup))\n\n    # check if all the tuples have the same length\n    if all(x == tuple_lengths[0] for x in tuple_lengths):\n        # return True if all tuples have equal length\n        return True\n    else:\n        # return False if not all tuples have equal length\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    # Function to check whether all the tuples have equal length or not\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    equal_length = True\n\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            equal_length = False\n            break\n\n    return equal_length"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Check if all the tuples have equal length\n    if all(len(i) == len(Input[0]) for i in Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        gap //= 1.3\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # define variables for sorting\n    n = len(nums)\n    gap = n\n\n    # loop until gap is no longer reduced\n    while gap > 1:\n        # reduce the gap size\n        gap = int(gap / 1.3)\n\n        # loop through the list\n        for i in range(n - gap):\n            # check if the current element is greater than the next element\n            if nums[i] > nums[i+gap]:\n                # swap the elements\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize the maximum gap and the minimum swaps\n    max_gap = len(nums) // 2\n    min_swaps = 0\n\n    # while the maximum gap is not zero\n    while max_gap > 0:\n        # set the maximum gap to the half of the current maximum gap\n        max_gap = int(max_gap / 1.3)\n\n        # set the minimum swaps to zero\n        min_swaps = 0\n\n        # while there are still minimum swaps to make\n        while min_swaps < len(nums):\n            # set the minimum swap to the current minimum swap\n            min_swap = min_swaps\n\n            # while there are still minimum swaps to make in the remaining unsorted part of the list\n            while min_swap < len(nums) - min_swap:\n                # if the element at the current minimum swap is greater than the element at the current minimum swap + maximum gap\n                if nums[min_swap] > nums[min_swap + max_gap]:\n                    # swap them\n                    nums[min_swap], nums[min_swap + max_gap] = nums[min_swap + max_gap], nums[min_swap]\n\n                    # increment the minimum swap\n                    min_swap += 1\n\n                    # increment the minimum swaps\n                    min_swaps += 1\n\n                # if the element at the current minimum swap is less than or equal to the element at the current minimum swap + maximum gap\n                else:\n                    # increment the minimum swap\n                    min_swap += 1\n\n            # increment the minimum swaps\n            min_swaps += 1\n\n            # increment the maximum gap\n            max_gap = int(max_gap * 1.3)\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n        gap = gap // 10\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The algorithm works by repeatedly swapping adjacent elements if they are in the wrong order. The\n    number of swaps made is proportional to the gap between adjacent elements.\n\n    Args:\n    nums: A list of elements to be sorted.\n\n    Returns:\n    The sorted list of elements.\n    \"\"\"\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(1, n):\n            if nums[i] < nums[i-1]:\n                nums[i], nums[i-1] = nums[i-1], nums[i]\n                swapped = True\n        n -= 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    nums (list): A list of elements to be sorted.\n\n    Returns:\n    A sorted list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n // 2\n    while gap > 0:\n        sorted = True\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                sorted = False\n        if sorted:\n            break\n        gap = (gap + n) // 2\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap / 1.3)\n        \n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize the swap flag and the gap variable\n    swap = True\n    gap = len(nums)\n\n    # iterate until the gap is 1\n    while gap > 1:\n        # calculate the new gap using the formula:\n        # new_gap = floor(gap * 1.315)\n        new_gap = int(gap * 1.315)\n\n        # iterate over the list and swap adjacent elements if they are out of order\n        for i in range(0, len(nums) - new_gap, gap):\n            if nums[i] > nums[i + new_gap]:\n                nums[i], nums[i + new_gap] = nums[i + new_gap], nums[i]\n                swap = not swap\n\n        # update the gap and repeat the iteration until the swap flag is False\n        if not swap:\n            break\n        gap = new_gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    max_iter = 100\n\n    for i in range(max_iter):\n        swapped = False\n        for j in range(n-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swapped = True\n        if not swapped:\n            break\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt_n = int(n ** 0.5) # Get the square root of n\n    if (sqrt_n * sqrt_n == n) or (sqrt_n * sqrt_n < n): # If the square root is a perfect square\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    if n < 0:\n        print(\"The given number cannot be represented as the difference of two squares.\")\n        return\n    \n    # Check if the given number is a multiple of 4 or 6\n    if n % 4 == 0 or n % 6 == 0:\n        print(\"The given number cannot be represented as the difference of two squares.\")\n        return\n    \n    # Calculate the difference of squares\n    diff = int((n // 2) ** 2 - (n // 2) ** 2)\n    \n    # Check if the difference is a square\n    if diff ** 2 == n:\n        print(\"The given number can be represented as the difference of two squares.\")\n    else:\n        print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    if n % 4 == 0:\n        return False\n    square = 0\n    while square*square <= n:\n        square += 1\n    diff = square*square - n\n    if diff*diff == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Using the bisection method to find the root of n\n    low, high = 1, n // 2\n    while low <= high:\n        mid = (low + high) // 2\n        square = mid * mid\n        if square == n:\n            return True\n        elif square < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # If the input number is less than 2, it cannot be represented as the difference of two squares\n    if n < 2:\n        return False\n    \n    # The number can be represented as the difference of two squares if it has a factor of 2 in it or is divisible by 4\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and n % (i + i) == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # find the square root of n\n    sqrt_n = int(n ** 0.5)\n    \n    # iterate from 1 to sqrt_n\n    for i in range(1, sqrt_n+1):\n        # check if i^2 + n - 1 is a perfect square\n        if i**2 + n - 1 == int((i**2 + n - 1)**0.5):\n            return True\n    \n    # if no perfect square found, n cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    # Function to check whether n can be represented as the difference of two squares or not.\n    # We will use the fact that any integer n can be represented as the difference of two squares by the formula:\n    # 2^n = (2^(n/2))^2\n    # where n/2 is an integer.\n    \n    # To check if n can be represented as the difference of two squares, we will first check if n is divisible by 2.\n    # If it is, then n cannot be represented as the difference of two squares. Otherwise, we will proceed to check if n/2 is divisible by 2.\n    if n % 2 == 0:\n        return False\n    \n    # Now, we will use the formula given to check if n/2 is divisible by 2. If it is, then n/2 cannot be represented as the difference of two squares.\n    # Otherwise, we will check if n/2^2 is divisible by 2. If it is, then n/2 is divisible by 2 and n can be represented as the difference of two squares.\n    elif n/2 % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    def is_square(num): \n        '''\n        Helper function to check whether the given number is a square or not.\n        '''\n        return num == int(num**0.5)**2\n\n    def is_difference(a, b): \n        '''\n        Helper function to check whether the difference of two squares is a square or not.\n        '''\n        return a == b**2 - n\n\n    # Check if the given number is a square number\n    if is_square(n): \n        print(\"The given number is a square number.\")\n    else: \n        print(\"The given number is not a square number.\")\n\n    # Check if the difference of the given number and a square number is also a square number\n    if is_square(is_difference(n, 0)): \n        print(\"The difference of the given number and a square number is also a square number.\")\n    else: \n        print(\"The difference of the given number and a square number is not a square number.\")\n\n    # Check if the difference of the given number and two square numbers is also a square number\n    for i in range(1, int(n**0.5)+1):\n        if is_square(is_difference(n, i)): \n            print(\"The difference of the given number and two square numbers is also a square number.\")\n            break\n    else: \n        print(\"The difference of the given number and two square numbers is not a square number.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check for conditions\n    if n % 4!= 0:\n        return \"Not a multiple of 4\"\n\n    # check for 2 squares\n    if n % 16 == 0 or n % 4 == 0:\n        return \"It can be represented as the difference of two squares\"\n\n    # check for 3 squares\n    if n % 8 == 0 or n % 8 == 4:\n        return \"It can be represented as the difference of two squares\"\n\n    # check for 5 squares\n    if n % 256 == 0:\n        return \"It can be represented as the difference of two squares\"\n\n    # check for 7 squares\n    if n % 128 == 0:\n        return \"It can be represented as the difference of two squares\"\n\n    # check for 11 squares\n    if n % 512 == 0:\n        return \"It can be represented as the difference of two squares\"\n\n    # check for 13 squares\n    if n % 896 == 0:\n        return \"It can be represented as the difference of two squares\"\n\n    # check for 17 squares\n    if n % 32768 == 0:\n        return \"It can be represented as the difference of two squares\"\n\n    # check for 19 squares\n    if n % 524288 == 0:\n        return \"It can be represented as the difference of two squares\"\n\n    # check for 23 squares\n    if n % 137438953472 == 0:\n        return \"It can be represented as the difference of two squares\"\n\n    # check for 29 squares\n    if n % 281474976710656 == 0:\n        return \"It can be represented as the difference of two squares\"\n\n    return \"Can't be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    # Check if n is a square\n    if n ** 0.5 ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # create a set of colors to check for duplicates\n    colors_set = set(colors)\n\n    # check if the colors and patterns have the same length\n    if len(colors_set)!= len(patterns):\n        return False\n\n    # loop through the patterns array\n    for i in range(len(patterns)):\n        # get the current pattern\n        current_pattern = patterns[i]\n\n        # check if the current pattern is valid (i.e. all elements are present in the colors set)\n        for color in current_pattern:\n            if color not in colors_set:\n                return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_colors = []\n    current_pattern = \"\"\n    for color in colors:\n        if color not in pattern_colors:\n            pattern_colors.append(color)\n            current_pattern = color\n        else:\n            if current_pattern == color:\n                continue\n            else:\n                return False\n    if current_pattern not in patterns:\n        return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = []\n\n    for i in range(len(colors)):\n        sequence.append(colors[i])\n\n    for pattern in patterns:\n        if not sequence.pop(0) == pattern[0]:\n            return False\n\n    return len(sequence) == 0"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(patterns)):\n        if not (patterns[i] == colors[0] or patterns[i] == colors[1]):\n            return False\n        colors = colors[2:]\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(patterns)\n    count = 0\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1] and patterns[i][0] == patterns[i + 1][0]:\n            count += 1\n            if count == patterns[i][1]:\n                return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    if len(colors)!= len(patterns):\n        return False\n\n    # check if the colors match with the patterns\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize a counter for each color in the patterns array\n    color_counters = {color: 0 for color in colors}\n\n    # Initialize a counter for the number of colors in the sequence\n    color_count = 0\n\n    # Iterate through the sequence\n    for color in colors:\n        color_counters[color] += 1\n\n        # If the current color has reached its maximum count, check if it matches the pattern\n        if color_counters[color] == patterns[color_count]:\n            color_count += 1\n\n        # If the sequence is complete and all patterns have been matched, return True\n        if color_count == len(patterns):\n            return True\n\n    # If the sequence does not reach a complete pattern, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if pattern not in colors:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two lists as input: colors and patterns.\n    \n    colors is a list of strings, where each string represents a color (e.g.,'red', 'blue', etc.).\n    \n    patterns is a list of strings, where each string represents a sequence of colors (e.g.,'red', 'blue', 'green', 'yellow', etc.).\n    \n    The function returns True if the colors follow the sequence given in the patterns list, and False otherwise.\n    \n    For example:\n    \n    colors = ['red', 'blue', 'green', 'yellow']\n    patterns = ['red', 'green', 'blue', 'yellow']\n    \n    This function would return True because the colors follow the sequence given in the patterns list.\n    \n    Another example:\n    \n    colors = ['red', 'blue', 'green', 'yellow']\n    patterns = ['red', 'yellow', 'green', 'blue']\n    \n    This function would return False because the colors do not follow the sequence given in the patterns list.\n    '''\n    \n    # Initialize a variable to keep track of the current position in the patterns list\n    current_pattern_index = 0\n    \n    # Loop through the colors list\n    for i in range(len(colors)):\n        \n        # If the current color matches the current pattern color\n        if colors[i] == patterns[current_pattern_index]:\n            \n            # Move to the next position in the patterns list\n            current_pattern_index += 1\n            \n            # If we have gone through the entire patterns list without finding a mismatch, return True\n            if current_pattern_index == len(patterns):\n                return True\n            \n        # If we have gone through the entire patterns list without finding a mismatch, return False\n        elif current_pattern_index == len(patterns):\n            return False\n            \n    # If we have reached the end of the colors list without finding a mismatch, return True\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K!= 0:\n                count += 1\n                break\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            count = 0\n            for k in range(len(test_list[i])):\n                if test_list[i][k] % K!= 0:\n                    count += 1\n                else:\n                    break\n            if count == 0:\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input and returns a list of tuples that have all elements divisible by K.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(i % K == 0 for i in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through each tuple in the input list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by k\n        if all(x % K == 0 for x in tup):\n            # Append the tuple to the result list\n            result.append(tup)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # iterate over the list of tuples\n    for tup in test_list:\n        # check if all elements are divisible by k\n        if all(x % K == 0 for x in tup):\n            # print the tuple\n            print(tup)"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]) and all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number n as input and returns True if n is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    words = s.split() # split the string by space\n    for word in words: # iterate over each word in the list\n        if len(word) % 2 == 0: # check if the length of the word is even or not\n            print(word + \" is even\")\n        else:\n            print(word + \" is odd\")\n    print(\"Total number of words: \", len(words))"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for i in s.split():\n        if len(i) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    odd_len = False\n    for word in words:\n        if len(word) % 2 == 1:\n            odd_len = True\n            break\n    if odd_len:\n        print(\"The length of the odd word is:\", len(words[words.index(word) - 1]))\n    else:\n        print(\"All the words have even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into words\n    for word in words: # loop through each word\n        if len(word) % 2 == 0: # check if the length of the word is even\n            return False # if the length is even, return False\n    return True # if the loop completes, return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Initialize a variable to store the length of the odd word\n    odd_word_len = 0\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the length of the current word is odd\n        if len(word) % 2!= 0:\n            # If the length is odd, update the odd_word_len variable\n            odd_word_len += 1\n    # Return the count of odd words\n    return odd_word_len"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    words = s.split() # Splitting the string into words\n    count = 0\n    for word in words:\n        if len(word) % 2 == 1: # If the length of the word is odd\n            count += 1\n    if count == 0:\n        return \"The word is even.\"\n    else:\n        return \"The word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    # split the string into words\n    words = s.split()\n    # iterate over each word and check its length\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    # if we reach here, there was no odd-length word\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_lst = s.split()\n    odd_word = False\n    for word in word_lst:\n        if len(word) % 2 == 1:\n            odd_word = True\n            break\n    return odd_word"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word + \" is even.\")\n        else:\n            print(word + \" is odd.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a, b, c, d = 0, 1, 0, 0\n    for i in range(1, n+1):\n        a, b, c, d = a + b, a + c, a + d, a + b + c + d\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 5\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 15\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Define the function that calculates the nth tetrahedral number\n    def calculate(n):\n        # Initialize the sum and count to 0\n        sum = 0\n        count = 0\n\n        # Calculate the sum and count for each integer from 1 to n\n        for i in range(1, n+1):\n            sum += i ** 4\n            count += 1\n\n        # Return the sum divided by the count\n        return sum / count\n\n    # Call the calculate function with n as the argument\n    result = calculate(n)\n\n    # Return the result\n    return result"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n - 1) * (4*n - 3) // (2 * (n - 1)) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = 2 * (2 * n - 1) * (2 * n - 1) * (2 * n - 1)\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def is_prime(num):\n        '''\n        A function to check if a given number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_power(num, power):\n        '''\n        A function to find the nth prime power of a given number.\n        '''\n        if is_prime(power):\n            return num ** power\n        else:\n            return prime_power(num, power - 1)\n\n    def nth_tetrahedral(n):\n        '''\n        A function to find the nth tetrahedral number.\n        '''\n        p = prime_power(4, n - 1)\n        return p ** 2\n\n    return nth_tetrahedral(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 10\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) - tetrahedral_number(n-4)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function calculates the nth tetrahedral number.\n    \"\"\"\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    a = 1\n    b = 4\n    c = 6\n    d = 8\n    \n    for i in range(n):\n        a, b, c, d = b, a + b, c, d + c\n    \n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    num = 1\n\n    # Calculate the nth tetrahedral number\n    while count < n:\n        num += 1\n        count += num // 4\n\n    return num"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*r**3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Formula for volume of a sphere with radius r\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r as input and returns the volume of a sphere with that radius.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * (r**3)\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Calculate the volume of the sphere using the formula V = (4/3) pi r^3\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr((sum_ascii % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    # initialize an empty string to store the character\n    char = \"\"\n    # loop through each character in the string\n    for c in strr:\n        # add the ASCII value of the character modulo 26 to the char string\n        char += chr((ord(c) + 26) % 26)\n    # return the character string\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_value = 97 # Assuming the first character is 'a'\n    \n    for i in range(len(strr)):\n        ASCII_value += ord(strr[i])\n    \n    return chr((ASCII_value % 26) + 97) # Adding 97 to convert the ASCII value back to character"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # convert string to list\n    char_list = list(strr)\n    # initialize sum variable to 0\n    sum_val = 0\n    # iterate over each character of the list\n    for char in char_list:\n        # convert each character to its ASCII value\n        ascii_val = ord(char)\n        # add the ASCII value to the sum variable\n        sum_val += ascii_val\n    # return the character made by adding the ASCII value of all the characters of the string modulo 26\n    return chr((sum_val % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return (ascii_value % 26) + 65"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    char_value = ascii_value % 26\n    if char_value == 0:\n        return chr(65)\n    else:\n        return chr(65 + char_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # initialize a variable to store the sum of ASCII values of the characters in the string\n    sum_ascii = 0\n\n    # iterate through each character in the string\n    for char in strr:\n        # convert the character to its ASCII value\n        ascii_val = ord(char)\n        # add the ASCII value to the sum variable\n        sum_ascii += ascii_val\n\n    # find the modulo 26 of the sum variable to get the character\n    char_val = sum_ascii % 26\n\n    # convert the character value to its corresponding character\n    char = chr(char_val + 97)\n\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    result = 0  \n    for char in strr:  \n        result += ord(char)  \n    result %= 26  \n    \n    return chr(65 + result)  "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # Initialize sequence with the first two numbers\n    seq = [1, 1]\n    # Loop through the rest of the sequence\n    for i in range(2, n+1):\n        # If the number at index i is 1, add it to the sequence\n        if seq[i-1] == 1:\n            seq.append(i)\n        # If the number at index i is 0, multiply it by 2 and add it to the sequence\n        else:\n            seq.append(2*i)\n    # Return the nth number in the sequence\n    return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n):\n        next_num = sequence[-1] + sequence[-2]\n        sequence.append(next_num)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(n-1):\n        new_sequence = []\n        for j in range(len(sequence)):\n            if j == 0 or j == len(sequence)-1:\n                new_sequence.append(0)\n            elif sequence[j-1] == 0:\n                new_sequence.append(0)\n            else:\n                new_sequence.append(sequence[j-1] + 1)\n        sequence = new_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    a, b = 0, 1\n    count = 0\n    \n    while count < n:\n        print(a)\n        a, b = b, a + b\n        count += 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(n-2):\n        next_sequence = [0] * len(sequence)\n        for j in range(1, len(sequence)):\n            next_sequence[j] = sequence[j] + sequence[j-1]\n        sequence = next_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        next_num = (sequence[-1] + sequence[-2]) % 2\n        sequence.append(next_num)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1] \n    for i in range(n): \n        sequence.append(sequence[-1] + sequence[-2]) \n    return sequence[-1] "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        seq = sequence(n-1)\n        if seq is None:\n            return None\n        else:\n            return 2*seq - 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    a, b = 1, 1\n    for i in range(n):\n        a, b = b, a + b\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    next_number = 1\n\n    for i in range(n-1):\n        next_number = 2 * sequence[-1] - sequence[-2]\n        sequence.append(next_number)\n\n    return sequence"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4 * pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    # Using the formula for the surface area of a sphere\n    surface_area = (4/3) * math.pi * (r**3)\n    \n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere with a given radius.\n    '''\n\n    # Calculate the surface area of a sphere using the formula:\n    # surface area = 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n\n    Parameters:\n    n: int, the index of the centered hexagonal number to find (starting from 0).\n\n    Returns:\n    int, the nth centered hexagonal number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    return (n * (2 * n + 1)) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Centered hexagonal numbers are defined as:\n    # 1/2 * (1 + sqrt(5) * n)\n    # where sqrt(5) = 1.618...\n    \n    # First, calculate the square root of 5 using the math library\n    import math\n    \n    sqrt_5 = math.sqrt(5)\n\n    # Calculate the nth centered hexagonal number using the formula\n    # 1/2 * (1 + sqrt(5) * n)\n    # and return the result\n    return 1/2 * (1 + sqrt_5 * n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def centered_hexagonal(a, b):\n        \"\"\"\n        Helper function to find centered hexagonal numbers.\n        \"\"\"\n        return a * (3 * a ** 2 + b ** 2) + b * (2 * a ** 2 + b ** 2)\n\n    def centered_hexagonal_sum(n):\n        \"\"\"\n        Helper function to calculate the sum of centered hexagonal numbers.\n        \"\"\"\n        return centered_hexagonal(1, 1) + centered_hexagonal(2, 2) + centered_hexagonal(3, 3) + centered_hexagonal(4, 4) + centered_hexagonal(5, 5)\n\n    # Calculate the sum of centered hexagonal numbers\n    total_sum = centered_hexagonal_sum(n)\n\n    # Calculate the centered hexagonal number\n    hexagonal_num = total_sum - centered_hexagonal_sum(n - 1)\n\n    return hexagonal_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hexagonal_number = (2 * n + 1) * ((2 * n + 1) ** 0.5)\n    centered_hexagonal_number = hexagonal_number - (2 * n + 1)\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n + 1) * (2 * n + 1) * (2 * n + 1) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Define the centered hexagonal sequence\n    centered_hexagonal = [1]\n    for i in range(1, n+1):\n        # Calculate the next centered hexagonal number\n        next_centered_hexagonal = centered_hexagonal[i-1] * (3 - centered_hexagonal[i-1]**2)\n        centered_hexagonal.append(next_centered_hexagonal)\n\n    # Find the nth centered hexagonal number\n    return centered_hexagonal[n]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((2*n+1)**(1/3) + 1/2)**(1/3)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the length of the centered hexagonal number\n    length = 5 * (3**0.5 - 1)\n    # Multiply n by the length to find the nth centered hexagonal number\n    return n * length"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return (5*n**2 + 3*n + 13) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize variables\n    i = 0\n    hex_num = 0\n    # loop through the sequence to find the nth centered hexagonal number\n    while i < n:\n        hex_num += i\n        i += 2\n    return hex_num"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary to store the merged values\n    merged_dict = {}\n    \n    # Merge the values from the three dictionaries using the merge_dict() function\n    merged_dict = merge_dict(dict1, dict2, dict3)\n    \n    return merged_dict\n\n\ndef merge_dict(dict1, dict2, dict3):\n    '''\n    Merge two dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary to store the merged values\n    merged_dict = {}\n    \n    # Merge the values from the two dictionaries using the merge_dict() function\n    merged_dict = merge_dict(dict1, dict2)\n    \n    # Merge the values from the third dictionary into the merged dictionary\n    merged_dict.update(dict3)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a single dictionary\n    that contains all the keys and values from all the input dictionaries.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(list)\n    \n    for key, value in dict1.items():\n        merged_dict[key].append(value)\n    \n    for key, value in dict2.items():\n        merged_dict[key].append(value)\n    \n    for key, value in dict3.items():\n        merged_dict[key].append(value)\n    \n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Merge the two dictionaries\n    merged_dict = ct.ChainMap(dict1, dict2)\n    \n    # Update the values of the merged dictionary with the third dictionary\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(int) # initialize defaultdict with default value as 0\n    \n    for key in dict1.keys():\n        merged_dict[key] += dict1[key]\n    \n    for key in dict2.keys():\n        merged_dict[key] += dict2[key]\n    \n    for key in dict3.keys():\n        merged_dict[key] += dict3[key]\n    \n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Use Counter from collections module to count frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = collections.defaultdict(int)\n    \n    # Iterate through the list and update the frequency of each element in the dictionary\n    for item in lst:\n        freq_dict[item] += 1\n        \n    # Return the dictionary of frequency counts\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Use collections.Counter to count the frequency of each element in the list\n    counter = collections.Counter(list1)\n\n    # Use a dictionary comprehension to convert the Counter object to a dictionary\n    freq_dict = {key: value for key, value in counter.items()}\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    smallest = float('inf')\n    closest_num = N\n    \n    for i in range(N, 0, -1):\n        if abs(i - N) < abs(closest_num - N):\n            closest_num = i\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_list = [i for i in range(1, N+1)]\n    closest = min(n_list)\n    for num in n_list:\n        if abs(num - N) < abs(closest - N):\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    min_diff = float('inf')\n    closest = N\n    \n    # Loop through all numbers from 1 to N-1\n    for i in range(1, N):\n        # Calculate the difference between the current number and N\n        diff = abs(N-i)\n        # If the current difference is smaller than the minimum difference, update the minimum difference and closest number\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    elif N > 1:\n        return N - 1\n    elif N % 4 == 0:\n        return N - 2\n    elif N % 2 == 0:\n        return N - 1\n    elif N % 3 == 0:\n        return N - 1\n    else:\n        return N - 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    numbers = []\n    for i in range(1, N+1):\n        numbers.append(i)\n\n    closest = min(numbers)\n\n    for num in numbers:\n        if abs(num - closest) < abs(N - closest):\n            closest = num\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    diff = 1000000000\n    closest = N\n\n    for num in range(1, N):\n        if abs(num - N) < diff:\n            diff = abs(num - N)\n            closest = num\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = float('inf')\n    closest_num = N\n    for num in range(N-1, -1, -1):\n        if num < smallest_num:\n            smallest_num = num\n        if num < closest_num and num > smallest_num:\n            closest_num = num\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = 1000000000 # Initialize smallest as a large number\n    closest = N\n    for i in range(2, N):\n        if N % i == 0: # If n is divisible by i, then i is closer to n\n            diff = i - N # Calculate the difference between i and n\n            if abs(diff) < abs(closest - N): # If the difference is smaller than the current closest distance, update closest\n                closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N > 1:\n        return closest_num(N-1)\n    else:\n        return N"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    min_num = None\n    \n    for num in range(N+1):\n        diff = abs(N - num)\n        \n        if diff < min_diff:\n            min_diff = diff\n            min_num = num\n    \n    return min_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize longest_length to zero\n    longest_length = 0\n    # loop through the list of words\n    for word in list1:\n        # find the length of the word\n        length = len(word)\n        # update longest_length if necessary\n        if length > longest_length:\n            longest_length = length\n    # return the longest length\n    return longest_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    word_length = 0\n    for word in list1:\n        if len(word) > word_length:\n            word_length = len(word)\n    return word_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize max_length to 0\n    max_length = 0\n\n    # iterate through each item in the list\n    for item in list1:\n        # split the item into individual words\n        words = item.split()\n        # iterate through each word and compare its length to max_length\n        for word in words:\n            if len(word) > max_length:\n                max_length = len(word)\n\n    # return the value of max_length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    # initialize a variable to store the length of the longest word\n    longest_length = 0\n    # loop through the list of strings\n    for word in list1:\n        # check if the length of the current word is longer than the longest_length variable\n        if len(word) > longest_length:\n            # update the longest_length variable if the length of the current word is longer\n            longest_length = len(word)\n    # return the length of the longest word\n    return longest_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of strings.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    max_len = 0\n\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the string values to a list of strings\n    lst = str1.split()\n    # Loop through the list of strings\n    for i in lst:\n        # Check if the substring is present in each string\n        if sub_str in i:\n            # If the substring is present, return True\n            return True\n    # If the loop completes without finding the substring, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes two strings as input - str1 and sub_str.\n    It then checks if str1 is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    This function takes two arguments, a string and a substring, and returns True if the substring is present in the string,\n    and False otherwise.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1 in sub_str"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        for item in str1:\n            if sub_str in item:\n                return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    else:\n        for i in range(4, n+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"Even number\"\n    else:\n        return \"Odd number\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    \n    # Check if the given number is odd or even\n    if n % 2 == 0:\n        return False\n    \n    # Check if the given number is divisible by 3, 5, or 7\n    for num in range(2, n//2):\n        if n % num == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # initialize count to 0\n    count = 0\n    \n    # iterate through the digits of n\n    for i in str(n):\n        # check if the digit is an odd number\n        if int(i) % 2 == 1:\n            # increment the count\n            count += 1\n        \n        # if the count is greater than 1, return False\n        if count > 1:\n            return False\n        \n    # if no odd digits found, return True\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is odd or even\n        if i % 2 == 0:\n            # If the number is even, add it to the sum\n            sum += i\n    # Check if the sum is equal to n\n    if sum == n:\n        # If the sum is equal to n, the number is undulating\n        return True\n    else:\n        # If the sum is not equal to n, the number is not undulating\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check if the number is even or odd\n    if n % 2 == 0:\n        return True\n    else:\n        # check if the number is a multiple of 5\n        if n % 5 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes in two parameters a and b and returns the value of a raised to the power of b.\n    \"\"\"\n    result = a**b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = None\n    for i, item in enumerate(test_list):\n        if minimum_index is None or item[1] < test_list[minimum_index][1]:\n            minimum_index = i\n    return test_list[minimum_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by second value in ascending order\n    test_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Use the itemgetter function from the operator module to select the second value from each tuple\n    test_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the index of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[min_index][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list by second value and then by first value\n    sorted_list = sorted(test_list, key=itemgetter(1, 0))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list by the second value using the itemgetter() function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n\n    # sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # get the index of the first tuple in the sorted list with smallest second value\n    index = sorted_list.index(sorted_list[0])\n\n    return index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    else:\n        min_value = test_list[0][1]\n        min_index = 0\n        for i in range(1, len(test_list)):\n            if test_list[i][1] < min_value:\n                min_value = test_list[i][1]\n                min_index = i\n        return test_list[min_index][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = 1000000000\n    for i in lst:\n        length = len(i)\n        if length < min_length:\n            min_length = length\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = None\n    for sublist in lst:\n        if min_len is None:\n            min_len = len(sublist)\n        elif len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the variable to store the minimum length of the list\n    min_len = 100000\n\n    # Loop through each list in the list of lists\n    for sublist in lst:\n        # Check if the length of the sublist is less than the current minimum length\n        if len(sublist) < min_len:\n            # Update the minimum length if the sublist is shorter\n            min_len = len(sublist)\n\n    # Return the minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # initialize min_length to a large positive value\n    min_length = 10**9\n\n    # loop through each sublist in lst\n    for sublist in lst:\n        # check if the length of the current sublist is smaller than min_length\n        if len(sublist) < min_length:\n            # update min_length to the length of the current sublist\n            min_length = len(sublist)\n\n    # return the minimum length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    if n < 2:\n        return 0\n    sieve = [True] * (n+1)\n    sieve[0] = False\n    sieve[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if sieve[i]:\n            for j in range(i*i, n+1, i):\n                sieve[j] = False\n    return sum(sieve)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n <= 1:\n        return 0\n    # create a list of prime numbers up to n\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i**2, n + 1, i):\n                primes[j] = False\n    # count the number of divisors of n\n    count = 0\n    for i in range(2, n + 1):\n        if primes[i]:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Helper function to flatten a list of lists\n    def flatten(lst):\n        return [item for sublist in lst for item in sublist]\n\n    # Flatten the list of lists\n    flat_list = flatten(list1)\n\n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate over the flattened list and count the frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # create a dictionary to store the frequency of each element\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through each element in the flattened list\n    for element in list1:\n        # Check if the element is already in the dictionary\n        if element in freq_dict:\n            # If it is, increment its frequency by 1\n            freq_dict[element] += 1\n        else:\n            # If not, add it to the dictionary with frequency 1\n            freq_dict[element] = 1\n    # Return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                if j not in freq_dict:\n                    freq_dict[j] = 0\n                freq_dict[j] += 1\n        else:\n            if i not in freq_dict:\n                freq_dict[i] = 0\n            freq_dict[i] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    # Iterate through the flattened list and update the frequency of each element in the dictionary\n    for item in flattened_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    # Return the dictionary containing the frequency of each element in the flattened list\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # loop through each element of the flattened list\n    for item in list1:\n\n        # if the element is not already in the dictionary, add it with a frequency of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n\n        # if the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[item] += 1\n\n    # return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n    # loop through each element in the flattened list\n    for item in list1:\n        # check if the element is already in the dictionary\n        if item in freq:\n            # if it is, increment its count\n            freq[item] += 1\n        # if it's not, add it to the dictionary with a count of 1\n        else:\n            freq[item] = 1\n    # return the dictionary of frequency\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    # iterate over each element in the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its frequency\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # if the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[element] = 1\n    # return the dictionary containing the frequency of each element in the list\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists to a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Create a dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Iterate over the flattened list\n    for item in flat_list:\n        # If the item is not already in the dictionary, add it with a frequency of 1\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        # Otherwise, increment the frequency of the item by 1\n        else:\n            freq_dict[item] += 1\n    \n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all the numbers and divide with the length of the list\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = sum(numbers) / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal number to binary string with no leading zeros\n    binary = bin(n)[2:]\n    # If binary string is empty, return \"0\"\n    if not binary:\n        return \"0\"\n    # Pad the binary string with zeros to make it of equal length as the original decimal number\n    while len(binary) < len(str(n)):\n        binary = \"0\" + binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to store the binary representation\n    binary_string = ''\n    # loop through the digits of the decimal number\n    while n > 0:\n        # get the last digit of the decimal number\n        digit = n % 2\n        # convert the digit to a string and append it to the binary representation string\n        binary_string = str(digit) + binary_string\n        # remove the last digit from the decimal number and divide by 2\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert decimal to binary using bitwise operations\n    binary = bin(n)[2:]\n    # If binary string has only one digit, add a zero to the beginning\n    if len(binary) == 1:\n        binary = '0' + binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    # base case: if n is 0, return an empty string\n    if n == 0:\n        return \"\"\n    # recursive case: convert the decimal number to its binary equivalent\n    # and add it to the result of calling the function on n//2\n    return str(n % 2) + decimal_to_binary(n//2)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = ''\n    while n > 0:\n        binary_string = str(n % 2) + binary_string\n        n = n // 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2 \n    return binary "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Convert decimal number to binary string\n    binary = bin(n)[2:]\n\n    # Remove leading zeros from binary string\n    while binary[0] == '0':\n        binary = binary[1:]\n\n    # Reverse binary string\n    binary = binary[::-1]\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    binary = \"\" \n    while n > 0: \n        remainder = n % 2 \n        binary = str(remainder) + binary \n        n = n // 2 \n    return binary "
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer as an integer.\n\n    Args:\n    num (int): The specified integer.\n\n    Returns:\n    int: The next smallest palindrome of the specified integer.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(num)\n    \n    # Find the largest palindrome less than or equal to the input number\n    largest_palindrome = 10**(len(num_str)-1)\n    \n    # Iterate through all the digits in the input number\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Subtract the digit from the largest palindrome and check if it's still a palindrome\n        new_largest_palindrome = largest_palindrome - digit_int\n        while new_largest_palindrome > 0:\n            # Check if the new largest palindrome is a palindrome\n            if int(str(new_largest_palindrome)[::-1]) == new_largest_palindrome:\n                largest_palindrome = new_largest_palindrome\n                break\n            \n            # Increment the largest palindrome by 10 and continue the loop\n            new_largest_palindrome += 10\n    \n    # Return the next smallest palindrome\n    return largest_palindrome + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if num == 1:\n        return 10\n    elif num % 2 == 0:\n        return next_smallest_palindrome(num - 1)\n    else:\n        next_palindrome = next_smallest_palindrome(num - 1)\n        while not is_palindrome(next_palindrome):\n            next_palindrome += 1\n        return next_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_smallest_palindrome(num):\n    while True:\n        num_str = str(num)\n        num_str_rev = num_str[::-1]\n        if num_str == num_str_rev:\n            return int(num_str)\n        num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\n\ndef next_smallest_palindrome(num):\n    if num < 10:\n        return 10**(num-1)\n\n    largest_palindrome = 10**(num-1)\n\n    while True:\n        palindrome = largest_palindrome * 10 + 9\n        if is_palindrome(palindrome):\n            return palindrome\n        largest_palindrome += 1\n\n\ndef main():\n    num = int(input(\"Enter an integer: \"))\n    result = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the input is a single digit number\n    if num < 10:\n        return num\n    \n    # convert the input number to a string\n    num_str = str(num)\n    \n    # initialize the variables\n    has_odd = False\n    is_palindrome = True\n    i = 0\n    \n    # loop through the digits of the number in reverse order\n    while i < len(num_str):\n        # if the current digit is odd, mark it as true and exit the loop\n        if int(num_str[i]) % 2!= 0:\n            has_odd = True\n            break\n        \n        # check if the current digit is a palindrome\n        j = i + 1\n        while j < len(num_str) and int(num_str[i]) == int(num_str[j]):\n            j += 1\n        if j == len(num_str):\n            is_palindrome = True\n            break\n        \n        # if the current digit is not a palindrome, set is_palindrome to false and break the loop\n        is_palindrome = False\n        break\n    \n    # check if the current number is a palindrome\n    if is_palindrome:\n        # if the number is a palindrome, increment the last digit and return the modified number as an integer\n        num_str = num_str[:i] + str(int(num_str[i]) + 1) + num_str[i+1:]\n        return int(num_str)\n    \n    # if the current number is not a palindrome, increment the last digit and check if it's a palindrome\n    while not is_palindrome:\n        # increment the last digit\n        num_str = num_str[:i] + str(int(num_str[i]) + 1) + num_str[i+1:]\n        \n        # convert the modified number to an integer\n        num_int = int(num_str)\n        \n        # check if the modified number is a palindrome\n        j = 0\n        while j < len(num_str) and int(num_str[j]) == int(num_str[-j-1]):\n            j += 1\n        if j == len(num_str):\n            is_palindrome = True\n            break\n    \n    # if the modified number is still not a palindrome, return None\n    if not is_palindrome:\n        return None\n    \n    # if the modified number is a palindrome, return the modified number as an integer\n    return num_int"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # reverse the number and find the last digit\n    reverse_num = int(str(num)[::-1])\n    last_digit = reverse_num % 10\n    # reverse the reversed number and find the last digit\n    reverse_reverse_num = int(str(reverse_num)[::-1])\n    next_last_digit = reverse_reverse_num % 10\n    # add the last digits\n    sum_last_digits = last_digit + next_last_digit\n    # check if the sum is less than 10\n    if sum_last_digits < 10:\n        return num * 10 + sum_last_digits\n    # check if the sum is greater than 10, and if so, divide the sum by 10 and add the remainder to the next digit\n    else:\n        return num * 10 + (sum_last_digits % 10)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        '''\n        Helper function to check if a number is a palindrome.\n        '''\n        return str(num) == str(num)[::-1]\n    \n    def find_next_smallest_palindrome(num):\n        '''\n        Recursive function to find the next smallest palindrome of a given number.\n        '''\n        if is_palindrome(num):\n            return num + 1\n        else:\n            for i in range(num, 0, -1):\n                if is_palindrome(i):\n                    return i\n                    \n    next_num = find_next_smallest_palindrome(num)\n    return next_num\n    \n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the integer to a string\n    str_num = str(num)\n\n    # Reverse the string\n    reversed_num = str_num[::-1]\n\n    # Convert the reversed string to an integer\n    reversed_int = int(reversed_num)\n\n    # Check if the reversed integer is less than or equal to the original integer\n    if reversed_int <= num:\n        return next_smallest_palindrome(num + 1)\n\n    # Check if the reversed integer is greater than the original integer\n    else:\n        return reversed_int"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Returns True if the given number is a palindrome, False otherwise.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num + 1):\n        return num + 1\n    else:\n        return next_smallest_palindrome(num + 1)\n\ndef main():\n    if len(sys.argv)!= 2:\n        print(\"Usage: python\", sys.argv[0], \"integer\")\n        sys.exit(1)\n    try:\n        num = int(sys.argv[1])\n        print(\"The next smallest palindrome of\", num, \"is:\", next_smallest_palindrome(num))\n    except ValueError:\n        print(\"Invalid input. Please enter an integer.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string and check if it's a palindrome\n    reversed_str = num_str[::-1]\n    if reversed_str == num_str:\n        return num + 1\n    else:\n        # Find the smallest number greater than num that is a palindrome\n        for i in range(num+1, 1000000):\n            reversed_str = str(i)[::-1]\n            if reversed_str == str(i):\n                return i"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Convert the array to a list to allow for negative indexing\n    lst = list(arr)\n    # Sort the list in ascending order\n    lst.sort()\n    # Find the kth element\n    if k <= len(lst):\n        return lst[k-1]\n    else:\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        print(\"Invalid input. k should be less than or equal to the length of the array.\")\n        return\n    for i in range(k - 1):\n        arr.remove(min(arr))\n    print(arr[k - 1])"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    if k > len(arr):\n        return \"Error: k is greater than the length of the array.\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # If k is less than or equal to zero or greater than the length of the array, return None\n    if k <= 0 or k > n:\n        return None\n\n    # If k is equal to 1, return the first element of the array\n    if k == 1:\n        return arr[0]\n\n    # If k is greater than 1, loop through the array and increment k\n    i = 1\n    while i < n and k > 1:\n        k -= 1\n        i += 1\n\n    # If k is still greater than 1 after the loop, return None\n    if k > 1:\n        return None\n\n    # If k is now 1, return the element at index i-1\n    return arr[i-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 0 or k > n:\n        return \"Invalid input\"\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid-1] == k:\n            return mid\n        elif arr[mid-1] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return \"Element not found\""
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), word[1:]]).capitalize()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    # Split the word into a list of words using snake_case\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    camel_case = [words[0]] + [word.capitalize() for word in words[1:]]\n    # Join the words into a camelCase string\n    return ''.join(camel_case)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), word[1:].capitalize()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        else:\n            if char == '_':\n                camel_case += char.upper()\n            else:\n                camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    capitalize = True\n\n    for letter in word:\n        if letter.isupper():\n            camel_case += letter\n        else:\n            if capitalize:\n                camel_case += letter.upper()\n            else:\n                camel_case += letter.lower()\n            capitalize = not capitalize\n\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i]\n        if i < len(word)-1 and word[i].islower() and word[i+1].isupper():\n            camel_case += \"_\"\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into individual words using snake_case format\n    words = word.split('_')\n    \n    # Convert the first letter of each word to upper case and join them\n    result = ''.join([word[0].upper() + word[1:].lower() for word in words])\n    \n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    word_list = list(word)\n    for i in range(len(word_list)):\n        if i == 0:\n            camel_case += word_list[i].lower()\n        else:\n            if word_list[i].isupper():\n                camel_case += '_' + word_list[i].lower()\n            else:\n                camel_case += word_list[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i > 0 and word[i-1].isupper():\n            camel_case += '_'\n        camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n\n    Args:\n    word (str): The word to convert.\n\n    Returns:\n    str: The camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_word = ''.join(word.title().split('_'))\n    return camel_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0: \n        return 1 \n    elif n == 1 or m == 1: \n        return 0 \n    else: \n        return eulerian_num(n-1, m) + eulerian_num(n, m-1) - eulerian_num(n-1, m-1) "
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Returns the Eulerian number a(n, m).\n\n    This function takes two arguments:\n    n: an integer representing the number of rows\n    m: an integer representing the number of columns\n\n    Returns:\n    An integer representing the Eulerian number a(n, m)\n    \"\"\"\n    # Compute the sum of the squares of the first n natural numbers\n    sum_of_squares = (n * (n + 1) * (2 * n + 1)) / 6\n    # Compute the sum of the squares of the first m natural numbers\n    sum_of_squares += (m * (m + 1) * (2 * m + 1)) / 6\n    # Return the result\n    return sum_of_squares"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m\n    elif n == 1:\n        return 2 * m\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if m == 0:\n        return 0\n    if n == 0:\n        return 1\n\n    a = 1\n    b = 1\n\n    for i in range(1, n+1):\n        a, b = b, a + b\n\n    return b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n == 0:\n        return m\n    elif m == 0:\n        return n\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1) - eulerian_num(n-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    if m == 0:\n        return 1\n\n    e = (n-1)**2\n    e += (m-1)**2\n    e -= 1\n\n    if e % 2 == 0:\n        return e//2\n    else:\n        return (e//2)+1\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function takes two integers n and m as input, and returns the Eulerian number a(n, m).\n    '''\n\n    # Create a 2D list of zeros with n rows and m columns\n    matrix = [[0 for j in range(m)] for i in range(n)]\n\n    # Fill the matrix with 1's and 0's based on the values of n and m\n    for i in range(n):\n        matrix[i][0] = 1\n        matrix[0][i] = 1\n\n    # Fill the remaining values of the matrix\n    for i in range(1, n):\n        for j in range(1, m):\n            if i % 2 == 0 and j % 2 == 1:\n                matrix[i][j] = matrix[i-1][j-1] + matrix[i-1][j]\n            elif i % 2 == 1 and j % 2 == 0:\n                matrix[i][j] = matrix[i-1][j-1] + matrix[i][j-1]\n            else:\n                matrix[i][j] = max(matrix[i-1][j-1], matrix[i-1][j], matrix[i][j-1])\n\n    # Return the last element of the last row of the matrix, which is the Eulerian number\n    return matrix[-1][-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Create a graph with n vertices and m edges\n    graph = [[0 for _ in range(m)] for _ in range(n)]\n\n    # Add edges to the graph\n    for i in range(n - 1):\n        for j in range(m - 1):\n            graph[i+1][j] = 1\n            graph[i][j+1] = 1\n            graph[i+1][j+1] = 1\n\n    # Find the Eulerian number\n    def dfs(i, j, visited):\n        visited.add((i, j))\n        if i+1 < n and graph[i+1][j]:\n            if (i+1, j) not in visited and dfs(i+1, j, visited):\n                return True\n        if j+1 < m and graph[i][j+1]:\n            if (i, j+1) not in visited and dfs(i, j+1, visited):\n                return True\n        if i-1 >= 0 and graph[i-1][j]:\n            if (i-1, j) not in visited and dfs(i-1, j, visited):\n                return True\n        if j-1 >= 0 and graph[i][j-1]:\n            if (i, j-1) not in visited and dfs(i, j-1, visited):\n                return True\n        return False\n\n    visited = set()\n    for i in range(n):\n        for j in range(m):\n            if (i, j) not in visited and dfs(i, j, visited):\n                return 1\n    return 0"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        n, m = m, n\n    a = 0\n    for i in range(1, m+1):\n        a += ((-1)**i) * binomial(n, i)\n    return a\n\ndef binomial(n, k):\n    if k > n:\n        return 0\n    f = 1\n    for i in range(k, n+1):\n        f *= i\n    return f // (factorial(n) // factorial(k) // factorial(n-k))\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    def gcd(a, b): \n        if b == 0: \n            return a \n        else: \n            return gcd(b, a % b) \n    \n    # finding GCD of n and m using Euclidean algorithm \n    g = gcd(n, m) \n    n //= g \n    m //= g \n    \n    # finding the Eulerian number using the formula \n    a = (2 * m - n + 1) // n \n    return a "
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n\n    # Loop through each sublist in the input_list\n    for sublist in input_list:\n        # Convert each sublist to a string and sort it using the built-in sorted function\n        sublist = sorted(sublist)\n        # Convert the sorted sublist back to a list and append it to the input_list\n        input_list.append(list(sublist))\n\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        input_list[i] = sorted(sublist)\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Add the list to the end of the tuple\n    test_tup += (test_list,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    new_tup = tuple(test_tup)\n    new_list = test_list + new_tup\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    new_list = test_list + list(test_tup)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return (test_list + test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = list(test_list)\n    new_list.extend(test_tup)\n    return new_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # combine three lists into one sorted list\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # merge num1 and num2 into a single list\n    merged_list = num1 + num2\n    \n    # merge merged_list and num3 into a single list\n    merged_and_sorted_list = heapq.merge(merged_list,num3)\n    \n    return merged_and_sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three lists as input and merges them into a single sorted list.\n    \"\"\"\n    # Sort the input lists\n    sorted_list1 = sorted(num1)\n    sorted_list2 = sorted(num2)\n    sorted_list3 = sorted(num3)\n    \n    # Initialize an empty list to store the merged sorted list\n    merged_list = []\n    \n    # Iterate through the three sorted lists and append their elements to the merged list\n    while len(sorted_list1) > 0 and len(sorted_list2) > 0 and len(sorted_list3) > 0:\n        if sorted_list1[0] <= sorted_list2[0]:\n            if sorted_list3[0] <= sorted_list1[0]:\n                merged_list.append(sorted_list1.pop(0))\n            else:\n                merged_list.append(sorted_list3.pop(0))\n        else:\n            if sorted_list3[0] <= sorted_list2[0]:\n                merged_list.append(sorted_list2.pop(0))\n            else:\n                merged_list.append(sorted_list3.pop(0))\n    \n    # Append any remaining elements in the sorted lists to the merged list\n    while len(sorted_list1) > 0:\n        merged_list.append(sorted_list1.pop(0))\n    while len(sorted_list2) > 0:\n        merged_list.append(sorted_list2.pop(0))\n    while len(sorted_list3) > 0:\n        merged_list.append(sorted_list3.pop(0))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    \n    # Merge num1 and num2\n    i = j = 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n            \n    # Merge the remaining elements from num1 and num2\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n        \n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n        \n    # Merge num3 with the merged list\n    i = j = 0\n    while i < len(merged_list) and j < len(num3):\n        if merged_list[i] < num3[j]:\n            merged_list.insert(i+1, num3[j])\n            i += 1\n        else:\n            merged_list.insert(i+1, merged_list[i])\n            i += 1\n            \n    while j < len(num3):\n        merged_list.insert(i+1, num3[j])\n        i += 1\n    \n    # Sort the merged list\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n        \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n\n    # Create an empty list to store the final merged list\n    merged_list = []\n\n    # Create a list of tuples containing the elements of each list and their positions in each list\n    list_tuples = [(num1[i], i) for i in range(len(num1))] + [(num2[j], len(num1) + j) for j in range(len(num2))] + [(num3[k], len(num1) + len(num2) + k) for k in range(len(num3))]\n\n    # Sort the list of tuples by the first element (the element in the list)\n    list_tuples.sort(key=lambda x: x[0])\n\n    # Use heapq to merge the lists\n    for i in range(len(list_tuples)):\n        # If the merged list is not empty and the first element of the next tuple is greater than the first element of the merged list, add the first element of the next tuple to the merged list\n        if len(merged_list) > 0 and list_tuples[i][0] > merged_list[0][0]:\n            heapq.heappush(merged_list, list_tuples[i])\n        # If the merged list is empty or the first element of the next tuple is less than or equal to the first element of the merged list, add the next tuple to the merged list\n        else:\n            heapq.heappush(merged_list, list_tuples[i])\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Sort the three lists\n    sorted_list = sorted(num1 + num2 + num3)\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Use heapq to merge the lists in descending order\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if -heapq.heappop(num1) > -heapq.heappop(num2):\n            heapq.heappush(merged_list, -heapq.heappop(num1))\n        else:\n            heapq.heappush(merged_list, -heapq.heappop(num2))\n    if num1:\n        while num1:\n            heapq.heappush(merged_list, -heapq.heappop(num1))\n    if num2:\n        while num2:\n            heapq.heappush(merged_list, -heapq.heappop(num2))\n    if num3:\n        while num3:\n            heapq.heappush(merged_list, -heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Merge three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list in ascending order\n    sorted_list = sorted(merged_list)\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all the lists into one list using the + operator\n    merged_list = num1 + num2 + num3\n\n    # Sort the merged list using the built-in sorted function\n    sorted_list = sorted(merged_list)\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[::-1] #reverse the string\n        temp = 0\n        for j in range(len(s)):\n            if s[j] == '1':\n                temp += 1\n        if temp % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize a variable to store the number of odd values found\n    odd_count = 0\n    # create a list of binary values to rotate through\n    binary_values = list(s)\n    # rotate the binary values the given number of times\n    for i in range(n):\n        # rotate the binary values by 1 bit to the left\n        binary_values.append(binary_values.pop(0))\n        # check if any of the binary values have an odd value\n        for binary_value in binary_values:\n            if binary_value % 2 == 1:\n                odd_count += 1\n    # return the number of odd values found\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    odd_count = 0\n    binary_string = bin(int(s))[2:]  # convert string to binary and remove the '0b' prefix\n    for i in range(n):\n        binary_string = binary_string[-1:] + binary_string[:-1]\n    for i, digit in enumerate(binary_string):\n        if int(digit) % 2 == 1:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    # convert the binary string to an integer\n    s = int(s, 2)\n    # initialize the counter\n    count = 0\n    # rotate the binary string the given number of times\n    for i in range(n):\n        s = ((s & 1) << 1) | (s >> 1)\n    # check if the rotated string has an odd value\n    if s & 1:\n        count += 1\n    # return the number of odd values found\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    binary_str = bin(int(s, 2))\n\n    for _ in range(n):\n        binary_str = binary_str[::-1]\n        for i in range(len(binary_str)):\n            if int(binary_str[i]) % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert binary string to list of bits\n    bits = list(map(int, s))\n\n    # Loop over the number of rotations\n    for i in range(n):\n        # Initialize a new list to store the new bits\n        new_bits = []\n\n        # Loop over the bits and append the ones that are odd\n        for bit in bits:\n            if bit % 2!= 0:\n                new_bits.append(bit)\n\n        # Convert the new list of odd bits to a binary string and append it to the result list\n        result = bin(int(''.join(map(str, new_bits)), 2))[2:]\n        bits = [int(bit) for bit in result]\n\n    # Count the number of odd bits in the final binary string\n    odd_count = bits.count(1)\n\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n): \n    count = 0\n    for i in range(n):\n        if len(s) % 2 == 0:\n            s = s[::-1]\n        else:\n            s = '0' + s[1:]\n        if len(s) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if not s:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return s.count('1') + 1\n    else:\n        return odd_Equivalent(s[1:] + s[0], n - 1)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert binary string to integer\n    num = int(s,2)\n    # Initialize count of odd values\n    count = 0\n    # Rotate the binary string n times\n    for i in range(n):\n        # Rotate the binary string by 1 bit left\n        num = (num<<1) & 0x55555555 # Rotate left by 1 bit, bitwise AND with 0x55555555 to ensure binary values are 0 or 1\n        # Check if the rotated binary value is odd\n        if num & 1 == 1:\n            count += 1\n    # Return the count of odd values\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common:\n                common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    set1 = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        set2 = set(nestedlist[i])\n        set1 = set1.intersection(set2)\n    common = list(set1)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # iterate through the nested list\n    for i in range(len(nestedlist)):\n        # iterate through the nested list at index i\n        for j in range(i+1, len(nestedlist)):\n            # find the common elements between the lists at indices i and j\n            common_elements = list(set(nestedlist[i]) & set(nestedlist[j]))\n            # if there are any common elements, print them\n            if common_elements:\n                print(f\"Common elements between the lists at indices {i} and {j} are:\", common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common_elements:\n                    continue\n                else:\n                    common_elements.append(nestedlist[i][j][k])\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Convert the nested list to a set to remove duplicates\n    set_nestedlist = set(nestedlist)\n    # Initialize an empty set for common elements\n    common_elements = set()\n    # Loop through each item in the set\n    for item in set_nestedlist:\n        # If the item is in the nested list, add it to the common set\n        if item in nestedlist:\n            common_elements.add(item)\n    # Convert the common set back to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the common elements\n    common_set = set()\n    # Iterate over each nested list\n    for nested_list in nestedlist:\n        # Iterate over each element of the nested list\n        for element in nested_list:\n            # If the element is not in the set, add it to the set\n            if element not in common_set:\n                common_set.add(element)\n    # Return the common elements as a list\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty dictionary to store the common elements\n    common_elements = {}\n    \n    # Iterate through each nested list in the main list\n    for sublist in nestedlist:\n        # Iterate through each element in the sublist\n        for element in sublist:\n            # If the element is not already in the dictionary, add it\n            if element not in common_elements:\n                common_elements[element] = True\n    \n    # Return the list of common elements\n    return common_elements.keys()"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n\n    Args:\n        nestedlist: A list of lists. Each sub-list represents a nested list.\n\n    Returns:\n        A list containing the common elements in all nested lists.\n    \"\"\"\n\n    # create a set to keep track of common elements\n    common_elements = set()\n\n    # iterate through each nested list\n    for sublist in nestedlist:\n        # iterate through each element of the current sublist\n        for element in sublist:\n            # if the element is already in the set, add it to the common elements set\n            if element in common_elements:\n                common_elements.remove(element)\n            else:\n                common_elements.add(element)\n\n    # return the list of common elements\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store common elements\n    common = set()\n\n    # loop through each nested list\n    for lst in nestedlist:\n        # loop through each element in the list\n        for num in lst:\n            # add the element to the common set\n            common.add(num)\n\n    # return the common elements as a list\n    return list(common)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Remove all non-numeric characters from the string\n    text = ''.join(filter(str.isdigit, text))\n\n    # Check if the resulting string is empty\n    if not text:\n        return False\n\n    # Convert the string to an integer and check if it's valid\n    try:\n        num = int(text)\n        if num.bit_length() > 64:\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for i in list1:\n        if len(i)!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if len(dic)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    count = 0\n    for dic in list1:\n        if dic:\n            count += 1\n        else:\n            return False\n    if count == len(list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Convert tuple to list\n    nums_list = list(nums)\n    # Initialize a variable to hold the sum of the integers in the list\n    int_sum = 0\n    # Iterate over the list of integers and add each integer to the sum variable\n    for num in nums_list:\n        int_sum += num\n    # Return the sum of the integers in the list\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function converts a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty string to store the integer\n    int_str = \"\"\n    # Iterate over each element in the tuple\n    for num in nums:\n        # Convert each element to an integer and add it to the integer string\n        int_str += str(int(num))\n    # Return the integer string as an integer\n    return int(int_str)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Initialize an empty list to store the converted elements\n    converted_list = []\n    \n    # Loop through each element in the list of lists\n    for element in test_list:\n        # Check if the element can be converted to a float\n        try:\n            # Convert the element to a float and append it to the converted_list\n            converted_list.append(float(element))\n        except ValueError:\n            # If the element cannot be converted to a float, do nothing\n            pass\n    \n    # Return the converted_list\n    return converted_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                if isinstance(item, (int, float)):\n                    row[row.index(item)] = float(item)\n                elif isinstance(item, str):\n                    row[row.index(item)] = float(item.strip())\n                elif isinstance(item, list):\n                    row[row.index(item)] = list_to_float(item)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n            elif isinstance(test_list[i][j], list):\n                list_to_float(test_list[i][j])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                element = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                pass\n            else:\n                sublist[test_list.index(sublist)] = float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        for subitem in item:\n            try:\n                new_list.append(float(subitem))\n            except ValueError:\n                pass\n    return new_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the list of strings\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character\n    words = string.split()\n    # Return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    # Split the string on the space character\n    list_of_strings = string.split(' ')\n    return list_of_strings"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a dictionary to store the count of each element in the array\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    # Find the element that appears only once in the array\n    for i in arr:\n        if count[i] == 1:\n            return i\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each element in the array\n    freq = {}\n    # loop through the array and increment the frequency count for each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # loop through the array again and find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n    # if no such element is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize variables\n    count = 0\n    unique_element = -1\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is unique\n        if i == 0 or arr[i]!= arr[i - 1]:\n            unique_element = arr[i]\n            count = 1\n        else:\n            count += 1\n\n        # Check if the unique element has appeared only once\n        if count == len(arr) // 2:\n            return unique_element\n\n    # If no unique element has appeared only once, return -1\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        for i in range(n-1):\n            if arr[i] == arr[i+1]:\n                return arr[i]\n        return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) < 2:\n        return \"Array must have at least two elements\"\n\n    # iterate through the array\n    for i in range(len(arr)):\n        # if the element at i is equal to the element at i+1, return that element\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique:\n            return unique\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize variables to store the current element and its frequency\n    current = None\n    freq = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is equal to the previous element, increment the frequency\n        if arr[i] == current:\n            freq += 1\n        # If the current element is not equal to the previous element, set the current element and frequency to the current element and 1 respectively\n        else:\n            current = arr[i]\n            freq = 1\n\n        # If the frequency is 1, return the current element\n        if freq == 1:\n            return current"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # initialize variables\n    count = 0\n    result = None\n\n    # iterate through array\n    for i in range(len(arr)):\n\n        # check if current element is already in result\n        if i > 0 and arr[i] == arr[i-1]:\n            count += 1\n            if count == 1:\n                result = arr[i]\n            elif count > 1:\n                return None\n        else:\n            count = 0\n\n    # return result\n    return result"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to keep track of the frequency of each element in the array\n    freq = {}\n\n    # Iterate through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary and find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    max_pair = (-1, -1)\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][1])\n                max_pair = (list1[i], list1[j])\n    \n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][1] * list1[j][1] > max_product:\n                max_product = abs(list1[i][1] * list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in list1:\n        if isinstance(num, tuple):\n            product = 1\n            for item in num:\n                product *= item\n            if abs(product) > abs(max_product):\n                max_product = product\n            current_product = product\n        else:\n            if abs(num) > abs(max_product):\n                max_product = num\n            current_product = num\n            \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    current_product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product *= abs(list1[i][0] - list1[j][0])\n            current_product *= abs(list1[i][1] - list1[j][1])\n            max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            abs_product = abs(list1[i][0] * list1[j][0]) + abs(list1[i][1] * list1[j][1])\n            if abs_product > max_product:\n                max_product = abs_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp_product = abs(list1[i][0]*list1[j][1])\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n                current_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables\n    sum_amicable = 0\n    i = 1\n\n    # Loop through numbers from 1 to limit\n    while i <= limit:\n        # Check if the number is amicable\n        if i!= 1 and is_amicable(i):\n            sum_amicable += i\n        i += 1\n\n    return sum_amicable\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable to the given number.\n    '''\n    # Check if the number is prime\n    if is_prime(num):\n        return False\n\n    # Check if the number is divisible by any of the numbers between 1 and the square root of the given number\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0 and i!= num // i:\n            return True\n    return False\n\ndef is_prime(num):\n    '''\n    Check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize a list to store amicable numbers\n    amicable_list = []\n    \n    # iterate through all numbers from 1 to limit\n    for i in range(1, limit+1):\n        \n        # calculate the sum of all numbers between 1 and i that are also divisible by i\n        num_sum = sum([j for j in range(1, i+1) if i % j == 0])\n        \n        # if i and the sum of i and all its multiples are amicable, add i and its sum to the list\n        if i == num_sum:\n            amicable_list.append(i)\n            amicable_list.append(num_sum)\n    \n    # return the sum of all amicable numbers\n    return sum(amicable_list)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # create a list of tuples containing all possible pairs of numbers from 1 to limit\n    pairs = [(i, limit - i) for i in range(1, limit)]\n    \n    # initialize variables for sum of amicable numbers and sum of all numbers\n    amicable_sum = 0\n    all_sum = 0\n    \n    # iterate over the pairs list and check if the sum of the numbers is a multiple of 2\n    for pair in pairs:\n        if pair[0] + pair[1] == 28:\n            amicable_sum += pair[0] + pair[1]\n        all_sum += pair[0] + pair[1]\n        \n    return amicable_sum, all_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all numbers up to the limit\n    numbers = [i for i in range(1, limit+1)]\n    # filter out all numbers that are not divisible by 2 or 3\n    amicable_numbers = [num for num in numbers if num % 2!= 0 and num % 3!= 0]\n    # calculate the sum of all amicable numbers\n    amicable_sum = sum(amicable_numbers)\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function finds the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize variables\n    amicable_sum = 0\n    count = 0\n\n    # Loop through all numbers up to the specified limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if num == amicable_number(num):\n            amicable_sum += num\n            count += 1\n\n    # Return the sum of the amicable numbers\n    return amicable_sum\n\n\ndef amicable_number(num):\n    \"\"\"\n    This function calculates the amicable number of a specified number.\n    \"\"\"\n    # Check if the number is less than 2\n    if num < 2:\n        return None\n\n    # Initialize variables\n    sum_of_squares = 0\n    difference = 0\n    amicable_num = 0\n\n    # Calculate the sum of squares of the first 10 numbers\n    for i in range(1, num):\n        sum_of_squares += i ** 2\n\n    # Calculate the difference between the sum of squares and the square of the number\n    difference = (sum_of_squares - num ** 2)\n\n    # Calculate the amicable number\n    amicable_num = num + difference\n\n    # Check if the amicable number is less than 2\n    if amicable_num < 2:\n        return None\n\n    # Check if the amicable number is equal to the square of the number\n    if amicable_num == num ** 2:\n        return None\n\n    # Check if the amicable number is an amicable number\n    for i in range(1, num):\n        if amicable_number(i) == amicable_num:\n            return None\n\n    # If the amicable number is an amicable number, return it\n    return amicable_num"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit as input and returns the sum of all amicable numbers from 1 to that limit.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i > 1 and i % 2 == 0:\n            j = i // 2\n            if i == j:\n                amicable_numbers.append(i)\n            elif j > 1 and i % j == 0 and j % i == 0:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is an amicable number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if num!= 1:\n            if num in amicable_dict:\n                amicable_sum += num\n                print(num)\n            else:\n                divisors = [i for i in range(1, num) if num % i == 0]\n                if len(divisors) == 2 and num in divisors:\n                    amicable_dict[num] = divisors[0] + divisors[1]\n                    print(num)\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function takes an integer input and returns the sum of all amicable numbers from 1 to the input value.\n    \"\"\"\n    # Create a dictionary to store the numbers for which their factors have been found\n    factors = {}\n    # Iterate from 1 to the input value\n    for i in range(1, limit + 1):\n        # Check if the number is amicable\n        if i > 1 and (i == amicable_number(i) or i == amicable_number(amicable_number(i))):\n            # Add the amicable number to the dictionary\n            factors[i] = True\n    # Initialize the sum variable\n    sum_amicable = 0\n    # Iterate over the keys in the dictionary\n    for i in factors:\n        # Check if the amicable number has any factors\n        if factors[i] is True:\n            # Add the amicable number to the sum\n            sum_amicable += i\n    return sum_amicable\n\n\ndef amicable_number(num):\n    \"\"\"\n    This function takes an integer input and returns the largest amicable number that can be written as the sum of two given numbers.\n    \"\"\"\n    # Initialize the variables to store the factors of the input number\n    a, b = 0, 1\n    # Iterate until b reaches the square root of the input number\n    while b <= num ** 0.5:\n        # Check if the input number is divisible by the current b\n        if num % b == 0:\n            # If it is, check if the product of the current b and the square root of the input number is also divisible by the input number\n            if (num // b) ** 2 == num:\n                # If it is, return the input number as the amicable number\n                return num\n            # If the product of the current b and the square root of the input number is not divisible by the input number, divide the input number by the current b\n            else:\n                num //= b\n        # If the input number is not divisible by the current b, increment the value of b\n        else:\n            b += 1\n    # If the input number has not been found as an amicable number, return None\n    return None"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list to store the sum of the two numbers\n    amicable_sum = []\n\n    # Loop through all numbers from 1 to the limit (inclusive)\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(num):\n            # Add the sum to the list of amicable sums\n            amicable_sum.append(num + sum(divisors(num)))\n\n    # Return the sum of the amicable sums\n    return sum(amicable_sum)\n\ndef divisors(n):\n    '''\n    Generate a list of all divisors of a number.\n    '''\n    # Initialize an empty list to store the divisors\n    divisors = []\n\n    # Loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(n ** 0.5) + 1):\n        # If the number is divisible by the current divisor\n        if n % i == 0:\n            # Add the divisor to the list of divisors\n            divisors.append(i)\n            # Add the remainder to the list of divisors\n            divisors.append(n // i)\n\n    return divisors\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any of its divisors\n    divisors = divisors(num)\n    for divisor in divisors:\n        if num % divisor == 0:\n            return False\n\n    # If no divisors were found, the number is amicable\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j) #calculating the angle using cmath.phase() method\n    return round(angle, 2) #rounding the angle to 2 decimal places"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return round(angle, 4)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    angle_rad = cmath.phase(a+b*1j)\n    angle_deg = angle_rad * 180 / cmath.pi\n    angle_str = \"{:.2f}\".format(angle_deg)\n\n    print(\"The angle of\", a, \"and\", b, \"is\", angle_str, \"degrees.\")"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle = round(angle, 5)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the angle using the cmath module\n    angle = cmath.phase(complex(a,b))\n    # convert the angle from radians to degrees\n    angle = round(angle*180/cmath.pi,2)\n    # return the angle\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle_deg = angle * 180 / cmath.pi\n    return angle_deg"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    \"\"\"\n    This function calculates the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Args:\n        string (str): The binary string for which to find the maximum difference.\n\n    Returns:\n        int: The maximum difference between the number of 0s and number of 1s in any sub-string of the binary string.\n    \"\"\"\n    # Initialize variables for the number of 0s and 1s in the string\n    zero_count = 0\n    one_count = 0\n\n    # Iterate over each character in the string\n    for char in string:\n        # Check if the character is a 0 or a 1\n        if char == '0':\n            zero_count += 1\n        elif char == '1':\n            one_count += 1\n        else:\n            raise ValueError(\"String contains invalid character: {}\".format(char))\n\n    # Calculate the maximum difference between the number of 0s and 1s\n    max_diff = max(zero_count - one_count, one_count - zero_count)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize the number of 0s and 1s in the first sub-string\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    # Iterate through the binary string and update the count of 0s and 1s in each sub-string\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n            count_1 += 0\n        elif string[i] == '1':\n            count_0 += 0\n            count_1 += 1\n            \n        # Calculate the difference between the number of 0s and 1s in this sub-string and the count of 0s and 1s in the previous sub-string\n        diff = abs(count_0 - count_1)\n        \n        # Update the maximum difference if this is the new maximum\n        if diff > max_diff:\n            max_diff = diff\n            \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    n = len(string)\n    dp = [0] * n\n    dp[0] = 1\n    \n    for i in range(1, n):\n        if string[i] == '0':\n            dp[i] = dp[i-1] + 1\n            if i-dp[i-1] >= 0:\n                dp[i] = max(dp[i], dp[i-dp[i-1]]+1)\n        else:\n            dp[i] = dp[i-1]\n            \n    return max(dp)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    n = len(string)\n    length = 0\n    max_length = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            length += 1\n        else:\n            length = 0\n\n        if length > max_length:\n            max_length = length\n\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    binary_string = ''.join(bin(ord(char))[2:].zfill(8) for char in string)\n    max_difference = 0\n    for i in range(len(binary_string)-1):\n        zeros = binary_string[i:].count('0')\n        ones = binary_string[i:].count('1')\n        if ones > zeros:\n            max_difference = max(max_difference, zeros - ones)\n    return max_difference"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    count_0 = count_1 = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    n = len(string)\n    max_diff = 0\n    for i in range(1, n-1):\n        diff = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                diff += 1\n            elif string[j] == '1':\n                diff -= 1\n            else:\n                break\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # initialize variables for the count of 0s and 1s\n    count0 = 0\n    count1 = 0\n    \n    # loop through each character in the string\n    for char in string:\n        # check if the current character is a 0\n        if char == '0':\n            # increment the count of 0s\n            count0 += 1\n        # check if the current character is a 1\n        elif char == '1':\n            # increment the count of 1s\n            count1 += 1\n        # if we reach this point, we've reached the end of a sub-string\n        else:\n            # calculate the maximum difference between the count of 0s and count of 1s for this sub-string\n            diff = max(count0, count1)\n            \n            # update the count of 0s and 1s for the next sub-string\n            count0 = 0\n            count1 = 0\n            \n            # update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n                \n    # return the maximum difference between the count of 0s and count of 1s in all sub-strings\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        count_0s = 0\n        count_1s = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0s += 1\n            else:\n                count_1s += 1\n            max_diff = max(max_diff, abs(count_0s - count_1s))\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    if a % b == 0 and b % a == 0:\n        return a + b\n    if a % b == 0:\n        return sum_common_divisors(a, b % a)\n    if b % a == 0:\n        return sum_common_divisors(a % b, b)\n    return sum_common_divisors(a % b, b % a)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Function to find common divisors of a number\n    def common_divisors(n):\n        divisors = []\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divisors.append(i)\n                if i!= n // i:\n                    divisors.append(n // i)\n        return divisors\n\n    # Find common divisors of a and b\n    div_a = common_divisors(a)\n    div_b = common_divisors(b)\n\n    # Find the sum of common divisors\n    sum_div = sum(div_a) + sum(div_b)\n\n    return sum_div"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.add(i)\n    return sum(divisors)\n\nprint(sum(12, 24)) # Output: 12"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # Function to find the common divisors of two numbers\n    def common_divisors(num1, num2):\n        divisors = []\n        for i in range(1, num1+1):\n            if num1 % i == 0 and num2 % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    # Find the common divisors of two given numbers\n    div1 = common_divisors(a, b)\n    div2 = common_divisors(b, a)\n    \n    # Find the sum of the common divisors\n    sum_common = sum(div1) + sum(div2)\n    \n    # Return the sum of the common divisors\n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n\n    :param a: the first number\n    :type a: int\n    :param b: the second number\n    :type b: int\n    :return: the sum of common divisors\n    :rtype: int\n    \"\"\"\n    divisors = []\n\n    # find all divisors of a and b and store them in a list\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # sum up the common divisors and return the result\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers a and b.\n    \"\"\"\n    # initialize variables\n    divisors = set()\n\n    # find the divisors of a and b\n    for num in range(1, max(a, b) + 1):\n        if a % num == 0 and b % num == 0:\n            divisors.add(num)\n\n    # calculate the sum of the divisors\n    result = sum(divisors)\n\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Function to find the sum of common divisors of two given numbers using Sieve of Eratosthenes algorithm.\n    \"\"\"\n\n    # First, calculate the sum of common divisors of two given numbers using the Sieve of Eratosthenes algorithm\n    common_divisors = []\n    num = max(a, b)\n    while num > 0:\n        if num % a == 0 and num % b == 0:\n            common_divisors.append(num)\n        num -= 1\n\n    # Calculate the sum of common divisors of the given numbers\n    total_sum = sum(a, b)\n\n    # Subtract the sum of common divisors from the given numbers to find the difference between them\n    diff_sum = sum(a, b) - sum(a, common_divisors[-1]) - sum(b, common_divisors[-1])\n\n    # Return the sum of common divisors and the difference between the given numbers\n    return common_divisors, diff_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns their sum of common divisors.\n    '''\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # calculate the sum of common divisors using trial division\n    sum_cd = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum_cd += i\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_divisors(num1, num2):\n    \"\"\"\n    This function takes two numbers as input and returns a list of their common divisors.\n    \"\"\"\n    # Initialize a set to store the divisors of the input numbers\n    divisors = set(range(1, min(num1, num2) + 1))\n\n    # Remove the divisors common to both input numbers\n    divisors -= set([num1, num2])\n\n    return list(divisors)\n\n\ndef sum_common_divisors(num1, num2):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n    return sum(common_divisors(num1, num2))\n\n\ndef main():\n    num1 = int(input(\"Enter the first number: \"))\n    num2 = int(input(\"Enter the second number: \"))\n    print(\"The sum of common divisors of\", num1, \"and\", num2, \"is\", sum_common_divisors(num1, num2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    while y!= 0:\n        remainder = x % y\n        result += remainder\n        x = x // y\n        y = remainder\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    print(\"The product of\", x, \"and\", y, \"is\", product)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # split the string into words\n    words = str.split()\n    # initialize an empty list to store the long words\n    long_words_list = []\n    # iterate over the words in the list\n    for word in words:\n        # if the length of the word is greater than n, add it to the long_words_list\n        if len(word) > n:\n            long_words_list.append(word)\n    # return the long_words_list\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into words\n    long_words = [word for word in words if len(word) > n] # create a new list of words that are longer than n characters\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    '''\n    This function takes in a list of words and an integer n as input. It then loops through the list of words and checks whether each word is longer than n characters. If it is, the word is added to a new list. Finally, the new list is returned.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    \n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # convert the input string to a list of words\n    words = str.split()\n\n    # create an empty list to store the long words\n    long_words_list = []\n\n    # iterate over each word in the list\n    for word in words:\n        # check if the word is longer than n characters\n        if len(word) > n:\n            # add the long word to the list\n            long_words_list.append(word)\n\n    # return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    This function takes a list of words and an integer n as input, and returns a list of words that are longer than n characters from the input list.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the input string into a list of words\n    words = str.split()\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is longer than n characters\n        if len(word) > n:\n            # Print the word if it is longer than n characters\n            print(word)"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the sum of all elements in the matrix\n    total = sum(sum(row) for row in my_matrix)\n\n    # Check if the sum is equal to the product of the matrix dimensions\n    if total == sum(range(1, len(my_matrix[0]) + 1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n\n    # check if the matrix contains only integers\n    for row in my_matrix:\n        for elem in row:\n            if not isinstance(elem, int):\n                return False\n\n    # check if the matrix contains the same elements in each row and column\n    for i in range(len(my_matrix)):\n        if my_matrix[i]!= my_matrix[i].sort():\n            return False\n        if my_matrix[i]!= my_matrix[i][::-1]:\n            return False\n\n    # check if the matrix contains the same elements in the main diagonal and secondary diagonal\n    diag1 = []\n    diag2 = []\n    for i in range(len(my_matrix)):\n        diag1.append(my_matrix[i][i])\n        diag2.append(my_matrix[i][-i-1])\n    if diag1!= diag2:\n        return False\n\n    # if all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the sum of the diagonal elements of the matrix\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # Calculate the sum of the off-diagonal elements of the matrix\n    off_diagonal_sum = sum(sum(row[i] + row[j] for j in range(len(row))) for i in range(len(row)))\n\n    # Check if the diagonal and off-diagonal sums are equal\n    if diagonal_sum == off_diagonal_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix has the same dimensions as a magic square\n    if len(my_matrix)!= 3:\n        return False\n    if len(my_matrix[0])!= 3:\n        return False\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # check if all elements in the matrix are unique\n    for row in my_matrix:\n        if len(row)!= len(set(row)):\n            return False\n    \n    # check if the matrix has any number in its diagonals that is repeated\n    for i in range(3):\n        if my_matrix[i][i] == my_matrix[i][2-i] == my_matrix[2-i][i] == my_matrix[2-i][2-i]:\n            return True\n    \n    # if all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # check if the matrix is a square matrix\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n\n    # check if all elements in the matrix are the same\n    for row in my_matrix:\n        if len(set(row))!= 1:\n            return False\n\n    # check if the matrix is a magic square\n    magic_sum = sum(sum(row) for row in my_matrix)\n    for i in range(1, len(my_matrix) + 1):\n        if sum(my_matrix[j][i-1] for j in range(len(my_matrix)))!= magic_sum:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # Check if the matrix has the same number of rows and columns\n    if n!= len(set([len(row) for row in my_matrix])):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j]) for j in range(n)]\n\n    # Check if the row sums are equal to the column sums\n    if row_sums!= col_sums:\n        return False\n\n    # Check if the sum of the diagonal elements is equal to the sum of the rest of the elements\n    diag_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    for i in range(n):\n        if my_matrix[i][i]!= diag_sum:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix has the same number of rows and columns\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # Check if the current element is equal to its neighbors\n            if my_matrix[i][j]!= my_matrix[i][(j+1)%len(my_matrix[0])]:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Initialize the sum of each row and column\n    row_sums = [0] * len(my_matrix)\n    col_sums = [0] * len(my_matrix[0])\n\n    # Calculate the sum of the rows and columns\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            row_sums[i] += my_matrix[i][j]\n            col_sums[j] += my_matrix[i][j]\n\n    # Check if the sum of each row and column is equal to the sum of the matrix\n    for i in range(len(my_matrix)):\n        if row_sums[i]!= row_sums[i] or col_sums[i]!= col_sums[i]:\n            return False\n\n    # Check if the sum of the elements in the matrix is equal to the sum of the matrix\n    if sum(sum(x) for x in my_matrix)!= sum(x for x in row_sums) or sum(sum(x) for x in my_matrix)!= sum(x for x in col_sums):\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] not in range(1, len(my_matrix) + 1):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sum = [0]*len(my_matrix[0])\n    col_sum = [0]*len(my_matrix)\n    \n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            row_sum[j] += my_matrix[i][j]\n            col_sum[i] += my_matrix[j][i]\n    \n    if all(x == 0 for x in row_sum) or all(x == 0 for x in col_sum):\n        return \"Not a magic square\"\n    \n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j]!= (row_sum[j] - col_sum[i]):\n                return \"Not a magic square\"\n    \n    return \"Magic square\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    # check if the matrix has the same dimensions as a magic square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # check if the matrix has at least one row and one column that is not all zeros\n    for row in my_matrix:\n        if all(row) or all(0 in row):\n            return False\n    \n    # check if the matrix has at least one diagonal that is not all zeros\n    diag1 = [my_matrix[i][i] for i in range(len(my_matrix))]\n    diag2 = [my_matrix[i][-i-1] for i in range(len(my_matrix))]\n    if all(diag1) or all(diag2):\n        return False\n    \n    # check if the matrix has at least one submatrix that is not a magic square\n    for i in range(len(my_matrix)-3):\n        for j in range(len(my_matrix[i])-3):\n            submatrix = [my_matrix[i+k][j+k] for k in range(3)]\n            if not magic_square_test(submatrix):\n                return False\n    \n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_item = num\n            max_freq = freq[num]\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq_dict[num] += 1\n        \n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Given a list of integers, find the item with maximum frequency.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = max(counts.values())\n    max_num = None\n    for num, count in counts.items():\n        if count == max_count:\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    This function takes a list of integers and returns the item with the maximum\n    frequency in the list. The frequency of an item is the number of times it appears\n    in the list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        (int): The item with the maximum frequency in the list.\n    \"\"\"\n    # Create a dictionary to store the frequency of each item\n    freq_dict = defaultdict(int)\n\n    # Iterate over the list of integers and update the frequency of each item\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq_dict.values())\n\n    # Find the item with the maximum frequency in the dictionary\n    max_item = [key for key, value in freq_dict.items() if value == max_freq][0]\n\n    # Return the item with the maximum frequency\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # Loop through the list and increment the frequency of each item in the defaultdict\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency and return it\n    return max(freq, key=freq.get)"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the count of each item in the list\n    freq_count = defaultdict(int)\n\n    # Iterate over the list and update the count of each item\n    for num in nums:\n        freq_count[num] += 1\n\n    # Find the item with the maximum count\n    max_item = max(freq_count, key=freq_count.get)\n\n    # Return the item with the maximum count\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers and returns the item with the maximum frequency in the list.\n    '''\n    count_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        count_dict[num] += 1\n        \n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    # loop through the list and update the frequency of each item in the dictionary\n    for num in nums:\n        freq[num] += 1\n    # find the item with the maximum frequency\n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n    # return the item with the maximum frequency\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    max_item = None\n\n    for num, count in freq.items():\n        if count == max_freq:\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels and not char.islower():\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = char + reversed_str\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = []\n    \n    for i, char in enumerate(str1):\n        if char in vowels and char not in vowel_indices:\n            vowel_indices.append(i)\n    \n    if vowel_indices:\n        reversed_str = str1[:vowel_indices[0]] + ''.join(reversed(str1[i] for i in vowel_indices)) + str1[vowel_indices[-1]+1:]\n    else:\n        reversed_str = str1\n    \n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    return str1[::-1].translate(str.maketrans(\"\", \"\", vowels))"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_index = []\n    result = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_index.append(i)\n    for i in range(len(vowel_index)-1, -1, -1):\n        if i not in vowel_index:\n            result.append(str1[vowel_index.pop()])\n    return \"\".join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    result = []\n    for char in str1:\n        if char.lower() in vowels:\n            result.append(char)\n            vowel_count += 1\n    if vowel_count > 0:\n        return ''.join(result[::-1])\n    else:\n        return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a list and join it with comma\n    string_tup = ', '.join(str(i) for i in tup1)\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a list\n    lst1 = list(tup1)\n    # convert each element of the list to a string\n    str1 = ''.join([str(i) for i in lst1])\n    # return the string\n    return str1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string1 = \"\"\n    for i in tup1:\n        string1 += str(i)\n    return string1"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = str(tup1)\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    string = str(tup1)\n    # Return the string\n    return string"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    total = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n            total += num\n    return count, total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n\n    return n * (2 * factorial(n) + 1) // 3\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # function to calculate nth hexagonal number\n    def hexagonal_number(n): \n        # initialize hexagonal number\n        hex_num = 1\n        # loop through the number of hexagons\n        for i in range(1, n+1): \n            # add each hexagon to the total number\n            hex_num = hex_num + i\n        # return the total number\n        return hex_num\n    # return the nth hexagonal number\n    return hexagonal_number(n)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return hexagonal_num(n-1) + 6*hexagonal_num(n-2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n    else:\n        a = 1\n        b = 1\n        for i in range(n):\n            print(a, end=' ')\n            a, b = b, 2*a+b\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Initialize counter\n    count = 0\n\n    # Loop through the hexagonal numbers\n    while count < n:\n        # Calculate the hexagonal number\n        hexagonal = 2 * (count + 1)\n\n        # Check if the hexagonal number is prime\n        if is_prime(hexagonal):\n            print(hexagonal)\n            count += 1\n\ndef is_prime(num):\n    \"\"\"\n    Check if a given number is prime.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (5 * n ** 2) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * n - 1) * ((3 * n - 1) * (2 * n - 1) // 6)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (5 * (n ** 2) - 3 * n + 6) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 2 * n * (n + 1) - 1"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))\n    for num in nums:\n        count[num] += 1\n    non_zero_count = sum(count)\n    zero_count = sum(count[0:len(count)//2])\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    return non_zero_count/zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i')\n    non_zeroes = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeroes.append(1)\n        else:\n            non_zeroes.append(1)\n\n    zero_count = float(sum(zeroes)) / sum(non_zeroes)\n    print(\"The ratio of zeroes to non-zeroes in the array is:\", zero_count)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to an array of characters\n    nums_array = array('i', nums)\n    # Initialize the count of non-zeroes and zeroes\n    non_zero_count = 0\n    zero_count = 0\n    # Loop through the array and count the number of non-zeroes and zeroes\n    for num in nums_array:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    # Calculate the ratio of non-zeroes to zeroes\n    ratio = non_zero_count / zero_count\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array to store the non-zero values\n    non_zero_array = array('i', [0])\n\n    # Loop through the input array and update the non-zero array\n    for num in nums:\n        if num!= 0:\n            non_zero_array.append(num)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_count = len(nums) - len(non_zero_array)\n    non_zero_count = len(nums)\n    ratio = 0 if non_zero_count == 0 else zero_count / non_zero_count\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0 for _ in range(len(nums))])\n    for num in nums:\n        if num == 0:\n            zeros.itemset(zeros.index(0), 1)\n    non_zeros = len(nums) - zeros.count(0)\n    return non_zeros / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_ones = 0\n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_ones += 1\n    return num_zeros / num_ones"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    n = len(nums)\n    n_0 = 0\n    for i in range(n):\n        if nums[i] == 0:\n            n_0 += 1\n    ratio = n_0 / n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            count[count.index(num)] += 1\n    \n    non_zero_count = 0\n    for num in count:\n        non_zero_count += num\n    \n    if non_zero_count == 0:\n        return 0\n    else:\n        return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    non_zeros = sum(zeros)\n    zero_ratio = non_zeros/len(nums)\n    return zero_ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Function to check if a number can be represented as sum of powers of 2\n    def is_powers_of_two(n):\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                count += 1\n            n = n >> 1\n        return count == 0\n    \n    # Check if the given number can be represented as sum of powers of 2\n    if n == 0:\n        return True\n    elif is_powers_of_two(n) or is_powers_of_two(~n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_two(num):\n        '''\n        Helper function to check if a number is a power of two or not.\n        '''\n        return num!= 0 and (num & (num - 1)) == 0\n    \n    def find_power_of_two(num):\n        '''\n        Helper function to find the power of two that is smaller than or equal to the given number.\n        '''\n        for i in range(1, num + 1):\n            if is_power_of_two(i):\n                return i\n    \n    def check_sum_of_powers_of_two(num):\n        '''\n        Main function to check if the given number can be represented as sum of non-zero powers of 2 or not.\n        '''\n        power_of_two = find_power_of_two(num)\n        return power_of_two * power_of_two == num\n    \n    if check_sum_of_powers_of_two(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n!= 0:\n        if n % 2 == 0:\n            count += 1\n        n = n // 2\n    if count > 0:\n        return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Find the largest power of 2 that is less than or equal to n\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    # Check if the number is divisible by the largest power of 2\n    if n % power_of_2 == 0:\n        # Check if the difference between n and the sum of non-zero powers of 2 is less than or equal to half the power of 2\n        half_power_of_2 = power_of_2 // 2\n        if abs(n - sum_of_non_zero_powers_of_2(n)) <= half_power_of_2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check for base case\n    if n == 1:\n        return True\n\n    # check for subtraction by 1\n    if n == 2:\n        return True\n\n    # check if n can be represented as sum of powers of 2\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            if n//i == i:\n                return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the given number is even or not\n    if n % 2 == 0:\n        return False\n\n    # Initialize a variable to store the sum of non-zero powers of 2\n    sum_of_powers = 0\n\n    # Initialize a variable to store the count of non-zero powers of 2\n    count = 0\n\n    # Iterate till the square root of the given number\n    for i in range(2, int(n**0.5)+1):\n        # If the square of the current number is less than the given number, then it is not possible to represent it as sum of powers of 2\n        if n < i**2:\n            break\n\n        # Check if the current number is a power of 2 and add it to the sum and count variables\n        if n % i == 0:\n            sum_of_powers += i\n            count += 1\n\n    # If the count of non-zero powers of 2 is less than 2, then it is not possible to represent it as sum of powers of 2\n    if count < 2:\n        return False\n\n    # Return True if the given number is representable as sum of powers of 2, False otherwise\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initializing a variable to store the sum of powers of 2\n    power_sum = 0\n    \n    # Looping through the digits of the input number\n    for digit in str(n):\n        # Converting the digit to an integer\n        digit = int(digit)\n        \n        # Checking if the digit is non-zero\n        if digit == 0:\n            continue\n        # If the digit is non-zero, we add it to the power sum\n        else:\n            power_sum += digit ** 2\n    \n    # Checking if the power sum is equal to the input number\n    if power_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # initialize count and sum to 0\n    count = 0\n    sum = 0\n    # loop through all possible powers of 2\n    for i in range(2, int(n**0.5)+1):\n        # check if the given number can be represented as sum of powers of 2\n        if n == i**2 + sum:\n            count += 1\n            sum += i\n    # check if the given number can be represented as sum of powers of 2\n    if count > 0:\n        print(\"The number can be represented as sum of non-zero powers of 2\")\n    else:\n        print(\"The number can't be represented as sum of non-zero powers of 2\")"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # To check whether a number is power of 2 or not\n    def is_power_of_two(num):\n        return (num & (num - 1)) == 0\n    \n    # To check whether a number is sum of powers of 2 or not\n    def is_sum_of_powers_of_two(num):\n        return all(num & (2 ** i)!= 0 for i in range(32))\n    \n    # Main function\n    if is_power_of_two(n):\n        return \"Number is a power of 2\"\n    elif is_sum_of_powers_of_two(n):\n        return \"Number is a sum of non-zero powers of 2\"\n    else:\n        return \"Number is not a sum of non-zero powers of 2\""
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n\n    Parameters:\n    r (float): The radius of the circle\n\n    Returns:\n    float: The circumference of the circle\n    \"\"\"\n    circumference = 2 * 3.14159 * r  # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # formula for circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Calculating the circumference of the circle using the formula:\n    # circumference = 2*pi*r\n    # where pi is a mathematical constant approximately equal to 3.14159\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # Formula for finding the circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # formula for circumference\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if type(item) == list:\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    result = set()\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, int):\n                result.add(item)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        result.extend(sublist)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([num for sublist in test_list for num in sublist])"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for sub_item in item:\n            flattened_list.append(sub_item)\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    # initialize a list to store the indices of the sorted elements\n    sorted_indices = []\n\n    # loop through each element in the list\n    for i in range(len(nums)-1, 0, -1):\n        # find the index of the largest element to its right\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # swap the elements at indices i and max_index\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # append the index of the sorted element to the sorted_indices list\n        sorted_indices.append(i)\n\n    return sorted_indices"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the unsorted part of the list from i to n-1\n        for j in range(i, n-1, -1):\n            nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # find the length of the list\n    n = len(nums)\n    \n    # create an empty list to store the sorted numbers\n    sorted_nums = []\n    \n    # loop through the numbers, starting from the last number and pancaking it\n    for i in range(n-1, -1, -1):\n        \n        # pancake the current number i\n        for j in range(i, 0, -1):\n            if nums[j] > nums[j-1]:\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n        \n        # add the sorted number to the sorted_nums list\n        sorted_nums.append(nums[i])\n    \n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # create a list of numbers from 1 to n\n    pancakes = [i for i in range(1, n+1)]\n    # while there are more pancakes than elements in the list\n    while len(pancakes) > 0:\n        # find the index of the element with the smallest pancake\n        min_pancake = min(pancakes)\n        # remove the smallest pancake from the list\n        pancakes.remove(min_pancake)\n        # find the index of the element with the largest pancake\n        max_pancake = len(nums) - pancakes[-1]\n        # remove the largest pancake from the list\n        pancakes.remove(max_pancake)\n        # swap the elements at the two indices\n        nums[min_pancake-1], nums[max_pancake-1] = nums[max_pancake-1], nums[min_pancake-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # create a list of tuples containing the index and value of each element\n    indexed_nums = [(i, num) for i, num in enumerate(nums)]\n    # sort the list of tuples by value in descending order\n    indexed_nums.sort(key=lambda x: x[1], reverse=True)\n    # create a new list containing only the sorted values\n    sorted_nums = [num for i, num in indexed_nums]\n    # return the sorted list\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # We will use a variation of the selection sort algorithm to sort the list.\n    # Selection sort works by repeatedly finding the minimum element from the unsorted part of the list,\n    # and swapping it with the first element of the unsorted part.\n    # We continue this process until the list is sorted.\n    # We do this n-1 times, as each iteration will sort the entire list.\n    for i in range(n-1):\n        # Find the index of the minimum element in the unsorted part of the list\n        min_index = i\n        for j in range(i+1, n):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        # Swap the minimum element with the first element of the unsorted part\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    # Step 1: Reverse the list\n    for i in range(n//2):\n        j = n-i-1\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    # Step 2: Perform pancake sorting\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the remaining unsorted part of the array\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the element at the beginning of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    def swap(nums, i, j):\n        \"\"\"\n        Swap two elements in the list.\n        \"\"\"\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def bake_pancakes(nums, k):\n        \"\"\"\n        Bake the pancakes.\n        \"\"\"\n        for i in range(len(nums)):\n            swap(nums, i, k)\n            k -= 1\n            if k == 0:\n                return True\n        return False\n\n    def pancake_sort_helper(nums):\n        \"\"\"\n        Recursive helper function for the pancake sort algorithm.\n        \"\"\"\n        # Base case: list has one or zero elements\n        if len(nums) <= 1:\n            return nums\n\n        # Calculate the largest element in the list\n        largest = max(nums)\n\n        # Find the index of the first element greater than the largest\n        for i in range(len(nums)):\n            if nums[i] > largest:\n                index = i\n                break\n\n        # Bake the pancakes from the end of the list down to the index of the largest element\n        if bake_pancakes(nums, index):\n            # The pancakes are baked correctly, so we can recursively sort the rest of the list\n            return pancake_sort_helper(nums[:index] + nums[index+1:])\n        else:\n            # The pancakes were not baked correctly, so we need to recurse from the index of the largest element up to the beginning of the list\n            return pancake_sort_helper(nums[index:] + nums[:index])\n\n    # Call the pancake sort helper function and return the sorted list\n    return pancake_sort_helper(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def helper(nums, n):\n        if n == 1:\n            return nums\n        else:\n            helper(nums, n-1)\n            for i in range(n):\n                if i!= n-1:\n                    nums[i], nums[n-1-i] = nums[n-1-i], nums[i]\n            return nums\n    \n    nums = helper(nums, len(nums))\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n\n    # Initialize count variable to zero\n    count = 0\n\n    # Loop through each item in each list\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                # Check if items at the current positions are the same\n                if list1[i] == list2[j] and list2[j] == list3[k]:\n                    count += 1\n\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the number of items that are identical in the same position of each of the lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    # initialize count variable to 0\n    count = 0\n\n    # loop through each item in the tuple\n    for item in Input:\n\n        # check if the item is a list\n        if type(item) == list:\n            # increment count variable if it is a list\n            count += 1\n\n    # return the count of lists\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n\n    Args:\n    arr: A list of numbers\n\n    Returns:\n    The maximum absolute difference between any two elements in the array.\n    \"\"\"\n\n    # Initialize variables to keep track of minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Iterate through the array and find the minimum and maximum values\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # Calculate the maximum absolute difference between any two elements in the array\n    max_diff = max_val - min_val\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n\n    if len(arr) < 2:\n        return None\n\n    max_diff = float('-inf')\n    min_val = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n        else:\n            diff = abs(max_val - min_val)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff_arr = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                diff = abs(arr[i] - arr[j])\n                diff_arr.append(diff)\n    return max(diff_arr)"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    arr.sort()\n    return abs(arr[-1] - arr[0])"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are invertible\n    if a*b == 0:\n        return None\n\n    # compute the discriminant\n    delta = b**2 - 4*a*n\n\n    # check if there is a solution\n    if delta < 0:\n        return None\n\n    # compute the two solutions\n    x1 = (-b + delta**0.5)/2/a\n    x2 = (-b - delta**0.5)/2/a\n    y1 = x1/b\n    y2 = x2/b\n\n    return (x1, y1), (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = int((-b + (b**2 - 4*a*n)**0.5)/2/a)\n    y = int((-b - (b**2 - 4*a*n)**0.5)/2/a)\n    if x**2 + y**2 == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Calculate the determinant of the matrix A with a and b as the entries\n    det = a * b - a * n / b\n    if det == 0:\n        return None\n\n    # Calculate the determinant of the matrix A^T with a and b as the entries\n    det_transpose = a * b - b * n / a\n    if det_transpose == 0:\n        return None\n\n    # Calculate the determinant of the matrix C with a and b as the entries\n    c = (a * b) / det\n    if c == 0:\n        return None\n\n    # Calculate the determinant of the matrix D with a and b as the entries\n    d = (b * b) / det\n\n    # Calculate the inverse of the matrix C\n    c_inv = 1 / c\n\n    # Calculate the determinant of the matrix A^2 + D^2 * C^2\n    det_root = (a * a + d * d) * c_inv\n\n    # Calculate the square root of the determinant of the matrix A^2 + D^2 * C^2\n    det_sqrt = det_root ** 0.5\n\n    # Calculate the x and y coordinates of the solution\n    x = -c / det_root\n    y = -d / det_sqrt\n\n    return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Find the discriminant\n    disc = b**2 - 4*a*n\n    \n    # If the discriminant is zero, the equation has two real solutions\n    if disc == 0:\n        x1 = -b/(2*a)\n        x2 = -b/(2*a)\n        return (x1, x2)\n    \n    # If the discriminant is positive, the equation has two complex solutions\n    elif disc > 0:\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n        return (x1, x2)\n    \n    # If the discriminant is negative, there is no solution\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n+1):\n        if a*i + b*i == n:\n            return (i, n//i)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    x1 = -b // a\n    y1 = -a * x1 // b\n    x2 = b // a\n    y2 = a * x2 // b\n    if n == x1 * y1 + y2 * x2:\n        return (x1, y1)\n    elif n == x2 * y2 + y1 * x1:\n        return (x2, y2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x_1 = (-b + (n // a)) // b  # x should be such that -b + n/a is a multiple of b\n    x_2 = (-b - (n // a)) // b  # x should be such that -b - n/a is a multiple of b\n\n    if x_1 == 0 or x_2 == 0:\n        return None  # no solution if either x is 0\n\n    y_1 = a * x_1 + b * x_1  # y should be the solution to ax + by = n\n    y_2 = a * x_2 + b * x_2\n\n    if y_1 == n or y_2 == n:\n        return (x_1, x_2)\n    else:\n        return None  # no solution if either y is not equal to n"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize variables\n    x, y = None, None\n    \n    # Check if a, b, and n are integers\n    if not all(isinstance(x, int) for x in [a, b, n]):\n        return None\n    \n    # Check if a, b, and n are positive integers\n    if any(x <= 0 for x in [a, b, n]):\n        return None\n    \n    # Check if a, b, and n are relatively prime to each other\n    if a * b > n:\n        return None\n    \n    # Calculate the discriminant\n    d = b * b - 4 * a * n\n    \n    # Check if the discriminant is non-zero\n    if d == 0:\n        x = -b / (2 * a)\n        y = x\n        return (int(x), int(y))\n    \n    # Check if the discriminant is positive\n    elif d > 0:\n        x1 = (-b + d ** 0.5) / (2 * a)\n        x2 = (-b - d ** 0.5) / (2 * a)\n        \n        # Check if both solutions are integers\n        if all(isinstance(x, int) for x in [x1, x2]):\n            y1 = x1\n            y2 = x2\n            return (int(x1), int(y1), int(x2), int(y2))\n    \n    # If the discriminant is negative, no solution exists\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    This function takes three parameters - a, b and n. It uses the quadratic formula to find the solution for ax + by = n. If a, b, n are given and there exists a solution, it returns the values of x and y as a tuple. If no solution exists, it returns None.\n    \"\"\"\n    # Find the discriminant of the quadratic equation\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        return None\n    \n    # Find the roots of the discriminant\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n    \n    # Check if both roots are real and different\n    if root1.is_integer() and root2.is_integer():\n        return (root1, root2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Use the quadratic formula to find the roots of the equation ax^2 + bx + c = 0\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        # No solution exists\n        return None\n    elif discriminant == 0:\n        # One solution exists\n        x = -b/(2*a)\n        return (x, x)\n    else:\n        # Two solutions exist\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Iterate through list1\n    for i in range(len(list1)):\n        # If the element is present in list2, remove it\n        if list1[i] in list2:\n            del list1[i]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Iterate over the first list\n    for i in range(len(list1)):\n        # Check if the current element is present in the second list\n        if list1[i] in list2:\n            # Remove the current element from the first list\n            list1.pop(i)\n            # Decrease the index of all elements after the current one\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [x for x in list1 if x not in list2]\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # iterate through the first list and remove any element that is present in the second list\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i = i - 1 # decrement the index to avoid IndexError\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    for item in list2:\n        if item in list1:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    sum = 0\n    i = 0\n\n    while i <= n // 2:\n        sum += n - 2 * i\n        i += 1\n\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        return (n // 2) * (n - 1)\n    else:\n        return (n // 2) * (n - 2) + n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 4:\n        return 0\n    result = 0\n    for i in range(n // 2):\n        result += (n - 2 * i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series = []\n    for i in range(n//2):\n        series.append((n-2*i))\n    series.reverse()\n    return sum(series)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_value = 0\n    i = 0\n    \n    while n - 2*i >= 0:\n        sum_value += n - 2*i\n        i += 1\n        \n    return sum_value"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum to 0\n    total_sum = 0\n    # Loop through i from 0 to n // 2\n    for i in range(n // 2):\n        # Calculate the sum for i\n        current_sum = n - (2 * i)\n        # Add the current sum to the total sum\n        total_sum += current_sum\n    return total_sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2 * tan(pi/l))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2 * (tan(pi/l) + 1) + s**2 * tan(pi/l)) / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += (s * (s - pi) * tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": ""
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        r = s/2 * tan(i*pi/l)\n        area += r\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s/tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using Heron's formula\n    area = (s * l * tan(pi/l)) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s**2) / (4 * (tan(pi/l) ** 2))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s/2) * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2 * pi / l * i\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return (sum(divisors) == n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Compute the divisors of n\n    divs = set([i for i in range(1, n+1) if n % i == 0])\n    \n    # Compute the sum of the divisors of n\n    div_sum = sum(divs)\n    \n    # Determine if the sum of the divisors of n is equal to n\n    if div_sum == n:\n        print(\"The sum of the divisors of\", n, \"is equal to\", div_sum)\n    else:\n        print(\"The sum of the divisors of\", n, \"is not equal to\", div_sum)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    sum_div = sum(divisors)\n    if sum_div == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n\n    div_sum = sum(set(map(int, str(n))))\n\n    # Return True if the sum of the divisors is the same as n, False otherwise\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Function to calculate the sum of all the divisors of a number\n    def sum_divisors(num): \n        divisors = [] \n        for i in range(1, int(math.sqrt(num))+1): \n            if num % i == 0: \n                if i!= num // i: \n                    divisors.append(i) \n                    divisors.append(num // i) \n        return sum(divisors)\n\n    # Check if the sum of the divisors is the same\n    div_1 = sum_divisors(n)\n    div_2 = sum_divisors(2*n)\n    if div_1 == div_2: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if n // i!= i:\n                div_sum += n // i\n    \n    # Check if the sum of the divisors is the same for both n and its mirror image\n    return div_sum == (n*n) + (n*(-1)) + (-n*n) + (-n*(-1))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return div_sum(n//2)\n    else:\n        return (n // 2) + (div_sum(n//2))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [1] + [i for i in range(2, int(math.sqrt(n)) + 1) if n % i == 0] + [n]\n    divisor_sum = sum(divisors)\n    return divisor_sum == sum(divisors[:n])"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    def sum_of_divisors(num):\n        '''\n        Write a function to calculate the sum of the divisors of a given integer.\n        '''\n        div_sum = 0\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                div_sum += i\n                if i!= num // i:\n                    div_sum += num // i\n        return div_sum\n    \n    div1 = sum_of_divisors(n)\n    div2 = sum_of_divisors(n**2)\n\n    if div1 == div2:\n        print(f\"The sum of the divisors of {n} and {n**2} are the same.\")\n    else:\n        print(f\"The sum of the divisors of {n} and {n**2} are not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            div_sum += i + n // i\n    \n    # Check if div_sum is equal to n \n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == chr(ord('a') + count):\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the input string to lowercase and remove any non-letter characters\n    str1 = ''.join(c.lower() for c in str1 if c.isalpha())\n\n    # Initialize a dictionary to store the count of each letter\n    char_counts = {}\n\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is a letter, increment its count in the dictionary\n        if char.isalpha():\n            if char in char_counts:\n                char_counts[char] += 1\n            else:\n                char_counts[char] = 1\n\n    # Loop through the English alphabet and count the occurrences of each letter in the input string\n    for i, char in enumerate('abcdefghijklmnopqrstuvwxyz'):\n        if char in char_counts:\n            char_counts[char] += str1.lower().count(char)\n\n    # Return the count of each letter that occurs at the same position in the English alphabet as in the input string\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    \n    for i in range(26):\n        if str1.lower().count(english_alphabet[i]) > 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    # Convert string to lowercase\n    str1 = str1.lower()\n\n    # Initialize variables\n    char_count = {}\n\n    # Loop through the string\n    for i, char in enumerate(str1):\n        # Check if the character is in the English alphabet\n        if 'a' <= char <= 'z':\n            # Check if the character is already in the dictionary\n            if char in char_count:\n                # Increment the count of the character at the current position\n                char_count[char] += 1\n            else:\n                # Add the character to the dictionary with a count of 1\n                char_count[char] = 1\n\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1.lower()[i] == 'a':\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the input string to lowercase to make the comparison case-insensitive\n    str1 = str1.lower()\n    \n    # Initialize the counter variable\n    count = 0\n    \n    # Iterate through the input string\n    for i in range(len(str1)):\n        # Get the current character\n        curr_char = str1[i]\n        \n        # Check if the current character is a vowel (a, e, i, o, u)\n        if curr_char in ['a', 'e', 'i', 'o', 'u']:\n            # If the current character is a vowel, check if the next character is also a vowel\n            if i < len(str1) - 1 and str1[i+1] in ['a', 'e', 'i', 'o', 'u']:\n                # If the next character is also a vowel, increment the counter variable\n                count += 1\n                \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_counts = {}\n\n    # Iterate through the string and count the number of characters at each position\n    for i in range(26):\n        char_counts[i] = str1.count(chr(i+97))\n\n    # Sort the dictionary by values in descending order\n    sorted_counts = dict(sorted(char_counts.items(), key=lambda item: item[1], reverse=True))\n\n    # Print the sorted dictionary\n    print(sorted_counts)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    # Convert the input string to lowercase to ignore case\n    str1 = str1.lower()\n\n    # Create a dictionary to store the frequency of each character\n    char_frequency = {}\n\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it with a frequency of 1\n        if char not in char_frequency:\n            char_frequency[char] = 1\n        # If the character is already in the dictionary, increment its frequency by 1\n        else:\n            char_frequency[char] += 1\n\n    # Initialize a variable to store the count of characters with the same position in the English alphabet\n    count = 0\n\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is a vowel or a consonant, check if the character is the same position in the English alphabet\n        if char in 'aeiou' or (char >= 'a' and char <= 'z'):\n            # Check if the character is at the same position in the English alphabet as the current character\n            if char_frequency[char] == str1.count(char):\n                # If it is, increment the count\n                count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n\n    for char in str1:\n        if char.lower() in alphabet.lower():\n            count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1 \n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pair_count += 1\n    return even_pair_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n-1):  # check if the binary representation of n has only one bit set\n        n += 1\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # loop from 1 to n\n    for i in range(1, n + 1):\n        # check if i is a power of 2\n        if i & (i-1) == 0:\n            return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # calculate the next power of 2 \n    power = 1\n    while power < n: \n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    # Check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n\n    # Initialize the minimum value and maximum value of the search range\n    min_val = 1\n    max_val = n\n\n    # Perform binary search\n    while min_val < max_val:\n        mid = (min_val + max_val) // 2\n        if mid >= n:\n            max_val = mid\n        else:\n            min_val = mid + 1\n\n    return 2**min_val"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        while n < 2**32:\n            n <<= 1\n        return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # check if the number is already a power of 2\n    if (n & (n-1)) == 0:\n        return n\n    \n    # find the highest bit set to 1\n    highest_bit = 1\n    while highest_bit < n:\n        highest_bit <<= 1\n    \n    # return the next highest power of 2\n    return highest_bit"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    # check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n    \n    # find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    if n <= 0:\n        return None\n    \n    if n == 1:\n        return 1\n    \n    # find the smallest power of 2 greater than or equal to n\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if mid * mid <= n:\n            left = mid + 1\n        else:\n            right = mid\n    \n    # check if the smallest power of 2 greater than or equal to n is a power of 2\n    if n <= (left - 1) * (left - 1):\n        return left * left\n    \n    return None"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(lst, x): \n    '''\n    This function takes two arguments:\n    lst: A list of numbers.\n    x: A number to be searched in the list.\n\n    The function counts the number of occurrences of x in the list lst, and returns it as an integer.\n    '''\n\n    count = 0\n    for num in lst: \n        if num == x: \n            count += 1\n\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(lst, x):\n    \"\"\"\n    Counts the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(lst, x):\n    '''\n    This function takes two arguments:\n    lst: the list of numbers to search in\n    x: the number to search for\n    It returns the number of occurrences of x in lst.\n    '''\n    count = 0\n    for num in lst:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n    list1 (list): A list of numbers to find the sum within the specified range.\n    m (int): The first index of the range.\n    n (int): The second index of the range.\n\n    Returns:\n    sum_range (int): The sum of numbers within the specified range.\n\n    \"\"\"\n\n    sum_range = 0\n    \n    for i in range(m, n+1):\n        sum_range += list1[i]\n\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize variables\n    sum_list = 0\n\n    # iterate through the list using a for loop\n    for i in range(m, n+1):\n        # check if the current number is in the range specified by the indices\n        if i >= 0 and i < len(list1):\n            # add the current number to the sum list\n            sum_list += list1[i]\n\n    # return the sum list\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list += i\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the indices are valid\n    if m < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n    # Calculate the sum of numbers in the specified range\n    sum_range = sum(list1[m:n+1])\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the list\n    for i in range(m, n+1):\n        # Check if the current number is in the range specified by the indices\n        if i >= len(list1):\n            break\n        elif i < 0:\n            continue\n        else:\n            # Add the current number to the sum\n            sum += list1[i]\n    # Return the sum of numbers in the specified range\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        else:\n            sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i-1]\n    return sum_range\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # Formula for finding the perimeter of a pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * math.sqrt(5) * a\n    perimeter = circumference * 5\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (5*a**2)/4\n    return s"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculating the semi-perimeter\n    semi_perimeter = 5 * a\n\n    # Using the law of cosines to calculate the area of the triangle\n    area = (semi_perimeter**2) / (4 * math.tan(math.pi/5))\n\n    # Calculating the perimeter of the pentagon\n    perimeter = 5 * a * math.tan(math.pi/5)\n\n    # Returning the result\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] == \"std\":\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    \n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n        \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '')\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = test_tuple[0]\n    for element in test_tuple:\n        if not isinstance(element, type(first_element)):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # get the first element of the tuple\n    first_element = test_tuple[0]\n    # loop through the remaining elements of the tuple\n    for element in test_tuple[1:]:\n        # check if the current element has same data type as the first element\n        if type(element)!= type(first_element):\n            return False\n    # if all the elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if data_type!= type(test_tuple[i]):\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set(type(elem) for elem in test_tuple)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initializing the data type of first element\n    data_type = type(test_tuple[0])\n    # looping through the tuple\n    for i in range(len(test_tuple)):\n        # checking if the element data type is same as the first element\n        if type(test_tuple[i])!= data_type:\n            return False\n    # if all elements have same data type, function returns True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # get the type of the first element in the tuple\n    first_element_type = type(test_tuple[0])\n    # iterate over the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the type of each element is the same as the first element\n        if type(element)!= first_element_type:\n            return False\n    # if all the elements have the same type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_types = set()\n\n    for element in test_tuple:\n        data_types.add(type(element))\n\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Create a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Iterate over the array and count the occurrences of each element\n    for i in range(n):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n\n    # Iterate over the dictionary and check if the count is more than n/2 for each element\n    for key in count_dict:\n        if count_dict[key] > n/2:\n            return True\n\n    # If none of the elements are majority elements, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif count > 0:\n            count -= 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n / 2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif arr[i] < x:\n            count -= 1\n    \n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function counts the number of set bits in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    while n!= 0: \n        if n & 1 == 1: \n            count += 1 \n        n = n >> 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(string):\n    # create a new string with only the odd values\n    result = ''\n    for i in range(len(string)):\n        if i % 2!= 0:\n            result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_values.append(str[i])\n    return \"\".join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    return ''.join(filter(lambda x: x % 2 == 1, str))"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    # Loop through each character in the input string\n    for char in str:\n        # If the index value is odd, append the character to the result string\n        if len(str) % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # split the string into a list of characters\n    char_list = list(str)\n    \n    # loop through the list of characters and remove the odd values\n    for i in range(len(char_list)):\n        if i % 2!= 0:\n            char_list.pop(i)\n    \n    # join the list of characters back into a string\n    result = ''.join(char_list)\n    \n    # return the result\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    # initialize an empty list to store the odd indices\n    odd_indices = []\n\n    # loop through each character in the string\n    for i in range(len(str)):\n        # if the current index is odd, append it to the odd_indices list\n        if i % 2!= 0:\n            odd_indices.append(i)\n\n    # loop through the list of odd indices and replace the characters with spaces\n    for i in odd_indices:\n        str = str[:i] +'' + str[i+1:]\n\n    # return the modified string\n    return str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    return ''.join([chr(int(ord(char)) % 256) if i % 2!= 0 else char for i, char in enumerate(str)])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a <= b <= c:\n        return a\n    elif b <= a <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function returns True if all the bits are set in the given range and False otherwise.\n\n    Parameters:\n    n (int): An integer representing the number of bits in the range.\n    l (int): An integer representing the starting bit of the range.\n    r (int): An integer representing the ending bit of the range.\n\n    Returns:\n    bool: True if all the bits are set in the given range and False otherwise.\n\n    Example:\n    >>> all_Bits_Set_In_The_Given_Range(10, 0, 9)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(10, 0, 10)\n    False\n    \"\"\"\n    if l < 0 or r >= n or l > r:\n        return False\n    if r - l + 1 == n:\n        return True\n    return all_Bits_Set_In_The_Given_Range(n, l + 1, r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1 << (r-l+1)) - 1   # get the bit mask for the range\n    result = mask & n   # apply the bit mask to n to get the result\n    if result == 0:   # if the result is 0 then all bits are set in the range\n        return True\n    else:   # if the result is not 0 then all bits are unset in the range\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_set = True\n    for i in range(l, r+1):\n        if i & (1 << n)!= 0:\n            all_set = False\n            break\n    return all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize a variable 'unset' to True\n    unset = True\n\n    # Iterate from the leftmost bit to the rightmost bit\n    for bit in range(l, r + 1):\n        # Check if the current bit is set or unset\n        if n & (1 << bit):\n            # If it's set, unset the variable\n            unset = False\n            # Exit the loop\n            break\n\n    # Return the value of the unset variable\n    return unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function checks whether all the bits are unset in the given range or not.\n    '''\n    # To check whether all bits are set or not, we need to check whether all the numbers between l and r (inclusive) are equal to n\n    all_bits_set = True\n    for i in range(l, r+1):\n        if i!= n:\n            all_bits_set = False\n            break\n    \n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # converting the given range to binary form\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n\n    # checking if all the bits in the given range are set or unset\n    for i in range(len(binary_l)):\n        if binary_l[i] == '1' and binary_r[i] == '1':\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif l <= 0 and r >= (1 << n):\n        return True\n    elif l > 0 and r >= (1 << n):\n        return all_Bits_Set_In_The_Given_Range(n-1, l-1, r)\n    else:\n        return all_Bits_Set_In_The_Given_Range(n-1, l, r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert integers to binary strings and calculate their length\n    n_str = bin(n)[2:]\n    l_str = bin(l)[2:]\n    r_str = bin(r)[2:]\n    # initialize the count of set bits as 0\n    count = 0\n    # loop through the binary strings and compare their lengths\n    for i in range(min(len(n_str), len(l_str))):\n        if n_str[i] == '1' and l_str[i] == '0' and r_str[i] == '1':\n            # if the length is equal, the bit at this position is set\n            count += 1\n    # check if the count is equal to the length of the binary strings\n    if count == len(n_str):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    if l > r:\n        return True\n    for i in range(l, r+1):\n        if n & (1<<i)!= (1<<i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Calculate the number of bits in the integer\n    num_bits = len(bin(n)[2:])\n\n    # Initialize the result variable\n    result = True\n\n    # Iterate over all possible combinations of unset bits\n    for i in range(2 ** num_bits):\n        # Convert the integer to binary string and extract the i-th bit\n        bit_str = '{0:0{1}b}'.format(i, num_bits)\n        bit = int(bit_str[-1], 2)\n\n        # Check if the bit is set in the given range\n        if bit == 1 and l <= bit <= r:\n            result = False\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] < 0:\n            i += 1\n        elif arr[i] > 0:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n\n    for k in range(i, j+1):\n        if arr[k] < 0:\n            temp = arr[i]\n            arr[i] = arr[k]\n            arr[k] = temp\n            i += 1\n        elif arr[k] > 0:\n            temp = arr[j]\n            arr[j] = arr[k]\n            arr[k] = temp\n            j -= 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Create an empty list to store the new array\n    new_arr = []\n\n    # Loop through the first n elements of the original array\n    for i in range(n):\n        # Append the current element to the new array\n        new_arr.append(arr[i])\n\n    # Loop through the remaining elements of the original array\n    for i in range(n, len(arr)):\n        # Check if the current element is negative\n        if arr[i] < 0:\n            # If it is, check if it has already been appended to the new array\n            for j in range(n):\n                if arr[i] == new_arr[j]:\n                    # If it has, skip it and continue to the next element\n                    continue\n            # If it hasn't been appended yet, append it to the new array\n            new_arr.append(arr[i])\n\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists to store the negative and positive elements\n    negative = []\n    positive = []\n\n    # iterate over the input array and add the elements to the appropriate lists\n    for element in arr:\n        if element < 0:\n            negative.append(element)\n        else:\n            positive.append(element)\n\n    # sort the negative and positive lists using the merge sort algorithm\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result.extend(left[i:])\n        result.extend(right[j:])\n        return result\n\n    negative = merge_sort(negative)\n    positive = merge_sort(positive)\n\n    # merge the negative and positive lists into the original input array\n    result = []\n    i = j = 0\n    while i < len(negative) and j < len(positive):\n        if negative[i] < positive[j]:\n            result.append(negative[i])\n            i += 1\n        else:\n            result.append(positive[j])\n            j += 1\n    result.extend(negative[i:])\n    result.extend(positive[j:])\n\n    # return the final result\n    return result[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Step 1: Create two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # Step 2: Iterate through the array\n    for i in range(n):\n        # If the current element is negative, add it to the negative list\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        # If the current element is positive, add it to the positive list\n        else:\n            pos_list.append(arr[i])\n\n    # Step 3: Concatenate the negative and positive lists\n    new_list = neg_list + pos_list\n\n    # Step 4: Return the new list\n    return new_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists to hold the negative and positive elements\n    neg_list = []\n    pos_list = []\n    # iterate through the array\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n    # sort the negative and positive lists in descending order\n    neg_list.sort(reverse=True)\n    pos_list.sort()\n    # concatenate the negative and positive lists and the remaining elements to get the final result\n    result = neg_list + pos_list + arr[n:]\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize two pointers, one for positive and one for negative\n    pos = 0\n    neg = n - 1\n    \n    # iterate through the array until we reach the end\n    while pos < n:\n        # check if the current element is positive\n        if arr[pos] >= 0:\n            # if it is, increment the positive pointer\n            pos += 1\n        else:\n            # if it is negative, swap it with the first element of the negative section\n            arr[pos], arr[neg] = arr[neg], arr[pos]\n            # increment the negative pointer\n            neg -= 1\n            \n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n\n    # Initialize two empty lists for positive and negative values\n    pos_list = []\n    neg_list = []\n\n    # Iterate through the array and add each value to the appropriate list\n    for val in arr:\n        if val > 0:\n            pos_list.append(val)\n        else:\n            neg_list.append(val)\n\n    # Sort the positive and negative lists in ascending order\n    pos_list.sort()\n    neg_list.sort()\n\n    # Combine the two lists into a single list and re-arrange the first n elements\n    arr_new = neg_list + pos_list[:n]\n\n    return arr_new"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create two lists to store positive and negative elements\n    pos_list = []\n    neg_list = []\n\n    # Iterate over the array and add elements to the corresponding list\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n\n    # Sort the positive list in ascending order\n    pos_list.sort()\n\n    # Concatenate the positive and negative lists into a single list and return it\n    return neg_list + pos_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # Create a set of all negative numbers in the array\n    neg_set = set(arr[:n])\n    \n    # Remove negative numbers from the array\n    arr = [x for x in arr if x not in neg_set]\n    \n    # Add negative numbers to the beginning of the array\n    arr = neg_set.union(arr)\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers: left and right\n    left = 0\n    right = n - 1\n    \n    # Iterate through the array until left pointer reaches the right pointer\n    while left < right:\n        # If the element at the left pointer is negative, swap it with the element at the right pointer\n        if arr[left] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n        \n        # Move the left pointer to the right\n        left += 1\n        \n        # If the element at the right pointer is positive, swap it with the element at the left pointer\n        if arr[right] > 0:\n            arr[left], arr[right] = arr[right], arr[left]\n        \n        # Move the right pointer to the left\n        right -= 1\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i!= \" \":\n            new_str += i\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and a character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a min heap to find the n largest items from the list\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    # Return the heap as a list\n    return [heap[0]] + heap[1:]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def larg_nnum(list1, n):\n    # create a min-heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -list1[i])\n    \n    # extract the n largest items from the list\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap to store the n largest items from the list\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # convert the heap to a list and return it\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    # Convert the list to a max-heap, which will return the largest n elements\n    heap = list(heapq.nlargest(n, list1))\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -heapq.heappushpop(min_heap))\n        \n    # add the remaining elements of the list to the heap\n    for item in list1:\n        heapq.heappush(min_heap, -heapq.heappushpop(min_heap))\n        \n    # extract the n largest elements from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(min_heap))\n        \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Initialize an empty heap\n    max_heap = []\n\n    # Iterate through the list and add the largest n items to the heap\n    for item in list1:\n        heapq.heappush(max_heap, item)\n\n        # If the heap has more than n items, remove the smallest item\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n\n    # Convert the heap to a list and return it\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Find the surface area of the base\n    base_area = math.pi * r * r\n    # Find the surface area of the cylinder\n    cylinder_area = math.pi * r * r * h\n    # Find the lateral surface area\n    lateral_area = cylinder_area - base_area\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # Define the formula for the lateral surface area of a cylinder\n    lateral_surface_area = 2 * pi * (r**2 + h**2)\n\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h + 2 * r * r + 2 * h * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*r + 2*3.14*h*r + 2*3.14*h*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * r * h  # Using the formula for the lateral surface area of a cylinder\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = math.pi*(r**2 + h**2)*r\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    LSA = 2*math.pi*(r+h)\n    return LSA"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the diameter of the cylinder\n    d = 2*r\n    \n    # Calculate the lateral surface area of the cylinder\n    surface_area = math.pi*(d**2 + h**2)\n    \n    return surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l**3)"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #initialize a variable to store the even bits of the number\n    even_bits = 0\n    #loop through each bit of the number\n    for i in range(32):\n        #if the current bit is even\n        if n & (1 << i):\n            #set the corresponding bit of the even_bits variable to 1\n            even_bits |= (1 << i)\n    #return the even_bits variable\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n\n    # Loop through each bit in the number\n    for i in range(32): \n        # Check if the current bit is even\n        if n & (1 << i): \n            # Set the corresponding bit in the result to 1\n            result |= 1 << i\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    # Convert the number to a binary string\n    bin_str = bin(n)[2:]\n    # Set all even bits to 1\n    for i in range(len(bin_str)):\n        if bin_str[i] == '1' and i % 2 == 0:\n            bin_str = bin_str[:i] + '1' + bin_str[i+1:]\n    # Convert the binary string back to an integer\n    return int(bin_str, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty set to store the even bits\n    even_bits = set()\n    # Iterate through the binary representation of the number\n    for i in range(len(bin(n)[2:])):\n        # If the i-th bit of the binary representation is 0, add it to the set of even bits\n        if bin(n)[2:].count('0') & (1 << i) == 0:\n            even_bits.add(bin(n)[2:].index('0') + 1)\n    # Return the set of even bits\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0: \n        # Check if the least significant bit is even \n        if n & 1 == 0: \n            # Set the least significant bit \n            n |= 1 \n        # Shift the number to the right by 1 bit \n        n = n >> 1 \n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit in the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1\n        if int(bit) == 0:\n            result |= (1 << int(bit))\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function takes an integer as input and sets all even bits of the integer to 1.\n    \"\"\"\n    # Initialize a variable to store the result of the operation\n    result = 0\n\n    # Iterate over each bit of the input integer\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # Set the corresponding bit of the result to 1\n            result |= (1 << i)\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n > 0: \n        if n % 2 == 0: \n            n = n ^ 1 << 1\n        else: \n            n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    for i in range(1, 33):\n        if (n >> i) & 1 == 0:\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store even bits\n    even_bits = []\n    \n    # Iterate over the bits of the input number n\n    for bit in bin(n)[2:]:\n        # If the bit is even, append it to the list of even bits\n        if int(bit) == 0:\n            even_bits.append(bit)\n    \n    # Join the even bits into a single string and convert it back to an integer\n    even_bits_str = ''.join(even_bits)\n    result = int(even_bits_str, 2)\n    \n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for i in test_list:\n        counter[tuple(i)] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple\n    counter = Counter(test_list)\n    # Return the dictionary\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the occurrences of each tuple\n    counts = Counter()\n\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Update the count for the current tuple\n        counts[tup] += 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the occurrences of each tuple\n    count_dict = {}\n    \n    # Iterate over the list of tuples\n    for tup in test_list:\n        # Check if the tuple already exists in the dictionary\n        if tup in count_dict:\n            # If it does, increment its count by 1\n            count_dict[tup] += 1\n        # If the tuple doesn't exist, add it to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    count = Counter(test_list)\n    # Convert the Counter object to a dictionary and return it\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            if str[i:j] and len(str[i:j]) > 1:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substr = str[i:j]\n            if substr.strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    n = len(str)\n    for i in range(n): \n        for j in range(i+1, n+1): \n            if str[i:j].strip()!= '': \n                count += 1\n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[j]!= str[j-1]:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if str[i:j]!= '': \n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    prev_num = None\n    for i in range(m):\n        if prev_num is None or prev_num + 2 >= m:\n            count += 1\n        prev_num = i\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the number of possible sequences to 1\n    num_sequences = 1\n\n    # Iterate through the range of n values\n    for i in range(1, n + 1):\n        # Calculate the range of possible values for the current element\n        possible_values = range(2 * i, m, 2)\n\n        # Calculate the number of sequences that include the current element\n        num_sequences *= sum(1 for j in possible_values if j > 0)\n\n    # Return the total number of sequences\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1,m):\n        if i < 2*i or i > m:\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if m < 3 or n < 1:\n        return 0\n\n    # Initialize the count to 0\n    count = 0\n\n    # Initialize the first element as 2 (since we can start with 2 or more sequences)\n    first_element = 2\n\n    # Loop through all possible values of the second element\n    for second_element in range(3, m + 1):\n        # Check if the second element is greater than or equal to twice the previous element and less than or equal to m\n        if second_element >= 2 * first_element and second_element <= m:\n            # If it is, increment the count by the number of sequences of length n that start with the second element\n            count += sum([1 for _ in range(second_element - first_element + 1)])\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2*n:\n        return 0\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += (m-1)//(2*i+1)\n        else:\n            count += (m-i)//(2*i+1)\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    sequence = [0]\n    for i in range(1,m+1):\n        sequence.append(i)\n    for i in range(n-1):\n        for j in range(1,m+1):\n            if i==0:\n                if j>=2*sequence[j-1]:\n                    total+=1\n            elif j>=2*sequence[j-1]:\n                total+=1\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    prev_element = 0\n    \n    for i in range(1, n+1):\n        if i >= 2 * prev_element + 1 and i <= m:\n            total_sequences += 1\n        prev_element = i\n        \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    sequences = 0\n    for i in range(n):\n        for j in range(2, m):\n            if j < i+2:\n                sequences += 1\n    return sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_count = 0\n    for i in range(n):\n        # We are only considering sequences of length n\n        if i == 0:\n            # First element can be any positive integer from 0 to m\n            total_count += 1\n        else:\n            # We are only considering sequences of length n\n            for j in range(2*i, n+1):\n                if j <= m and j - 2*i >= 0 and j - 2*i % 2 == 0:\n                    # If j is greater than or equal to m and the previous element is even, we can include it in the sequence\n                    total_count += 1\n    return total_count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    prev_element = 0\n\n    for i in range(1, m+1):\n        if i >= 2 * prev_element:\n            if i <= m:\n                total_sequences += 1\n        prev_element = i\n\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > 0:\n        list1[-1] = list2\n        return list1\n    else:\n        return None"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Remove the last element of the first list\n    list1.pop()\n\n    # Add the elements of the second list to the first list\n    list1.extend(list2)\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) == 0 or len(list2) == 0:\n        return None\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2.pop())"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Reverse the first list\n    list1 = list1[::-1]\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    # Reverse the first list again\n    list1 = list1[::-1]\n    # Return the reversed first list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    \"\"\"\n    This function counts the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # finding the square root of N\n    square_root = int(math.sqrt(N))\n    \n    # using trial division to check if the square root is a perfect square\n    for i in range(square_root, 0, -1):\n        if i * i == N:\n            # if it is, find the next perfect square after it\n            next_square = i * i + 1\n            while next_square <= N:\n                next_square *= 2\n            return next_square\n    \n    # if the square root is not a perfect square, return the square root + 1\n    return square_root + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Check if N is a perfect square\n    if N == int(math.sqrt(N)):\n        return N + 1\n\n    # Find the integer root of N\n    root = int(math.sqrt(N))\n    while (root * root) <= N:\n        root += 1\n\n    # If the integer root is not a perfect square, find the next perfect square\n    while (root * root)!= N:\n        root -= 1\n\n    return root + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_Perfect_Square(N):\n    def binary_search(low, high):\n        mid = (low + high) // 2\n        if mid * mid == N:\n            return mid\n        elif mid * mid < N:\n            return binary_search(mid + 1, high)\n        else:\n            return binary_search(low, mid - 1)\n\n    return binary_search(1, N) + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    N = int(N)\n    i = 1\n    while True:\n        if math.sqrt(i*i) == int(math.sqrt(i*i)):\n            if i > N:\n                break\n            else:\n                i += 1\n        else:\n            i += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # function to check if a number is a perfect square \n    def is_perfect_square(num): \n        '''\n        Function to check if a number is a perfect square.\n        '''\n        return int(math.sqrt(num))**2 == num\n    \n    # initialize variables \n    is_square = False\n    num = N \n    square = N \n    while not is_square: \n        # increment the square by 1 \n        square += 1 \n        # check if the square is a perfect square \n        if is_perfect_square(square): \n            # check if the square is greater than num \n            if square > num: \n                is_square = True \n    return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    else:\n        N = int(math.sqrt(N))\n        while (N * N) < N + 1:\n            N -= 1\n        return N * N + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def next_prime(n):\n        \"\"\"\n        Helper function to find the next prime number greater than a given number.\n        \"\"\"\n        i = n + 1\n        while not is_prime(i):\n            i += 1\n        return i\n\n    def next_perfect_square(n):\n        \"\"\"\n        Helper function to find the next perfect square greater than a given number.\n        \"\"\"\n        i = next_prime(int(math.sqrt(n))+1)\n        while True:\n            if is_prime(i) and i*i > n:\n                return i\n            i = next_prime(i)\n\n    return next_perfect_square(N)\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "For example, if we want to find the next perfect square greater than 4, we can check all numbers greater than 4 that are perfect squares. We know that all numbers greater than 4 are greater than or equal to the square root of 4, so we can start with 5 and check all numbers greater than 5 that are perfect squares. We know that all numbers greater than 5 are greater than or equal to the square root of 5, so we can start with 6 and check all numbers greater than 6 that are perfect squares. We know that all numbers greater than 6 are greater than or equal to the square root of 6, so we can start with 7 and check all numbers greater than 7 that are perfect squares. We know that all numbers greater than 7 are greater than or equal to the square root of 7, so we can start with 8 and check all numbers greater than 8 that are perfect squares. We know that all numbers greater than 8 are greater than or equal to the square root of 8, so we can start with 9 and check all numbers greater than 9 that are perfect squares. We know that all numbers greater than 9 are greater than or equal to the square root of 9, so we can start with 10 and check all numbers greater than 10 that are perfect squares. We know that all numbers greater than 10 are greater than or equal to the square root of 10, so we can start with 11 and check all numbers greater than 11 that are perfect squares. We know that all numbers greater than 11 are greater than or equal to the square root of 11, so we can start with 12 and check all numbers greater than 12 that are perfect squares. We know that all numbers greater than 12 are greater than or equal to the square root of 12, so we can start with 13 and check all numbers greater than 13 that are perfect squares. We know that all numbers greater than 13 are greater than or equal to the square root of 13, so we can start with 14 and check all numbers greater than 14 that are perfect squares. We know that all numbers greater than 14 are greater than or equal to the square root of 14, so we can start with 15 and check all numbers greater than 15 that are perfect squares. We know that all numbers greater than 15 are greater than or equal to the square root of 15, so we can start with 16 and check all numbers greater than 16 that are perfect squares. We know that all numbers greater than 16 are greater than or equal to the square root of 16, so we can start with 17 and check all numbers greater than 17 that are perfect squares. We know that all numbers greater than 17 are greater than or equal to the square root of 17, so we can start with 18 and check all numbers greater than 18 that are perfect squares. We know that all numbers greater than 18 are greater than or equal to the square root of 18, so we can start with 19 and check all numbers greater than 19 that are perfect squares. We know that all numbers greater than 19 are greater than or equal to the square root of 19, so we can start with 20 and check all numbers greater than 20 that are perfect squares. We know that all numbers greater than 20 are greater than or equal to the square root of 20, so we can start with 21 and check all numbers greater than 21 that are perfect squares. We know that all numbers greater than 21 are greater than or equal to the square root of 21, so we can start with 22 and check all numbers greater than 22 that are perfect squares. We know that all numbers greater than 22 are greater than or equal to the square root of 22, so we can start with 23 and check all numbers greater than 23 that are perfect squares. We know that all numbers greater than 23 are greater than or equal to the square root of 23, so we can start with 24 and check all numbers greater than 24 that are perfect squares. We know that all numbers greater than 24 are greater than or equal to the square root of 24, so we can start with 25 and check all numbers greater than 25 that are perfect squares. We know that all numbers greater than 25 are greater than or equal to the"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrtN = int(math.sqrt(N))\n    while True:\n        sqrtN += 1\n        square = sqrtN * sqrtN\n        if square > N:\n            return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # check if the given number is already a perfect square\n    if N == int(math.sqrt(N)):\n        return N\n\n    # find the next perfect square greater than the given number\n    next_square = int(math.sqrt(N)) + 1\n\n    # check if the next perfect square is greater than the given number\n    if next_square > N:\n        return N\n    else:\n        return next_square"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Initialize variables for the bitonic subsequence sum and its ending point\n    bitonic_sum = 0\n    bitonic_end = 0\n    # Initialize variables for the non-bitonic subsequence sum and its ending point\n    non_bitonic_sum = 0\n    non_bitonic_end = 0\n    \n    # Loop through the array and keep track of the bitonic and non-bitonic subsequences\n    for i in range(len(arr)):\n        if i == 0 or arr[i] < arr[i-1]:\n            if i == 0 or arr[i] > arr[i-1]:\n                # If the current element is increasing and the previous element is decreasing, update the bitonic sum and its ending point\n                bitonic_sum += arr[i]\n                bitonic_end = i\n        else:\n            # If the current element is decreasing and the previous element is increasing, update the non-bitonic sum and its ending point\n            non_bitonic_sum += arr[i]\n            non_bitonic_end = i\n    \n    # Check if the bitonic subsequence sum is greater than the non-bitonic subsequence sum\n    if bitonic_sum > non_bitonic_sum:\n        return bitonic_sum\n    else:\n        return non_bitonic_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Find the number of elements in the array\n    n = len(arr)\n\n    # If the array is empty, return 0\n    if n == 0:\n        return 0\n\n    # Initialize variables for the minimum and maximum sums and the current sum and the count of increasing subsequences\n    min_sum = float('-inf')\n    max_sum = float('-inf')\n    curr_sum = 0\n    count = 0\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is decreasing, update the minimum sum and decrement the count\n        if arr[i] > arr[i - 1]:\n            min_sum = max(min_sum, curr_sum)\n            curr_sum -= arr[i - 1]\n            count -= 1\n        # If the current element is increasing, increment the count and add the current element to the current sum\n        else:\n            count += 1\n            curr_sum += arr[i]\n        # If the current element is increasing again, update the maximum sum and increment the count\n        if arr[i] < arr[i - 1]:\n            max_sum = max(max_sum, curr_sum)\n            count += 1\n\n    # If the final maximum sum is less than the minimum sum, return the minimum sum\n    if max_sum < min_sum:\n        return min_sum\n    # Otherwise, return the maximum sum\n    else:\n        return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Find the maximum sum of a decreasing subsequence\n    max_sum_decreasing = max(arr)\n\n    # Find the maximum sum of a decreasing subsequence using a sliding window approach\n    max_sum_decreasing_window = 0\n    curr_sum_decreasing_window = 0\n    for i in range(1, n):\n        curr_sum_decreasing_window += arr[i]\n        if curr_sum_decreasing_window > max_sum_decreasing_window:\n            max_sum_decreasing_window = curr_sum_decreasing_window\n\n    # Find the maximum sum of a increasing subsequence\n    max_sum_increasing = 0\n    for i in range(n - 2, -1, -1):\n        curr_sum_increasing = 0\n        for j in range(i, n):\n            curr_sum_increasing += arr[j]\n            if curr_sum_increasing > max_sum_increasing:\n                max_sum_increasing = curr_sum_increasing\n\n    return max(max_sum_decreasing, max_sum_increasing, max_sum_decreasing_window)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Check if the array is empty or contains only one element\n    if len(arr) < 2:\n        return 0\n\n    # Initialize variables\n    increasing = True\n    curr_sum = 0\n    max_sum = float('-inf')\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is increasing or decreasing\n        if increasing:\n            if arr[i] >= arr[i+1]:\n                curr_sum += arr[i]\n            else:\n                curr_sum = 0\n                increasing = False\n        else:\n            if arr[i] <= arr[i+1]:\n                curr_sum += arr[i]\n            else:\n                max_sum = max(max_sum, curr_sum)\n                curr_sum = 0\n                increasing = True\n\n        # Update the maximum sum if necessary\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    # Update the maximum sum if necessary\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    # Initialize variables to store the maximum sum of subsequences\n    increasing_sum = max_decreasing_sum = float('-inf')\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is increasing\n        if i == 0 or arr[i] >= arr[i - 1]:\n            # If it is, update the increasing sum\n            increasing_sum = max(increasing_sum + arr[i], arr[i])\n            # Update the maximum sum of subsequences\n            max_increasing_sum = max(max_increasing_sum, increasing_sum)\n        else:\n            # If it's decreasing, update the decreasing sum\n            decreasing_sum = max(max_decreasing_sum + arr[i], arr[i])\n            # Update the maximum sum of subsequences\n            max_decreasing_sum = max(max_decreasing_sum, decreasing_sum)\n\n    return max_increasing_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_ending = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            max_ending = arr[i]\n        else:\n            max_ending = arr[i] - arr[i-1]\n        max_so_far = max(max_so_far, max_ending)\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return 0\n\n    # Initialize the maximum sum and the current subsequence sum\n    max_sum = float('-inf')\n    subseq_sum = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the current element is increasing, add it to the subsequence sum\n        if arr[i] > arr[i-1]:\n            subseq_sum += arr[i]\n        # If the current element is decreasing, update the maximum sum and the subsequence sum\n        elif arr[i] < arr[i-1]:\n            max_sum = max(max_sum, subseq_sum)\n            subseq_sum = arr[i]\n\n    # Add the last subsequence sum to the maximum sum\n    max_sum = max(max_sum, subseq_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_ending_here += arr[i]\n        else:\n            max_ending_here = arr[i]\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # create a list of increasing and decreasing subsequences\n    inc = []\n    dec = []\n    \n    # loop through the array and add increasing and decreasing subsequences to the lists\n    for i in range(len(arr)):\n        if i == 0 or arr[i] > arr[i-1]:\n            inc.append(arr[i])\n        else:\n            dec.append(arr[i])\n    \n    # loop through the lists and find the maximum sum of a bitonic subsequence\n    max_sum = float('-inf')\n    for i in range(len(inc)):\n        for j in range(len(dec)):\n            curr_sum = inc[i] + dec[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Find the largest gap in the array\n    max_gap = 0\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] < arr[i+1]:\n            max_gap = max(max_gap, arr[i+1] - arr[i])\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = max(arr[0], arr[-1])\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] < arr[i+1]:\n            subseq_sum = max(arr[i-1], arr[i+1]) + max_gap\n            max_sum = max(max_sum, subseq_sum)\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initial guess\n    guess = 1\n    # initial difference between guess and square root\n    diff = number / guess\n    \n    while diff > 1e-6:\n        # update guess\n        guess += diff / (2 * guess)\n        # update difference\n        diff = number / guess\n    \n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number / 2\n    y = number\n    i = 0\n    while y > x:\n        y = (x + number / x) / 2\n        i += 1\n    return x, i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n\n    The babylonian method is based on the fact that the square root of a number is a\n    rational number that represents the quotient of two numbers whose product is the number itself.\n\n    Example:\n\n    >>> babylonian_squareroot(9)\n    3.0\n\n    >>> babylonian_squareroot(16)\n    4.0\n\n    >>> babylonian_squareroot(25)\n    5.0\n\n    The babylonian method converges very quickly for small values of the number, but can be\n    unstable for larger values. However, for larger values, the error in the approximation\n    is usually small, especially if the number is very close to a perfect square.\n\n    \"\"\"\n\n    # First, check if the number is negative. If it is, we cannot compute its square root.\n    if number < 0:\n        raise ValueError(\"Number must be non-negative\")\n\n    # If the number is 0 or 1, its square root is 0 or 1, respectively.\n    if number == 0 or number == 1:\n        return number\n\n    # Otherwise, we start with an initial guess of 1. We will use this to compute the square root.\n    guess = 1\n\n    # We will keep track of the number of iterations in the loop.\n    count = 0\n\n    # We will use a tolerance of 1e-6 to stop the loop when we are reasonably confident that\n    # the square root is accurate.\n    while True:\n        # We compute the new guess for the square root by computing the square of the current guess\n        # and dividing by the number. We also add a factor of 1/2 to the denominator to ensure that\n        # the result is a rational number.\n        new_guess = (guess**2 + number) / (2 * guess)\n\n        # If the difference between the current guess and the new guess is less than the\n        # tolerance, we have converged and can stop the loop.\n        if abs(guess - new_guess) < 1e-6:\n            return new_guess\n\n        # If the number of iterations exceeds 1000, we have failed to converge and can raise an error.\n        if count > 1000:\n            raise ValueError(\"Unable to converge to a root with the specified tolerance\")\n\n        # We update the guess for the next iteration.\n        guess = new_guess\n\n        # We increment the count of iterations.\n        count += 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    # initialize variables\n    x = number / 2\n    y = 1\n    z = 0\n    \n    # iterate until x is within a reasonable tolerance of y\n    while abs(x - y) > 0.001:\n        \n        # compute new values of x and y\n        y = y - (number / y) * y\n        x = (number / x) + (number / y) * x\n        \n        # update z\n        z = z + 1\n        \n    # return the root value\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    This function takes a number as input and returns the square root using the babylonian method.\n    '''\n    # Initialize variables\n    x = number\n    y = (number + number/x) / 2\n    i = 0\n\n    # Iterate until the difference between x and y is less than or equal to a small number\n    while abs(x - y) > 1e-10:\n        # Update x and y\n        x = y\n        y = (number + number/x) / 2\n\n        # Increment iteration count\n        i += 1\n\n    # Return the square root\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a given number using the Babylonian method.\n    \n    Args:\n    number (int): The number whose square root needs to be computed.\n    \n    Returns:\n    float: The square root of the given number.\n    \"\"\"\n    # initialize variables\n    previous_guess = 0.5\n    current_guess = 0.5\n    threshold = 0.0001\n    \n    # iterate until the difference between the previous and current guesses is less than the threshold\n    while abs(previous_guess - current_guess) > threshold:\n        previous_guess = current_guess\n        current_guess = 0.5 * (previous_guess + number / previous_guess)\n    \n    # return the final guess as the square root\n    return current_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 1e-10  # Set a small value for the tolerance\n    x0 = number / 2.0  # Initial guess\n    x1 = (x0 + number / x0) / 2.0  # First iteration\n    while abs(x1 - x0) > epsilon:\n        x0 = x1\n        x1 = (x0 + number / x0) / 2.0\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # start with an initial estimate for the square root\n    x = number / 2\n    # initialize the number of iterations\n    n = 0\n    # loop until the estimated square root is within the desired tolerance\n    while abs(x**2 - number) > 1e-12:\n        # increase the estimate by a factor of 1.1\n        x = (x + number / x) / 2\n        # increment the number of iterations\n        n += 1\n    # return the estimated square root and the number of iterations\n    return x, n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # check if the input is a positive integer\n    if not isinstance(number, int) or number <= 0:\n        raise ValueError('Input must be a positive integer')\n\n    # initialize the iteration count and the guess\n    count = 0\n    guess = 1\n\n    # iterate until the difference between the guess and the actual square root is below a certain threshold\n    while abs(guess*guess - number) > 0.001:\n        count += 1\n        guess = (guess + number/guess) / 2\n\n    # print the final guess\n    print('Guess:', guess)\n    print('Iterations:', count)\n    print('Error:', abs(guess*guess - number))"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while abs(guess * guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    if not s:\n        return 0\n\n    n = len(s)\n    dp = [1] * n\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            dp[i] = dp[i - 1] + 2\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 2])\n\n    return max(dp)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D table to store the length of the longest palindromic subsequence of the prefixes of s.\n    lps_table = [[0] * n for _ in range(n)]\n    # Initialize the length of the longest palindromic subsequence of the empty string to 1.\n    lps_table[0][0] = 1\n    # Find the length of the longest palindromic subsequence of the prefixes of s.\n    for i in range(1, n):\n        # If s[i] is a character, find the length of the longest palindromic subsequence of s[:i].\n        if s[i] == s[i-1]:\n            lps_table[i][i] = 1 + lps_table[i-1][i-1]\n        else:\n            lps_table[i][i] = max(lps_table[i-1][j] for j in range(i))\n    return lps_table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each index.\n    table = [[0] * n for _ in range(n)]\n    # Initialize the table for a string of length 1 to be itself.\n    for i in range(n):\n        table[i][i] = 1\n    # Initialize the table for a string of length 2 to be the longest possible subsequence.\n    for i in range(n-2, -1, -1):\n        if str[i] == str[i+1]:\n            table[i][i+1] = table[i+2][i+2] + 2\n        else:\n            table[i][i+1] = max(table[i+2][i], table[i][i+2])\n    return table[0][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    # create a 2D table to store the lengths of longest palindromic subsequences\n    # for all possible substrings of the given string\n    table = [[0] * (len(str) + 1) for _ in range(len(str) + 1)]\n\n    # fill the table using the recursive approach\n    for i in range(len(str) + 1):\n        table[i][0] = 0\n        table[0][i] = 0\n\n    for i in range(1, len(str) + 1):\n        for j in range(1, len(str) + 1):\n            if str[i - 1] == str[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # return the length of the longest palindromic subsequence in the string\n    return table[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Initialize two variables to keep track of start and end indices of longest palindromic subsequence\n    start = 0\n    end = 0\n    # Initialize an array to store the length of longest palindromic subsequence ending at each index\n    # dp[i] will store the length of the longest palindromic subsequence ending at index i\n    dp = [1] * n\n\n    # Fill the array using Kadane's algorithm\n    for i in range(1, n):\n        # Check if the current character is the same as the previous character or not\n        if str[i] == str[i - 1]:\n            # If it is, then check if the current substring is a palindrome or not\n            if i - 1 >= 0 and i + 1 < n and str[i - 1] == str[i + 1]:\n                dp[i] = 3  # The length of the current substring is 3 since it is a palindrome of length 2\n            else:\n                dp[i] = 2  # The length of the current substring is 2 since it is a palindrome of length 1\n        else:\n            # If it is not, then check if the length of the longest palindromic subsequence ending at i-1 is greater or equal to the length of the longest palindromic subsequence ending at i+1\n            if dp[i - 1] >= dp[i + 1]:\n                dp[i] = dp[i - 1] + 2  # The length of the current substring is 2 + the length of the longest palindromic subsequence ending at i-1\n            else:\n                dp[i] = dp[i + 1] + 2  # The length of the current substring is 2 + the length of the longest palindromic subsequence ending at i+1\n\n        # Update the start and end indices of the longest palindromic subsequence if the current substring is a palindrome\n        if i + dp[i] // 2 >= 0 and i + dp[i] // 2 < n and str[i + dp[i] // 2] == str[i + dp[i] // 2 + i - dp[i] // 2]:\n            start = i - dp[i] // 2\n            end = i + dp[i] // 2\n\n    # Return the length of the longest palindromic subsequence\n    return end - start + 1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    for length in range(n):\n        if str[length] == str[length]:\n            dp[length][length] = 1\n        else:\n            dp[length][length] = 0\n\n    for length in range(n-1, -1, -1):\n        for i in range(length+1, n):\n            if str[length] == str[i]:\n                if i-length <= 2 and (length == 0 or str[i-1] == str[i-2]):\n                    dp[length][i] = dp[length][i-1] + 2\n                else:\n                    dp[length][i] = max(dp[length][i-1], dp[length+1][i])\n\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    lps_arr = [1] * n\n    \n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            lps_arr[i] = lps_arr[i-1] + 1\n        else:\n            lps_arr[i] = 0\n            \n    max_len = 0\n    start = 0\n    for i in range(1, n):\n        if lps_arr[i] > max_len:\n            max_len = lps_arr[i]\n            start = i - max_len\n            \n    return str[start:start+max_len]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store the length of LPS for subsequences\n    table = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    # Initialize LPS length and start index of LPS for all subsequences\n    for i in range(n, -1, -1):\n        table[i][i] = 1\n        start = i-1\n        while start >= 0 and str[start] == str[i]:\n            table[i][start] += 1\n            start -= 1\n\n    # Find the length of LPS for all subsequences\n    for length in range(2, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if table[start+1][end] > table[start][end-1]:\n                table[start][end] = table[start+1][end]\n            else:\n                table[start][end] = table[start][end-1]\n\n    # Return the length of LPS for the given string\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Initialize two variables to store the length of longest and shortest palindromes\n    max_length = 1\n    min_length = 0\n    # Initialize two variables to store the start and end indices of longest and shortest palindromes\n    start = 0\n    end = 0\n    # Loop through each character in the string\n    for i in range(n):\n        # Calculate the length of longest palindrome ending at index i\n        for j in range(i, n):\n            if str[i] == str[j]:\n                temp_length = j - i + 1\n                # If the length of the longest palindrome found so far is greater than the current length, update max_length and start and end variables accordingly\n                if temp_length > max_length:\n                    max_length = temp_length\n                    start = i\n                    end = j\n                # If the length of the longest palindrome found so far is less than the current length, update min_length and start and end variables accordingly\n                elif temp_length < min_length:\n                    min_length = temp_length\n                    start = i\n                    end = j\n    # Return the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    # Initialize two pointers, one for odd length palindrome and another for even length palindrome\n    left = 0\n    right = 0\n\n    # Initialize a variable to store the length of the longest palindromic subsequence\n    max_len = 1\n\n    # Loop through the string\n    for i in range(len(str)): \n        # If the character is odd, check if the substring from left to right is a palindrome\n        if i % 2!= 0 and is_palindrome(str[left:right+1]): \n            max_len = max(max_len, right - left + 1)\n            left += 1\n\n        # If the character is even, check if the substring from left to right+1 is a palindrome\n        elif i % 2 == 0 and is_palindrome(str[left:right+2]): \n            max_len = max(max_len, right - left + 2)\n            left += 1\n            right += 1\n\n    return max_len\n\ndef is_palindrome(str): \n    # Convert the string to a list of characters and reverse it\n    char_list = list(str)\n    char_list.reverse()\n\n    # Check if the list is a palindrome\n    for i in range(len(char_list)): \n        if char_list[i]!= str[i]: \n            return False\n    return True"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return sum([1/i for i in range(1, n)])"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1.0/n * (1/n + 1/n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1/(2*n - 1) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Calculate harmonic sum using a loop\n    for i in range(1, n):\n        sum += 1 / i\n        \n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1 / n\n    for i in range(1, n):\n        harmonic_sum += 1 / (i + 1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Calculate the harmonic sum\n    harmonic_sum = (1/n) + (1/(2*n)) + (1/(3*n)) + (1/(4*n)) +... + (1/(n-1))\n    harmonic_sum = harmonic_sum * n\n\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (2 * (n-1)) / (n + 1)\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert arrays to sets to remove duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    # Find intersection of sets\n    intersection_set = set_nums1.intersection(set_nums2)\n    # Convert set back to list\n    intersection_list = list(intersection_set)\n    # Return intersection list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set from the second array\n    set_nums2 = set(array_nums2)\n    # create an empty set to store the common elements\n    common_elements = set()\n    # loop through the first array and add common elements to the common_elements set\n    for num in array_nums1:\n        if num in set_nums2:\n            common_elements.add(num)\n    # return the common elements as a list\n    return list(common_elements)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a dictionary to store the counts of each element in the arrays\n    counts = {}\n    for num in array_nums1:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    # create a new array to store the intersection\n    intersection = []\n    # loop through the second array and add elements to the intersection that have a count greater than 0 in the first array\n    for num in array_nums2:\n        if num in counts and counts[num] > 0:\n            intersection.append(num)\n            counts[num] -= 1\n    # return the intersection array\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set from the first array\n    set1 = set(array_nums1)\n    # create an empty list to store the intersection\n    intersection = []\n    # loop through the second array and check if each element is in the set\n    for num in array_nums2:\n        if num in set1:\n            intersection.append(num)\n            # remove the element from the set to avoid duplicates\n            set1.remove(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n    # Create a set to store the common elements in the two arrays\n    common_set = set(array_nums1).intersection(set(array_nums2))\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    # Use a set to store the unique elements from both arrays\n    unique_nums = set(array_nums1 + array_nums2)\n\n    # Initialize an empty list to store the intersection\n    intersection = []\n\n    # Iterate over the unique elements and add them to the intersection if they appear in both arrays\n    for num in unique_nums:\n        if num in array_nums1 and num in array_nums2:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the number of times the element appears in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # initialize a new list to store the resulting list\n    result = []\n    # iterate over each element in the list\n    for item in list:\n        # append the element to the new list, preceded by the input element\n        result.append(element)\n        # append the original item to the new list\n        result.append(item)\n    # return the new list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[i:])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    lst = [element] + lst\n    return lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [elem] + lst\n"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = cmath.rect(num)\n        result.append((cmath.phase(num), real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for num in numbers:\n        # Convert to polar coordinates\n        rho = abs(num)\n        phi = cmath.phase(num)\n\n        # Convert to polar form\n        polar_number = (rho, phi)\n        polar_numbers.append(polar_number)\n\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function converts complex numbers to polar coordinates.\n    \n    Parameters:\n    numbers (list): List of complex numbers to be converted.\n    \n    Returns:\n    polar_coordinates (list): List of polar coordinates corresponding to the input numbers.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        real, imag = number.real, number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        try:\n            num = complex(num)\n            r = cmath.sqrt(num.real**2 + num.imag**2)\n            theta = cmath.phase(num)\n            print(f\"{num} = {r} + {theta}j\")\n        except ValueError:\n            print(\"Invalid input. Please enter a valid complex number.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath  \n\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        print(f\"{number} -> r={r}, theta={theta}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []  \n    for number in numbers:  \n        real = number.real  \n        imag = number.imag  \n        mod = cmath.sqrt(real**2 + imag**2)  \n        phi = cmath.phase(number)  \n        polar_numbers.append((mod, phi))  \n    return polar_numbers  "
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        polar = cmath.polar(num)\n        # Print the angle and magnitude of the complex number\n        print(\"Angle:\", polar[0], \"Magnitude:\", polar[1])"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # convert the complex number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n        \n        # print the polar coordinates\n        print(\"The polar coordinates of\", number, \"are (\", r, \",\", theta, \")\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for number in numbers:\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n        polar_list.append((r, theta))\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = abs(num)\n        phi = cmath.phase(num)\n        print(\"({:.2f}, {:.2f})\".format(r, phi))"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    '''\n    This function returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    This function counts the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue', 'yellow']\n    combinations = []\n    \n    for i in range(len(l) - n + 1):\n        combination = tuple(l[j] for j in range(i, i+n))\n        if combination in combinations:\n            continue\n        combinations.append(combination)\n    \n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n):\n            result.append(tuple(j))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if len(set(l[i:j+1])) == n:\n                color_combinations.append((l[i], l[j]))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l) - n + 1):\n        combination = tuple(l[i:i+n])\n        combinations.append(combination)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(1, len(l)+1):\n        for comb in combinations_with_replacement(l, i):\n            result.append(tuple(comb))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if len(l[i:j]) == n:\n                combinations.append((l[i:j]))\n    return combinations"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, else False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    # Initialize a boolean array \"prime[0..n]\" and initialize\n    # all entries it as true. A value in prime[i] will\n    # finally be false if i is Not a prime, else true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while(p**2 <= n):\n        if prime[p] == True:\n            for i in range(p**2, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # Count the number of prime numbers\n    count = 0\n    for i in range(2, n):\n        if prime[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n\nn = 100\nprint(count_Primes_nums(n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # compare the first element of each tuple\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the length of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # Check if the lengths are equal\n    if len1!= len2:\n        raise ValueError(\"The two tuples must have the same length!\")\n    \n    # Find the maximum value in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    # If the maximum value in the first tuple is greater than the maximum value in the second tuple,\n    # swap the two tuples\n    if max1 > max2:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    \n    # Return the maximum value in each tuple\n    return test_tup1, test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] == test_tup2[0] and test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if len(test_tup1) < len(test_tup2):\n        return maximize_elements(test_tup2, test_tup1)\n    elif len(test_tup1) == len(test_tup2):\n        if test_tup1 < test_tup2:\n            return test_tup2\n        else:\n            return test_tup1\n    else:\n        return maximize_elements(test_tup1[1:], test_tup2[1:])"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # create a list from the two tuples\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # loop through the list and find the index of the maximum element\n    max_index = 0\n    for i in range(len(list1)):\n        if list1[i] > list2[i]:\n            max_index = i\n            break\n\n    # swap the two elements at the maximum index\n    list1[max_index], list1[len(list1) - 1] = list1[len(list1) - 1], list1[max_index]\n    list2[max_index], list2[len(list2) - 1] = list2[len(list2) - 1], list2[max_index]\n\n    # create a new tuple from the modified list\n    new_tup = tuple(list1) + tuple(list2)\n\n    return new_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the length of the tuples\n    length = len(test_tup1)\n    \n    # Compare the elements of the tuples\n    max_val = max(test_tup1)\n    for i in range(length):\n        if test_tup1[i] < max_val:\n            max_val = test_tup1[i]\n        if test_tup2[i] > max_val:\n            max_val = test_tup2[i]\n            \n    # Return the max value\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Compare the first element of each tuple\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        # If the first elements are equal, compare the second elements\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        elif test_tup1[1] < test_tup2[1]:\n            return test_tup2\n        else:\n            # If the first and second elements are also equal, return a tuple with None\n            return (None, None)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Get the maximum of each tuple element\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    \n    # Compare the maximum values of each tuple\n    if max_tup1 > max_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    # Initialize the maximum value to be the first tuple\n    max_value = test_tup1[0]\n\n    # Iterate through the tuples and compare each element\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_value:\n            max_value = test_tup1[i]\n        elif test_tup2[i] > max_value:\n            max_value = test_tup2[i]\n\n    return max_value"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    p = 2\n    count = 1\n    prime = True\n    \n    while prime and count < n:\n        # Check if p is a newman-shanks-williams prime\n        if is_newman_shanks_williams_prime(p):\n            count += 1\n            prime = True\n        else:\n            p += 1\n    \n    if count == n:\n        return p\n    else:\n        return \"The nth newman-shanks-williams prime number does not exist.\"\n\ndef is_newman_shanks_williams_prime(n):\n    '''\n    Helper function to check if a number is a newman-shanks-williams prime.\n    '''\n    # Check if n is a multiple of 2\n    if n % 2 == 0:\n        return False\n    \n    # Check if n is divisible by any odd number less than or equal to sqrt(n)\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define the function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize the count variable\n    count = 0\n\n    # Check all numbers between 2 and n\n    for num in range(2, n + 1):\n        # Check if the number is prime\n        if is_prime(num):\n            count += 1\n\n        # If the count reaches n, return the number\n        if count == n:\n            return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through the numbers 2 to n\n    for i in range(2, n+1):\n        # Check if i is a newman\u2013shanks\u2013williams prime number\n        if is_prime(i*i - 2*i + 1) and is_prime(i*i + 1):\n            count += 1\n            # Check if the count is equal to n\n            if count == n:\n                # Return i as the nth newman\u2013shanks\u2013williams prime number\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2]\n    i = 3\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 2\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_newman_prime():\n        while True:\n            p = 2\n            while True:\n                p += 1\n                if is_prime(p):\n                    break\n            q = 2\n            while True:\n                q += 1\n                if is_prime(q) and q!= p:\n                    break\n            if q ** 2 - p ** 2 == 1:\n                return (p, q)\n\n    for i in range(n):\n        p, q = next_newman_prime()\n        if i == 0:\n            print(f'The {i + 1}th newman-shanks-williams prime is {p} and {q}.')\n        else:\n            print(f'The {i + 1}th newman-shanks-williams prime is {p} + {q}.')"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    is_prime = True\n    i = 2\n    prime_num = 0\n\n    # loop through numbers to find the nth prime\n    while is_prime and i <= n:\n        is_prime = True\n\n        # check if the number is prime\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        # if number is prime, add to prime list and increment\n        if is_prime:\n            prime_num += i\n            i += 1\n\n        # if the nth prime is found, exit the loop\n        if prime_num == n:\n            break\n\n    # return the nth prime number\n    return prime_num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    if n == 1:\n        return 2\n    \n    # check if n is a newman prime\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    # if n is a newman prime, then it's a newman prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n): \n        '''\n        Helper function to check if a number is prime or not.\n        '''\n        if n < 2: \n            return False\n        for i in range(2, int(n**0.5)+1): \n            if n % i == 0: \n                return False\n        return True\n    \n    def next_prime(n): \n        '''\n        Helper function to find the next prime number after a given number.\n        '''\n        while True: \n            n += 1\n            if is_prime(n): \n                return n\n    \n    prime = next_prime(2)\n    count = 1\n    while count < n: \n        prime = next_prime(prime)\n        count += 1\n    \n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Helper function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Helper function to generate a newman-shanks-williams prime number\n    def generate_prime(n):\n        i = 3\n        while True:\n            if is_prime(i):\n                if i == n:\n                    return i\n                i += 2\n            else:\n                i += 2\n\n    # Generate the nth newman-shanks-williams prime number\n    for _ in range(n-1):\n        generate_prime(n)\n\n    return generate_prime(n)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the input tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Length of input tuples should be equal\")\n    \n    # create an empty list to store the result\n    result = []\n    \n    # iterate over the elements of the input tuples and perform element-wise division\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n        \n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the tuples must be equal.\")\n        return\n\n    # Perform the element-wise division operation\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n\n    # Return the result\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same number of elements.')\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i]/test_tup2[i])\n        except ZeroDivisionError:\n            result.append(float('nan'))\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Create a new tuple to store the result\n    result_tup = ()\n    \n    # Perform element-wise division operation across the given tuples\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i],),)\n    \n    # Return the resulting tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(\"Error: Division by zero not allowed!\")\n            return\n        else:\n            result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n        return\n\n    # Perform element-wise division operation across the two tuples\n    result_tup = tuple([x/y for x, y in zip(test_tup1, test_tup2)])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts of length L.\n    \"\"\"\n    if len(lst) <= L:\n        return (lst, [])\n    else:\n        return ([lst[i:i+L] for i in range(0, len(lst), L)], [lst[i+L:] for i in range(0, len(lst), L)])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # calculate the length of the second part of the list\n    n = len(list1) - L\n    \n    # create the two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the first part of the list\n    length = len(list1) // 2\n    # If the length of the list is even, add 1 to the length to ensure that the first part has an equal number of elements as the second part\n    if length * 2 == len(list1):\n        length += 1\n    # Split the list into two parts and return the resulting lists in a tuple\n    return (list1[:length], list1[length:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # initialize two empty lists to store the first and second parts of the list\n    list_1 = []\n    list_2 = []\n    \n    # loop through the first part of the list\n    for i in range(len(list1)):\n        # if the current element is less than or equal to L, append it to the first list\n        if i <= L-1:\n            list_1.append(list1[i])\n        # otherwise, append it to the second list\n        else:\n            list_2.append(list1[i])\n    \n    # convert the lists to tuples and return the resulting tuple\n    return (tuple(list_1), tuple(list_2))"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Split a given list into two parts with length L\n    '''\n    # check if length of list is greater than L\n    if len(lst) > L:\n        # if yes, split the list into two parts\n        part1 = lst[:L]\n        part2 = lst[L:]\n    else:\n        # if no, return the list as a tuple\n        return lst, None\n    # return the two parts as a tuple\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # If L is greater than the length of the list, return the original list as the first part and an empty list as the second part.\n    if L > len(list1):\n        return list1, []\n    \n    # Otherwise, split the list into two parts and return them as a tuple.\n    return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1 = list1.copy() # create a copy of the list to avoid modifying the original list\n    length = len(list1)\n    mid = length // 2 # calculate the index of the mid-point of the list\n    part1 = list1[:mid] # create the first part of the list\n    part2 = list1[mid:] # create the second part of the list\n    return (part1, part2) # return the two parts of the list in a tuple"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Check if the length of the list is less than L\n    if len(list1) < L:\n        print(\"Error: The length of the list is less than L\")\n        return\n    \n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 + 2 * (h_age // 7)\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert hours to years\n    age = h_age / 730\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 2 * h_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age > 6:\n        return h_age * 7\n    else:\n        return 0"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dog_years = h_age / 7\n    return age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n    \"\"\"\n    # convert the human age to dog years\n    dog_years = h_age * 7\n    # return the dog age in years\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    S = S.copy()\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    \n    # Loop through the list and split it for every nth element\n    for i in range(0, len(S), step):\n        # Create a new list that includes the current element and all previous elements\n        new_list = S[i:i+step]\n        # Add the new list to the result list\n        result.append(new_list)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = step\n    i = 0\n    while i < len(S):\n        if i % n == 0:\n            result.append(S[i:i+n])\n        i += 1\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # If n is zero or greater than the length of the list, return the list as is\n    if step > len(S) or step <= 0:\n        return [S]\n    # Split the list into chunks of size n\n    chunks = [S[i:i+step] for i in range(0, len(S), step)]\n    # Return the list of resulting lists\n    return chunks"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_split = []\n    while S:\n        S_split.append(S[:step])\n        S = S[step:]\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2) + (12 * l**3)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    current_number = 1\n\n    while current_number <= n:\n        sum_squares += current_number ** 2\n        current_number += 2\n\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 2\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_natural_numbers = [i for i in range(1, n+1, 2)]\n    return sum(i**2 for i in odd_natural_numbers)"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd number to the sum variable\n        sum += i**2\n    \n    # return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    \"\"\"\n    This function calculates then'th star number.\n    \"\"\"\n    if n == 1:\n        return '*'\n    elif n == 2:\n        return '**'\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)\n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    This function takes a positive integer n as input, and returns then'th star number.\n    '''\n    # initialize the variable star_num to 1\n    star_num = 1\n\n    # loop n-1 times and add 1 to star_num each time\n    for i in range(n-1):\n        star_num += 1\n\n    # return the final value of star_num\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the first two numbers of the series\n    current_num = 1\n    next_num = 1\n    \n    # Loop through the series up to n-1 and calculate the next number in the series\n    for i in range(1, n):\n        current_num, next_num = next_num, current_num + next_num\n        \n    # Return the final value of current_num, which is the nth star number\n    return current_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize the sum of then'th star number\n    sum_n = 0\n\n    # Iterate through the first n-1 numbers and add each number to the sum\n    for i in range(1, n):\n        sum_n += i\n\n    # Add the last number to the sum\n    sum_n += n\n\n    return sum_n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the result variable to 1\n    result = 1\n    \n    # loop n-1 times and add the value of the result variable to it\n    for i in range(n-1):\n        result = result * 2\n    \n    # return the result variable as then'th star number\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    star_num = 1\n    count = 1\n    \n    # loop n times to find the nth star number\n    while count <= n:\n        # add 1 to the star_num and increment count\n        star_num += 1\n        count += 1\n    \n    # return the nth star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the count variable\n    count = 1\n    \n    # Loop n times\n    for i in range(1, n+1):\n        # Multiply the count by 2 and add 1 to get the next star number\n        count *= 2\n        count += 1\n    \n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    # Define the number of rows\n    rows = n\n    # Define the number of columns\n    cols = 0\n    \n    # Initialize the output string\n    output = ''\n    \n    # Loop until we have filled the output string\n    while len(output) < n * n:\n        # If there are fewer than n rows left, add another column\n        if len(output) < rows * rows:\n            cols += 1\n            # Add a star to the output string\n            output += '*'\n        # If there are more rows left, add a new row\n        else:\n            rows += 1\n            # Add a newline to the output string\n            output += '\\n'\n    \n    # Print the output string\n    print(output)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # First check if n is valid or not\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        # Calculate the length of the star sequence\n        length = n * (n - 1) // 2\n        # Initialize a variable to store the result\n        result = \"\"\n        # Add the spaces at the beginning of the sequence\n        for i in range(n - 1):\n            result += \" \"\n        # Add the star itself\n        result += \"*\" * length\n        return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the star number\n    star = \"*\"\n\n    # Loop through the n number of times\n    for i in range(n):\n        # Print the star number\n        print(star)\n        # Increase the star number by one\n        star += \"*\""
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.lower()\n    if len(k) == 1:\n        return ord(k)\n    elif len(k) > 1:\n        raise ValueError(\"Input string should contain only one character.\")"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {chr(i): i for i in range(32, 127)}\n    return ascii_dict[k]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    even_sum = 0\n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n        elif i % 2 == 0:\n            even_sum += arr[i]\n            \n    return even_sum, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            count += 1\n            if count % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:  # Check if the current element is even\n            if i % 2 == 0:  # Check if the index is even\n                sum += arr[i]  # Add the even number to the sum\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initializing a variable to store the sum of even numbers raised to fifth power\n    sum_of_even_numbers = 0\n\n    # iterating from 2 to n\n    for i in range(2, n+1):\n\n        # checking if the number is even\n        if i % 2 == 0:\n\n            # raising the number to the fifth power and adding it to the sum\n            sum_of_even_numbers += i**5\n\n    return sum_of_even_numbers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = [i for i in range(2, n+1, 2)]\n    sum = 0\n    for num in even_numbers:\n        sum += num**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    # initialize the sum variable\n    sum = 0\n    # loop through the first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # calculate the sum of the first n even natural numbers raised to the fifth power\n        sum += i**5\n    # return the sum of the first n even natural numbers raised to the fifth power\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n\n    # Initialize sum to 0\n    sum = 0\n\n    # Iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            sum += i ** 5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # iterate n times\n    for i in range(n):\n        # check if current number is even\n        if i % 2 == 0:\n            # raise to the fifth power and add to sum\n            sum += i ** 5\n    # return sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # Initialize the sum to 0\n    power_sum = 0\n    \n    # Loop through the first n even numbers\n    for i in range(2, n+1, 2):\n        # Compute the current number raised to the fifth power\n        current_power = i ** 5\n        \n        # Add the current power to the sum\n        power_sum += current_power\n        \n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i][-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tuple_data in test_list:\n        result_list.append(tuple_data[-1])\n    return result_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Get the length of the tuples\n    length = len(test_tup1)\n    # Iterate through the tuples\n    for i in range(length):\n        # Subtract the elements of the first tuple from the elements of the second tuple with the same index\n        test_tup1[i] -= test_tup2[i]\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Create an empty tuple to store the result\n    result_tup = ()\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the index exists in the second tuple\n        if i < len(test_tup2):\n            # Subtract the elements of the first and second tuples\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        else:\n            # Append None if the index does not exist in the second tuple\n            result_tup += (None,)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # create a new tuple with the same number of elements as test_tup1\n    new_tup = tuple(test_tup1)\n\n    # loop through the new tuple and subtract the corresponding elements from test_tup2\n    for index in range(len(new_tup)):\n        new_tup[index] -= test_tup2[index]\n\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(0, n+1, 2):\n        coeff_sum += math.comb(n, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize the sum and sum of squares\n    sum = 0\n    sum_sq = 0\n    # loop through the first n even numbers and add the even binomial coefficients to the sum and sum of squares\n    for i in range(2, n+1, 2):\n        coeff = math.comb(n, i-1)\n        sum += coeff\n        sum_sq += coeff * coeff\n    # return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.comb(n, i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize variables\n    sum_even_binomial_coeff = 0\n    even_index = 0\n    \n    # Calculate sum of even index binomial coefficients\n    while even_index < n:\n        term = math.comb(n, even_index)\n        if even_index % 2 == 0:\n            sum_even_binomial_coeff += term\n        even_index += 1\n    \n    return sum_even_binomial_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i-1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = 1\n    index = 0\n    while index <= n:\n        coeff *= (n - index) // index\n        coeff //= 2\n        index += 1\n    return coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initializing the sum variable as 0\n    sum = 0\n    # loop from 0 to n\n    for i in range(n+1):\n        # if i is even\n        if i % 2 == 0:\n            # adding the binomial coefficient of i and n-i\n            sum += math.comb(n, i)\n    # returning the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n as input and calculates the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        return \"Error: n must be a positive integer.\"\n    \n    # Compute the first n even numbers\n    even_nums = [2]\n    for i in range(2, n+1, 2):\n        even_nums.append(i)\n    \n    # Compute the sum of even index binomial coefficients\n    sum_even_binomial_coeffs = 0\n    for i in range(1, n+1):\n        for j in range(2, i+1, 2):\n            sum_even_binomial_coeffs += binomial_coeff(i, j)\n    \n    return sum_even_binomial_coeffs\n\ndef binomial_coeff(n, k):\n    '''\n    Compute the binomial coefficient C(n,k).\n    '''\n    if k > n or k < 0 or n < 0:\n        return 0\n    else:\n        return math.factorial(n) // math.factorial(k) // math.factorial(n-k)"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize sum to zero\n    coeff_sum = 0\n\n    # iterate through indices from 0 to n-1\n    for i in range(n):\n        # find the binomial coefficient of index i and (n-i)\n        binomial_coeff = math.comb(n, i) * math.comb(n-1, n-i)\n\n        # multiply the binomial coefficient by 2 and add to sum\n        coeff_sum += 2 * binomial_coeff\n\n    return coeff_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n\n    Args:\n    r: float\n        Radius of the cylinder.\n    h: float\n        Height of the cylinder.\n\n    Returns:\n    float: Volume of the cylinder.\n\n    \"\"\"\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * (r**2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14159 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14159 * r**2 * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n\n    Args:\n        r (float): The radius of the cylinder\n        h (float): The height of the cylinder\n\n    Returns:\n        float: The volume of the cylinder\n    \"\"\"\n    # calculate the volume of the cylinder\n    V = (3/4) * pi * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3)*pi*r**2*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2 * 3.14159 * r * r # Formula for area of a cylinder\n    volume = area * h # Formula for volume of a cylinder\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= test_tup.index(test_tup[i]):\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1] < test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= test_tup.index(i):\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i-1] < test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i-1] < test_tup[i]:\n                count += 1\n            else:\n                break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*n*2 + n*2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize variables\n    decagonal = 1\n    num_of_rows = 1\n\n    # Iterate through each row\n    for row in range(1, n+1):\n\n        # Calculate the number of elements in the row\n        num_of_cols = 2 * row + 1\n\n        # Iterate through each column in the row\n        for col in range(1, num_of_cols+1):\n\n            # Calculate the value of the current element\n            value = decagonal + 1\n\n            # Add the value to the decagonal number\n            decagonal += value\n\n        # Move to the next row\n        decagonal += num_of_cols - 2 * row\n\n    # Return the nth decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the first row of the decagonal matrix\n    matrix = [[1]]\n\n    # Check if the nth decagonal number is greater than the number of rows in the matrix\n    if n > len(matrix):\n        return \"Invalid input: n is greater than the number of rows in the decagonal matrix.\"\n\n    # Calculate the number of rows in the matrix up to n\n    rows = n\n\n    # Initialize the sum variable for the nth decagonal number\n    decagonal_sum = 0\n\n    # Loop through each row in the matrix\n    for i in range(1, rows+1):\n        # Add the sum of the previous row with the i-th column of the matrix\n        decagonal_sum += matrix[i-1][0]\n\n        # If the current row is the last row in the matrix, add the first column of the matrix\n        if i == rows:\n            decagonal_sum += matrix[i-1][1]\n\n        # Add the row to the matrix\n        matrix.append([decagonal_sum])\n\n    # Return the nth decagonal number\n    return decagonal_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return (n*n + 4*n + 10) % 10 == 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    count = 0\n    decagonal_num = 1\n\n    # Calculate the nth decagonal number\n    while count < n:\n        count += 1\n        decagonal_num += (2 * count) ** 2\n\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Helper function to find nth term of the sequence\n    def nth_term(n, a=1, b=5):\n        if n == 1:\n            return a\n        elif n == 2:\n            return b\n        else:\n            return (2 * (a + b)) - nth_term(n - 1)\n    \n    # Find the nth term of the sequence\n    nth_term_n = nth_term(n)\n    return nth_term_n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return False\n    \n    # Initialize variables\n    decagonal = 0\n    count = 1\n    \n    # Calculate the nth decagonal number\n    while count <= n:\n        decagonal += count * (count + 1) // 2\n        count += 1\n    \n    # Check if the number is a decagonal number\n    if decagonal!= n * (n + 1) // 2:\n        return False\n    \n    return True"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    def decagonal(n):\n        return (5 * n * (3 * n - 1)) // 2\n\n    return decagonal(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 12\n    elif n == 3:\n        return 22\n    elif n == 4:\n        return 35\n    else:\n        return is_num_decagonal(n-1) + is_num_decagonal(n-2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (2 * n) ** 2 + 2 * (n - 1)\n\nn = int(input(\"Enter a number: \"))\n\nif n > 0:\n    print(is_num_decagonal(n))\nelse:\n    print(\"Invalid input\")"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes an array (dlist) and an element (item) and returns a tuple containing a boolean\n    indicating if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to set to remove duplicates\n    unique_list = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        if test_list.count(test_list[i])!= 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique,\n    and False otherwise.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(test_list)\n    \n    # If the length of the set is equal to the length of the original list, all elements in the list\n    # are unique, so return True\n    if len(unique_set) == len(test_list):\n        return True\n    \n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # create a set to store unique elements of the list\n    unique_set = set()\n    for element in test_list:\n        # if element is not already in the set, add it\n        if element not in unique_set:\n            unique_set.add(element)\n        else:\n            # if element is already in the set, return False\n            return False\n    # if no element is not unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set to remove duplicates\n    test_set = set(test_list)\n    \n    # check if the length of the set is the same as the length of the original list\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list containing the subtraction of the corresponding elements of the input lists.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i] - nums2[i])\n    return sub"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n\n    Args:\n    nums1 (list): List of numbers to subtract from.\n    nums2 (list): List of numbers to subtract from nums1.\n\n    Returns:\n    list: List of differences between corresponding elements of nums1 and nums2.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lengths of the two lists are the same\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length\")\n        return None\n    \n    # Subtract each element of the two lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the length of lists is same\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Length of lists must be same\")\n    \n    # subtract the lists element-wise and return the result\n    return [a-b for a,b in zip(nums1,nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes in two lists as input and returns the difference between them element-wise.\n    '''\n    # check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return None\n    \n    # initialize the result list with zeros\n    result = [0] * len(nums1)\n    \n    # iterate through the lists and subtract the elements element-wise\n    for i in range(len(nums1)):\n        result[i] = nums1[i] - nums2[i]\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists are of equal length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through the elements of the two lists and subtract them\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    \n    # create a dictionary to store the frequency of each digit\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # check whether the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    This function takes an integer as input and checks if the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # iterate through the digits of the integer\n    for digit in str(n):\n        # if the digit is already in the dictionary, increment its frequency by 1\n        if digit in freq:\n            freq[digit] += 1\n        # otherwise, add the digit as a key in the dictionary and set its frequency to 1\n        else:\n            freq[digit] = 1\n\n    # iterate through the keys of the dictionary and check if their frequency is greater than or equal to the value of the key\n    for key in freq:\n        if freq[key] < key:\n            return False\n\n    # if all digits pass the frequency check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    for digit in str(n):\n        digits.append(int(digit))\n    freq_dict = {}\n    for digit in digits:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n    for digit in freq_dict:\n        if freq_dict[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10\n    for i in str(n):\n        freq[int(i)] += 1\n    \n    for i in range(10):\n        if freq[i] > freq[n % 10]:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Initialize a dictionary to store the frequency of digits\n    freq = {}\n    \n    # Loop through each digit in the integer\n    for digit in str(n):\n        # If the digit is not already in the dictionary, add it with a frequency of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # If the digit is already in the dictionary, increment its frequency by 1\n        else:\n            freq[digit] += 1\n    \n    # Loop through each digit in the integer again and check if its frequency is greater than or equal to the digit itself\n    for digit in str(n):\n        # If the digit is not in the dictionary, return False\n        if digit not in freq:\n            return False\n        # If the digit is in the dictionary and its frequency is greater than or equal to the digit itself, continue\n        elif freq[digit] >= int(digit):\n            continue\n        # If the digit is in the dictionary and its frequency is less than the digit itself, return False\n        else:\n            return False\n    \n    # If no errors were found in the integer, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # Create a dictionary to store the frequency of each digit in the number\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Iterate through the dictionary to check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Define a dictionary to store the frequency of each digit\n    digit_freq = {}\n\n    # Count the frequency of each digit\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if freq > 1 or freq > int(digit):\n            return False\n\n    # If all the digits have frequency less than or equal to themselves, then the input is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Create a dictionary to store the frequency of digits\n    freq = {}\n\n    # Loop through each digit in the integer\n    for digit in str(n):\n        # Check if the digit is already in the dictionary\n        if digit in freq:\n            # Increment the frequency count\n            freq[digit] += 1\n        else:\n            # Add the digit to the dictionary with a frequency count of 1\n            freq[digit] = 1\n\n    # Loop through each digit in the integer again to check frequency\n    for digit in str(n):\n        # Check if the digit is in the dictionary\n        if digit in freq and freq[digit] > digit:\n            # The digit has a frequency greater than itself\n            return False\n\n    # If we make it through both loops, the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {i: n.count(str(i)) for i in range(10)}\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    # If all digits have valid frequencies, the number is valid\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    for item in list:\n        if item!= element:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    else:\n        for i in range(len(list)):\n            if list[i]!= element:\n                return False\n        return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Initialize a variable to keep track of whether all elements are equal to the given element\n    are_all_elements_equal = True\n    \n    # Loop through each item in the list and check if it's equal to the given element\n    for item in list:\n        if item!= element:\n            are_all_elements_equal = False\n            break\n    \n    # Return the result of the check\n    return are_all_elements_equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(list[i] == element for i in range(len(list))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        for i in range(1,len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(elem == element for elem in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'(?<=a)[b]{2,3}')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"a[b]*b\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[^b]*b\\1{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b){2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    return bool(pattern.match(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=bb{2,3})'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    This function takes an array a, its size n, and the number of times the array should be repeated k. \n    It returns the maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    The algorithm to solve this problem is:\n    1. Calculate the sum of the first n elements of the array a.\n    2. Calculate the sum of the first k elements of the array a.\n    3. Calculate the sum of the first (n+k) elements of the array a.\n    4. Find the difference between the two sums and the sum of the first (n+k) elements.\n    5. Return the difference.\n\n    Complexity: O(n)\n    '''\n    # Step 1: Calculate the sum of the first n elements of the array a.\n    sum_n = sum(a[:n])\n\n    # Step 2: Calculate the sum of the first k elements of the array a.\n    sum_k = sum(a[:k])\n\n    # Step 3: Calculate the sum of the first (n+k) elements of the array a.\n    sum_n_plus_k = sum(a[:n+k])\n\n    # Step 4: Find the difference between the two sums and the sum of the first (n+k) elements.\n    diff = abs(sum_k - sum_n_plus_k)\n\n    # Step 5: Return the difference.\n    return diff"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    temp_sum = 0\n    max_window = float('-inf')\n    current_window = 0\n    \n    for i in range(n):\n        current_window += a[i]\n        \n        if current_window > max_window:\n            max_window = current_window\n        \n        if current_window == max_window:\n            temp_sum = current_window\n        \n        if i >= k:\n            temp_sum -= a[i-k]\n            \n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # initialize the result variable\n    result = float('-inf')\n\n    # create a copy of the array to modify\n    array = a.copy()\n\n    # repeat the array k times\n    for i in range(k):\n        array.extend(array)\n\n    # find the maximum subarray sum\n    for i in range(n - k):\n        subarray = array[i:i+k]\n        subarray_sum = sum(subarray)\n        if subarray_sum > result:\n            result = subarray_sum\n\n    # return the maximum subarray sum\n    return result"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Find the maximum subarray sum using Kadane's algorithm\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if i >= k:\n            current_sum -= a[i - k]\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum sum with the first element of the array\n    max_sum = a[0]\n    \n    # Initialize the current sum with the first element of the array\n    current_sum = a[0]\n    \n    # Initialize a dictionary to store the current sum of each element in the array\n    current_sum_dict = {0: a[0]}\n    \n    # Iterate over the array from the second element\n    for i in range(1, n):\n        \n        # Calculate the new current sum by adding the current element and the repeated element\n        new_current_sum = current_sum + a[i]\n        \n        # Check if the new current sum is already in the dictionary\n        if new_current_sum in current_sum_dict:\n            \n            # If it is, then update the maximum sum\n            max_sum = max(max_sum, new_current_sum)\n        \n        # If the new current sum is not in the dictionary, add it to the dictionary with its value set to the current sum\n        else:\n            current_sum_dict[new_current_sum] = current_sum\n        \n        # Update the current sum\n        current_sum = new_current_sum\n        \n    # Multiply the maximum sum by k and return the result\n    return max_sum * k"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    repeated_array = [0] * (n + k)\n    for i in range(n):\n        repeated_array[i] = a[i]\n    for i in range(k):\n        repeated_array[i + n] = a[i]\n    for i in range(k, n + k):\n        repeated_array[i] = a[i - k]\n    for i in range(n):\n        max_sum = max(max_sum, repeated_array[i] + repeated_array[n + i])\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        modified_array = a * k\n        max_sum = max(max_sum, sum(modified_array))\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum as 0\n    max_sum = 0\n    # Initialize the sum of the first k elements as 0\n    sum_k = 0\n    # Initialize the sum of the modified array as 0\n    sum_mod = 0\n    # Initialize a variable to keep track of the current position of the modified array\n    pos = 0\n    \n    # Loop through the given array\n    for i in range(n):\n        # Add the next element to the sum of the modified array\n        sum_mod += a[i]\n        # Update the sum of the first k elements\n        sum_k += a[i]\n        # If the sum of the first k elements exceeds the sum of the modified array, update the maximum sum and the current position\n        if sum_k > sum_mod:\n            max_sum = sum_k\n            pos = i\n        # If the current position is equal to k, update the sum of the first k elements\n        if pos == k-1:\n            sum_k = sum_mod\n        # If the current position is greater than k, reset the sum of the first k elements and update the sum of the modified array\n        else:\n            sum_k = 0\n            sum_mod = 0\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    max_start = 0\n    max_end = 0\n    window_sum = 0\n\n    # Loop through the array to find the maximum sum of a contiguous array in the modified array\n    for i in range(n):\n        if i < k - 1:\n            window_sum += a[i]\n        else:\n            window_sum -= a[i - k]\n\n        # Update the maximum sum of a contiguous array in the modified array\n        if window_sum > max_sum:\n            max_sum = window_sum\n            max_start = i - k + 1\n            max_end = i\n\n    return a[max_start:max_end + 1]"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    repeated_array = []\n    # Iterate over the array and add the elements to a repeated array k times\n    for i in range(n):\n        repeated_array.append(a[i])\n        for j in range(1, k):\n            repeated_array.append(a[i])\n    # Calculate the sum of the repeated array\n    sum_repeated = sum(repeated_array)\n    # Iterate over the array and calculate the sum of the contiguous sub-array\n    max_sum = max(max_sum, sum_repeated)\n    for i in range(n):\n        current_sum = sum_repeated\n        for j in range(1, k):\n            current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize sum of squares to 0\n    total_sum = 0\n\n    # loop through first n even numbers\n    for i in range(n, 0, -2):\n        # add the square of i to the total sum\n        total_sum += i**2\n\n    # return the total sum of squares\n    return total_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of squares of the first\", n, \"even natural numbers is:\", square_Sum(n))"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        num = 2 * count + 1\n        square = num ** 2\n        sum += square\n        count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns the list of maximum length.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # create an empty list to store the maximum length of each sublist\n    max_lengths = []\n    # loop through each sublist in the main list\n    for sublist in list1:\n        # create an empty list to store the length of each item in the sublist\n        lengths = []\n        # loop through each item in the sublist\n        for item in sublist:\n            # append the length of the current item to the lengths list\n            lengths.append(len(str(item)))\n        # find the maximum length in the lengths list\n        max_length_index = lengths.index(max(lengths))\n        # append the maximum length index to the max_lengths list\n        max_lengths.append(max_length_index)\n    # create a new list to store the sublists with their maximum length\n    max_sublists = []\n    # loop through each sublist in the main list\n    for i in range(len(list1)):\n        # create a new sublist with the maximum length index\n        max_sublist = [list1[i][j] for j in range(max_lengths[i])]\n        # append the sublist to the max_sublists list\n        max_sublists.append(max_sublist)\n    # return the max_sublists list\n    return max_sublists"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = [max(len(x) for x in list1) for i in range(len(list1))]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_length = max(len(sublist), max_length)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > max(max_lengths) and len(lst) > 0:\n            max_lengths = [len(lst)]\n        elif len(lst) > max(max_lengths):\n            max_lengths = [len(lst)]\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(max_length_list) == 0:\n            max_length_list.append(len(list1[i]))\n        else:\n            if len(list1[i]) > max_length_list[-1]:\n                max_length_list[-1] = len(list1[i])\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes a list of lists as input and returns the list of maximum length found in the list.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a list of lists where each inner list contains the number of ways to paint the fence with n-2 posts and (k-1) colors for each pair of adjacent posts having the same color\n    ways = [[0] * (k-1) for i in range(n-2)]\n\n    # Base case: If there is only one color available, only one way to paint the fence\n    if k == 1:\n        ways[0][0] = 1\n\n    # Fill in the rest of the matrix using dynamic programming\n    for i in range(1, n-1):\n        for j in range(1, k-1):\n            if ways[i-1][j] == 1:\n                ways[i][j] = 1\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i][j-1]\n\n    # Return the total number of ways to paint the fence\n    return ways[n-2][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0] * (k+1) for i in range(n+1)]\n    for i in range(n+1):\n        dp[i][1] = 1\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            if dp[i-1][j] == 1:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n                for l in range(1, k+1):\n                    if l == j:\n                        dp[i][j] += dp[i-1][l]\n                    elif l < j:\n                        dp[i][j] += dp[i-1][l] * dp[i-1][j-l]\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    \n    for i in range(1, n + 1):\n        if i <= k:\n            dp[i] = 1\n        else:\n            for j in range(1, min(i, k) + 1):\n                dp[i] += dp[i - j]\n    \n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i % 2 == 0:\n                if j == 1:\n                    dp[i] += dp[i - 2]\n                else:\n                    dp[i] += dp[i - 2] * dp[i - 3]\n            else:\n                if j == 1:\n                    dp[i] += dp[i - 1]\n                else:\n                    dp[i] += dp[i - 1] * dp[i - 2]\n\n    return dp[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    if k < 2:\n        raise ValueError(\"k must be at least 2\")\n\n    # Initialize a boolean array to represent the fence\n    fence = [False] * n\n\n    # Define a recursive function to count the number of ways to paint the fence\n    def count_ways(idx, color):\n        if idx == 0:\n            return 1\n        elif fence[idx - 1] and color == fence[idx - 1]:\n            return count_ways(idx - 1, color)\n        else:\n            return count_ways(idx - 1, color) + count_ways(idx - 2, color) + count_ways(idx - 3, color)\n\n    # Call the recursive function to count the number of ways\n    return count_ways(n - 1, fence[n - 1])"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a dictionary to store the count of ways for each possible color\n    counts = {}\n    \n    # Initialize the count of ways for all colors to 1\n    for i in range(k):\n        counts[i] = 1\n    \n    # Initialize the count of ways for all combinations of colors to 0\n    for i in range(2, n + 1):\n        for j in range(k):\n            counts[j] += counts[j - 1]\n    \n    # Return the count of ways for k colors\n    return counts[k - 1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # create a list to store the count of ways of painting the fence\n    count = [0] * (k+1)\n    count[0] = 1  # one way to paint the fence with 0 posts and k colors\n    \n    for i in range(1, k+1):\n        count[i] = count[i-1] * (n-2*i+1)  # two adjacent posts have the same color\n    \n    return count[k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0]*(n+1)\n    dp[0] = 1\n    \n    for i in range(1, n+1):\n        dp[i] = 0\n        for j in range(k+1):\n            if j < i:\n                dp[i] += dp[j]\n            elif j == i:\n                dp[i] += dp[j-1]\n    \n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways(n, k, start_color, end_color, painted_posts):\n        if start_color == end_color:\n            return 1\n        if len(painted_posts) >= n:\n            return 0\n        ways = 0\n        for i in range(k):\n            if i == start_color:\n                continue\n            ways += count_ways(n, k, i, end_color, painted_posts + [i])\n        return ways\n\n    return count_ways(n, k, 0, k-1, [])"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    # create a list of 0's with length n\n    fence = [0] * n\n\n    # loop through each color\n    for color in range(k):\n        # count the number of ways to paint the fence\n        count = 0\n        for i in range(n):\n            # check if the adjacent post has the same color\n            if fence[i] == color:\n                count += 1\n            # if the adjacent post has a different color, paint the fence\n            else:\n                fence[i] = color\n                # check if the adjacent post has the same color\n                if fence[i-1] == color:\n                    count += 1\n                # if the adjacent post has a different color, unpaint the fence\n                else:\n                    fence[i-1] = -1\n        # print the count for each color\n        print(\"Count for color\", color, \"is\", count)\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None # return None if m is 0\n    else:\n        quotient = n//m # calculate the quotient of n and m using integer division\n        remainder = n%m # calculate the remainder of n divided by m\n        if remainder == 0:\n            return quotient # if remainder is 0, return the quotient\n        else:\n            return quotient + 1 # otherwise, return the quotient rounded up to the nearest integer"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = int(n/m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n\n    Parameters:\n    w (float): the length of the base of the triangle\n    h (float): the length of the height of the triangle\n\n    Returns:\n    float: the third side of the right angled triangle\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function finds the third side of a right angled triangle given its\n    legs' length.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    third_leg = s / 2\n    return third_leg"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w*w + h*h)\n    return 2*s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # use Pythagorean theorem to find the length of the third side\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using the Pythagorean theorem to find the hypotenuse\n    hypo = math.sqrt(w**2 + h**2)\n\n    # Using the law of cosines to find the angle between the sides\n    angle = math.degrees(math.acos((w**2 + hypo**2 - h**2) / (2 * w * hypo)))\n\n    # Using trigonometry to find the length of the third side\n    third_side = math.sin(math.radians(angle)) * hypo\n\n    return round(third_side, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2) # Use the Pythagorean theorem to find the square root of w^2 + h^2\n    return s * math.sin(math.pi/6) # Use the formula for the sine of 30 degrees to find the third side of the triangle"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Use Heron's formula to find the semi-perimeter\n    s = (w + h) / 2\n    \n    # Use cosine law to find the area of the triangle\n    area = math.sqrt(s * (s-w) * (s-h))\n    \n    # Find the semi-perimeter of the triangle\n    t = (w * h) / (4 * area)\n    \n    # Return the third side\n    return t"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle using Heron's formula\n    s = (w + h) / 2\n    # Use the math.sqrt() function to calculate the square root of s\n    c = math.sqrt(s ** 2 - w ** 2 - h ** 2)\n    # Calculate the third side of the triangle\n    third_side = c * math.sin(math.pi / 3)\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize maximum value and its index to be the first element of the list\n    max_val = listval[0]\n    max_index = 0\n\n    # iterate over the remaining elements of the list\n    for i in range(1, len(listval)):\n        # if the current element is greater than the maximum value, update both values and indices\n        if listval[i] > max_val:\n            max_val = listval[i]\n            max_index = i\n\n    # return the maximum value and its index\n    return max_val, max_index"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif isinstance(listval[0], int):\n        return max(listval)\n    elif isinstance(listval[0], float):\n        return max(listval)\n    elif isinstance(listval[0], str):\n        return max(listval)\n    else:\n        return None"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a list as input and returns the maximum value in the list.\n\n    Args:\n        lst: A list of any data type.\n\n    Returns:\n        The maximum value in the list.\n    \"\"\"\n    max_num = lst[0]\n    for i in lst:\n        if i > max_num:\n            max_num = i\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_num = None\n    for item in listval:\n        if max_num is None or item > max_num:\n            max_num = item\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for val in listval:\n        if max_value is None:\n            max_value = val\n        elif val > max_value:\n            max_value = val\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError(\"Input must be a list\")\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if val > max_val or max_val is None:\n            max_val = val\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    def merge(arr, left, mid, right):\n        \"\"\"\n        Merge two sorted sub-arrays.\n        \"\"\"\n        n1 = mid - left + 1\n        n2 = right - mid\n\n        L = [0] * n1\n        R = [0] * n2\n\n        for i in range(n1):\n            L[i] = arr[left + i]\n\n        for j in range(n2):\n            R[j] = arr[mid + 1 + j]\n\n        i = 0\n        j = 0\n        k = left\n\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < n1:\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < n2:\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n    def merge_sort(arr, left, right):\n        \"\"\"\n        Sort an array using merge sort.\n        \"\"\"\n        if left < right:\n            mid = (left + right) // 2\n\n            merge_sort(arr, left, mid)\n            merge_sort(arr, mid + 1, right)\n\n            merge(arr, left, mid, right)\n\n    merge_sort(arr, 0, len(arr) - 1)\n    inv_count = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[0]:\n            inv_count += (len(arr) - i)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        left = 0\n        right = i\n        while left < right:\n            if arr[left] > arr[right]:\n                left += 1\n                inv_count += right - left\n            else:\n                right -= 1\n                inv_count += right - left\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # function to count inversions in the array\n    def count_inversions(arr, left, right): \n        if left >= right: \n            return 0 \n        i = left\n        j = right\n        inv_count = 0\n        while i < j: \n            while i < j and arr[i] <= arr[left]: \n                i += 1 \n            while i < j and arr[j] >= arr[left]: \n                j -= 1 \n            if i < j: \n                inv_count += j - i \n                arr[i], arr[j] = arr[j], arr[i] \n        return inv_count \n        \n    # recursive function to count inversions\n    def count_inv_recursive(arr, left, right): \n        if left >= right: \n            return 0 \n        inv_count = count_inv_recursive(arr, left + 1, right) \n        inv_count += count_inv_recursive(arr, left, right - 1) \n        inv_count += count_inversions(arr, left, right) \n        return inv_count \n        \n    # call the recursive function and return the result\n    return count_inv_recursive(arr, 0, len(arr) - 1) "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - j\n            else:\n                count += j - i\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n\n    # Divide array into two halves\n    for i in range(n // 2):\n        # Find the largest element in left half\n        max_idx = i\n        for j in range(i+1, n):\n            if arr[j] > arr[max_idx]:\n                max_idx = j\n        # Swap the largest element with the first element in the right half\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        # Count inversions in the right half\n        left, right = i + 1, n - 1\n        while left < right:\n            if arr[left] > arr[right]:\n                inv_count += (right - left)\n                left += 1\n            else:\n                right -= 1\n\n    # Add the count of inversions in the left half\n    for i in range(n // 2, n):\n        for j in range(i-1, -1, -1):\n            if arr[i] < arr[j]:\n                inv_count += (i - j)\n                break\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Find the length of the array\n    n = len(arr)\n    # Initialize the count variable to 0\n    count = 0\n    # Use two pointers to iterate through the array\n    i = 0\n    j = n - 1\n    while i < j:\n        # Check if the left and right subarrays are sorted\n        if arr[i] > arr[j]:\n            # Swap the elements at i and j\n            arr[i], arr[j] = arr[j], arr[i]\n            # Increment the count variable\n            count += j - i\n            # Recursively sort the left subarray\n            get_Inv_Count(arr[:i])\n            # Recursively sort the right subarray\n            get_Inv_Count(arr[i+1:])\n        # If the left subarray is sorted, increment i\n        else:\n            i += 1\n        # If the right subarray is sorted, decrement j\n        else:\n            j -= 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # sort the array \n    arr.sort() \n    # count inversions \n    inv_count = 0 \n    i = 0\n    j = n-1\n    while i < j: \n        if arr[i] > arr[j]: \n            inv_count += j-i \n            i += 1 \n        else: \n            j -= 1 \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n-j\n            elif arr[j] > arr[i]:\n                inv_count += j-i\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n  \n    # Divide the array into two halves \n    mid = n // 2 \n  \n    # Recursively count inversions in left and right halves \n    L = get_Inv_Count(arr[:mid]) \n    R = get_Inv_Count(arr[mid:]) \n  \n    # Count inversions in the two halves \n    inv_count = L + R \n  \n    # Count inversions in the main array \n    for i in range(mid): \n        for j in range(i+1, mid): \n            if arr[i] > arr[j]: \n                inv_count += mid - j \n  \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    n = len(arr)\n    count = 0\n\n    # Sort the array in increasing order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - i - 1  # Count the number of inversions\n\n    return count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list and flattens it into a single,\n    one-dimensional list.\n    \"\"\"\n    flattened = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list structure and flattens it into a single list.\n\n    :param lst: a nested list structure\n    :return: a flattened list\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list and returns a flattened version of it.\n    \"\"\"\n    # initialize an empty list to store the flattened version of the list\n    flat_lst = []\n    # loop through each element of the list\n    for item in lst:\n        # if the item is a list, recursively call the function on the item and append the flattened result to the flat_lst\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        # if the item is not a list, simply append it to the flat_lst\n        else:\n            flat_lst.append(item)\n    # return the flattened list\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Parameters:\n    list1: A list of lists.\n\n    Returns:\n    A flattened list containing all the elements of the nested list.\n    \"\"\"\n    # Define a recursive function to flatten a nested list.\n    def flatten(lst):\n        \"\"\"\n        Recursive function to flatten a nested list.\n\n        Parameters:\n        lst: A nested list.\n\n        Returns:\n        A flattened list containing all the elements of the nested list.\n        \"\"\"\n        # Initialize an empty list to store the flattened elements.\n        result = []\n        # Loop through each element in the list.\n        for item in lst:\n            # If the element is a list, call the recursive function to flatten it.\n            if isinstance(item, list):\n                result += flatten(item)\n            # Otherwise, append it to the result list.\n            else:\n                result.append(item)\n        # Return the flattened list.\n        return result\n\n    # Call the recursive function to flatten the nested list.\n    return flatten(list1)"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Recursively flatten a list of lists into a single list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int) # create defaultdict for storing max_values\n    \n    # iterate over the list of tuples\n    for item in stdata:\n        # add the values to the defaultdict\n        max_dict[item[0]] += item[1]\n        \n    # find the maximum value from the defaultdict\n    max_val = max(max_dict.values())\n        \n    # return the maximum value as the result\n    return max_val"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    d = defaultdict(int)\n    for item in stdata:\n        d[item[0]] += item[1]\n    for key, value in d.items():\n        if value > max_agg:\n            max_agg = value\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_dict = defaultdict(int)\n    for i,j in stdata:\n        max_dict[i] += j\n        max_sum = max(max_sum, sum(max_dict.values()))\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)  # defaultdict to store aggregate count\n    max_agg = 0  # initialize max_agg variable\n    \n    # iterate through each tuple in the list\n    for tup in stdata:\n        # calculate the aggregate of the tuple\n        agg = sum(tup)\n        \n        # if the aggregate is greater than the current max_agg, update max_agg\n        if agg > max_agg:\n            max_agg = agg\n            \n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    max_aggregate_dict = defaultdict(int)\n    for item in stdata:\n        for i in range(len(item)-1):\n            max_aggregate_dict[i] = max(max_aggregate_dict[i], item[i+1])\n    max_aggregate_list = []\n    for key, value in max_aggregate_dict.items():\n        max_aggregate_list.append(value)\n    max_aggregate_list.sort(reverse=True)\n    return max_aggregate_list[0]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize defaultdict to store the sum of each customer for each month\n    customer_sums = defaultdict(int)\n    # Initialize a variable to store the maximum aggregate\n    max_sum = 0\n    # Loop through each tuple in the list\n    for t in stdata:\n        # Extract the customer name and their transaction amount\n        customer, amount = t\n        # Update the sum of the customer for the current month\n        customer_sums[customer] += amount\n        # Update the maximum aggregate if the current sum is greater than the previous maximum\n        max_sum = max(max_sum, customer_sums[customer])\n    # Return the maximum aggregate\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int) # create a defaultdict to store the maximum aggregate\n\n    # iterate over each tuple in the list\n    for tup in stdata:\n        # calculate the aggregate for the tuple\n        agg = tup[0] * tup[1]\n        # update the maximum aggregate in the defaultdict\n        max_agg[agg] = max(max_agg[agg], agg)\n\n    # return the maximum aggregate\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate and the corresponding stock price for each stock\n    max_agg_dict = defaultdict(int)\n\n    # iterate through the list of tuples and calculate the maximum aggregate for each stock\n    for stock, price in stdata:\n        max_agg_dict[stock] = max(max_agg_dict[stock], price)\n\n    # find the maximum aggregate for each stock\n    max_agg = max(max_agg_dict.values())\n\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = defaultdict(int)\n    max_sum[0] = stdata[0][1]\n    for i in range(1, len(stdata)):\n        max_sum[i] = max(max_sum[i-1], stdata[i][1] + max_sum[i-2])\n    return max_sum[len(stdata)-1]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    max_map = defaultdict(int)\n    max_sum = 0\n    \n    # iterate over each tuple in the list\n    for num, weight in stdata:\n        max_map[weight] += num\n        max_sum = max(max_sum, sum(max_map.values()))\n    \n    return max_sum"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        sum1 = sum(int(i) for i in binary[:n])\n        sum2 = sum(int(i) for i in binary[-n:])\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        curr_sum = 0\n        for j in range(n):\n            if i & (1<<j):\n                curr_sum += 1\n            else:\n                curr_sum -= 1\n        if curr_sum == 0:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    num_1 = 0\n    num_2 = 0\n    for i in range(2**n):\n        num_1 = i\n        num_2 = 0\n        for j in range(2**n):\n            num_2 += j\n            if num_1 == num_2:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n, 2**n+2**n):\n        binary = bin(i)[2:]\n        sum_first_n = sum(int(binary[j]) for j in range(n))\n        sum_last_n = sum(int(binary[j]) for j in range(n-1, -1, -1))\n        if sum_first_n == sum_last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n = bin(i)[2:].zfill(n)\n        last_n = bin(i)[2:].zfill(n)[::-1]\n        if int(first_n) + int(last_n) == 0:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # initialize count and set sum_first and sum_last variables to zero\n    count = 0\n    sum_first = 0\n    sum_last = 0\n\n    # loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # convert the binary number to a list of bits\n        bits = bin(i)[2:].zfill(2*n)\n        \n        # calculate the sum of first n bits and the sum of last n bits\n        sum_first = int(bits[:n], 2)\n        sum_last = int(bits[n:], 2)\n        \n        # check if the sum of first n bits and the sum of last n bits are same\n        if sum_first == sum_last:\n            count += 1\n    \n    # return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = format(i, 'b')\n        sum_first = sum(int(binary[j]) for j in range(n))\n        sum_last = sum(int(binary[j]) for j in range(len(binary)-n, len(binary)))\n        if sum_first == sum_last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        seq = bin(i)[2:].zfill(n)\n        if int(seq[:n]) == int(seq[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1, -1, -1):\n        # Find the sum of the first n bits\n        first_sum = 0\n        for j in range(n):\n            first_sum += i % 2\n            i //= 2\n        # Find the sum of the last n bits\n        last_sum = 0\n        for j in range(n):\n            last_sum += i % 2\n            i //= 2\n        # Check if the sum of first n bits and last n bits are same\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        # convert binary number to list of bits\n        bits = [int(bit) for bit in bin(i)[2:]]\n        # check if sum of first n bits is equal to sum of last n bits\n        if sum(bits[:n]) == sum(bits[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    elif isinstance(d, list):\n        return 1 + max(map(dict_depth, d))\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, 1 + dict_depth(item))\n        elif isinstance(value, tuple):\n            for item in value:\n                if isinstance(item, dict):\n                    depth = max(depth, 1 + dict_depth(item))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth counter\n    depth = 0\n    # traverse the dictionary\n    for key, value in d.items():\n        # check if the value is a dictionary\n        if isinstance(value, dict):\n            # recursively call the function\n            sub_depth = dict_depth(value)\n            # increment the depth counter by the sub-depth\n            depth += sub_depth\n    # return the depth counter\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key in d:\n        current_depth += 1\n        if isinstance(d[key], dict):\n            new_depth = dict_depth(d[key])\n            current_depth += new_depth\n            if new_depth > max_depth:\n                max_depth = new_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1 + dict_depth(d[key])\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            new_depth = 1 + dict_depth(d[key])\n            if new_depth > max_depth:\n                max_depth = new_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n            depth += dict_depth(v)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    for i in range(rotations):\n        arr = arr[ranges[i]:] + arr[:ranges[i]]\n\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a Python function to find element at a given index after number of rotations.\n    \n    Parameters:\n    arr (list): the list of elements to be rotated\n    ranges (list): the indices of the elements to be rotated\n    rotations (int): the number of rotations to perform\n    index (int): the index of the element to be rotated\n    \n    Returns:\n    int: the element at the given index after rotating the elements in `arr` by `rotations` number of times using the given `ranges`\n    \"\"\"\n    # Helper function to check if a number is within a given range\n    def is_within_range(num, range_start, range_end):\n        return range_start <= num <= range_end\n\n    # Check if the given index is within the range of the list\n    if index < 0 or index >= len(arr):\n        return None\n\n    # Determine the range of elements to be rotated\n    range_start, range_end = ranges[0], ranges[-1]\n\n    # Check if the first element is within the given range\n    if is_within_range(arr[0], range_start, range_end):\n        # Rotate the first element to the end of the list\n        arr = arr[1:] + [arr[0]]\n    else:\n        # Find the element to be rotated to the end of the list\n        for num in arr[1:]:\n            if is_within_range(num, range_start, range_end):\n                break\n        else:\n            return None\n\n        # Rotate the element to the end of the list\n        arr = arr[1:] + [num]\n\n    # Rotate the remaining elements using the given rotations\n    for _ in range(rotations):\n        # Determine the range of elements to be rotated\n        range_start, range_end = ranges[0], ranges[-1]\n\n        # Check if the last element is within the given range\n        if is_within_range(arr[-1], range_start, range_end):\n            # Rotate the last element to the beginning of the list\n            arr = [arr[-1]] + arr[:-1]\n        else:\n            # Find the element to be rotated to the beginning of the list\n            for num in arr[:-1]:\n                if is_within_range(num, range_start, range_end):\n                    break\n            else:\n                return None\n\n            # Rotate the element to the beginning of the list\n            arr = [num] + arr[:-1]\n\n    # Determine the index of the element to be returned\n    if index < len(arr):\n        return arr[index]\n    else:\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes in an array, a list of ranges, a number of rotations, and an index.\n    It calculates the index of the element that needs to be found after the number of rotations.\n    It returns the element at that index.\n    '''\n    # Initialize the count variable to keep track of the number of rotations\n    count = 0\n    \n    # Initialize the current element to the first element of the array\n    current = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Calculate the new current element after rotating\n        new_current = (current + i) % len(arr)\n        \n        # Check if the current element is in the range specified by the ranges list\n        if (count + i) % len(ranges) == index:\n            return arr[new_current]\n        \n        # Increment the count variable for the next rotation\n        count += 1\n        \n        # Check if the count variable has reached the number of rotations\n        if count == rotations:\n            return arr[new_current]\n    \n    # If the count variable has not reached the number of rotations, return the current element\n    return current"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes a list `arr`, a list of ranges `ranges` and a number of rotations `rotations`, as well as an index `index`.\n    It first calculates the position of the element after the rotations. Then, it returns the element at that position.\n    \"\"\"\n    # Calculate the position of the element after the rotations\n    new_index = (index - 1) % len(arr)\n    for i in range(rotations):\n        # Calculate the new position of the element after the rotations\n        new_index = (new_index - 1) % len(arr)\n        # Update the range of the new index\n        ranges[i] = (ranges[i][0], new_index)\n    \n    # Find the element at the new index\n    element = arr[ranges[0][1]]\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # initialize the result to None\n    result = None\n    # loop through each rotation\n    for rotation in rotations:\n        # get the number of times to rotate the array\n        num_rotations = ranges[rotation]\n        # get the current element to rotate\n        current_element = arr[index]\n        # rotate the array by num_rotations\n        rotated_arr = arr[index:] + arr[:index]\n        # loop through each index after the current index\n        for i in range(index, len(rotated_arr), 1):\n            # if the current element matches the element at the current index after rotation,\n            # return the element at the current index after rotation\n            if rotated_arr[i] == current_element:\n                result = rotated_arr[i]\n                break\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes three parameters:\n    1. arr: a list of integers representing the given array.\n    2. ranges: a list of two integers representing the range of elements to be considered.\n    3. rotations: the number of rotations to be applied on the array.\n\n    It returns the element at the given index after the specified number of rotations.\n    \"\"\"\n\n    for i in range(rotations):\n        # Find the minimum and maximum elements in the current range\n        min_val = min(arr[range1[0]:range2[1]+1])\n        max_val = max(arr[range1[0]:range2[1]+1])\n\n        # Find the new range after the rotation\n        new_range1 = (min_val, max_val)\n        new_range2 = (min_val, max_val)\n\n        # Update the ranges list with the new range\n        ranges[i] = new_range1\n        ranges[i+1] = new_range2\n\n    # Return the element at the given index after the specified number of rotations\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, range of rotations, index, and returns the element at the given index after rotating the array by the given number of rotations.\n    \"\"\"\n    n = len(arr)\n    k = rotations % n\n    \n    # rotating the array\n    for i in range(n):\n        j = (i + k) % n\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # finding the element at the given index after rotating the array\n    count = 0\n    for i in range(n):\n        if i == index:\n            count += 1\n    \n    return arr[count-1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    rotated_arr = [arr[(i + rotations) % n] for i in range(n)]\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    for i in range(rotations):\n        index = (index - ranges[i][0]) % len(arr)\n        arr.rotate(-ranges[i][1])\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = abs(rotations) #convert rotations to positive value\n\n    count = 0\n    element = None\n\n    #find the element at the given index\n    for i in range(len(arr)-rotations-1) :\n        if arr[i+rotations] == index :\n            count += 1\n            element = arr[i]\n            if count == index :\n                break\n\n    #if element is found at the given index after rotations, return it\n    if element is not None :\n        return element\n    else :\n        #if element is not found at the given index after rotations, return None\n        return None\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    words = [word for word in words if re.search(pattern, word)]\n    return words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p.*', word):\n            p_words.append(word)\n        if len(p_words) == 2:\n            break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # create a regular expression pattern to match words starting with letter 'p'\n    pattern = r'^p.*'\n    \n    # use the pattern to find all words in the list that start with letter 'p'\n    matches = re.findall(pattern, words)\n    \n    # return the two words that match the pattern\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p\")\n    for word in words:\n        if pattern.match(word):\n            return word, next(word for word in words if pattern.match(word))\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    matches = pattern.findall(words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define the regular expression pattern to match words starting with 'p'\n    pattern = r'^p\\w+'\n    # Initialize two variables to store the matching words\n    first_word = ''\n    second_word = ''\n    # Loop through the list of words\n    for word in words:\n        # Check if the word matches the pattern and if it is not already stored in the variables\n        if re.match(pattern, word) and (first_word == '' or second_word == ''):\n            # If the word matches the pattern, store it in the corresponding variable\n            if first_word == '':\n                first_word = word\n            else:\n                second_word = word\n    # Return the matching words as a tuple\n    return (first_word, second_word)"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if len(matches) < 2:\n        return None\n    return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'\n    p_words = re.findall(pattern, words)\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match('^p', word):\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize a list to store the maximum sum of increasing subsequence until the ith index\n    max_sum = [0] * n\n\n    # Initialize a list to store the sum of increasing subsequence until the ith index\n    sum_list = [0] * n\n\n    # Initialize a variable to store the sum of the first k elements\n    sum_k = sum(a[:k])\n\n    # Initialize a variable to store the maximum sum of increasing subsequence from prefix until the ith index\n    max_sum_until_i = sum_k\n\n    # Initialize a variable to store the sum of the first k elements until the ith index\n    sum_k_until_i = sum_k\n\n    # Iterate through the array from 0 to n-1\n    for i in range(n):\n        # Check if the i-th element is greater than or equal to k\n        if i >= k:\n            # Calculate the sum of the first k elements until the i-th index\n            sum_k_until_i -= a[i - k]\n\n        # Calculate the sum of the first k elements from the i-th index\n        sum_k_from_i = sum_k_until_i\n\n        # Calculate the maximum sum of increasing subsequence from prefix until the i-th index\n        for j in range(k, n):\n            # Update the maximum sum of increasing subsequence from prefix until the i-th index if the current element is greater than the current maximum sum\n            if a[j] > max_sum[j - k]:\n                max_sum[j - k] = a[j]\n\n            # Update the sum of increasing subsequence from prefix until the i-th index if the current element is greater than the current sum of increasing subsequence from prefix until the j-th index\n            if a[j] > sum_list[j - k]:\n                sum_list[j - k] = a[j]\n\n        # Update the maximum sum of increasing subsequence from prefix until the i-th index if the maximum sum of increasing subsequence from prefix until the i-th index is greater than the current maximum sum\n        if max_sum_until_i < sum_k_from_i:\n            max_sum_until_i = sum_k_from_i\n\n    # Return the maximum sum of increasing subsequence from prefix until the ith index\n    return max_sum_until_i"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize dp array and max_sum variable\n    dp = [0] * n\n    max_sum = 0\n\n    # Traverse the array and calculate sum of increasing subsequence\n    for i in range(n):\n        if a[i] >= k:\n            dp[i] = dp[i-1] + a[i]\n        else:\n            dp[i] = dp[i-1]\n\n        # Update max_sum if this is the maximum sum till now\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index, k - 1)\n\n    if k == index:\n        if n - k + 1 >= index:\n            return a[k] * (n - k + 1)\n        else:\n            return 0\n\n    max_sum = max_sum_increasing_subseq(a, n, index, k - 1)\n\n    if a[k] > a[index]:\n        max_sum += a[k]\n\n    if n - k + 1 >= index:\n        max_sum += a[n - k + 1] * (n - index)\n    else:\n        max_sum += 0\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n\n    if k == index:\n        return a[k]\n\n    table = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if a[i] < a[j]:\n                table[i][j] = max(table[i - 1][j], table[i - 1][j - 1]) + a[i]\n            else:\n                table[i][j] = table[i - 1][j]\n\n    return table[n][k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Parameters:\n    a: list of integers - the given array\n    n: int - the length of the array\n    index: int - the current index of the array\n    k: int - the index of the kth element after i\n\n    Returns:\n    int - the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    \"\"\"\n    # Initialize an empty list to store the sum of increasing subsequence\n    sum_list = []\n\n    # Iterate through the array from index to n-1\n    for i in range(index, n):\n        # Check if the element at index i is greater than k\n        if a[i] > a[k]:\n            # Calculate the sum of increasing subsequence from index to i-1\n            sum_list.append(sum(a[index:i+1]))\n\n    # If the length of sum_list is less than or equal to 1, return 0\n    if len(sum_list) <= 1:\n        return 0\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    return max(sum_list)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize max_ending_here and max_so_far to first element in the array\n    max_ending_here = a[0]\n    max_so_far = a[0]\n\n    # Traverse through the array from 1 to n\n    for i in range(1, n):\n        # If the current element is greater than the maximum element ending here\n        if a[i] > max_ending_here:\n            # Update the maximum element ending here and the maximum sum so far\n            max_ending_here = a[i]\n            max_so_far = max(max_ending_here, max_so_far)\n        elif a[i] > max_ending_here + k:\n            # If the current element is greater than k more than the maximum element ending here\n            # and the current element is greater than the kth element after the current index i\n            # then update the maximum element ending here and the maximum sum so far\n            max_ending_here += a[i] - k\n            max_so_far = max(max_ending_here, max_so_far)\n\n    # Return the maximum sum of increasing subsequence\n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # initialize the maximum sum and the current subsequence sum\n    max_sum = float('-inf')\n    cur_sum = 0\n\n    # iterate through the array from the start to i\n    for i in range(index, n):\n\n        # if the current element is greater than the kth element, add it to the current subsequence sum\n        if a[i] > a[k]:\n            cur_sum += a[i]\n\n        # if the current subsequence sum is greater than the maximum sum, update the maximum sum\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n\n        # if the current element is less than the kth element, move the starting index to i+1\n        if a[i] < a[k]:\n            index = i+1\n            cur_sum = 0\n\n    # return the maximum sum of increasing subsequence from prefix until ith index and including a given kth element\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_so_far = float('-inf')\n    current_sum = 0\n    for i in range(index, n):\n        if a[i] > a[k]:\n            current_sum += a[i] - a[k]\n        else:\n            current_sum = a[i]\n        if current_sum > max_so_far:\n            max_so_far = current_sum\n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return 0"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum of increasing subsequence till now\n    max_sum = 0\n    \n    # Initialize the current sum of increasing subsequence\n    current_sum = 0\n    \n    # Initialize the current increasing subsequence\n    current_subseq = []\n    \n    # Traverse the array from index to n-1\n    for i in range(index, n):\n        # Check if the ith index element is greater than k\n        if a[i] > k:\n            # Append the kth element to the current increasing subsequence\n            current_subseq.append(k)\n            \n            # Calculate the maximum sum of increasing subsequence till now\n            temp_max_sum = max_sum\n            \n            # Calculate the current sum of increasing subsequence\n            temp_current_sum = current_sum + a[i]\n            \n            # Update the maximum sum and current sum of increasing subsequence\n            max_sum = max(temp_max_sum, temp_current_sum)\n            \n            # Update the current sum of increasing subsequence\n            current_sum = temp_current_sum\n            \n            # Remove the kth element from the current increasing subsequence\n            current_subseq.pop()\n            \n            # Calculate the maximum sum of increasing subsequence till now\n            temp_max_sum = max_sum\n            \n            # Calculate the current sum of increasing subsequence\n            temp_current_sum = current_sum + a[i]\n            \n            # Update the maximum sum and current sum of increasing subsequence\n            max_sum = max(temp_max_sum, temp_current_sum)\n            \n            # Update the current sum of increasing subsequence\n            current_sum = temp_current_sum\n    \n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    copy_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            copy_tuplex = tuple(copy_tuplex[i:i+1])\n    return copy_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > n:\n        m, n = n, m\n    colon = tuple(tuplex[i:m+i] for i in range(n-m+1))\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple to avoid modifying original\n    tuplex_copy = deepcopy(tuplex)\n    # Get the number of elements in the tuple\n    size = len(tuplex_copy)\n    # Loop through the tuple and print the elements in a colon\n    for i in range(m, m+n):\n        # If the index is greater than or equal to the size of the tuple, skip it\n        if i >= size:\n            continue\n        # If the index is not greater than or equal to the size of the tuple, print the element\n        print(tuplex_copy[i], end=' ')\n    # Print a newline character after printing all the elements\n    print()"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m>n:\n        return tuplex[:n]\n    else:\n        return tuple(deepcopy(tuplex[m:n]))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # Reverse the colon\n    new_tuplex = tuple(new_tuplex[m:n])\n    # Return the reversed colon\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # split the tuple into smaller columns\n    new_tuplex = [new_tuplex[i:i+m] for i in range(0,len(new_tuplex),m)]\n\n    # return the colonized tuple\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple\n    colon = deepcopy(tuplex)\n    # Reverse the first m elements of the colon\n    colon[:m] = colon[:m][::-1]\n    # Reverse the last n-m elements of the colon\n    colon[-n:] = colon[-n:][::-1]\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m > len(tuplex) or n > len(tuplex[0]):\n        raise ValueError(\"m and n should be less than or equal to the length of the tuple.\")\n    new_tuplex = deepcopy(tuplex)\n    for i in range(len(tuplex)):\n        for j in range(len(tuplex[0])):\n            if i == m - 1 and j == n - 1:\n                new_tuplex[i] = new_tuplex[i][:j] + ':' + new_tuplex[i][j:]\n            else:\n                new_tuplex[i] = new_tuplex[i][:j] + new_tuplex[i][j+1:]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Returns a colon of a given tuple, starting at a given row and column.\n    \"\"\"\n    if m < 0 or m >= len(tuplex) or n < 0 or n >= len(tuplex[0]):\n        return None\n    col_slice = tuple(tuplex[i][n:n+m] for i in range(m))\n    return col_slice"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # create a copy of the input tuple\n    tup = deepcopy(tuplex)\n\n    # check if the input tuple has a length of m\n    if len(tup)!= m:\n        # if not, pad it with 0's\n        tup = tup + (0,) * (m - len(tup))\n\n    # create a list of lists for the colon\n    colon = []\n\n    # loop through each row of the colon\n    for i in range(m):\n        # create a new row of zeros\n        row = [0] * n\n        # loop through each element of the row\n        for j in range(n):\n            # add the value of the element at position i,j\n            row[j] = tup[i][j]\n        # append the row to the colon\n        colon.append(row)\n\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # calculate the sum of each list\n    total1 = sum(nums1)\n    total2 = sum(nums2)\n    # find the factor that gives the highest sum\n    factor1 = max(nums1)\n    factor2 = max(nums2)\n    # multiply the factors and divide the product by the sum of the two lists to get the required number of largest products\n    largest_products = int(N / (factor1 * factor2))\n    # find the largest N numbers from each list\n    largest1 = sorted(nums1, reverse=True)[:N]\n    largest2 = sorted(nums2, reverse=True)[:N]\n    # multiply the largest N numbers from each list and find their product\n    product1 = 1\n    product2 = 1\n    for num in largest1:\n        product1 *= num\n    for num in largest2:\n        product2 *= num\n    # find the largest of the two products\n    largest_product = max(product1, product2)\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value for each list\n    max_nums1 = max(nums1)\n    max_nums2 = max(nums2)\n\n    # Initialize the maximum and minimum products\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n    min_product1 = float('inf')\n    min_product2 = float('inf')\n\n    # Loop through each possible pair of factors\n    for i in range(max_nums1 + 1):\n        for j in range(max_nums2 + 1):\n            # Calculate the product for each pair of factors\n            product1 = nums1[nums1.index(i)] * nums2[nums2.index(j)]\n            product2 = nums2[nums2.index(i)] * nums1[nums1.index(j)]\n\n            # Update the maximum and minimum products\n            if product1 > max_product1:\n                max_product1 = product1\n            if product2 > max_product2:\n                max_product2 = product2\n            if product1 < min_product1:\n                min_product1 = product1\n            if product2 < min_product2:\n                min_product2 = product2\n\n            # Check if we have found the desired number of products\n            if N == 0:\n                return (max_product1, max_product2, min_product1, min_product2)\n            N -= 1"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize variables to keep track of the largest products and their indices\n    largest_product = float('-inf')\n    largest_indices = (0, 0)\n\n    # loop through all possible combinations of two factors\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+1):\n            # calculate the product of the two factors\n            product = nums1[i] * nums2[j-1]\n            # update the largest product if the product is greater than the current largest product\n            if product > largest_product:\n                largest_product = product\n                largest_indices = (i, j-1)\n                # check if we've found the desired number of largest products\n                if N == 1:\n                    break\n\n    # return the indices of the largest products\n    return largest_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize two variables for the largest product found so far\n    largest_product_1 = nums1[0] * nums2[0]\n    largest_product_2 = nums1[0] * nums2[1]\n    \n    # Initialize a variable to keep track of the index of the next largest product\n    next_index = 2\n    \n    # Iterate over the remaining N-2 elements\n    for _ in range(N-2):\n        # Calculate the next largest product by multiplying the current largest products and the two elements at the next index\n        next_product = nums1[next_index] * nums2[next_index]\n        # Update the largest products if necessary\n        if next_product > largest_product_1:\n            largest_product_2 = largest_product_1\n            largest_product_1 = next_product\n        elif next_product > largest_product_2:\n            largest_product_2 = next_product\n        \n        # Increment the next index\n        next_index += 1\n    \n    return largest_product_1"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list to store the largest products\n    result = []\n\n    # Iterate over the specified number of products\n    for i in range(N):\n        # Calculate the product of the i-th largest number in nums1 and the i-th largest number in nums2\n        product = nums1[i] * nums2[i]\n\n        # If the product is not already in the result list, add it\n        if product not in result:\n            result.append(product)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    for i in range(N):\n        max_product = max(max_product, nums1[i]*nums2[i])\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum product from the first list\n    max_product1 = max(nums1)\n    # Find the minimum product from the second list\n    min_product2 = min(nums2)\n    # Find the largest factor that can be selected from the first list\n    largest_factor1 = max(max_product1 // x for x in nums1)\n    # Find the smallest factor that can be selected from the second list\n    smallest_factor2 = min(max_product1 // x for x in nums2)\n    # Compute the target number of products\n    num_products = N // largest_factor1 // smallest_factor2\n    # Initialize an empty list to store the products\n    products = []\n    # Iterate over all pairs of factors and compute the products\n    for factor1 in range(largest_factor1 + 1):\n        for factor2 in range(smallest_factor2 + 1):\n            # Check if the product is greater than zero and smaller than the target number of products\n            if factor1 * factor2 > 0 and len(products) < num_products:\n                # Add the product to the list of products\n                products.append(factor1 * factor2)\n    # Return the list of products\n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables\n    largest_product = 0\n    largest_product_indices = []\n\n    # Iterate over the first N elements of the sorted lists\n    for i in range(N):\n        # Calculate the product of the current elements in the first list and the i-th element in the second list\n        product = nums1[i] * nums2[i]\n\n        # If the current product is greater than the current largest product, update the largest product and its indices\n        if product > largest_product:\n            largest_product = product\n            largest_product_indices = [i, nums2.index(nums2[i])]\n\n    # Return the indices of the largest products\n    return largest_product_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables\n    largest_product = 0\n    current_product = 1\n\n    # Loop through the lists until we have found the required number of largest products\n    for i in range(N):\n        # Calculate the current product of the two largest factors\n        current_product = nums1[-1] * nums2[-1]\n\n        # If this is the largest product we have seen so far, update the largest_product variable\n        if current_product > largest_product:\n            largest_product = current_product\n\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # find the maximum value in the first list\n    max1 = max(nums1)\n    # find the maximum value in the second list\n    max2 = max(nums2)\n    # find the largest factor\n    factor = max(max1, max2)\n    # initialize the output list\n    result = []\n    # loop over the number of products to find\n    for i in range(N):\n        # initialize the product as 1\n        product = 1\n        # loop over the elements in the first list\n        for j in range(len(nums1)):\n            # find the product of this factor and the element in the first list\n            product *= nums1[j]\n        # loop over the elements in the second list\n        for k in range(len(nums2)):\n            # find the product of this factor and the element in the second list\n            product *= nums2[k]\n        # add the product to the output list\n        result.append(product)\n    # return the output list\n    return result"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two arguments `a` and `b` and returns the maximum of the two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n\nprint(maximum(5, 10))   # Output: 10\nprint(maximum(20, 30))  # Output: 30"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and converts it to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert string to list\n    lst = list(str1)\n    \n    # Convert list to tuple\n    tup = tuple(lst)\n    \n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a number n.\n\n    Parameters:\n    n (int): A non-negative integer.\n\n    Returns:\n    int: The left most unset bit in n.\n    \"\"\"\n    if n == 0:\n        return 0\n    # Find the least significant bit set to 1 in the binary representation of n.\n    least_significant_bit = 1 << n.bit_length()\n    # Check if the least significant bit is already set to 1.\n    if least_significant_bit & n:\n        return least_significant_bit\n    # Otherwise, set the leftmost unset bit to 1 and return it.\n    else:\n        return least_significant_bit - 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to keep track of the set bits\n    set_bits = 0\n\n    # Loop through the bits of the number\n    for bit in bin(n)[2:]:\n        # If the bit is set, increment the set_bits counter\n        if bit == '1':\n            set_bits += 1\n        # If we've counted all the set bits, break out of the loop\n        if set_bits == 32:\n            break\n\n    # Return the number with the set bit set to 1\n    return n | (1 << set_bits)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the binary string of n to an integer\n    n = int(n, 2)\n\n    # Set the leftmost unset bit to 1\n    mask = ~(1 << 31)\n    n |= mask\n\n    # Convert the updated integer back to a binary string\n    n = bin(n)[2:]\n\n    # Check if the updated binary string is equal to the original binary string\n    if n == bin(n)[2:]:\n        return 0\n    else:\n        return 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit of a given integer n.\n    \"\"\"\n    # Initialize mask with all bits set to 1\n    mask = 0xffffffff\n    # Set all bits in the mask except the leftmost one\n    mask &= ~(mask << 1)\n    # Perform a bitwise AND operation with n and the mask\n    n &= mask\n    # Shift the result of the AND operation to the left by 1 bit\n    n <<= 1\n    # Return the resulting integer with the leftmost unset bit set to 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while n & (1 << i):\n        i += 1\n\n    n |= (1 << i)\n    print(\"Left most unset bit is\", i)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a given number.\n    '''\n    # Iterate from the rightmost bit to the leftmost bit.\n    for i in range(31, -1, -1):\n        # Check if the i-th bit is set in the number n.\n        if (n >> i) & 1 == 1:\n            # If the i-th bit is set, then unset it.\n            n &= ~(1 << i)\n            # Return the modified number.\n            return n\n    # If no bits are unset, return the original number.\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the index to -1 to mark that the bit is set\n    index = -1\n    while n > 0:\n        # If the least significant bit is unset, set the index and break out of the loop\n        if (n & 1) == 0:\n            index = 0\n            break\n        # Move to the right by shifting n one bit to the left\n        n >>= 1\n        index += 1\n    # If the loop completed without finding an unset bit, set the leftmost bit to 1\n    if index == -1:\n        n |= 1 << index\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit to the rightmost bit\n    left_most_unset_bit = n.bit_length() - 1\n    \n    # Check if the leftmost unset bit is already set\n    while (n & (1 << left_most_unset_bit)) == 0:\n        left_most_unset_bit -= 1\n    \n    # Set the leftmost unset bit to 1\n    n |= (1 << left_most_unset_bit)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize a counter variable to keep track of unset bits\n    count = 0\n\n    # Iterate through each bit of the input number\n    for i in range(32):\n        # Check if the i-th bit is unset (i.e., if its least significant bit is 1)\n        if ((n >> i) & 1) == 1:\n            # If the i-th bit is unset, increment the counter\n            count += 1\n\n        # If there are no unset bits left, return\n        if count == 32:\n            return i\n\n    # If there are still unset bits after iterating through all bits, return -1\n    return -1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r (radius) and h (height), and returns the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * (r**2) * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of the cone as input and calculates the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*math.pi*(r**2)*h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    print(\"The volume of the cone is:\", volume)"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two parameters, r, the radius of the cone, and h, the height of the cone.\n    It returns the volume of the cone as a float value.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # calculate the power of 2 that is less than or equal to n\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 <<= 1\n\n    # return the highest power of 2 less than or equal to n\n    return power_of_2 >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    # First, check if n is already a power of 2\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n & (n - 1) == 0:\n        return n\n    else:\n        # Otherwise, loop over all possible powers of 2 until we find a power of 2 <= n\n        while n > 1:\n            if n & (n - 1) == 0:\n                return n\n            n >>= 1  # Shift right one bit to reduce the exponent\n        return 0  # If we reach this point, there is no power of 2 <= n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highestPowerOf2 = 1\n    while highestPowerOf2 <= n:\n        highestPowerOf2 = highestPowerOf2 * 2\n    return highestPowerOf2 - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize variables\n    max_power = 0\n    current_power = 1\n    \n    # loop until max_power is greater than n\n    while current_power <= n:\n        # if current_power is greater than max_power, update max_power\n        if current_power > max_power:\n            max_power = current_power\n        \n        # increment current_power\n        current_power *= 2\n    \n    # return max_power\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2**int(n-1).bit_length()"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1: \n        n = n >> 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    power_of_2 = 0\n    while n > 1:\n        n >>= 1\n        power_of_2 += 1\n    return power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1: \n        power += 1\n        n = n // 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n & (n-1) == 0:\n        return n\n    return highest_Power_of_2(n & (n-1)) + 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize variables\n    highest_power = 0\n    power = 1\n    \n    # Loop until the power is greater than or equal to n\n    while power >= n:\n        # Check if the power is greater than the current highest power\n        if power > highest_power:\n            highest_power = power\n        \n        # Increment the power and check if it's greater than or equal to n\n        power <<= 1\n    \n    # Return the highest power of 2 that is less than or equal to n\n    return highest_power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find the nth lucas number using the Sieve of Eratosthenes algorithm.\n\n    Args:\n    n (int): The number of the lucas number to find.\n\n    Returns:\n    lucas_number (int): The nth lucas number.\n    \"\"\"\n    primes = []\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            primes.append(i)\n            for j in range(i*i, n + 1, i):\n                is_prime[j] = False\n\n    lucas_number = 2\n    for i in range(1, n):\n        lucas_number = (lucas_number**2 + 1) % n\n\n    return lucas_number\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_sequence = [2, 1]\n        for i in range(2, n):\n            lucas_sequence.append(lucas_sequence[i-1] + lucas_sequence[i-2])\n        return lucas_sequence[n-1]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Parameters:\n    list_ (list): A list of elements to be formatted.\n    string (str): A format string that will be applied to each element in the list.\n\n    Returns:\n    list: A new list with the elements of `list_` formatted according to `string`.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            result[lists[i][j]] = lists[i+1][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # initialize an empty dictionary\n    data = {}\n    \n    # loop through each list and add the values to the nested dictionary\n    for i, list in enumerate([l1, l2, l3]):\n        for value in list:\n            # get the key for the nested dictionary\n            key = f\"list{i+1}\"\n            \n            # check if the key already exists in the dictionary\n            if key in data:\n                # if it does, add the new value to the list of values for that key\n                data[key].append(value)\n            else:\n                # if it doesn't, create a new key-value pair for the dictionary\n                data[key] = [value]\n    \n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create a nested dictionary\n    nested_dict = {}\n\n    # Loop through the lists and add values to the dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Combine the lists into a dictionary\n    data = {k: [v[i] for v in l2] for i, k in enumerate(l1)}\n\n    # Combine the dictionaries into a single dictionary\n    final_data = {**data, **l3}\n\n    return final_data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Initialize an empty dictionary\n    nested_dict = {}\n\n    # Iterate over the first list\n    for i in range(len(l1)):\n        # Append the first list item to a new list\n        new_list = [l1[i]]\n\n        # Iterate over the second list\n        for j in range(len(l2)):\n            # Append the second list item to the new list\n            new_list.append(l2[j])\n\n            # Iterate over the third list\n            for k in range(len(l3)):\n                # Append the third list item to the new list\n                new_list.append(l3[k])\n\n                # Convert the new list to a tuple and add it as a key to the nested dictionary\n                nested_dict[tuple(new_list)] = new_list\n\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    This function takes multiple lists as arguments and converts them to a nested dictionary.\n    '''\n    result = {}\n    for lst in lists:\n        for i, item in enumerate(lst):\n            if isinstance(item, list):\n                sub_dict = result.get(i, {})\n                result[i] = convert_list_dictionary(*item, **sub_dict)\n            else:\n                sub_dict = result.get(i, {})\n                result[i] = {item: sub_dict}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    This function takes multiple lists as input and converts them to nested dictionaries.\n    '''\n    result = {}\n    for index, list_ in enumerate(lists):\n        for item in list_:\n            if isinstance(item, dict):\n                for key, value in item.items():\n                    if key in result:\n                        if isinstance(result[key], list):\n                            result[key].append(value)\n                        else:\n                            result[key] = [result[key], value]\n                    else:\n                        result[key] = value\n            else:\n                if index == 0:\n                    if item in result:\n                        if isinstance(result[item], list):\n                            result[item].append(item)\n                        else:\n                            result[item] = [result[item], item]\n                    else:\n                        result[item] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n    for i in range(len(l1), len(l1)+len(l2)):\n        result[l1[i-len(l1)]] = l3[i-len(l1)-len(l2)]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n\n    Parameters:\n        *lists (list): A list of lists to convert to a nested dictionary.\n\n    Returns:\n        dict: A nested dictionary that corresponds to the input lists.\n\n    Examples:\n        >>> convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [True, False, True])\n        {'a': {'b': {'c': True}}}\n        >>> convert_list_dictionary([[1, 2, 3], [4, 5, 6]])\n        {0: {1: {2: 3}, 3: {4: 5}, 5: {6: 6}}}\n    \"\"\"\n    # Initialize an empty dictionary to hold the nested dictionary\n    nested_dict = {}\n    # Loop through each list in the input\n    for list in lists:\n        # For each element in the list, if it is a list itself, recursively call the function\n        if isinstance(list, list):\n            current_dict = convert_list_dictionary(*list)\n            # Add the current dictionary as a key to the nested dictionary\n            nested_dict[list.pop(0)] = current_dict\n            # Remove the first element of the current list (since it was just added as a key)\n            list.pop(0)\n        # If the element is a dictionary itself, add it to the nested dictionary as is\n        elif isinstance(list, dict):\n            nested_dict.update(list)\n        # If the element is not a list or dictionary, raise an error\n        else:\n            raise TypeError(\"All input lists must be of type list or dict.\")\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 12\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 7\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 12\n    else:\n        return get_max_sum(n-1) + get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # base case: if n is 1, the maximum sum is 1\n    if n == 1:\n        return 1\n    \n    # recursive case: if n is odd, the maximum sum is (f(n/2) + f(n/3) + f(n/4) + f(n/5))\n    # if n is even, the maximum sum is (f(n/2) + f(n/4))\n    if n % 2 == 0:\n        return get_max_sum(n//2) + get_max_sum(n//4)\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        # Using recursion to calculate the maximum sum using the given equation\n        max_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n        return max(max_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def f(n):\n        if n == 0:\n            return 0\n        elif n % 2 == 0:\n            return max(f(n/2), f(n/3), f(n/4), f(n/5)) + n\n        else:\n            return max(f(n/2), f(n/3), f(n/4), f(n/5))\n    \n    return f(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        return max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for element in input_list:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_list = [element]\n        elif len(str(element)) == max_length:\n            max_list.append(element)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables\n    max_length = 0\n    longest_list = []\n\n    # Loop through each element in the list\n    for item in input_list:\n        # Add the length of the item to the max_length variable\n        length = len(str(item))\n        if length > max_length:\n            max_length = length\n            longest_list = [item]\n        elif length == max_length:\n            longest_list.append(item)\n\n    # Return the longest list\n    return longest_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list)\n    max_list = input_list\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    set_tup = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    return len(set_tup) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # If the length of the set is equal to the length of the original tuple,\n    # then there were no duplicates in the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_elements = []\n    for element in test_tup:\n        if element not in unique_elements:\n            unique_elements.append(element)\n        else:\n            return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple into a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Check if the length of the tuple is 1\n    if len(test_tup) == 1:\n        return True\n    # Check if the first element of the tuple is not in the rest of the tuple\n    elif test_tup[0] in test_tup[1:]:\n        return False\n    # If the length of the tuple is greater than 1, check if the first element and the rest of the tuple are distinct\n    else:\n        return check_distinct(test_tup[1:])"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first character that appears only once in the string\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # If no character appears only once, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # iterate over the characters and keep track of the first non-repeating one\n    first_non_repeating = None\n    for char in str1:\n        if char_freq[char] == 1:\n            first_non_repeating = char\n            break\n\n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        # If the character is already present in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not present in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeated character in the frequency dictionary\n    for char, freq in freq.items():\n        if freq == 1:\n            return char\n\n    # If all characters are repeated, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes in a string as input and returns the first non-repeating character.\n    \"\"\"\n    char_count = {}  # a dictionary to keep track of the count of each character in the string\n\n    # iterate through each character in the string\n    for char in str1:\n        if char in char_count:\n            # if the character is already in the dictionary, increment its count by 1\n            char_count[char] += 1\n        else:\n            # if the character is not in the dictionary, add it to the dictionary with a count of 1\n            char_count[char] = 1\n\n    # iterate through the dictionary again to find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first non-repeated character in the dictionary\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through the string and update the count of each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the string again and find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    return bool(re.match(pattern, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    return string[0] == string[-1]"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Regular expression to match strings that start and end with the same character\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    # Check if the string matches the regular expression\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    # check if the string matches the given regex pattern\n    if re.match(regex, string):\n        # get the first character of the string\n        first_char = string[0]\n        # check if the first character matches the last character of the string\n        if first_char == string[-1]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = [a, b, c]\n    sorted_list.sort()\n    \n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[len(sorted_list)//2 - 1] + sorted_list[len(sorted_list)//2])/2\n    else:\n        median = sorted_list[len(sorted_list)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    # Find the middle number\n    middle_num = sorted_list[len(sorted_list) // 2]\n    # Return the middle number\n    return middle_num"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sorting the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # finding the median of the three numbers\n    if len(sorted_numbers) % 2 == 0:\n        # if the length of the sorted list is even, then the median is the average of the two middle numbers\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        # if the length of the sorted list is odd, then the median is the middle number\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    numbers = sorted([a,b,c])\n\n    # Calculate the median\n    median = numbers[len(numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n//2 - 1] + numbers[n//2]) / 2\n    else:\n        median = numbers[n//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as input and returns the median of those numbers.\n    '''\n    # Sorting the three numbers in ascending order\n    a_sorted = sorted([a,b,c])\n    # Calculate the median using the middle element\n    median = a_sorted[1]\n    # If the second middle element is greater than the third middle element, the median is the first middle element\n    if a_sorted[2] > median:\n        median = a_sorted[0]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # find the length of the sorted list\n    n = len(sorted_numbers)\n\n    # calculate the median\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2 - 1] + sorted_numbers[n//2])/2\n    else:\n        median = sorted_numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a,b,c])\n    mid = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[mid] + sorted_numbers[mid-1]) / 2\n    else:\n        return sorted_numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the indices of the two middle numbers\n    middle_index = len(sorted_numbers) // 2\n    left_index = middle_index - 1\n    right_index = middle_index\n\n    # Calculate the median\n    if middle_index % 2 == 0:\n        median = (sorted_numbers[left_index] + sorted_numbers[right_index]) / 2\n    else:\n        median = sorted_numbers[middle_index]\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total = 0\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        digits = [int(d) for d in str(num)]\n        # Add up the digits\n        total += sum(digits)\n    # Return the total sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(d) for d in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum([int(digit) for digit in str(num)])\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        for digit in str(num):\n            digit_sum += int(digit)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        sum_of_digits = sum(digits)\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n\n    sum_digits = 0\n    for num in nums:\n        sum_digits += sum(int(digit) for digit in str(num))\n\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        sum_of_digit = sum(digits)\n        sum_of_digits.append(sum_of_digit)\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # create an empty list to store the sum of digits of each number\n    result = []\n    # loop through each number in the list\n    for num in nums:\n        # loop through each digit in the number\n        for digit in str(num):\n            # append the digit to the result list\n            result.append(int(digit))\n    # return the sum of digits\n    return sum(result)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(num) for num in str(nums))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple([a ^ b for a, b in zip(test_tup1, test_tup2)])\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    # loop through each element of the tuple\n    for i in range(len(test_tup1)):\n        # bitwise xor the current element of each tuple\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert the tuples to lists to work with bitwise operations\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n\n    # Perform the bitwise xor operation across the lists\n    xor_result = [a^b for a,b in zip(lst1, lst2)]\n\n    # Convert the result back to a tuple and return it\n    return tuple(xor_result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Get the length of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    # If the length of the two tuples is not equal, raise a TypeError\n    if len1!= len2:\n        raise TypeError(\"The two tuples must have the same length.\")\n    # Initialize a list of zeros of the same length as the two tuples\n    result_list = [0] * len1\n    # Perform the mathematical bitwise xor operation across each pair of elements in the two tuples\n    for i in range(len1):\n        result_list[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the resulting list of xor operations\n    return result_list"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Get the lengths of the tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Check if the lengths are equal\n    if len1!= len2:\n        print(\"Error: Tuples have different lengths!\")\n        return None\n\n    # Initialize the output tuple with zeros\n    output_tup = (0,) * len1\n\n    # Perform the bitwise xor operation across the tuples\n    for i in range(len1):\n        output_tup[i] = test_tup1[i] ^ test_tup2[i]\n\n    # Return the output tuple\n    return output_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    if len(test_tup1) > len(test_tup2):\n        result += tuple(test_tup1[len(test_tup2):])\n    elif len(test_tup2) > len(test_tup1):\n        result += tuple(test_tup2[len(test_tup1):])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n    # Perform bitwise xor operation on each pair of elements in the tuples\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    unique_tuples = len(unique_tuples)\n    return unique_tuples"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    # Create a dictionary to store the frequency of each unique tuple\n    freq = {}\n    \n    # Loop over the list and count the frequency of each unique tuple\n    for item in test_list:\n        if tuple(item) not in freq:\n            freq[tuple(item)] = 1\n        else:\n            freq[tuple(item)] += 1\n    \n    # Return the frequency of each unique tuple\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup in freq_dict:\n            freq_dict[tup] += 1\n        else:\n            freq_dict[tup] = 1\n    unique_tuples = []\n    for tup in freq_dict:\n        if freq_dict[tup] == 1:\n            unique_tuples.append(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    from collections import Counter\n    freq_list = Counter(test_list)\n    return freq_list"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple:\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both input tuples should have the same number of elements!\")\n        return None\n\n    # Create an empty list to store the sum of each tuple element\n    result_list = []\n\n    # Iterate over each tuple element and add the corresponding elements\n    for i in range(len(test_tup1)):\n        # Get the corresponding elements from each tuple\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n        # Add the elements and append the result to the result list\n        result_list.append(elem1 + elem2)\n\n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize result tuple of length max of input tuples\n    result = tuple()\n    # Check if both input tuples are not empty\n    if len(test_tup1) > 0 and len(test_tup2) > 0:\n        # Check if both input tuples have the same number of elements\n        if len(test_tup1) == len(test_tup2):\n            # Iterate over all elements of the input tuples\n            for i in range(len(test_tup1)):\n                # Add the i-th element of both input tuples\n                result += (test_tup1[i] + test_tup2[i],)\n            return result\n        else:\n            # If input tuples have different numbers of elements, return None\n            return None\n    else:\n        # If input tuples are empty, return None\n        return None"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result_list = []\n    # Loop through both tuples\n    for i in range(len(test_tup1)):\n        # Check if the index is within the range of the first tuple\n        if i < len(test_tup1):\n            # If it is within the range, add the elements at the current index and the next index to the result list\n            result_list.append(test_tup1[i] + test_tup2[i])\n        # If the index is out of range, add None to the result list\n        else:\n            result_list.append(None)\n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same length\")\n        return\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            if isinstance(test_tup2[i], tuple):\n                add_nested_tuples(test_tup1[i], test_tup2[i])\n            else:\n                print(\"Both tuples should have same length\")\n                return\n        else:\n            if isinstance(test_tup2[i], tuple):\n                print(\"Both tuples should have same length\")\n                return\n            else:\n                test_tup1[i] += test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Loop through the two nested tuples\n    for i in range(len(test_tup1)):\n        # Loop through the tuples to perform index wise addition\n        for j in range(len(test_tup1[0])):\n            # Add the corresponding elements of the tuples\n            test_tup1[i][j] += test_tup2[i][j]\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] + test_tup2[i])\n    return new_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum number.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes in two numbers and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    This function takes in two numbers and returns the minimum number.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True \n    return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function takes in two tuples, tuplex and tuple1. \n    It checks whether an element exists within tuple1.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            print(element, 'is present in', tuple1)\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(\"The element exists in the tuple\") \n    else: \n        print(\"The element does not exist in the tuple\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    # find the parity of x by taking the remainder of x divided by 2 \n    # and checking if the remainder is 0\n    if x % 2 == 0: \n        return \"The parity of\", x, \"is even.\" \n    else: \n        return \"The parity of\", x, \"is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = (x & 1) # calculate the bitwise AND of x and 1\n    \n    if parity == 0: # if parity is 0, then x is even\n        return \"Even\"\n    elif parity == 1: # if parity is 1, then x is odd\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of\", x, \"is even.\"\n    else:\n        return \"The parity of\", x, \"is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # find the parity of x using the modulo operator (%)\n    parity = x % 2\n    \n    # return the parity of x\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    parity = x % 2\n    if parity == 1:\n        print(x, \"is odd.\")\n    else:\n        print(x, \"is even.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # initialize variable for parity\n    parity = False\n    # loop through all the digits of the input number\n    for i in str(x):\n        # add the power of 2 to the parity variable\n        parity = parity + int(i) ** 2\n    # check if the parity is odd\n    if parity % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    temp = n\n    while temp > 0:\n        digits.append(temp % 10)\n        temp //= 10\n    digits.reverse()\n    i = 0\n    while i < len(digits):\n        digits[i] = int(digits[i])\n        i += 1\n    next_bigger = 0\n    for digit in digits:\n        next_bigger = (next_bigger * 10) + digit\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    digits.sort(reverse=True)\n    result = 0\n    for i, digit in enumerate(digits):\n        if i == 0:\n            result = digit * 10 ** (len(digits) - 1)\n        else:\n            result += digit * 10 ** (len(digits) - 1 - i)\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n\n    # iterate over the digits of the number\n    for i in range(len(num_str)-1, -1, -1):\n        # get the digit at index i\n        digit = int(num_str[i])\n\n        # if the digit is 9, increment the number by 1\n        if digit == 9:\n            num_str[i] = '0'\n            n = int(num_str)\n            break\n\n        # if the digit is not 9, increment the number by 1\n        else:\n            num_str[i] = str(digit + 1)\n            n = int(num_str)\n            break\n\n    # if the number is less than 10, add a zero in the beginning\n    if n < 10:\n        num_str = '0' + num_str\n\n    # convert the number back to an integer and return it\n    return int(num_str)\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(n)\n\n    # Reverse the string\n    reversed_num_str = num_str[::-1]\n\n    # Split the string into individual digits\n    reversed_digits = list(reversed_num_str)\n\n    # Find the index of the first occurrence of a digit that is larger than the current digit\n    index_of_larger_digit = None\n    for i, digit in enumerate(reversed_digits):\n        if int(digit) > int(reversed_digits[i-1]):\n            index_of_larger_digit = i\n            break\n\n    # If no larger digit was found, return the original number\n    if index_of_larger_digit is None:\n        return num_str\n\n    # Find the index of the first occurrence of a digit that is less than the current digit\n    index_of_smaller_digit = None\n    for i, digit in enumerate(reversed_digits):\n        if int(digit) < int(reversed_digits[i-1]):\n            index_of_smaller_digit = i\n            break\n\n    # If no smaller digit was found, return the original number\n    if index_of_smaller_digit is None:\n        return num_str\n\n    # Create a new string by rearranging the digits\n    new_reversed_num_str = ''\n    for i in range(index_of_larger_digit, index_of_smaller_digit):\n        new_reversed_num_str += reversed_digits[i]\n    new_reversed_num_str += reversed_digits[index_of_larger_digit-1]\n    for i in range(index_of_smaller_digit, index_of_larger_digit-1):\n        new_reversed_num_str += reversed_digits[i]\n    new_reversed_num_str += reversed_digits[index_of_smaller_digit+1:]\n\n    # Convert the new string back to an integer and return it\n    new_n = int(new_reversed_num_str)\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    # convert the number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # find the index of the first digit that is greater than 1\n    i = 0\n    while digits[i] <= 1:\n        i += 1\n\n    # find the index of the first digit that is greater than 9\n    j = i\n    while digits[j] <= 9:\n        j += 1\n\n    # swap the digits at indices i and j\n    digits[i], digits[j] = digits[j], digits[i]\n\n    # convert the list of digits back to a number and return it\n    return int(''.join(str(digit) for digit in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Remove the digits from the input number\n    num = str(n)\n    # Reverse the digits of the number\n    rev_num = num[::-1]\n    # Check if the reversed number is greater than 999\n    if int(rev_num) > 999:\n        # Reverse the digits of the number again\n        rev_num = rev_num[::-1]\n        # Convert the reversed number to a list of digits\n        num_list = list(rev_num)\n        # Iterate over the list of digits\n        for i in range(len(num_list)):\n            # If the digit is greater than 9, add 1 to it and set it back to 0 if the sum is greater than 9\n            if num_list[i] > 9:\n                num_list[i] = num_list[i] + 10\n                if num_list[i] > 9:\n                    num_list[i] = 0\n                break\n        # Convert the list of digits back to a string and convert it back to an integer\n        return int(str(num_list)[::-1])\n    else:\n        # The reversed number is less than or equal to 999\n        # Return the original number\n        return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    digits.sort(reverse=True)\n    new_number = 0\n    for digit in digits:\n        new_number += digit * 10**(len(digits)-digits.index(digit))\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize the result variable\n    result = ''\n\n    # loop through each digit of the number\n    for digit in str(n):\n        # get the index of the digit in the original number\n        index = int(digit)\n\n        # check if the digit is greater than 9\n        if index > 9:\n            # subtract 10 from the index and add 1\n            index -= 10\n            index += 1\n\n        # add the new index to the result string\n        result += str(index)\n\n    # convert the result string to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # Convert the input number to a string and reverse it\n    num_str = str(n)[::-1]\n    # Split the string into a list of digits\n    num_list = list(num_str)\n    # Reverse the order of the digits in the list\n    num_list.reverse()\n    # Combine the digits in the list back into a string and convert it to an integer\n    next_bigger = int(''.join(num_list))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    This function takes an integer n as input and returns the next bigger number by rearranging the digits of the input number.\n\n    :param n: an integer\n    :return: the next bigger number by rearranging the digits of the input number\n    \"\"\"\n\n    # Create a list of digits of n\n    digits = [int(digit) for digit in str(n)]\n\n    # Find the first digit that is greater than 0\n    first_greater_than_zero = next((digit for digit in digits if digit > 0), None)\n\n    # If there is no digit greater than 0, then there is no next bigger number\n    if first_greater_than_zero is None:\n        return None\n\n    # Find the index of the first digit greater than 0\n    first_index = digits.index(first_greater_than_zero)\n\n    # Find the first index of a digit that is greater than the first digit greater than 0\n    first_digit_greater_than_first_greater_than_zero = next((index for index, digit in enumerate(digits) if digit > first_greater_than_zero), None)\n\n    # If there is no digit greater than the first digit greater than 0, then there is no next bigger number\n    if first_digit_greater_than_first_greater_than_zero is None:\n        return None\n\n    # Find the index of the first digit greater than the first digit greater than 0\n    first_digit_greater_than_first_index = first_index + first_digit_greater_than_first_greater_than_zero\n\n    # Rearrange the digits of n from first_index to the end of the list\n    for index in range(first_index, len(digits)):\n        digits[index] = digits[index] - 1\n\n    # Add the first digit greater than 0 to the end of the rearranged list\n    digits.append(first_greater_than_zero)\n\n    # Return the rearranged list as a string\n    return ''.join(str(digit) for digit in digits)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # create a min-heap to store the pairs\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            # if the size of heap is less than k, add the pair to the heap\n            if len(heap) < k:\n                heapq.heappush(heap, pair)\n            # if the size of heap is equal to k, check if the current pair is the smallest and add it to the heap\n            elif len(heap) == k:\n                current_pair = heapq.heappop(heap)\n                if current_pair[0] <= num1 and current_pair[1] <= num2:\n                    heapq.heappush(heap, pair)\n    # return the smallest k pairs\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap of tuples (diff, (i, j)) to store the pairs of elements which are k smallest\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            diff = abs(nums1[i] - nums2[j])\n            heapq.heappush(heap, (-diff, (i, j)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n\n    # Extract the k pairs from the heap\n    result = []\n    while heap:\n        diff, (i, j) = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n        if heap:\n            diff2, (i2, j2) = heapq.heappop(heap)\n            result.append((nums1[i2], nums2[j2]))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap with k elements\n    min_heap = []\n    for i in range(k):\n        heapq.heappush(min_heap, (nums1[0], 0, 0))\n    # sort the second array\n    nums2.sort()\n    # iterate through the first array\n    for num1 in nums1:\n        # initialize the index and the second index to start with\n        index = 0\n        second_index = 0\n        # iterate through the second array and find the k smallest pairs\n        while index < len(nums2) and second_index < len(nums2) - index:\n            # calculate the pair value\n            pair_value = (num1, nums2[index], second_index)\n            # if the pair value is smaller than the smallest value in the min heap, add it to the heap and decrease the indices\n            if pair_value < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, pair_value)\n                index += 1\n                second_index = 0\n            else:\n                second_index += 1\n    # return the k smallest pairs\n    result = []\n    while min_heap:\n        pair_value = heapq.heappop(min_heap)\n        result.append(pair_value)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    min_heap = []\n    count = 0\n\n    for num1 in nums1:\n        heapq.heappush(heap, (num1, 0))\n        if len(heap) > k:\n            num1, count = heapq.heappop(heap)\n        if count < k:\n            heapq.heappush(min_heap, (count, -num1))\n\n    for num2 in nums2:\n        if len(min_heap) > 0 and min_heap[0][1] <= num2:\n            count, num1 = min_heap[0]\n            min_heap[0] = (count-1, -num1)\n            heapq.heappush(heap, (num1, count))\n        else:\n            heapq.heappush(heap, (-num2, 0))\n            if len(heap) > k:\n                num2, count = heapq.heappop(heap)\n            if count < k:\n                heapq.heappush(min_heap, (count, num2))\n\n    result = []\n    while len(min_heap) > 0:\n        count, num1 = min_heap[0]\n        min_heap[0] = (count-1, num1)\n        heapq.heappush(heap, (num1, count))\n        result.append((num1, -num2))\n        if len(heap) > k:\n            num1, count = heapq.heappop(heap)\n        if count < k:\n            heapq.heappush(min_heap, (count, -num1))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n    for num1 in nums1:\n        for num2 in nums2:\n            # Add new pair to heap\n            if len(heap) < k:\n                heapq.heappush(heap, (num1+num2, (num1, num2)))\n            # Pop smallest pair from heap\n            elif (num1+num2) < heap[0][0]:\n                smallest_pair = heapq.heappop(heap)\n                if smallest_pair[1] not in result:\n                    result.append(smallest_pair[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    heap = []\n    min_heap = []\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i,j)))\n            else:\n                if nums1[i] + nums2[j] < heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(heap, (nums1[i] + nums2[j], (i,j)))\n                elif nums1[i] + nums2[j] == heap[0][0]:\n                    heapq.heappush(heap, (nums1[i] + nums2[j], (i,j)))\n\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest k elements\n    min_heap = []\n\n    # Initialize the result list\n    result = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # Add the current element to the min heap\n            heapq.heappush(min_heap, (num1+num2, (num1, num2)))\n\n            # If the min heap has more than k elements, remove the smallest element\n            while len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n            # Check if the min heap has k elements\n            if len(min_heap) == k:\n                # Extract the smallest element from the min heap and add it to the result list\n                pair = heapq.heappop(min_heap)\n                result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a set to store the unique pairs\n    pairs = set()\n    # create a heap to store the smallest pairs\n    min_heap = []\n    \n    # iterate over the first array\n    for num1 in nums1:\n        # iterate over the second array\n        for num2 in nums2:\n            # add the pair to the set and heap if it's smaller than k\n            pair = (num1, num2)\n            if len(pairs) < k:\n                pairs.add(pair)\n                heapq.heappush(min_heap, pair)\n            # if the length of the set is equal to k, add the smallest pair to the result list\n            elif len(pairs) == k:\n                heapq.heappush(min_heap, min(min_heap, key=lambda x: x[0]))\n                heapq.heappush(min_heap, min(min_heap, key=lambda x: x[1]))\n                pairs.remove(heapq.heappop(min_heap))\n                pairs.add(pair)\n                if len(pairs) == k:\n                    result = []\n                    while min_heap:\n                        result.append(heapq.heappop(min_heap))\n                    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap of size k\n    min_heap = []\n\n    # loop through both arrays and add smallest elements to the min heap\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            else:\n                if num1 + num2 < min_heap[0][0]:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n\n    # extract k smallest pairs from the heap and return as a list of tuples\n    result = []\n    for i in range(k):\n        pair = heapq.heappop(min_heap)\n        result.append(pair[1])\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and finds the minimum product from the pairs of tuples within that list.\n    '''\n\n    # Initialize minimum product to be infinity\n    min_product = float('inf')\n\n    # Iterate over all pairs of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and compare it with the current minimum product\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize minimum product and two empty lists for products\n    min_product = float('inf')\n    products = []\n    pairs = []\n    \n    # loop through each tuple in the list\n    for t in list1:\n        # if the tuple is not empty, add it to the products list\n        if t!= ():\n            products.append(t)\n        \n        # if there are at least two products, calculate the product\n        if len(products) >= 2:\n            product = 1\n            for p in products:\n                product *= p\n            \n            # if the product is less than the minimum product found so far, update the minimum product and the pairs list\n            if product < min_product:\n                min_product = product\n                pairs = []\n                pairs.append(tuple(products))\n                products = []\n            \n            # if the product is the same as the minimum product, append the pair to the pairs list\n            elif product == min_product:\n                pairs.append(tuple(products))\n            \n            # reset the products list for the next iteration\n            products = []\n    \n    # calculate the minimum product by multiplying all pairs together\n    min_product = 1\n    for p in pairs:\n        min_product *= min(p)\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables\n    min_product = float('inf')\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # Update the minimum product if this is the first product found\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be infinity\n    min_product = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples and update the minimum product if necessary\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    # Initialize the minimum product and the minimum value\n    min_product = float('inf')\n    min_value = float('inf')\n\n    # Iterate over all pairs of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n\n            # Update the minimum product and minimum value if necessary\n            if product < min_product:\n                min_product = product\n                min_value = min(list1[i][0], list1[j][1])\n\n    # Return the minimum product and minimum value\n    return min_product, min_value"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # create an empty list to store the products\n    products = []\n\n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # find the product of the current tuple\n            product = list1[i][0] * list1[j][1]\n            # add the product to the list of products\n            products.append(product)\n\n    # find the minimum product in the list\n    minimum_product = min(products)\n\n    # return the minimum product\n    return minimum_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of the pairs of tuples.\n    '''\n    # Convert the list to a set to remove duplicates\n    list2 = set(tuple(x) for x in list1)\n\n    # Find the minimum product of all pairs of tuples\n    min_prod = min(list1[i][j] * list2[i + 1] for i in range(len(list1)) for j in range(i+1, len(list2)))\n\n    return min_prod"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product and minimum value to infinity\n    min_product = float('inf')\n    min_value = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product and the value of the pair of tuples\n            product = list1[i][0] * list1[j][1]\n            value = list1[i][0] + list1[j][1]\n\n            # Check if the product is less than the minimum product found so far\n            if product < min_product:\n                min_product = product\n                min_value = value\n\n    # Return the minimum product and the minimum value\n    return min_product, min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    This function takes a heterogeneous list as input and returns the minimum value found.\n    '''\n    min_num = float('inf')\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    \n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to the first element of the list\n    min_val = listval[0]\n\n    # loop through the list and compare each element to the current minimum value\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to be the first element in the list\n    min_val = listval[0]\n    \n    # loop through the list from the second element to the end\n    for i in range(1, len(listval)):\n        # if the current element is less than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a heterogeneous list as input and returns the minimum value in the list.\n    \"\"\"\n    min_val = float('inf') # initialize the minimum value as infinity\n    for i in listval:\n        if i < min_val:\n            min_val = i # update the minimum value if the current value is lesser than the current minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a heterogeneous list of values and returns the minimum value in the list.\n    \"\"\"\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'(?<!^)(?=[A-Z])','', word)\n    word = re.sub(r'(?<!^)(?=[A-Z][a-z])', '', word)\n    return word.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # convert snake case to camel case\n    camel_case = re.sub('([A-Z])', r'_\\1', word)\n    # convert camel case to title case\n    return camel_case.title()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    regex = re.compile(r'_(.?)')\n    camel_case = regex.sub(r'_\\1', word)\n    return camel_case.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert a given snake case string to camel case string.\n    '''\n    # convert all the characters to lowercase\n    word = word.lower()\n    # split the word into words based on underscore\n    words = re.findall(r'(\\b\\w+\\b)', word)\n    # join the words back into a camel case string\n    camel_case_string = ''.join(words)\n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case by converting the first letter of each word to uppercase and the rest to lowercase\n    camel_case = \"\".join(x.capitalize() if x.isupper() else x.lower() for x in re.findall(\"[a-z]+|[A-Z][a-z]+\", word))\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the word into parts separated by underscores\n    parts = re.findall(r'(\\w+)', word)\n    \n    # Join the parts with camel case\n    camel_case = ''.join(part.capitalize() for part in parts)\n    \n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([word[0].lower(), *map(str.capitalize, re.findall(r'(?<!^)(?=[A-Z])', word[1:]))])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Convert each word to camel case\n    camel_case = []\n    for i, word in enumerate(words):\n        # If the previous word was a number, capitalize the first letter\n        if i > 0 and words[i-1].isdigit():\n            camel_case.append(word.capitalize())\n        else:\n            camel_case.append(word)\n    # Join the camel case words together into a string\n    camel_case_str = ''.join(camel_case)\n    return camel_case_str"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove all underscores from the word\n    word = re.sub('_', '', word)\n    # Split the word by underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word and join them with an underscore\n    camel_word = ''.join(word.capitalize() for word in words)\n    # Return the camel case word\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert all letters to lower case\n    word = word.lower()\n    # split the word into words using underscore as the delimiter\n    words = word.split('_')\n    # join the words with the first letter capitalized, using an empty string as separator\n    camel_case_word = ''.join(word.capitalize() for word in words)\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Removes odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Args:\n        l (list): List of numbers.\n\n    Returns:\n        list: List with odd numbers removed.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if len(list1) < n:\n        print(\"Error: The list should have at least\", n, \"elements.\")\n    elif n < 1:\n        print(\"Error: The nth element should be a positive integer.\")\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1] # Returning the nth element of the list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n][1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list or len(list1) == 0:\n        print(\"Invalid input. Please provide a valid list of tuples.\")\n        return\n    \n    if n < 1 or n > len(list1):\n        print(\"Invalid input. Please provide a valid value for n.\")\n        return\n    \n    result = list1[n-1]\n    \n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n]\n    except IndexError:\n        return \"Index Error: Index out of range.\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Extract the nth element from a given list of tuples.\n    '''\n    # Create an empty list to store the nth element\n    result = []\n    # Loop through each tuple in the list\n    for tup in list1:\n        # If the nth element has been found, add it to the result list\n        if n == 1:\n            result.append(tup[n-1])\n        # Otherwise, decrement the value of n and continue looping\n        else:\n            n -= 1\n    # Return the result list\n    return result"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if type(list1)!= list:\n            raise TypeError(\"First argument must be a list of tuples.\")\n        if type(n)!= int:\n            raise TypeError(\"Second argument must be an integer.\")\n        if n > len(list1):\n            raise IndexError(\"Index out of range.\")\n        return list1[n-1]\n    except TypeError as e:\n        print(\"Error:\", e)\n    except IndexError as e:\n        print(\"Error:\", e)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Initialize an empty set to store the common values\n    common_values = set()\n\n    # Iterate through the first list\n    for item in list1:\n        # If the item exists in the second list, add it to the set of common values\n        if item in list2:\n            common_values.add(item)\n\n    # If the set is not empty, return True, otherwise return False\n    return bool(common_values)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two list as input and returns True if any value in list1 exists in list2 or vice versa.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    for item in list2:\n        if item in list1:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Check if the two lists have the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # Check if any value in list1 exists in list2\n    for value in list1:\n        if value in list2:\n            return True\n\n    # If the loop completes without finding any match, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and returns True if any value from the first sequence is also present in the second sequence, and False otherwise.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # loop through each value in list1\n    for i in range(len(list1)):\n\n        # check if the current value is present in list2\n        if list1[i] in list2:\n            return True\n\n    # if we reach this point, no value in list1 exists in list2\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    list1 (sequence): a sequence of values\n    list2 (sequence): a sequence of values\n\n    Returns:\n    bool: True if any value in list1 exists in list2 and vice versa, False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2 and value in list1:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:  \n        if i in list2:  \n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    # initialize variables to keep track of the current maximum product and the two numbers that make it\n    max_product = float('-inf')\n    pair = []\n    \n    # loop through the array and find the pair with the highest product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                pair = [arr[i], arr[j]]\n    \n    # return the pair with the highest product\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2 = float('-inf'), float('-inf')\n    min1, min2 = float('inf'), float('inf')\n    \n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n        if i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n            \n    return max1 * max2, min1 * min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes in an array of integers and returns a tuple containing the indices of the two integers \n    that have the highest product.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1, max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair with highest product.\n    \"\"\"\n    # initialize max_product as negative infinity\n    max_product = float('-inf')\n\n    # iterate through the array\n    for i in range(len(arr)):\n        # iterate through the rest of the array\n        for j in range(i+1, len(arr)):\n            # calculate the product of the two sub-arrays\n            prod = arr[i]*arr[j]\n            # update max_product if the product is greater than max_product\n            if prod > max_product:\n                max_product = prod\n\n    # return the pair with highest product\n    return arr[arr.index(max_product)], max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return (max1, min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for i in arr: \n        if i > max1: \n            max2 = max1 \n            max1 = i \n        elif i > max2: \n            max2 = i \n    return (max1, max2) "
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num = arr[0]\n    min_num = arr[0]\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n    \n    for i in range(2, len(arr)):\n        current_num = arr[i]\n        \n        max_num = max(current_num, max_num * current_num)\n        min_num = min(current_num, min_num * current_num)\n        \n        if max_num > max_product:\n            max_product = max_num\n        elif min_num < min_product:\n            min_product = min_num\n        \n    return (max_product, min_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n    return max1 * max2\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1 * max2"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    # initialize an empty list to store the common elements\n    common_elements = []\n\n    # loop through the input list of tuples\n    for t in Input:\n        # get the first element of the tuple\n        first_element = t[0]\n\n        # check if the first element is already in the common_elements list\n        if first_element in common_elements:\n            # if it is, add the second element of the tuple to the common_elements list\n            common_elements.append(t[1])\n        else:\n            # otherwise, add the first element to the list\n            common_elements.append(first_element)\n\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    This function takes a list of tuples as input and returns a list of lists where each inner list contains tuples with common first element.\n    \"\"\"\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append([Input[i], Input[j]])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for tup in Input:\n        if len(set(tup[1:])) == 1:\n            return tup[0]\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    group = set()\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                group.add(Input[i][0])\n                break\n    return list(group)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tup in Input:\n        common_elements.append(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty dictionary to store the count of each unique element\n    count_dict = {}\n\n    # Iterate through the given list of tuples\n    for item in Input:\n        # If the item is a tuple and has a first element, add it to the count dictionary\n        if isinstance(item, tuple) and item[0] in count_dict:\n            count_dict[item[0]] += 1\n        # If the item is not a tuple, ignore it\n        elif not isinstance(item, tuple):\n            continue\n\n    # Initialize an empty list to store the common first elements\n    common_first_elements = []\n\n    # Iterate through the count dictionary and find the common first elements\n    for item in count_dict:\n        if count_dict[item] == max(count_dict.values()):\n            common_first_elements.append(item)\n\n    # Return the list of common first elements\n    return common_first_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary where the keys are the common elements of the tuples and the values are the lists of tuples containing those elements.\n\n    Example:\n    Input = [(1,2,3),(4,5,6),(7,8,9)]\n    Output = {'1':[(1, 2, 3)], '2':[(4, 5, 6)], '3':[(7, 8, 9)]}\n    '''\n\n    common_elements = set()\n\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.add(Input[i][0])\n\n    result = {}\n    for element in common_elements:\n        result[element] = [tuple(x) for x in [x for x in Input if x[0] == element]]\n\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = []\n    for item in Input: \n        if len(common_first) == 0 or common_first[-1][0]!= item[0]: \n            common_first.append(item)\n        else: \n            common_first[-1] = item\n\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for tup in Input:\n        if tup[0] not in common_first_element:\n            common_first_element.append(tup[0])\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize empty dictionary to store common elements\n    common_elements = {}\n\n    # Iterate through each tuple in the input list\n    for item in Input:\n        # Get the first element of the tuple\n        first_element = item[0]\n\n        # If the first element is not already in the dictionary, add it and set its value to True\n        if first_element not in common_elements:\n            common_elements[first_element] = True\n\n    # Return the dictionary of common elements as a list of tuples\n    return list(common_elements.items())"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    max_len = 0 \n    max_elem = None\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    This function finds the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_ele = i\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_elem = i\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst: \n        if len(str(element)) > max_length: \n            max_length = len(str(element)) \n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = max(len(x) for x in lst) \n    return [x for x in lst if len(x) == max_length][0] "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(str(elem)) > max_len: \n            max_len = len(str(elem)) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Calculate the total sum of the numbers in the list\n    total_sum = sum(list1)\n    \n    # Round the numbers in the list\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    \n    # Calculate the product of the length of the list and the rounded numbers\n    product = len(list1) * total_sum\n    \n    # Print the result\n    print(\"The total sum multiplied by the length of the list is:\", product)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Calculate the total sum and the length of the list\n    total_sum = sum(list1)\n    list_length = len(list1)\n\n    # Round all the numbers in the list\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n\n    # Calculate the total sum of rounded numbers\n    rounded_sum = sum(list1)\n\n    # Print the result\n    print(\"Total sum of rounded numbers: \" + str(rounded_sum))\n    print(\"Total sum of numbers: \" + str(total_sum))\n    print(\"Total sum: \" + str(rounded_sum * list_length))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Round all the numbers in the list\n    rounded_list = [round(x) for x in list1]\n\n    # Calculate the total sum of the rounded numbers\n    total_sum = sum(rounded_list)\n\n    # Print the result\n    print(total_sum * len(rounded_list))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        cube = i ** 3\n        sum += cube\n    return sum\n\nprint(cube_Sum(5))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    # initializing variables\n    sum = 0\n    num = 1\n    \n    # loop to find the cube sum of the first n even natural numbers\n    while num <= n*2:\n        sum += num**3\n        num += 2\n    \n    # returning the cube sum of the first n even natural numbers\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Concatenate each element of a tuple by a delimiter.\n\n    Parameters:\n    test_tup (tuple): A tuple of elements to concatenate.\n    delimiter (str, optional): The delimiter to use between elements. Defaults to''.\n\n    Returns:\n    str: The concatenated string.\n    \"\"\"\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-2]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    concatenated_str = \"\"\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    new_list = []\n    for i in test_tup:\n        new_list.append(str(i))\n    concatenated_str = delimiter.join(new_list)\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(str(element) for element in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    # Initialize an empty string to concatenate the elements\n    concatenated_string = \"\"\n    # Loop through each element in the tuple\n    for element in test_tup:\n        # Concatenate the element to the concatenated string\n        concatenated_string += str(element)\n    # Return the concatenated string\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ','.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return ', '.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n\n    average = sum_of_cubes / count\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(n+1):\n        sum += i**3\n        count += 1\n    average = sum/count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    count = 0  \n    for i in range(1, n+1):  \n        sum += i*i*i  \n        count += 1  \n    return sum/count  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        \n        # Calculate the cube of the current natural number\n        cube = i**3\n        \n        # Add the cube to the sum variable\n        sum += cube\n        \n    # Calculate the average of the cubes\n    average = sum/n\n    \n    # Return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_of_cubes = sum_cubes / n\n    return average_of_cubes\n\nn = 10 # number of natural numbers to calculate average of cubes for\nprint(\"The average of cubes of first\", n, \"natural numbers is:\", find_Average_Of_Cube(n))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    \n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    average_of_cubes = sum_of_cubes / n\n    \n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n\n    rear_elements = []\n\n    for i in range(len(test_tuple)):\n        if len(test_tuple[i]) > 0:\n            rear_elements.append(test_tuple[i][-1])\n\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple)-1: #if the index is equal to the last index\n            rear_index_elements.append(test_tuple[i])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_tuple = []\n    for string in test_tuple:\n        rear_tuple.append(string[-1])\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [i[-1] for i in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, val in enumerate(test_tuple):\n        if i == len(test_tuple)-1:\n            rear_indices.append(i)\n    rear_elements = [test_tuple[i] for i in rear_indices]\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_index_elements = []\n    for string in test_tuple:\n        rear_index_elements.append(string[-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == str:\n            rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    count = 0 \n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    # create a new list to hold the odd numbers\n    odd_nums = []\n    # loop through each number in the input list\n    for num in nums:\n        # if the number is odd, add it to the new list\n        if num % 2!= 0:\n            odd_nums.append(num)\n    # return the new list of odd numbers\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace the '-' with a space and convert to lowercase\n    dt = re.sub('-','', dt).lower()\n    # Split the date by space and reverse the order\n    dt =''.join(dt.split()[::-1])\n    # Convert the date to the desired format\n    new_dt = dt.split()\n    new_dt.reverse()\n    new_dt = '-'.join(new_dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching the date format in yyyy-mm-dd format\n    pattern = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n    # Find all matches of the pattern in the input string\n    matches = pattern.findall(dt)\n    # Check if there is at least one match\n    if len(matches) == 0:\n        return dt\n    # Extract the date part from the first match and replace it with the new format\n    date = matches[0].split('-')\n    new_date = '-'.join([date[2], date[1], date[0]])\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd = re.sub(r'(\\d{2})-(\\d{2})-(\\d{4})', r'\\3-\\2-\\1', dt)\n    return yyyy_mm_dd"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Search for the pattern in the input string\n    match = re.search(pattern, dt)\n\n    # If the pattern is found, convert the date to the desired format\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return day + '-' + month + '-' + year\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    # Check if the date format matches the given pattern\n    if re.match(pattern, dt):\n        # Split the date into year, month, and day\n        year, month, day = dt.split('-')\n        # Reverse the order of the month and day\n        month, day = day, month\n        # Concatenate the day, month, and year in the desired format\n        result = f'{day}-{month}-{year}'\n        return result\n    else:\n        # If the date format does not match, return the original date\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(date_regex, dt)\n\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        formatted_date = f'{day}-{month}-{year}'\n        return formatted_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match date in yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.sub() method to replace the matched date with the desired format\n    return re.sub(pattern, r'\\2-\\1-\\3', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_pattern = r'\\3-\\2-\\1'\n    return re.sub(pattern, new_pattern, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression to match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Find all matches of the pattern in the input string\n    match = re.findall(pattern, dt)\n    \n    # Convert the matched date format to dd-mm-yyyy format\n    new_date = '-'.join(map(str, reversed(tuple(map(int, match[0])))))\n    \n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression pattern for matching date in yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the date pattern in the input string\n    match = re.match(pattern, dt)\n\n    # Extract the date from the match object\n    year, month, day = match.groups()\n\n    # Convert the date to dd-mm-yyyy format\n    new_dt = day + '-' + month + '-' + year\n\n    return new_dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Step 1: Build a counting sequence\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    # Step 2: Insertion sort on subarrays\n    for gap in range(n//2, 0, -1):\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n // 3:\n        h = 3 * h + 1\n    while h >= 1:\n        for i in range(h, n):\n            for j in range(i, n, h):\n                key = my_list[j]\n                # Insertion sort\n                for k in range(j-h, j-h-h, -h):\n                    if k < j-h or my_list[k] <= key:\n                        break\n                    else:\n                        my_list[k+h] = my_list[k]\n                my_list[k+h] = key\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Divide array into n sub-arrays of sizes 1, 4, 13, 40, 121,...\n    sub_arrays = [[] for _ in range(int(n/2) + 1)]\n    for i in range(n):\n        sub_arrays[i % len(sub_arrays)].append(my_list[i])\n    # Sort each sub-array individually using insertion sort\n    for i in range(len(sub_arrays)):\n        for j in range(len(sub_arrays[i])):\n            for k in range(j):\n                if sub_arrays[i][j] < sub_arrays[i][k]:\n                    sub_arrays[i][j], sub_arrays[i][k] = sub_arrays[i][k], sub_arrays[i][j]\n    # Merge sub-arrays back into the original array\n    for i in range(len(sub_arrays)):\n        for j in range(len(sub_arrays[i])):\n            my_list[i*len(sub_arrays[0])+j] = sub_arrays[i][j]\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Find the largest gap such that gap is an integer multiple of 11\n    gap = n // 2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 11\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # initialize gap value and set the length of the list to be sorted\n    gap = len(my_list) // 2\n    length = len(my_list)\n\n    # perform insertion sort on every gap size\n    while gap > 0:\n        for i in range(gap, length):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap\n    n = len(my_list)\n    largest_gap = n // 2\n\n    # While there is still a gap larger than 1\n    while largest_gap > 0:\n        # Insert the gap sequence into the array\n        for i in range(largest_gap, n):\n            temp = my_list[i]\n            j = i\n            # Move elements of the array that are greater than the gap\n            # to one position ahead of their current position\n            while j >= largest_gap and my_list[j - largest_gap] > temp:\n                my_list[j] = my_list[j - largest_gap]\n                j -= largest_gap\n            my_list[j] = temp\n        # Decrease the gap\n        largest_gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize empty lists to hold the and tuples\n    and_tup1 = []\n    and_tup2 = []\n    \n    # extract the elementwise and tuples from the two input tuples\n    for i in range(len(test_tup1)):\n        and_tup1.append(test_tup1[i] & test_tup2[i])\n        and_tup2.append(test_tup1[i] & test_tup2[i])\n    \n    # return the and tuples as a tuple\n    return tuple(and_tup1), tuple(and_tup2)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the element-wise and of the tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2, test_tup1 & test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 & tup2 for tup1, tup2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Define the length of the two tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Check if the two tuples have the same length\n    if len1!= len2:\n        print(\"Error: the two tuples have different lengths.\")\n        return\n\n    # Initialize the empty result tuple\n    result_tup = ()\n\n    # Loop through the elements of the two tuples\n    for i in range(len1):\n        # Extract the elements of the two tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n\n        # Extract the elementwise and of the elements\n        and_elem = elem1 & elem2\n\n        # Add the extracted element to the result tuple\n        result_tup += (and_elem,)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n    \n    # Initialize an empty list to store the resulting tuples\n    result_list = []\n    \n    # Extract the elementwise and tuples from the input tuples and append them to the result list\n    for i in range(len(test_tup1)):\n        result_list.append((test_tup1[i] & test_tup2[i]))\n        \n    # Return the result list\n    return result_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": ""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    if disc >= 0:\n        return (-b + disc**0.5)/(2*a)\n    else:\n        return (-b - disc**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = 2 * b - 4 * a * c\n    if d >= 0:\n        return (-b + (b**2 - 4 * a * c)**0.5) / (2 * a)\n    else:\n        return (-b - (b**2 - 4 * a * c)**0.5) / (2 * a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        print(\"The directrix is:\", root1, \"or\", root2)\n    elif discriminant == 0:\n        root = -b / (2*a)\n        print(\"The directrix is:\", root)\n    else:\n        print(\"The parabola has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2*a)\n        x2 = (-b - discriminant**0.5) / (2*a)\n    elif discriminant == 0:\n        x1 = -b / (2*a)\n        x2 = -b / (2*a)\n    else:\n        x1 = None\n        x2 = None\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if disc > 0: \n        # Calculate the two roots\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        \n        # Check which root is closest to 0\n        if abs(root1) < abs(root2):\n            return root1\n        else:\n            return root2\n    \n    # If the discriminant is zero, then the directrix is the root of the quadratic equation\n    elif disc == 0:\n        return (-b)/(2*a)\n        \n    # If the discriminant is negative, then there are no real roots and the directrix is undefined\n    else:\n        return \"No real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # If the discriminant is positive\n    if disc > 0: \n        # Find the two real roots of the discriminant\n        root1 = (-b + math.sqrt(disc)) / (2*a)\n        root2 = (-b - math.sqrt(disc)) / (2*a)\n\n        # Return the two roots\n        return root1, root2\n    \n    # If the discriminant is zero\n    elif disc == 0:\n        # Return the root\n        return (-b) / (2*a)\n    \n    # If the discriminant is negative\n    else:\n        # Return None (no real roots)\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the coefficients of the quadratic equation\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the quadratic equation has a real root\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        \n        print(\"The directrix of the parabola is between {} and {}\".format(x1, x2))\n    else:\n        x = -b/(2*a)\n        print(\"The directrix of the parabola is {}\".format(x))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the parabola has real roots\n    if disc > 0:\n        # Calculate the roots\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n        \n        # Sort the roots in ascending order\n        x1, x2 = sorted((x1, x2))\n        \n        # Return the directrix\n        return (x1 + x2)/2\n    \n    # If the parabola has no real roots\n    elif disc == 0:\n        return (-b)/(2*a)\n    \n    # If the parabola has complex conjugate roots\n    else:\n        return \"The parabola has complex conjugate roots\""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set of all elements in both lists\n    common_set = set(list1 + list2)\n    \n    # Check if there are any common elements\n    if len(common_set) == len(list1) + len(list2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set of all the elements in list1\n    set1 = set(list1)\n    # Loop through all the elements in list2\n    for element in list2:\n        # If the element is in set1, it means it's a common element\n        if element in set1:\n            return True\n    # If we make it through the loop without returning True, there's no common element\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    # create a set of list1 elements and check if it contains any element from list2\n    set1 = set(list1)\n    for element in list2:\n        if element in set1:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a dictionary to store the frequency of each element in both lists\n    freq1 = {}\n    freq2 = {}\n\n    # count the frequency of each element in both lists\n    for element in list1:\n        if element in freq1:\n            freq1[element] += 1\n        else:\n            freq1[element] = 1\n\n    for element in list2:\n        if element in freq2:\n            freq2[element] += 1\n        else:\n            freq2[element] = 1\n\n    # check if there is any common element between the two lists\n    for element in freq1:\n        if element in freq2 and freq1[element] > 0 and freq2[element] > 0:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a dictionary to store the frequency of each element in the first list\n    freq1 = {}\n    for item in list1:\n        if item in freq1:\n            freq1[item] += 1\n        else:\n            freq1[item] = 1\n\n    # Create a dictionary to store the frequency of each element in the second list\n    freq2 = {}\n    for item in list2:\n        if item in freq2:\n            freq2[item] += 1\n        else:\n            freq2[item] = 1\n\n    # Iterate through the keys of the first dictionary and check if they are in the second dictionary\n    for key in freq1:\n        if key in freq2:\n            freq2[key] -= freq1[key]\n        else:\n            return False\n\n    # If we make it through the loop without finding any common elements, then there are no common elements\n    return True"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Create a set from list2 to avoid duplicates\n    set2 = set(list2)\n    # Loop through each element in list1 and check if it's in set2\n    for element in list1:\n        if element in set2:\n            return True\n    # If no common element found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5*(base1+base2)*height\n    # calculate the length of the shorter base\n    shorter_base = min(base1,base2)\n    # calculate the length of the longer base\n    longer_base = max(base1,base2)\n    # calculate the length of the middle base\n    middle_base = (shorter_base+longer_base)/2\n    # calculate the sum of the middle base and the shorter base\n    sum_middle = middle_base + shorter_base\n    # calculate the sum of the middle base and the longer base\n    sum_longer = middle_base + longer_base\n    # check which sum is closer to the height\n    if abs(sum_middle-height)<abs(sum_longer-height):\n        return middle_base\n    else:\n        return longer_base"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Find the median length of a trapezium.\n\n    :param base1: length of the first base\n    :param base2: length of the second base\n    :param height: height of the trapezium\n    :return: median length of the trapezium\n    \"\"\"\n    area = (base1 + base2) * height / 2\n    base1_squared = base1 ** 2\n    base2_squared = base2 ** 2\n    trapezium_length = (base1_squared + base2_squared + 2 * base1 * base2 * height) ** 0.5\n    return area / trapezium_length * 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium\n    base1_length = base1 + base2\n    trapezium_length = 2 * base1_length\n\n    # Calculate the length of the base of the left half\n    left_half_length = base1 + base2\n    if left_half_length % 2 == 0:\n        left_half_length -= 1\n\n    # Calculate the length of the base of the right half\n    right_half_length = base2\n\n    # Calculate the area of the trapezium\n    area = 0.5 * trapezium_length * height\n\n    # Calculate the area of the left half\n    left_area = 0.5 * left_half_length * height\n\n    # Calculate the area of the right half\n    right_area = 0.5 * right_half_length * height\n\n    # Calculate the area of the trapezium's base\n    base_area = left_area + right_area\n\n    # Calculate the area of the trapezium's left half\n    left_half_area = left_area + area - base_area\n\n    # Calculate the area of the trapezium's right half\n    right_half_area = right_area + area - base_area\n\n    # Calculate the length of the median of the left half\n    left_half_median = 0.5 * (left_half_length + base1_length)\n\n    # Calculate the length of the median of the right half\n    right_half_median = 0.5 * (right_half_length + base1_length)\n\n    # Determine the median length\n    median_length = 0.5 * (left_half_median + right_half_median)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2 + height)\n    \n    # Calculate the area of the trapezium\n    area = (base1 * height) + (base2 * height) + (height * height) / 2\n    \n    # Calculate the length of the shorter base\n    shorter_base = perimeter / 2 - area / 2\n    \n    # Calculate the length of the longer base\n    longer_base = perimeter / 2 - (area + (shorter_base * shorter_base)) / 2\n    \n    # Calculate the length of the trapezium\n    trapezium_length = (longer_base + shorter_base) / 2\n    \n    # Calculate the area of the trapezium\n    trapezium_area = (trapezium_length * height)\n    \n    # Return the median length of the trapezium\n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # calculate the length of the perimeter of the trapezium\n    perimeter1 = base1 + base2\n    perimeter2 = 2 * base1 + 2 * base2\n    perimeter = perimeter1 + perimeter2\n\n    # calculate the length of the middle segment of the trapezium\n    middle = 0.5 * perimeter\n\n    # calculate the length of the left and right segments of the trapezium\n    left_segment = 0.5 * (perimeter1 + base2)\n    right_segment = 0.5 * (perimeter2 + base1)\n\n    # calculate the length of the median of the two middle segments\n    median = 0.5 * (left_segment + right_segment)\n\n    # calculate the distance from the middle of the trapezium to the median\n    distance = abs(middle - median)\n\n    # return the median\n    return distance"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Find the lengths of the two trapezium sides\n    a = 0.5 * area\n    b = 0.5 * height\n    \n    # Find the length of the longer side\n    if a >= b:\n        longer = a\n    else:\n        longer = b\n    \n    # Calculate the median length of the trapezium\n    median = longer / 2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the trapezium using the formula:\n    # A = (b1 + b2) / 2\n    # h = H / 2\n    a = (base1 + base2) / 2\n    h = height / 2\n    # Calculate the area of the trapezium using the formula:\n    # A = b1 + b2\n    # h = 2 * h\n    A = base1 + base2\n    h = 2 * h\n    # Find the area of the rectangle opposite the trapezium\n    # using the formula:\n    # A = (b1 + b2) / 2\n    # h = H / 2\n    #\n    # A = (b1 + b2) / 2\n    # h = (b1 + b2) / 2\n    #\n    # A = (b1 + b2) / 2\n    # h = h\n    #\n    # A = h\n    #\n    # A = 2 * h\n    #\n    # A = 2 * (base1 + base2)\n    #\n    # A = 4 * base1 + 4 * base2\n    #\n    # A = 8 * base1 + 8 * base2\n    #\n    # A = 16 * base1 + 16 * base2\n    #\n    # A = 32 * base1 + 32 * base2\n    #\n    # A = 64 * base1 + 64 * base2\n    #\n    # A = 128 * base1 + 128 * base2\n    #\n    # A = 256 * base1 + 256 * base2\n    #\n    # A = 512 * base1 + 512 * base2\n    #\n    # A = 1024 * base1 + 1024 * base2\n    #\n    # A = 2048 * base1 + 2048 * base2\n    #\n    # A = 4096 * base1 + 4096 * base2\n    #\n    # A = 8192 * base1 + 8192 * base2\n    #\n    # A = 16384 * base1 + 16384 * base2\n    #\n    # A = 32768 * base1 + 32768 * base2\n    #\n    # A = 65536 * base1 + 65536 * base2\n    #\n    # A = 131072 * base1 + 131072 * base2\n    #\n    # A = 262144 * base1 + 262144 * base2\n    #\n    # A = 524288 * base1 + 524288 * base2\n    #\n    # A = 1048576 * base1 + 1048576 * base2\n    #\n    # A = 2097152 * base1 + 2097152 * base2\n    #\n    # A = 4194304 * base1 + 4194304 * base2\n    #\n    # A = 8388608 * base1 + 8388608 * base2\n    #\n    # A = 16777216 * base1 + 16777216 * base2\n    #\n    # A = 33554432 * base1 + 33554432 * base2\n    #\n    # A = 67108864 * base1 + 67108864 * base2\n    #\n    # A = 134217728 * base1 + 134217728 * base2\n    #\n    # A = 268435456 * base1 + 268435456 * base2\n    #\n    # A = 536870912 * base1 + 536870912 * base2\n    #\n    # A = 1073741824 * base1 + 1073741824 *"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the lengths of the two equal-side triangles\n    a = 0.5 * base1 * height\n    b = 0.5 * base2 * height\n    \n    # Calculate the lengths of the two half-equilateral triangles\n    c = 0.5 * a\n    d = 0.5 * b\n    \n    # Calculate the length of the trapezium\n    trapezium_length = max(a, b) + c + d\n    \n    # Calculate the median length of the trapezium\n    median = 0.5 * (trapezium_length + area)\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # Calculate the length of the base of the left half of the trapezium\n    left_half_base = area / 2 * (base1 / height + 1)\n\n    # Calculate the length of the base of the right half of the trapezium\n    right_half_base = area / 2 * (base2 / height + 1)\n\n    # Sort the bases in descending order\n    sorted_bases = sorted([left_half_base, right_half_base], reverse=True)\n\n    # Calculate the median length of the trapezium\n    median_length = sorted_bases[0] + sorted_bases[1]\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the area of the smaller half of the trapezium\n    smaller_area = 0.5 * (base1 + base2)\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + 2 * height\n\n    # Calculate the area of the larger half of the trapezium\n    larger_area = perimeter * height\n\n    # Calculate the area of the trapezium\n    total_area = area + smaller_area + larger_area\n\n    # Calculate the area of the smaller half of the trapezium\n    smaller_half_area = 0.5 * (smaller_area + area)\n\n    # Calculate the area of the larger half of the trapezium\n    larger_half_area = 0.5 * (larger_area + area)\n\n    # Calculate the distance from the center of the smaller half to the center of the trapezium\n    distance_from_center = 0.5 * (smaller_half_area + larger_half_area)\n\n    # Calculate the distance from the center of the larger half to the center of the trapezium\n    distance_from_center_larger = distance_from_center - (base1 + base2 + height)\n\n    # Calculate the distance from the center of the larger half to the center of the smaller half\n    distance_from_center_smaller = distance_from_center - (base1 + base2)\n\n    # Calculate the distance from the center of the larger half to the center of the trapezium\n    if distance_from_center_larger > distance_from_center_smaller:\n        median_length = distance_from_center_larger\n    else:\n        median_length = distance_from_center_smaller\n\n    # Calculate the area of the smaller half of the trapezium\n    smaller_half_area = 0.5 * (smaller_area + area)\n\n    # Calculate the area of the larger half of the trapezium\n    larger_half_area = 0.5 * (larger_area + area)\n\n    # Calculate the area of the smaller half of the trapezium\n    smaller_half_area = 0.5 * (smaller_half_area + total_area)\n\n    # Calculate the area of the larger half of the trapezium\n    larger_half_area = 0.5 * (larger_half_area + total_area)\n\n    # Calculate the area of the trapezium\n    total_area = 0.5 * (total_area + area)\n\n    # Calculate the distance from the center of the larger half to the center of the trapezium\n    distance_from_center_larger = 0.5 * (larger_half_area + total_area)\n\n    # Calculate the distance from the center of the smaller half to the center of the trapezium\n    distance_from_center_smaller = 0.5 * (smaller_half_area + total_area)\n\n    # Calculate the median length of the trapezium\n    if distance_from_center_larger > distance_from_center_smaller:\n        median_length = distance_from_center_larger\n    else:\n        median_length = distance_from_center_smaller\n\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if number > i:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for element in arr:\n        if number > element:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_number = False\n    for element in arr:\n        if element > number:\n            greater_than_number = True\n            break\n    return greater_than_number"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_count = 0\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater_count += 1\n    if greater_count > 0:\n        print(\"The entered number is greater than all elements of the array.\")\n    else:\n        print(\"The entered number is not greater than any element of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater_than_number = False\n    for element in arr:\n        if element > number:\n            greater_than_number = True\n            break\n    return greater_than_number"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b*)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\b.*b\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return f\"{text} matched pattern: {matches[0]}\"\n    else:\n        return f\"{text} did not match pattern: {pattern}\""
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    # Define the regular expression pattern for finding the a followed by one or more b's\n    pattern = r\"(?<=a)b+\"\n\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If a match is found, return the matched string, otherwise return an empty string\n    return match.group() if match else \"\""
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b')\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a(b|){1,}')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    # convert the number to a string\n    n = str(n)\n    # extract the last digit of the string\n    last_digit = n[-1]\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the given number to a string and then split it into characters\n    digits = str(n)\n    # convert the last character of the string to an integer and return it\n    return int(digits[-1])"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the given number to string\n    num = str(n)\n    # Get the last character of the string\n    last_char = num[-1]\n    # Convert the last character to integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as an argument and returns the last digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns its last digit as an integer.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as an input and returns a list containing only the negative numbers in the input list.\n    \"\"\"\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # initialize an empty list to store negative numbers\n    neg_list = []\n    # loop through the list\n    for num in list1:\n        # if the number is negative, add it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    # return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list with all negative numbers.\n    '''\n    result = []\n    for num in lst:\n        if num < 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns a list of negative numbers.\n    \"\"\"\n    # creating an empty list to store the negative numbers\n    neg_list = []\n    # iterating over the list\n    for num in list1:\n        # if the number is negative, adding it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n    # returning the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isalpha():\n            if ord(char) % 2!= 0:\n                result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(str1)\n    # Initialize an empty string to store the new string\n    new_str = ''\n    # Loop through each character in the list\n    for char in char_list:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If the character is odd, append it to the new string\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    This function takes a string as input and removes all the odd characters from it.\n    \"\"\"\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the character is odd, remove it from the string\n        if i % 2 == 1:\n            str1 = str1.replace(str1[i], '')\n    # return the modified string\n    return str1"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # convert the string to a list of characters\n    chars = list(str1)\n    # initialize an empty list to store the even characters\n    even_chars = []\n    # loop through the characters in the string\n    for char in chars:\n        # check if the character is odd\n        if char % 2 == 0:\n            # add the even character to the even_chars list\n            even_chars.append(char)\n    # convert the even_chars list to a string and return it\n    return ''.join(str(x) for x in even_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i.isdigit():\n            new_str += i\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-i-1):\n            if test_list[i][j] == test_list[i][j+1] and test_list[i+j+1][i+j] == test_list[i+j][i+j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns the number of pairs of tuples that have opposite pairs in the list.\n\n    Input:\n        test_list: A list of tuples.\n\n    Output:\n        The number of pairs of tuples that have opposite pairs in the list.\n    \"\"\"\n\n    # Initialize a counter variable to keep track of the number of pairs of tuples that have opposite pairs in the list.\n    count = 0\n\n    # Loop through the list of tuples.\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the two tuples have opposite pairs in the list.\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n\n    # Return the number of pairs of tuples that have opposite pairs in the list.\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Initialize counter variable\n    count = 0\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # Loop through the list of tuples starting from index i+1\n        for j in range(i+1, len(test_list)):\n            # Check if the current pair of tuples is bidirectional\n            if (test_list[i][0] == test_list[j][1]) and (test_list[j][0] == test_list[i][1]):\n                # Increment the counter variable\n                count += 1\n    # Return the final count of bidirectional pairs\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n\n    Returns:\n    int: The number of bidirectional tuple pairs found in the input list.\n    \"\"\"\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize an empty list to store the single integers\n    single_list = []\n    \n    # iterate over the list of integers\n    for num in L:\n        # if the integer is divisible by 3, add it to the single list\n        if num % 3 == 0:\n            single_list.append(num)\n    \n    # if the single list is empty, return None\n    if not single_list:\n        return None\n    \n    # join the single list into a single integer using the join() method\n    single_num = int(''.join(str(x) for x in single_list))\n    \n    # return the single integer\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the sum to zero\n    total = 0\n    \n    # Iterate through the list of integers\n    for num in L:\n        # If the integer is a multiple of 3, add it to the total\n        if num % 3 == 0:\n            total += num\n    \n    # Return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result to 0\n    result = 0\n    \n    # Iterate over all the elements in the list\n    for num in L:\n        # If the current element is not a multiple of 5, add it to the result\n        if num % 5!= 0:\n            result += num\n    \n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 0\n    for i in range(len(L)):\n        if L[i] % 2 == 0:\n            single += L[i]\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert the list to a string and split it into individual characters\n    s = ''.join(str(x) for x in L)\n    # Convert the string to an integer and return it\n    return int(s)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the result to zero\n    result = 0\n    # iterate over the elements of the list\n    for elem in L:\n        # add the current element to the result\n        result += elem\n    # return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern for adverbs\n    pattern = r'\\b\\w*[a-z]*\\b\\s*[a-z]*\\b'\n    # Use the pattern to search for the first adverb\n    match = re.search(pattern, text)\n    # If no adverb is found, return None\n    if not match:\n        return None\n    # Extract the adverb and its positions from the match object\n    adverb = match.group()\n    start_index = match.start()\n    end_index = match.end()\n    # Create a dictionary to store the adverb and its positions\n    adverb_dict = {\n        'adverb': adverb,\n       'start_index': start_index,\n        'end_index': end_index\n    }\n    # Return the dictionary containing the adverb and its positions\n    return adverb_dict"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Use regular expressions to find all adverbs in the sentence\n    adverbs = re.findall(r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'(\\b\\w+\\b|\\b\\w+\\s+\\w+\\b)'\n    matches = re.findall(pattern, text)\n\n    if not matches:\n        return \"No adverbs found in the sentence.\"\n\n    first_adverb = matches[0]\n    adverb_positions = re.findall(r'\\b\\w+\\b|\\b\\w+\\s+\\w+\\b', text)\n    adverb_positions = [match for match in adverb_positions if match!= first_adverb]\n\n    return f\"The first adverb is '{first_adverb}', and it appears at positions: {', '.join(str(position) for position in adverb_positions)}\""
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern for adverbs\n    pattern = re.compile(r'\\b\\w*[a-z]+\\b\\b')\n\n    # Find all adverbs in the text\n    matches = pattern.findall(text)\n\n    # Print the adverbs and their positions in the sentence\n    for i, match in enumerate(matches):\n        print(f'{i+1}. {match}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern for matching adverbs\n    pattern = r'\\b([a-z]+|ing|ed|ingly|ly|edly|ingly)\\b'\n\n    # Find all matches for the pattern in the text\n    matches = re.findall(pattern, text.lower())\n\n    # Create a dictionary to store the adverbs and their positions in the text\n    adverbs_dict = {}\n\n    # Iterate over the matches and add each adverb to the dictionary with its position\n    for i, match in enumerate(matches):\n        adverb = match[0]\n        position = i + 1\n        adverbs_dict[adverb] = position\n\n    return adverbs_dict"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b\\w*[a-z]*(ly|ed|ing)\\b\\w*'\n    \n    # Find all matches of the pattern in the given text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    \n    # Initialize a dictionary to store the adverbs and their positions\n    adverbs_positions = {}\n    \n    # Iterate through all the matches and store the adverbs and their positions in the dictionary\n    for match in matches:\n        adverb = match.lower()\n        position = matches.index(match)\n        adverbs_positions[adverb] = position\n        \n    # Return the dictionary with adverbs and their positions\n    return adverbs_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(?:before|after|below|above|behind|beside|between|under|over|towards|toward|towards)\\b'\n    # Use the pattern to find all occurrences of adverbs in the sentence\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    # Iterate over the matches and extract the adverb and its position in the sentence\n    for match in matches:\n        # Extract the adverb and its position in the sentence\n        adverb = match.group(0)\n        position = match.start()\n        # Print the adverb and its position\n        print(f\"Adverb: {adverb}, Position: {position}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression pattern to find adverbs\n    pattern = r'\\b\\w+ly\\b'\n    # Find all adverbs in the given text using re.findall()\n    adverbs = re.findall(pattern, text)\n    # Iterate over all adverbs and print their positions in the text\n    for i, adv in enumerate(adverbs):\n        print(f'{i+1}. {adv}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b\\w*ed\\b'\n    \n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # If no matches are found, return an empty list\n    if not matches:\n        return []\n    \n    # Initialize a dictionary to store the adverb and its positions\n    adverbs = {}\n    \n    # Iterate through all the matches and extract the adverb and its position\n    for i, match in enumerate(matches):\n        adverb = match.lower()\n        position = i\n        \n        # Check if the adverb is already in the dictionary\n        if adverb in adverbs:\n            # If it is, update its position\n            adverbs[adverb] = max(adverbs[adverb], position)\n        else:\n            # If it's not, add it to the dictionary with its position\n            adverbs[adverb] = position\n    \n    # Return the adverbs and their positions in a list\n    return list(adverbs.items())"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # create a regular expression pattern for adverbs\n    pattern = r'(\\b|^)(\\w+)(\\b|$)'\n\n    # search for adverbs using the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # if no adverbs are found, return an empty list\n    if not matches:\n        return []\n\n    # extract the adverb and its position\n    adverb = matches[0][1]\n    position = len(text) - len(matches[0][0]) - len(matches[0][2]) - len(matches[0][1])\n\n    # return the adverb and its position\n    return adverb, position"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of a cube\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Cube surface area formula\n    surface_area = 6 * l * l + 12 * l + 8\n    \n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l**2\n    print(\"The surface area of the cube is:\", area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l * l\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = (6 * l * l) + (6 * l * l * l) + (l * l * l)\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)  # create an integer array from the input list\n    pos = sum(arr)  # find the sum of the array\n    neg = sum(abs(arr) < 0)  # find the sum of the absolute values of negative elements in the array\n    return (pos / (pos + neg)) if (pos + neg)!= 0 else 0  # calculate the ration of positive numbers"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for num in nums:\n        if num > 0:\n            positives += 1\n    return positives / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    positive_nums = array('i')\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return positive_nums.item(count - 1) / count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    total = len(nums)\n    positive = array('i')\n    for num in nums:\n        if num > 0:\n            positive.append(1)\n        else:\n            positive.append(0)\n    ratio = 0.0\n    if total!= 0:\n        ratio = positive.count(1) / total\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize an empty array to store the positive numbers\n    positives = array('i')\n    # Loop through the array and check if each number is positive\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n    # Calculate the ration of positive numbers\n    positive_ratio = len(positives) / len(nums)\n    # Return the ration of positive numbers\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)  # convert the array to an integer array\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return 0\n    positive = 0\n    negative = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n    return positive / (positive + negative)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    pos_count = 0\n    neg_count = 0\n    for i in range(n):\n        if nums[i] > 0:\n            pos_count += 1\n        elif nums[i] < 0:\n            neg_count += 1\n    if pos_count == 0:\n        return 0\n    else:\n        return pos_count / neg_count"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(lst):\n    max_num = lst[0]\n    for num in lst:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = float('-inf') #initialize maximum negative number with negative infinity\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_neg_num:\n            largest_neg_num = num\n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1 #initialize largest to be negative infinity\n    for num in list1:\n        if num < 0 and num > largest: #if the number is negative and larger than the current largest number, update largest\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    # initialize variables to store largest negative number and its index\n    largest_neg_num = float('-inf')\n    index = -1\n    \n    # loop through the list\n    for i in range(len(list1)): \n        # check if the current number is negative and larger than the current largest negative number\n        if list1[i] < 0 and list1[i] > largest_neg_num: \n            largest_neg_num = list1[i]\n            index = i\n    \n    # return the largest negative number and its index\n    return largest_neg_num, index"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = None\n    for num in list1:\n        if num < 0 and neg_num is None:\n            neg_num = num\n        elif num < 0 and neg_num is not None and num > neg_num:\n            neg_num = num\n    return neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize a list to store trimmed tuples\n    trimmed_list = []\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Initialize a new tuple with the same length as the original tuple\n        new_tup = tuple([None] * len(tup))\n\n        # Loop through each value in the original tuple and trim it by k if necessary\n        for i in range(len(tup)):\n            if i < K:\n                new_tup[i] = tup[i]\n            else:\n                new_tup[i] = tup[i-K]\n\n        # Append the trimmed tuple to the trimmed list\n        trimmed_list.append(new_tup)\n\n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j < len(test_list[i]):\n                del test_list[i][j]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create a new list to store the trimmed tuples\n    trimmed_list = []\n\n    # loop through each tuple in the test list\n    for tup in test_list:\n        # create a new list to store the trimmed values\n        trimmed_values = []\n\n        # loop through each value in the tuple\n        for val in tup:\n            # trim the value by k and append it to the new list\n            trimmed_values.append(val[k-1:])\n\n        # create a new tuple from the trimmed values and append it to the new list\n        trimmed_list.append(tuple(trimmed_values))\n\n    # return the new list of trimmed tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    \n    for item in test_list:\n        trimmed_list.append(tuple(item[:-K]))\n    \n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        # Check if the length of the tuple is greater than K\n        if len(test_list[i]) > K:\n            # Slice the tuple to have only the first K elements\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])-K):\n            test_list[i] = tuple(test_list[i][:j] + test_list[i][j+K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # get the length of the two tuples\n    length1 = len(test_tup1)\n    length2 = len(test_tup2)\n\n    # check if the length of the two tuples is equal\n    if length1!= length2:\n        print(\"The two tuples should have equal length.\")\n        return\n\n    # initialize a new tuple with the same length as the two input tuples\n    new_tup = [0] * length1\n\n    # perform index wise multiplication of the two input tuples\n    for i in range(length1):\n        new_tup[i] = test_tup1[i] * test_tup2[i]\n\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    # check if both input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    # create a new tuple of the same length as the input tuples\n    result_tup = tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Input:\n    test_tup1: tuple\n    test_tup2: tuple\n\n    Output:\n    result_tup: tuple\n\n    Example:\n    test_tup1 = (1, 2, 3)\n    test_tup2 = (4, 5, 6)\n    result_tup = index_multiplication(test_tup1, test_tup2)\n    print(result_tup) # Output: (4, 10, 18)\n\n    '''\n\n    # Check if the input tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have same length\")\n        return\n\n    # Initialize the result tuple with same length as input tuples\n    result_tup = [0]*len(test_tup1)\n\n    # Perform index wise multiplication and store the result in result_tup\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(result_list)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Checking if the input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n\n    # Iterating over the tuples and performing multiplication\n    result = [test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))]\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the tuple of the same size, where each element of the new tuple is the product of the corresponding element in the first tuple and the corresponding element in the second tuple.\n    \n    :param test_tup1: The first tuple.\n    :type test_tup1: tuple\n    \n    :param test_tup2: The second tuple.\n    :type test_tup2: tuple\n    \n    :return: A tuple of the same size as the input tuples, where each element is the product of the corresponding element in the first tuple and the corresponding element in the second tuple.\n    :rtype: tuple\n    \"\"\"\n    \n    result_tup = []\n    \n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    \n    return tuple(result_tup)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two parameters: a tuple and a list.\n    It returns a dictionary where the keys are the elements of the list and the values are their occurrence in the tuple.\n    '''\n    # Use Counter to count the occurrence of each element in the list\n    count = Counter(tup)\n    # Initialize an empty dictionary\n    count_dict = {}\n    # Iterate over the elements of the list and update the count dictionary\n    for elem in lst:\n        count_dict[elem] = count[elem]\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup) \n    total = sum(count_dict.values()) \n    for key, value in count_dict.items(): \n        count_dict[key] = value * 100 / total \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    result = {}\n    for i in lst:\n        if i in counter:\n            result[i] = counter[i]\n        else:\n            result[i] = 0\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    count_dict = {}\n    \n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n    \n    for k, v in count.items():\n        if k in count_dict:\n            count_dict[k] = count_dict[k] + v\n    \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of the list and the values are their count in the tuple.\n    '''\n    count_dict = {}\n    for item in lst:\n        count = tup.count(item)\n        count_dict[item] = count\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    return count_dict[x] "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for element in lst:\n        count_dict[element] = tup.count(element)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input, and returns a dictionary containing the count of each element in the list.\n    '''\n    count_dict = Counter(tup)\n    for i in lst:\n        count_dict[i] += 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert tuple to list to compare with list\n    tup_list = list(tup)\n    # convert list to set to remove duplicates\n    lst_set = set(lst)\n    # count the frequency of each element in the tuple and list using Counter function from collections module\n    count = Counter(tup_list) & Counter(lst_set)\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    #print(count) # Uncomment this line to see the counts of each element of the list\n    for t in tup:\n        if t in count:\n            print(t, count[t])"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        cube = num ** 3\n        result.append(cube)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 2\n    sum_ = 0\n    while p <= n:\n        sum_ += p\n        p += 1\n    return sum_\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (1/i)\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of perrin numbers from 1 to\", n, \"is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i**2+1)**(1/2)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0 \n    for i in range(1, n+1): \n        sum += i*i*i \n    return sum "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (3*i-1)\n    return sum\n\nprint(cal_sum(10))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the first n Perrin numbers.\n    '''\n    perrin_numbers = [0, 1]\n    sum_perrin = 0\n    for i in range(2, n+1):\n        perrin_numbers.append(perrin_numbers[i-2] + perrin_numbers[i-1])\n        sum_perrin += perrin_numbers[i]\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # initialize the sum variable\n    sum = 0\n    \n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # check if the number is a perrin number or not\n        if (i*i == 6*i + 1) or (i*i == 6*i - 1):\n            \n            # add the perrin number to the sum\n            sum += i\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n\n    Args:\n    n (int): The number of Perrin numbers to calculate.\n\n    Returns:\n    int: The sum of the Perrin numbers.\n\n    \"\"\"\n    perrin_numbers = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]\n    perrin_sum = 0\n    for num in perrin_numbers:\n        if num <= n:\n            perrin_sum += num\n    return perrin_sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input and returns a new list containing the extracted strings.\n    '''\n    new_list = []\n    for i in range(0, len(str_list), size):\n        new_list.append(' '.join(str_list[i:i+size]))\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and the size of the strings to be extracted as input.\n    It then returns a list of the specified size strings from the input list.\n    \"\"\"\n    if len(str_list) < size:\n        print(\"Error: Cannot extract strings from the list\")\n        return\n    \n    extracted_strings = []\n    for i in range(size):\n        extracted_strings.append(str_list[i])\n    \n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings `str_list` and an integer `size` as input. \n    It returns a new list of strings, where each string has `size` characters or less.\n    If a string in `str_list` has more than `size` characters, it is truncated to `size` characters.\n    '''\n    return [str[:size] for str in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts the specified size of strings from a list of string values.\n\n    :param str_list: List of string values.\n    :param size: The size of the strings to extract.\n    :return: A list of extracted strings.\n    \"\"\"\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            extracted_list.append(str_list[i][:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) > l[i]:\n            result.append(l[i][0:l[i]])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) > l[i][l[i].index(str):]:\n            result.append(l[i][l[i].index(str):])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        extracted_list.append(str_list[i][:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes in a list of strings and the size of the strings to extract as arguments.\n    It returns a new list containing the extracted strings.\n    '''\n    return [s[:l] for s in str_list]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'  # regular expression pattern to match one or more whitespaces\n    text = re.sub(pattern, '', text1)  # remove all whitespaces from the string using re.sub()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    # remove whitespaces from the start and end of the string\n    text = text.strip()\n    # remove double whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    \n    # Return the modified string\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    pattern = r'\\s+'\n    text2 = re.sub(pattern, '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+','', text1)\n    # remove all whitespaces from the beginning and end of the string\n    text3 = text2.strip()\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = 0.1\n    loss_amount = actual_cost * (1 - loss_percentage)\n    if sale_amount > loss_amount:\n        loss = sale_amount - loss_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                evenFactors += i\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function calculates the sum of even factors of a given number n.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            if i*i == n:\n                factors.append(i)\n    return sum(factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # calculate the sum of even factors of the given number\n    sum_of_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_even_factors += i\n\n    # return the sum of even factors\n    return sum_of_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a Python function that takes an input number and returns the sum of its even factors.\n    \"\"\"\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i % 2 == 0:\n            evenFactors += i\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use regex to search for the word containing 'z'\n    pattern = r'\\b(z)\\w*\\b'\n    # Compile the pattern\n    compiled_pattern = re.compile(pattern)\n    # Search for the word containing 'z' in the text\n    matches = compiled_pattern.findall(text)\n    # Print the matches\n    print(matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*[zZ]\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]*z\\b'\n    matches = re.findall(pattern, text.lower())\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    # Compile a regular expression pattern to match words containing 'z'\n    pattern = re.compile(r'\\b[a-z]+\\b[sz]\\b')\n\n    # Find all the matches in the given text\n    matches = pattern.findall(text)\n\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            days = 29\n        else:\n            days = 28\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        days = 30\n    else:\n        days = 31\n    return days"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    elif monthnum2 in ['04', '06', '09', '11']:\n        return False\n    else:\n        print(\"Invalid month number.\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    # Define a dictionary to store the number of days for each month\n    months = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    # Check if the given month number is in the dictionary\n    if monthnum in months:\n        # Check if the number of days is 31\n        if months[monthnum] == 31:\n            # If it is, print that the month has 31 days\n            print(monthnum, \"has 31 days\")\n        else:\n            # If it's not, print that the month has 30 days\n            print(monthnum, \"has 30 days\")\n    else:\n        # If the month number is not in the dictionary, print an error message\n        print(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    # check if the month number is valid\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number.\"\n    \n    # check if the month number contains 31 days\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return \"This month has 31 days.\"\n    else:\n        return \"This month has 30 days.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_number = int(monthnum2)\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if month_number in range(1,13):\n        if month_number == 2:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                days_in_month[2] = 29\n            else:\n                days_in_month[2] = 28\n        print(f'{month_number} has {days_in_month[month_number-1]} days.')\n    else:\n        print(\"Invalid month number.\")\n\nyear = int(input(\"Enter a year: \"))\ncheck_monthnumb_number(input(\"Enter a month number: \"))"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        if monthnum % 2 == 0:\n            return False\n        elif monthnum % 2!= 0:\n            return True"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list and reverse it\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    \n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_lst = []\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_lst = [i]\n        elif len(i) == min_len:\n            min_lst.append(i)\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') # initialize the minimum length to infinity\n    min_lst = [] # initialize the minimum length sublist to empty list\n    \n    for sublist in lst:\n        if len(sublist) < min_len: # check if the current sublist is smaller than the minimum length\n            min_len = len(sublist) # update the minimum length\n            min_lst = sublist # update the minimum length sublist\n    \n    return min_lst # return the minimum length sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_lst = []\n    min_len = len(lst)\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            sub_lst = lst[i]\n            min_len = len(lst[i])\n    return sub_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    result = []\n    \n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n            result = [sublist]\n        elif length == min_length:\n            result.append(sublist)\n    \n    return result"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    # Create a dictionary to store the lengths of sublists\n    lengths = {}\n    \n    # Loop over each sublist in the list\n    for i in range(len(lst)):\n        # Extract the sublist\n        sublist = lst[i]\n        # Calculate its length\n        length = len(sublist)\n        # Add it to the dictionary with its length as the key\n        lengths[length] = sublist\n    \n    # Find the sublist with the minimum length and return it\n    min_length = min(lengths.keys())\n    return lengths[min_length]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of lists as input and returns the sublist\n    with the minimum length.\n    '''\n    # Finding the length of each sublist in the list\n    sublist_lengths = [len(x) for x in lst]\n\n    # Finding the minimum length\n    min_length = min(sublist_lengths)\n\n    # Returning the sublist with minimum length\n    return [x for x in lst if len(x) == min_length]\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)): \n        sublist = lst[i:] \n        sublist_len = len(sublist)\n        if sublist_len < min_len: \n            min_len = sublist_len\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = []\n    min_len = float('inf')\n    for sublist in lst: \n        if len(sublist) < min_len: \n            min_sublist = sublist \n            min_len = len(sublist) \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to remove uppercase substrings from the string\n    pattern = re.compile(r'(?i)\\b[A-Z][a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function removes uppercase substrings from a given string.\n    \"\"\"\n    # Use regular expression to find all uppercase substrings\n    uppercase_substrings = re.findall(r'[A-Z]+', string)\n    # Loop through the list of uppercase substrings and replace them with empty strings\n    for sub in uppercase_substrings:\n        string = string.replace(sub, '')\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    This function takes a string as input and removes any uppercase substrings from it.\n    \"\"\"\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    return re.sub(pattern, '', str1).lower()"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)[A-Z]+'\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function will remove all uppercase substrings from a given string.\n    \"\"\"\n    # Regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    \n    # Split the string into a list of substrings\n    substrings = pattern.findall(string)\n    \n    # Loop through each substring and check if it's uppercase\n    for substring in substrings:\n        # Check if the substring is uppercase and remove it if it is\n        if substring.isupper():\n            string = string.replace(substring, '')\n    \n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[A-Z][a-z]+\\b', '', str1) # Removing uppercase substrings with regex\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for matching uppercase substrings\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b', re.IGNORECASE)\n    # Use the search() method to find all uppercase substrings in the string\n    matches = pattern.findall(string)\n    # Use the replace() method to remove all uppercase substrings from the string\n    for match in matches:\n        string = string.replace(match, '')\n    # Return the updated string\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'([A-Z][a-z]+)')\n    return pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a list of its sublists' first elements.\n    '''\n    extracted_sublists = []\n    for sublist in lst:\n        extracted_sublists.append(sublist[0])\n    return extracted_sublists"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for sublist in lst for x in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as an input and extracts the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if type(i) == list:\n            result.append(i[0])\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and counts the number of upper case characters in it.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    '''\n    This function counts the number of upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # create a list of all possible combinations\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                result.append(list1[i] + list1[j])\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Get the length of the list\n    length = len(list1)\n\n    # Loop through each element of the list\n    for i in range(length):\n        # Initialize a list to store the current combination\n        current_combination = []\n        # Loop through each element in the list from the current index\n        for j in range(i, length):\n            # Add the element to the current combination list\n            current_combination.append(list1[j])\n        # Print the current combination\n        print(current_combination)\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create an empty list to store all combinations\n    combinations = []\n\n    # Loop through the original list\n    for i in range(len(list1)):\n        # Loop through the remaining elements in the list\n        for j in range(i+1, len(list1)+1):\n            # Append the combination to the list\n            combinations.append(list1[i:j])\n\n    # Return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    def backtrack(start):\n        if start == len(list1):\n            print(list1)\n            return\n        for i in range(start, len(list1)):\n            list1[start], list1[i] = list1[i], list1[start]\n            backtrack(start + 1)\n            list1[start], list1[i] = list1[i], list1[start]\n\n    return backtrack(0)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1) - i + 1):\n            combinations.append(list1[j:j+i])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for j in range(len(list1) - i + 1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and finds the maximum product subarray.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here*arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here*arr[i], arr[i], min_ending_here)\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product of any subarray of the array.\n    \"\"\"\n    max_product = float('-inf') # initializing the maximum product to negative infinity\n    curr_product = 1 # initializing the current product to 1\n    \n    for i in range(len(arr)):\n        curr_product = max(arr[i], curr_product*arr[i])\n        max_product = max(max_product, curr_product)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = float('-inf')\n    current_product = 1\n    start_index = 0\n    end_index = 0\n\n    for i in range(len(arr)):\n        current_product = max(current_product * arr[i], arr[i])\n        if current_product > max_product:\n            max_product = current_product\n            start_index = i\n            end_index = i\n        elif current_product < 0:\n            current_product = 1\n            start_index = i\n\n    return arr[start_index:end_index+1]"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        if current_product < 0:\n            current_product = 1\n\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        if current_product < 0:\n            current_product = 1\n        elif current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return all(values[0] == value for value in values[1:])"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if value!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Loop through each key-value pair in the dictionary\n    for value in dict.values():\n        # If any value is not the same as the first value, return False\n        if value!= dict[next(iter(dict))]:\n            return False\n    # If all values are the same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if not all(dict[key] == dict[key + 1]):\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Convert the dictionary to a list to make it easier to compare values\n    list_dict = list(dict.values())\n    # Check if all values are same\n    if len(set(list_dict)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # if n is not in the dictionary, return True\n    if n not in dict:\n        return True\n    \n    # if n is in the dictionary, check if all its values are same as other keys in the dictionary\n    for key in dict:\n        if key!= n and dict[n]!= dict[key]:\n            return False\n    \n    # if all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a variable to store the first value\n    first_val = next(iter(dict.values()))\n    # Loop through all values and check if all are same as the first value\n    for val in dict.values():\n        if val!= first_val:\n            return False\n    # If all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_same = True\n    for i in range(n):\n        if dict[i]!= dict[0]:\n            all_same = False\n            break\n    return all_same"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    prefix = [1] * n\n    max_product = float('-inf')\n    max_product_ending_here = 1\n    \n    for i in range(1, n):\n        prefix[i] = prefix[i-1] * arr[i-1]\n        if prefix[i] > max_product_ending_here:\n            max_product_ending_here = prefix[i]\n        if prefix[i] > max_product:\n            max_product = prefix[i]\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    current_product = 1\n    \n    for i in range(n):\n        if i == 0 or arr[i] > arr[i-1]:\n            current_product = 1\n        else:\n            current_product *= arr[i-1]\n            \n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    This function takes in an array and returns the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    prefix_product = [0] * n\n    suffix_product = [0] * n\n\n    # Calculate the prefix product array\n    for i in range(1, n):\n        prefix_product[i] = arr[i] * prefix_product[i-1]\n\n    # Calculate the suffix product array\n    for i in range(n-2, -1, -1):\n        suffix_product[i] = arr[i] * suffix_product[i+1]\n\n    # Calculate the maximum product\n    for i in range(1, n-1):\n        max_product = max(max_product, prefix_product[i] * suffix_product[i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    if len(arr) <= 1:\n        return 0\n\n    n = len(arr)\n    # Create a 2D table to store the maximum product for each prefix and suffix\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and column with the first element of the array\n    for i in range(1, n):\n        dp[0][i] = arr[i]\n        dp[i][0] = arr[i]\n\n    # Fill the rest of the table\n    for i in range(1, n):\n        for j in range(1, n):\n            if arr[i] > arr[j]:\n                dp[i][j] = arr[i] * dp[i-1][j]\n            else:\n                dp[i][j] = arr[j] * dp[i][j-1]\n\n    return dp[n-1][n-1]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [1] * n\n    max_product = float('-inf')\n    max_ending_here = 1\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n                max_ending_here = max(max_ending_here, dp[i])\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    # Find the length of the array\n    n = len(arr)\n    \n    # Create an array to store the maximum product for each subsequence\n    max_product_subseq = [0] * n\n    \n    # Initialize the maximum product for the entire array\n    max_product_entire = 0\n    \n    # Initialize the maximum product for the current subsequence\n    max_product_curr = 1\n    \n    # Iterate over all subsequences of the array\n    for i in range(n):\n        \n        # Compute the maximum product for the current subsequence\n        max_product_curr = max(arr[i], arr[i] * max_product_subseq[i], arr[i] * max_product_subseq[i] * max_product_subseq[i+1])\n        \n        # Update the maximum product for the entire array\n        max_product_entire = max(max_product_entire, max_product_curr)\n        \n        # Update the maximum product for the current subsequence\n        max_product_subseq[i] = max_product_curr\n        \n    # Return the maximum product for the entire array\n    return max_product_entire"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    # Initialize variables\n    max_val = arr[0]\n    curr_val = arr[0]\n    max_product = curr_val\n\n    # Find the maximum subsequence ending at index i\n    for i in range(1, n):\n        if curr_val > arr[i]:\n            curr_val *= arr[i]\n        else:\n            curr_val = arr[i]\n        max_product = max(max_product, curr_val)\n        if curr_val > max_val:\n            max_val = curr_val\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [1]*n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            dp[i] = dp[i-1] * arr[i]\n        else:\n            dp[i] = max(dp[i-1], dp[i-1]*arr[i])\n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * n\n    max_prod = float('-inf')\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            dp[i] = dp[i - 1] * arr[i]\n        else:\n            dp[i] = dp[i - 1] * arr[i] * arr[i]\n        max_prod = max(max_prod, dp[i])\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n    \n    max_product = float('-inf')\n    curr_product = 1\n    prev_product = 1\n    \n    for num in arr:\n        if num > 0:\n            curr_product *= num\n            prev_product = curr_product\n            max_product = max(max_product, curr_product)\n        else:\n            curr_product = prev_product\n            prev_product = max(prev_product, curr_product)\n    \n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i:i+2] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"The tuple must have at least two elements\")\n    else:\n        return sum(test_tup[:-1]) + test_tup[-1]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Create a list to store the pairwise sums\n    pairwise_sum = []\n\n    # Loop through each element in the tuple\n    for i in range(len(test_tup) - 1):\n        # Add the two neighboring elements and store the result in the pairwise_sum list\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n\n    # Return the list of pairwise sums\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n\n    if len(test_tup) < 2:\n        return None\n\n    # initialize the result variable\n    result = test_tup[0]\n\n    # loop through the rest of the tuple and add the next element to the result\n    for i in range(1, len(test_tup)):\n        result += test_tup[i]\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n % 2 == 0:\n        return sum(test_tup[i:i+2] for i in range(n-1))\n    else:\n        return sum(test_tup[i:i+2] for i in range(n-2, n))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    result = []\n    for i in range(n-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    sum_pairs = []\n    for i in range(len(test_tup)-1):\n        sum_pairs.append(test_tup[i] + test_tup[i+1])\n    \n    return sum_pairs"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Check if the tuple is empty or has less than 2 elements\n    if len(test_tup) < 2:\n        return None\n\n    # Initialize variables for the first and second elements of the tuple\n    first = test_tup[0]\n    second = test_tup[1]\n\n    # Loop through the rest of the tuple and add the pairwise sum of each adjacent element\n    for i in range(2, len(test_tup)):\n        third = test_tup[i]\n        sum_of_pair = first + second + third\n        first = second\n        second = third\n\n    # Return the final result\n    return sum_of_pair"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array `arr` and an integer `n` as input and returns the remainder of the product of the array multiplication modulo n.\n    \"\"\"\n    # calculate the product of the array\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    # return the remainder of the product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array `arr` and a number `n` as input and returns the product of the array multiplication modulo n.\n\n    Example:\n    arr = [1, 2, 3]\n    n = 7\n    Output: 14\n\n    '''\n\n    # Initialize the result variable to 1\n    result = 1\n\n    # Iterate through each element in the array\n    for num in arr:\n        # Calculate the product of the current element and the result modulo n\n        result = (result * num) % n\n\n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array and a number n and returns the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # check if the list is empty\n    if len(l) == 0:\n        return \"The list is empty.\"\n\n    # initialize the variable for checking consecutive numbers\n    consecutive = True\n\n    # iterate through the list\n    for i in range(len(l) - 1):\n        # check if the current number is greater than the next number\n        if l[i] > l[i+1]:\n            # if it is, set the consecutive variable to False\n            consecutive = False\n            # break out of the loop\n            break\n    \n    # return the result of the consecutive variable\n    return \"The list contains consecutive numbers: \" + str(consecutive)"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l) - 1): \n        if l[i] + 1 == l[i + 1]: \n            print(\"The list contains consecutive numbers\")\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) <= 1:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    This function checks whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create sets of elements from each list to avoid duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # create a new list with the intersection\n    return list(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuple lists as input and returns the intersection of their elements.\n    If there are no common elements in the two lists, it returns an empty list.\n    '''\n\n    # Sort both lists in ascending order to ensure that common elements are found in both lists\n    test_list1.sort()\n    test_list2.sort()\n\n    # Initialize an empty list to store the intersection of the two lists\n    intersection = []\n\n    # Loop through each element in the first list\n    for element in test_list1:\n        # If the element is present in the second list, add it to the intersection list\n        if element in test_list2:\n            intersection.append(element)\n\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                result.append(tuple1)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Sorting both lists\n    test_list1.sort()\n    test_list2.sort()\n\n    # Initializing an empty list to store the result\n    result_list = []\n\n    # Looping through both lists\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        # Checking if the elements at the current indices are equal\n        if test_list1[i] == test_list2[j]:\n            # Appending the element to the result list\n            result_list.append(test_list1[i])\n            # Incrementing both indices\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            # Incrementing the index of the first list\n            i += 1\n        else:\n            # Incrementing the index of the second list\n            j += 1\n\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create an empty set to store the unique elements of the two input lists\n    unique_elements = set()\n    \n    # Loop through the two input lists\n    for element in test_list1 + test_list2:\n        # If the element is not already in the set, add it\n        if element not in unique_elements:\n            unique_elements.add(element)\n    \n    # Convert the set back to a tuple and return it\n    return tuple(unique_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty set to store the intersection\n    intersection_set = set()\n    # Loop through each tuple in the first list\n    for tuple1 in test_list1:\n        # Loop through each tuple in the second list\n        for tuple2 in test_list2:\n            # Check if each tuple in the first list is present in the second list\n            if tuple1 in tuple2:\n                # Add the tuple to the intersection set\n                intersection_set.add(tuple1)\n    # Return the intersection set as a list\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists of tuples as inputs and returns the intersection of tuples irrespective of their order.\n    \"\"\"\n    # Sort the lists in descending order based on the length of the tuples\n    test_list1.sort(key=len, reverse=True)\n    test_list2.sort(key=len, reverse=True)\n\n    # Initialize an empty set to store the intersection of tuples\n    intersection = set()\n\n    # Iterate through the sorted lists and add the intersection of tuples to the set\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                intersection.add(tuple1)\n\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    if not isinstance(test_list1, list) or not isinstance(test_list2, list):\n        raise ValueError(\"Both the input lists must be list type.\")\n    if not all(isinstance(i, tuple) for i in test_list1) or not all(isinstance(i, tuple) for i in test_list2):\n        raise ValueError(\"Both the input lists must contain tuples.\")\n    if not test_list1 or not test_list2:\n        return []\n    if not all(all(isinstance(x, type(test_list1[0][0])) for x in i) for i in test_list1) or not all(all(isinstance(x, type(test_list2[0][0])) for x in i) for i in test_list2):\n        raise ValueError(\"All the elements of the input lists must have the same type.\")\n    result = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                result.append(i)\n                break\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Sort the lists\n    test_list1.sort()\n    test_list2.sort()\n\n    # Initialize an empty set to store the common elements\n    common_set = set()\n\n    # Traverse the sorted lists and add the common elements to the set\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            common_set.add(test_list1[i])\n            i += 1\n            j += 1\n        elif test_list1[i] < test_list2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character `ch` in a string `str1` with a new character `newch`.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through the string and replace each occurrence of ch with newch\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= ch:\n            result += str1[i]\n        else:\n            result += newch\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Use a loop to iterate through each character in the string\n    for i in range(len(str1)):\n        # If the character is equal to the specified character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    # Return the modified string\n    return str1"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = counter.most_common()\n    sorted_dict = {}\n\n    for key, value in sorted_counter:\n        sorted_dict[key] = value\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Sort the dictionary by values in descending order\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n\n    # Return the sorted dictionary\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables to store the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n\n    # Iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return \"The array is empty.\"\n\n    # Find the largest and smallest values in the array\n    max_val = min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n\n    # Calculate the sum of the largest and smallest values\n    sum_vals = max_val + min_val\n\n    return sum_vals"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # find the sum of the largest and smallest values\n    largest = nums[0]\n    smallest = nums[1]\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest numbers in the array\n    largest = max(nums)\n    smallest = min(nums)\n\n    # Calculate the sum of the largest and smallest numbers\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # Calculate the sum of the maximum and minimum values\n    result = max_val + min_val\n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the sum of the two values\n    sum_of_two = max_val + min_val\n    \n    # Return the sum of the two values\n    return sum_of_two"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # find the sum of the largest and smallest values\n    sum_vals = max_val + min_val\n    \n    return sum_vals"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n\n    # Find the sum of the largest and smallest values\n    largest_sum = nums[0] + nums[1]\n    smallest_sum = nums[-1] + nums[-2]\n\n    # Return the sum of the two values\n    return largest_sum + smallest_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables for largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    # loop through the array and update largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    # return the sum of largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n\n    # convert the string to lower case\n    string = string.lower()\n\n    # check if the string is already in lower case\n    if string == string.lower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile(r'([a-z])([A-Z])')\n    return pattern.sub(r'\\1\\2', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Split the string into a list of words\n    words = str1.split()\n    \n    # Use regular expressions to match and remove any lowercase substrings\n    pattern = re.compile(r'\\b[a-z]\\w*\\b', re.IGNORECASE)\n    words = [word for word in words if not pattern.search(word)]\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regex to find lowercase substrings\n    pattern = r'(?i)\\b[a-z]\\w+\\b'\n    # Use re.sub() function to replace lowercase substrings with empty string\n    str1 = re.sub(pattern, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n    # Use the re.sub() function to replace all occurrences of lowercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define regular expression pattern for lowercase substrings\n    pattern = r'[a-z]+'\n    # Use re.sub() method to replace lowercase substrings with empty string\n    result = re.sub(pattern, '', str1)\n    # Return the modified string\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes any lowercase substrings found in the string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all occurrences of lowercase substrings in the string\n    matches = pattern.findall(string)\n    # Iterate over the matches and remove them from the string\n    for match in matches:\n        string = string.replace(match, '')\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()  # convert to lowercase\n    pattern = re.compile(r'(?<=\\w)[a-z]+(?=\\w)')  # find all lowercase substrings\n    result = pattern.sub('', str1)  # remove the substrings\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Remove all lowercase substrings from a given string.\n    '''\n    lower_case_pattern = re.compile(r'[a-z]+')\n    return lower_case_pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and returns a new string with all lowercase substrings removed.\n    '''\n    # Define a regular expression pattern for matching lowercase substrings\n    lowercase_pattern = r'[a-z]+'\n    # Use re.findall() to find all matches of the pattern in the string\n    matches = re.findall(lowercase_pattern, string)\n    # Loop through the matches and remove each one from the string\n    for match in matches:\n        string = string.replace(match, '')\n    # Return the modified string\n    return string"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return first_Digit(n // 10) + n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string and return the first character\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0:\n        n = -n #make the number positive if it's negative\n    digit = n % 10 #get the last digit of the number\n    return digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns its first digit.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Get the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer\n    first_digit = int(first_char)\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n = n // 10\n    return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as an input and returns the first digit of that number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the input number to a string\n    n = str(n)\n    \n    # Find the first digit of the number\n    first_digit = n[0]\n    \n    # Return the first digit of the number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = int(str(n)[0])\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    \"\"\"\n    This function takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list containing only the odd integers in the original list.\n    '''\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    odd_list = [] # creating an empty list to store odd numbers\n\n    for num in list: # iterating over the list\n        if num % 2!= 0: # checking if the number is odd\n            odd_list.append(num) # adding odd numbers to the new list\n\n    return odd_list # returning the list of odd numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # initialize an empty list for odd numbers\n    odd_list = []\n    # loop through each number in the list\n    for num in list:\n        # check if the number is odd\n        if num % 2!= 0:\n            # if the number is odd, add it to the odd_list\n            odd_list.append(num)\n    # return the odd_list\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_numbers += i\n    \n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n):\n        '''\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        '''\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**3\n        return sum\n    \n    sum_of_cubes_n = sum_of_cubes(n)\n    sum_n = sum(range(1, n+1))\n    \n    return sum_of_cubes_n - sum_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes_sum = sum(i**3 for i in range(1, n+1))\n    # Calculate the sum of the first n natural numbers\n    sum_sum = sum(range(1, n+1))\n    # Calculate the difference between the two sums\n    difference = cubes_sum - sum_sum\n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([num ** 3 for num in range(1, n + 1)])\n    sum_of_natural_numbers = sum(range(1, n + 1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # calculate the sum of first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # calculate the difference between the two sums\n    difference = sum_of_cubes - sum_of_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of cubes of first n natural numbers\n    sum_of_cubes = sum([num**3 for num in range(1, n+1)])\n    \n    # Find the sum of first n natural numbers\n    sum_of_numbers = sum([num for num in range(1, n+1)])\n    \n    # Calculate the difference between the two sums\n    difference = sum_of_cubes - sum_of_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor & 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    # Create a list to store the xor values of pairs\n    xor_values = []\n    \n    # Calculate the xor values of each pair\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_values.append(A[i] ^ A[j])\n    \n    # Count the number of odd xor values in the list\n    count = sum(1 for x in xor_values if x % 2 == 1)\n    \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    xor = 0\n    count = 0\n    for i in range(N):\n        xor = xor ^ A[i]\n        count += ((xor & 1) == 1)\n        xor = xor >> 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_set = set()\n    for i in range(N):\n        xor_set.add(A[i] ^ A[i+1])\n    odd_count = 0\n    for i in range(N-1):\n        for j in range(i+2, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value in xor_set:\n                odd_count += 1\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    # Count the number of even pairs\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]^A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    count = 0\n    for i in range(N) : \n        xor_sum = xor_sum ^ A[i] \n    for i in range(N) : \n        for j in range(i+1,N) : \n            if (A[i] ^ A[j]) % 2!= 0 : \n                count = count + 1 \n    return count "
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor & 1 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    lowercase_string = string.lower()\n    \n    # Loop through each character in the string\n    for i in range(len(lowercase_string)):\n        # If the character is uppercase, convert it to lowercase\n        if lowercase_string[i].isupper():\n            lowercase_string = lowercase_string[:i] + lowercase_string[i].lower() + lowercase_string[i+1:]\n        # If the character is lowercase, convert it to uppercase\n        elif lowercase_string[i].islower():\n            lowercase_string = lowercase_string[:i] + lowercase_string[i].upper() + lowercase_string[i+1:]\n    \n    # Convert the lowercase string back to uppercase\n    uppercase_string = lowercase_string.upper()\n    \n    # Return the uppercase string\n    return uppercase_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n    # Initialize an empty string to store the modified characters\n    modified_string = ''\n    # Loop through each character in the string\n    for char in string:\n        # If the character is lowercase, convert it to uppercase\n        if char.islower():\n            modified_string += char.upper()\n        # If the character is uppercase, convert it to lowercase\n        else:\n            modified_string += char.lower()\n    # Return the modified string\n    return modified_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # convert string to list of characters\n    chars = list(string)\n    # iterate over each character in the list\n    for i in range(len(chars)):\n        # toggle the case of the character\n        if chars[i].islower():\n            chars[i] = chars[i].upper()\n        else:\n            chars[i] = chars[i].lower()\n    # convert the list back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    num1 = [int(d) for d in str(n1)]\n    num2 = [int(d) for d in str(n2)]\n    # Calculate the per-digit difference and sum them up\n    return sum([abs(a-b) for a,b in zip(num1,num2)])"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    # Initialize the result variable\n    result = 0\n    \n    # Loop through each digit in the two numbers\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        # Convert the digit to integers\n        num1 = int(str(n1)[i])\n        num2 = int(str(n2)[i])\n        \n        # Calculate the per-digit difference\n        diff = abs(num1 - num2)\n        \n        # Add the difference to the result\n        result += diff\n        \n    # Return the result\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    # calculate the number of digits in each number\n    n1_digits = len(str(n1))\n    n2_digits = len(str(n2))\n    \n    # find the maximum number of digits\n    max_digits = max(n1_digits, n2_digits)\n    \n    # pad the numbers with leading zeros to make them of equal length\n    n1_padded = str(n1).zfill(max_digits)\n    n2_padded = str(n2).zfill(max_digits)\n    \n    # calculate the difference between the numbers\n    difference = int(n1_padded) - int(n2_padded)\n    \n    # calculate the sum of per-digit differences\n    sum_diff = 0\n    for i in range(max_digits):\n        diff = abs(difference // 10**(max_digits - i - 1))\n        sum_diff += diff * 10**(max_digits - i - 1)\n        difference %= 10**(max_digits - i - 1)\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize a variable to store the sum of the per-digit difference\n    sum_diff = 0\n\n    # Iterate through each digit of n1 and n2\n    for i in range(len(str(n1))):\n        # Extract the i-th digit of each number\n        digit1 = int(str(n1)[i])\n        digit2 = int(str(n2)[i])\n\n        # Calculate the per-digit difference and add it to the sum\n        diff = abs(digit1 - digit2)\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    while n1!= n2:\n        n1 = int(str(n1)[1:])\n        n2 = int(str(n2)[1:])\n        diff += abs(n1 - n2)\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # check if the two numbers are of the same length\n    if len(str(n1))!= len(str(n2)):\n        raise ValueError(\"The two numbers must have the same length\")\n\n    # calculate the sum of per-digit difference\n    sum_diff = 0\n    for i in range(len(str(n1))):\n        diff = abs(int(str(n1)[i]) - int(str(n2)[i]))\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        diff += abs(n1%10 - n2%10)\n        n1 //= 10\n        n2 //= 10\n\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Calculate the difference between the numbers\n    diff = n1 - n2\n\n    # Initialize a variable to store the sum of per-digit differences\n    sum_diff = 0\n\n    # Iterate over each digit of the difference\n    for digit in str(abs(diff)):\n        # Convert the digit to an integer and calculate the per-digit difference\n        per_diff = int(digit) - abs(diff) // int(digit)\n\n        # Add the per-digit difference to the sum of differences\n        sum_diff += per_diff\n\n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert the numbers to lists of digits\n    num1 = list(str(n1))\n    num2 = list(str(n2))\n\n    # find the length of the longer number\n    length = max(len(num1), len(num2))\n\n    # initialize variables\n    sum_diff = 0\n\n    # iterate over the digits of the longer number\n    for i in range(length):\n        # find the difference between the i-th digits of the two numbers\n        diff = abs(int(num1[i]) - int(num2[i]))\n\n        # add the difference to the sum\n        sum_diff += diff\n\n    # return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Convert the two integers to strings and then iterate through each character in each string\n    for digit1, digit2 in zip(str(n1), str(n2)):\n        # Calculate the per-digit difference between the two digits\n        diff = int(digit1) - int(digit2)\n        \n        # Add the per-digit difference to the sum\n        sum += diff\n        \n    return sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 0:\n        return 0\n\n    max_sum = float('-inf')\n    current_sum = 0\n    left = 0\n\n    while left < len(a):\n        current_sum += a[left]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if left >= size - 1:\n            break\n        left += 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if i >= size - 1:\n            continue\n        max_ending_here -= a[i + 1]\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        raise ValueError(\"The size is greater than the length of the input list\")\n    if size == 1:\n        return a[0]\n    if size == 2:\n        return max(a[0], a[1])\n    max_so_far = max_ending_here = a[0]\n    for i in range(1, len(a)):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        if max_ending_here < 0:\n            max_ending_here = a[i]\n        if i >= size:\n            max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    current_start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_start = i - size + 1\n\n        elif current_sum < 0:\n            current_sum = 0\n\n    return a[current_start:current_start+size]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize the maximum sum subarray and its ending index\n    max_sum = float('-inf')\n    max_sum_end = 0\n\n    # Initialize the current sum subarray and its ending index\n    current_sum = 0\n    current_sum_end = 0\n\n    # Iterate through the list and compute the sum of the subarrays\n    for i in range(len(a) - size + 1):\n        current_sum += a[i + size - 1]\n        current_sum_end = i\n\n        # Update the maximum sum subarray if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_end = current_sum_end\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i > 0 and current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - size//2:\n            current_sum -= a[i-size//2]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    elif size == 2:\n        return max(a[0], a[1])\n    else:\n        max_sum = max(a[0], max_sub_array_sum(a[1:], size-1))\n        min_sum = min(a[-1], min_sub_array_sum(a[:-1], size-1))\n        return max_sum + min_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return max(a)\n    else:\n        max_so_far = max_sub_array_sum(a, size - 1)\n        current_sum = max(a[size - 1] + max_so_far, max_so_far)\n        return current_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        return None\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    max_subarray = []\n\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        max_subarray.append(a[i])\n\n    return max_subarray"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of the two tuples\n    union_set = set(test_tup1 + test_tup2)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # Return the sorted list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union = set(test_tup1) | set(test_tup2)\n    sorted_union = sorted(union)\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # get the union of the two tuples using set\n    union_set = set(test_tup1) | set(test_tup2)\n    # convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    # print the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Merge the two tuples using set union\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set to a sorted list\n    union_list = sorted(list(union_set))\n\n    # Print the sorted union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # initialize an empty set to store the union of the two input tuples\n    union = set()\n    \n    # iterate over each element in both input tuples\n    for element in test_tup1:\n        # add the element to the set if it doesn't already exist\n        if element not in test_tup2 and element not in union:\n            union.add(element)\n    \n    # iterate over each element in the second input tuple\n    for element in test_tup2:\n        # add the element to the set if it doesn't already exist\n        if element not in test_tup1 and element not in union:\n            union.add(element)\n    \n    # convert the set back to a list and sort it in ascending order\n    sorted_union = sorted(list(union))\n    \n    # output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Merge two sorted tuples using the built-in set() method\n    merged_tuple = sorted(set(test_tup1 + test_tup2))\n    # Print the merged tuple\n    print(merged_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union_set = sorted(union_set)\n    return sorted_union_set"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    merged_tup = test_tup1 + test_tup2\n    \n    # Sort the merged tuple in ascending order\n    sorted_tup = sorted(merged_tup)\n    \n    # Iterate through the sorted tuple and print the elements\n    for item in sorted_tup:\n        print(item)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1 + test_tup2)\n    sorted_union = sorted(union_set)\n    return sorted_union"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # initialize variables to keep track of the length of the longest sublists\n    max_length = 0\n    current_length = 0\n    \n    # loop through the list and add each element to the current_length\n    for element in lst:\n        current_length += 1\n        \n        # if the current_length is greater than max_length, update max_length\n        if current_length > max_length:\n            max_length = current_length\n        \n        # if the current_length is equal to max_length, check if the next element is equal to the current_length\n        elif current_length == max_length:\n            if lst[current_length] == current_length:\n                current_length += 1\n    \n    # return the maximum length of the longest sublists\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize the variables\n    max_length = 0\n    current_length = 0\n    # loop through the list\n    for i in range(len(lst)):\n        # if the element is not the same as the last element, add 1 to the length\n        if lst[i]!= lst[i-1]:\n            current_length += 1\n        else:\n            # if the length is greater than the current maximum length, update the max_length\n            if current_length > max_length:\n                max_length = current_length\n            # reset the current_length to 0\n            current_length = 0\n    # if the last element is not the same as the first element, add 1 to the length\n    if lst[-1]!= lst[0]:\n        current_length += 1\n    # if the length is greater than the current maximum length, update the max_length\n    if current_length > max_length:\n        max_length = current_length\n    # return the max_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n            \n    if current_length > max_length:\n        max_length = current_length\n        \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes in a list and returns the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            current_length = 1\n        else:\n            current_length += 1\n\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize the maximum length to 0\n    max_length = 0\n\n    # Iterate over all sublists\n    for sublist in lst:\n\n        # Initialize the current length to 0\n        current_length = 0\n\n        # Iterate over all elements in the sublist\n        for element in sublist:\n\n            # Increment the current length\n            current_length += 1\n\n            # Update the maximum length if necessary\n            if current_length > max_length:\n                max_length = current_length\n\n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as input and returns the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        sub_lst = lst[i:i+10] # take the next 10 elements of the list starting at index i\n        if len(sub_lst) > max_len: # update the max length if the current sublist has a longer length\n            max_len = len(sub_lst)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            max_length = max(max_length, len(lst[i:j+1]))  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            current_length += 1\n        else:\n            current_length -= 1\n\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # create an empty dictionary to store the lengths of sublists\n    length_dict = {}\n\n    # loop through each item in the list\n    for i in range(len(lst)):\n        # get the current item\n        item = lst[i]\n\n        # if the item is not in the dictionary, set its length to 1\n        if item not in length_dict:\n            length_dict[item] = 1\n        else:\n            # if the item is already in the dictionary, increment its length\n            length_dict[item] += 1\n\n    # find the maximum length of any sublist\n    max_length = max(length_dict.values())\n\n    # return the maximum length\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'  # regular expression to match quotation marks and capture contents\n    matches = re.findall(pattern, text)  # find all matches of pattern in text\n    values = []\n    for match in matches:\n        values.append(match.strip('\"'))  # remove leading and trailing quotes and append to values list\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \n    Args:\n        text (str): The string to extract values from.\n        \n    Returns:\n        list: A list of extracted values.\n    \"\"\"\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"' # pattern to match quotes\n    values = re.findall(pattern, text) # find all values between quotes using regex\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(\".*?\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and extracts all values between quotation marks in the string.\n    It returns a list of all extracted values.\n    '''\n    pattern = r'(\".*?\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    # Initializing variables to store the count of pairs\n    count = 0\n    # Sorting the list\n    arr.sort()\n    # Looping through the sorted list\n    for i in range(len(arr)):\n        # Finding the leftmost element greater than the current element\n        left = i + 1\n        while left < len(arr) and arr[i] == arr[left]:\n            left += 1\n        # Finding the rightmost element less than the current element\n        right = len(arr) - 1\n        while left < right:\n            if arr[left] == arr[i] and arr[right] == arr[i]:\n                count += 1\n                left += 1\n                right -= 1\n            elif arr[left] == arr[i]:\n                left += 1\n            else:\n                right -= 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # create an empty dictionary to store the count of pairs\n    pair_count = {}\n    \n    # loop through the list of integers\n    for i in range(n):\n        # loop through the remaining integers\n        for j in range(i+1, n):\n            # add a pair to the dictionary if the elements are unequal\n            if arr[i]!= arr[j]:\n                pair_count[(arr[i], arr[j])] = pair_count.get((arr[i], arr[j]), 0) + 1\n    \n    # return the count of pairs\n    return sum(pair_count.values())"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # convert the string to a list of characters\n    chars = list(word)\n    # return the list of characters\n    return chars"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    str_n = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Loop through each character in the string and add it to the sum\n    for char in str_n:\n        sum_of_digits += int(char)\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # check if n is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        return \"Invalid input. Please provide a non-negative integer.\"\n    else:\n        # convert n to a string\n        s = str(n)\n        # loop through each digit in s and add it to a variable sum\n        sum = 0\n        for digit in s:\n            sum += int(digit)\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then iterate over its digits and add them to the result\n    result = 0\n    while n > 0:\n        result += n % 10\n        n //= 10\n    return result"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 'Error: Please enter a non-negative integer.'\n    else:\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string\n    num_str = str(n)\n    # initialize the sum variable\n    sum_value = 0\n    # iterate over each character in the string\n    for char in num_str:\n        # add the integer value of the character to the sum variable\n        sum_value += int(char)\n    # return the sum value\n    return sum_value"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] >= list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as an input and returns True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is already sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    # If the list is sorted, return True\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if it is sorted in ascending order,\n    and False otherwise.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is sorted or not\n    is_sorted = True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            is_sorted = False\n            break\n    return is_sorted"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n\n    if n == 0 or n == 1:\n        return True\n\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = [{} for _ in range(length)]\n    return empty_dicts"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # create a list to store the sorted sublists\n    sorted_list = []\n    # loop through each sublist in the original list\n    for sublist in list1:\n        # sort the sublist using the sorted() function\n        sorted_sublist = sorted(sublist)\n        # add the sorted sublist to the sorted list\n        sorted_list.append(sorted_sublist)\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list\n    for i in range(len(list1)):\n        # Convert the sublist to a set so that duplicates can be removed\n        sublist = set(list1[i])\n        # Sort the set in ascending order and convert it back to a list\n        sublist = sorted(list(sublist))\n        # Re-add the sorted sublist to the original list\n        list1[i] = list(sublist)\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty list to store the unique numbers\n    unique_nums = []\n\n    # Loop through each list in the input list\n    for i in range(len(nums)):\n        # Loop through each number in the current list\n        for j in range(len(nums[i])):\n            # Check if the current number is not already in the unique_nums list\n            if nums[i][j] not in unique_nums:\n                # Add the current number to the unique_nums list\n                unique_nums.append(nums[i][j])\n\n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list with only the unique numbers.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set(nums)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a set to store unique numbers\n    unique_set = set()\n\n    # Loop through the input lists and add unique numbers to the set\n    for num_list in nums:\n        for num in num_list:\n            unique_set.add(num)\n\n    # Convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n            if len(seen) == 2:\n                break\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(*args):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for arg in args:\n        result.extend(list(set(arg)))\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    # Convert the list to a set to get only unique elements\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(lst):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The product of the unique numbers in the list.\n    \"\"\"\n    # Create a set to store the unique numbers\n    unique = set(lst)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))  # remove duplicates from list\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data)) # Converting the list to set to remove duplicates\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data)) # convert the list to a set and get the unique elements\n    product = 1 # initialize the product to 1\n    \n    for num in unique_list: # iterate over the unique elements\n        product *= num # multiply the current element with the product\n    \n    return product # return the final product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set to store unique numbers\n    unique_set = set()\n    # Loop through the list and add each number to the set\n    for num in list_data:\n        unique_set.add(num)\n    # Convert the set back to a list and calculate the product\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    \n    for number in unique_numbers:\n        product *= number\n        \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to find the surface area of a cylinder\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*r + 2*3.14*r*h + 2*3.14*h*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    surface_area = (2*pi*r**2) + (pi*r*h)\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * (3.14 * r**2)\n    volume = (3.14 * r**2 * h)\n    return area, volume"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surface_area = math.pi * r**2 * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n\n    surface_area = 2 * pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # surface area of a cylinder\n    area = 2*pi*(r**2 + h**2)\n    # return surface area\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * pi * r * r + 2 * pi * r * h + 2 * pi * h * h\n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    i = 0\n    for j in range(len(B)):\n        if A[j] == B[j]:\n            i += 1\n        if i == len(B):\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n\n    # Traverse through the list A and check if all elements are present in B\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    This function takes two lists A and B and checks whether the first list is a sublist of the second list or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    \n    return j == len(B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    if len(A) > len(B):\n        A = A[::-1]\n    i = 0\n    j = 0\n    while j < len(B):\n        if B[j] == A[i]:\n            i += 1\n            j += 1\n        else:\n            i = 0\n            j += 1\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    i,j = 0,0\n    while i < len(A):\n        if A[i] == B[j]:\n            j += 1\n            if j == len(B):\n                return True\n        i += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A in B:\n        return True\n    elif B in A:\n        return True\n    else:\n        for i in range(len(B)):\n            if B[i] in A:\n                A = A[A.index(B[i]):]\n                if A == B:\n                    return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B):\n        A,B = B,A\n    n = len(A)\n    m = len(B)\n    for i in range(n-m+1):\n        if A[i:i+m] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    elif len(B) == len(A):\n        if B == A:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = 0\n    flag = False\n    while(j < len(B)):\n        if(A[i] == B[j]):\n            flag = True\n            i += 1\n        else:\n            j += 1\n            flag = False\n        if(i == len(A)):\n            return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    str_n = str(n)\n    \n    # Calculate the factorial of the given number\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    # Extract the last digit from the factorial of the given number\n    last_digit = int(str_n[-1])\n    \n    # Return the last digit in the factorial of the given number\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to a string\n    str_n = str(n)\n    # get the last character of the string\n    last_char = str_n[-1]\n    # convert the last character to an integer\n    last_digit = int(last_char)\n    # find the factorial of the number without the last digit\n    factorial = 1\n    for i in range(1, int(last_digit)+1):\n        factorial *= i\n    # return the factorial with the last digit\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the given number to a string\n    num = str(n)\n    # Initialize the last digit as 0\n    last_digit = 0\n    # Iterate through each digit of the string\n    for digit in num:\n        # Check if the digit is greater than the last digit\n        if int(digit) > last_digit:\n            # If it is, update the last digit\n            last_digit = int(digit)\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    # Find the last digit of the factorial using integer division\n    last_digit = factorial // 10\n    # Return the result\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result *= i\n    return result % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    # loop through each digit of the factorial number\n    for i in str(n!):\n        # add the integer value of the digit to the last_digit variable\n        last_digit += int(i)\n    # return the last_digit variable\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    # Initializing the variable to store the last digit of factorial\n    last_digit = 0\n    # Iterating through each digit of the factorial\n    while n > 0:\n        # Extracting the last digit of the factorial\n        last_digit = n % 10\n        # Multiplying the factorial by 10 to remove the last digit\n        n = n // 10\n    # Returning the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    while n>0: \n        n=n/10 #reduce the number by dividing by 10 to get the last digit\n    return n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('All lists must have the same length.')\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create an empty list to store the interleaved list\n    result = []\n    # Loop through the lists and add each element to the result list\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    # Return the interleaved list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists are of the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    \n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Interleave the three lists\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    # loop through the lists and add the elements to the interleaved list in order\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all the lists are of the same length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All the lists must be of the same length.\")\n\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Iterate through each list and append its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = j = k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n\n    while i < len(list1) and k < len(list3):\n        if list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    while j < len(list2) and k < len(list3):\n        if list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Convert all lists to tuples to make it easier to work with\n    list1 = tuple(list1)\n    list2 = tuple(list2)\n    list3 = tuple(list3)\n\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Loop through each tuple in the lists\n    for i in range(len(list1)):\n        # Append the first element from each tuple to the interleaved list\n        interleaved_list.append(list1[i])\n        # Append the second element from each tuple to the interleaved list\n        interleaved_list.append(list2[i])\n        # Append the third element from each tuple to the interleaved list\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    # iterate through both tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # if the elements are different, add them to the dissimilar list\n            dissimilar_elements.append(test_tup1[i])\n    # return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n\n    # Loop through the tuples\n    for i in range(len(test_tup1)):\n        # If the two elements are not equal, add them to the list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set(test_tup1).symmetric_difference(set(test_tup2))\n    return list(dissimilar_set)\n"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input, and returns a list of the elements that are present in test_tup1 but not test_tup2.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_set = set()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_set.add(test_tup1[i])\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # create a set of the first tuple to remove any duplicates\n    set_1 = set(test_tup1)\n\n    # create a set of the second tuple to remove any duplicates\n    set_2 = set(test_tup2)\n\n    # find the common elements in the two sets\n    common_elems = set_1.intersection(set_2)\n\n    # find the elements that are in set_1 but not in set_2\n    dissimilar_1 = set_1.difference(set_2)\n\n    # find the elements that are in set_2 but not in set_1\n    dissimilar_2 = set_2.difference(set_1)\n\n    # combine the dissimilar elements into a list and return it\n    return list(common_elems), list(dissimilar_1), list(dissimilar_2)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_list = []\n    even_list = []\n    for item in test_tuple:\n        if even_fnc(item):\n            even_list.append(item)\n        else:\n            odd_list.append(item)\n    return odd_list, even_list\n\ndef is_odd(num):\n    '''\n    A function to check if a number is odd or not.\n    '''\n    return num % 2!= 0\n\ndef main():\n    test_tuple = (1, (2, 3, 4, 5), (6, 7), 8, 9, 10, 11, 12, (13, 14, 15, 16), 17)\n    odd_list, even_list = even_ele(test_tuple, is_odd)\n    print(\"Uneven Odd Elements:\", odd_list)\n    print(\"Uneven Even Elements:\", even_list)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # create a list to store the even elements\n    even_list = []\n    # loop through the elements in the tuple\n    for elem in test_tuple: \n        # check if the element is even by calling the even_fnc function\n        if even_fnc(elem): \n            # if the element is even, add it to the even_list\n            even_list.append(elem)\n    # return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Filter the even elements from the tuple using the filter() function\n    even_elems = list(filter(even_fnc, test_tuple))\n    # Return the filtered tuple\n    return even_elems"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_list = []\n    for item in test_tuple:\n        if isinstance(item, (list, tuple)):\n            result_list.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result_list.append(item)\n        else:\n            pass\n    return result_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    if type(test_tuple) == tuple:\n        return tuple(filter(lambda x: even_fnc(x), test_tuple))\n    else:\n        raise TypeError(\"The input must be a tuple\")"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for sub_tuple in test_tuple:\n        if all(even_fnc(x) for x in sub_tuple):\n            new_tuple.append(sub_tuple)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # check if the given tuple is valid\n    if not isinstance(test_tuple, tuple):\n        raise ValueError('The given argument is not a valid tuple.')\n\n    # loop through the tuple to remove uneven elements\n    new_tuple = []\n    for item in test_tuple:\n        if not even_fnc(item):\n            new_tuple.append(item)\n\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # create a list to store even elements\n    even_list = []\n    # loop through each element in the nested tuple\n    for element in test_tuple:\n        # check if the element is even and add it to the even_list\n        if even_fnc(element):\n            even_list.append(element)\n    # return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for item in test_tuple:\n        if even_fnc(item):\n            new_list.append(item)\n    return new_list\n\ndef even(num):\n    return num % 2 == 0\n\ndef odd(num):\n    return num % 2!= 0\n\ntest_tuple = ((1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16))\n\nprint(even_ele(test_tuple, even))  # Output: [(1, 2, 3, 4), (9, 10, 11, 12)]\nprint(even_ele(test_tuple, odd))   # Output: [(5, 6, 7, 8), (13, 14, 15, 16)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # create an empty list to store even elements\n    even_list = []\n    # loop through each element in the tuple\n    for element in test_tuple:\n        # check if the element is even\n        if even_fnc(element):\n            # append the even element to the even_list\n            even_list.append(element)\n    # return the even_list\n    return even_list"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * b * s  # formula for square pyramid surface area\n    print(\"Surface Area of Square Pyramid:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Find the surface area of the base of the pyramid\n    base = b * s\n    \n    # Calculate the surface area of the top of the pyramid\n    top = b * s * (s - 1)\n    \n    # Add the surface areas of the base and top\n    total_area = base + top\n    \n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s*(s-1)*b**2)/(4*s-3)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    # calculate the surface area of the square pyramid using Heron's formula\n    area = (b * s) / 2  # Heron's formula for the area of a square\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the area of the square pyramid\n    area = (b * s) / 2\n    # Calculate the surface area of the pyramid\n    surface_area = area * 3\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = 2 * b * s + 6 * b * b + 2 * b * s + b * b + 3 * s * s + 6 * b * b + 2 * b * s + s * s \n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 6 * b * s + 6 * b * b\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the total area of the pyramid\n    area = b*s + b*b + s*s + s*b\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b * s\n    surface_area = (b * s) + (s * s) + (b * s)\n    return surface_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print(\"The dictionary is not empty\")\n    else:\n        print(\"The dictionary is empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a given dictionary is empty or not.\n\n    :param dict1: The dictionary to be checked.\n    :type dict1: dict\n    :returns: True if the dictionary is empty, False otherwise.\n    :rtype: bool\n    \"\"\"\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * 2**num / (factorial(num-1) * factorial(2))\n\ndef factorial(num):\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def binomial(n, k):\n        return math.factorial(n) // math.factorial(k) // math.factorial(n - k)\n\n    result = 0\n    for i in range(2, n+1):\n        result += binomial(n, i)\n\n    return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using recursion.\n\n    Parameters:\n    n (int): The index of the Catalan number to be returned.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    elif num == 0:\n        return 1\n    else:\n        return (2 * catalan_number(num - 1)) + (catalan_number(num - 2) * catalan_number(num - 1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number, which is the number of paths from the top left corner of a n x n grid to the bottom right corner.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, n+1):\n            result += catalan_number(i-1) * catalan_number(n-i)\n        return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number using the formula:\n\n        C(n) = binomial(2n, n) / (n!)\n\n    where binomial(n, k) is the number of combinations of n things taken k at a time.\n\n    Args:\n        n (int): The index of the Catalan number to calculate.\n\n    Returns:\n        float: The nth Catalan number.\n    \"\"\"\n    if n < 0:\n        return None\n\n    # Base case: n=0 and n=1 have C(0, 0) = 1 and C(0, 1) = 1\n    if n == 0 or n == 1:\n        return 1\n\n    # Calculate C(n, k) for all k >= 0, and store them in a list\n    catalan_list = [1]\n    for k in range(1, n + 1):\n        catalan_list.append(binomial(2 * n, k) / (factorial(k) * factorial(n - k)))\n\n    # Return the nth Catalan number from the list\n    return catalan_list[n]\n\n\ndef binomial(n, k):\n    \"\"\"\n    Calculate the binomial coefficient using the formula:\n\n        binomial(n, k) = n! / (k! * (n-k)!)\n\n    Args:\n        n (int): The number of things.\n        k (int): The number of selected things.\n\n    Returns:\n        float: The binomial coefficient.\n    \"\"\"\n    if n < 0 or k < 0 or k > n:\n        return None\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial using the formula:\n\n        factorial(n) = n * (n-1) *... * 2 * 1\n\n    Args:\n        n (int): The number to calculate the factorial of.\n\n    Returns:\n        float: The factorial of n.\n    \"\"\"\n    if n < 0:\n        return None\n    else:\n        return 1 if n == 0 else n * factorial(n - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return catalan_number(n-1) * (1 - 2*n + 1) // 2"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Return the nth Catalan number.\n    \"\"\"\n    # Initialize the Catalan numbers as a list of lists\n    catalan = [[1]]\n    for i in range(1, n+1):\n        # Create a new list for the next Catalan number\n        row = []\n        # Loop through all previous rows\n        for j in range(i):\n            # Add the product of the previous row and the previous column to the new row\n            row.append(catalan[j][i-j-1] + catalan[j][i-j])\n        # Add the new row to the list of rows\n        catalan.append(row)\n    # Return the last row of the Catalan number list\n    return catalan[-1][-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        factorial = 1\n        for i in range(1, num+1):\n            factorial *= i\n        return factorial / (2*factorial-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    n = int(n)\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    catalan = 1\n    for i in range(1, n+1):\n        catalan = catalan * ((2*i)+1) // (i)\n    return catalan"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-z]*ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the first adverb ending with ly and its positions in the string.\n    '''\n    pattern = r'\\b([a-zA-Z]+)ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Create a list of tuples, where each tuple contains the adverb and its starting position in the text\n    adverbs = [(m, text.find(m)) for m in matches]\n    # Sort the adverbs by their starting positions\n    adverbs.sort(key=lambda x: x[1])\n    # Return the list of adverbs\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    # define regex pattern to find adverbs ending with ly\n    pattern = r'\\bly\\b'\n    \n    # search for all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # return a list of tuples containing the adverb and its position in the text\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    adverbs = re.findall(pattern, text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the first adverb ending with ly and its position in the string.\n    '''\n    # define the regular expression pattern for adverbs ending with ly\n    pattern = r'\\b(?:st|nd|rd|th)\\b\\w+\\s+(?:ly|ed)'\n    # use the re.findall() method to find all non-overlapping matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    # initialize an empty list to store the adverb positions and their corresponding adverbs\n    adverb_positions = []\n    # loop through the matches and add each position and adverb pair to the adverb_positions list\n    for match in matches:\n        position = text.find(match)\n        adverb = match.strip()\n        # add the position and adverb pair to the list\n        adverb_positions.append((position, adverb))\n    # return the list of adverb positions and their corresponding adverbs\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    # Define a regular expression pattern to find adverbs ending with 'ly'\n    pattern = r'\\b([a-zA-Z]+)ly\\b'\n    \n    # Use re.findall() to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Print the matches and their positions\n    for i, match in enumerate(matches):\n        print(f'Match: {match[0]} - Position: {i}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(ly)\\b'\n\n    # Use re.findall() function to find all occurrences of adverbs in the text\n    matches = re.findall(pattern, text)\n\n    # Create a dictionary to store the adverbs and their positions in the text\n    adverbs = {}\n\n    # Loop through all matches and add them to the dictionary\n    for match in matches:\n        # Extract the first word after the adverb from the match\n        word = match[0]\n        # Extract the position of the first word after the adverb from the match\n        position = match.start()\n        # Add the adverb and its position to the dictionary\n        adverbs[word] = position\n\n    # Return the dictionary of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a heap to store the n highest prices\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    # Extract and return the n highest prices\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    :param items: list of items with prices\n    :param n: number of items to find\n    :return: list of n most expensive items\n    \"\"\"\n    min_heap = []\n\n    for item in items:\n        if not min_heap or item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n        elif len(min_heap) < n:\n            heapq.heappushpop(min_heap, item)\n        elif item[1] > min_heap[0][1]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n\n    return [item for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items, return a list of n most expensive items.\n    \"\"\"\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n    \n    # Iterate over the items and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        \n        # If the heap has reached its maximum capacity, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Return the n most expensive items in reverse order (from highest to lowest)\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items based on their price\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Extract the n most expensive items from the sorted list\n    most_expensive_items = [x for i, x in enumerate(sorted_items[:n])]\n\n    # Return the most expensive items\n    return most_expensive_items"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap,item)\n        # if the heap size exceeds n, remove the item with the highest price from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item < heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    # Return the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and a number n as input, where n is the number of items to find the most expensive items.\n    It returns a list of the most expensive n items.\n    '''\n    # Heapify the list of items based on their price in descending order\n    heapq.heapify(items)\n    # Extract the first n items from the heap and return them as a list\n    return [heapq.heappop(items) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap to store the n most expensive items\n    min_heap = []\n\n    # iterate through the items and add them to the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        # if the heap size exceeds n, remove the least expensive item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # return the items in the min heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n\n    Parameters:\n    items: list of tuples (price, item_name)\n    n: int, the number of items to find\n\n    Returns:\n    a list of the n most expensive items\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    # Use a dictionary to store the price of each item\n    prices = {}\n    # Loop through each item in the dataset\n    for price, item_name in items:\n        # Update the price of the item in the dictionary\n        prices[item_name] = price\n        # If the heap is full, remove the item with the lowest price from the heap\n        if len(heap) == n:\n            heapq.heappop(heap)\n        # Add the item to the heap with its current price\n        heapq.heappush(heap, (price, item_name))\n    # Return the n most expensive items in the order they were added to the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= n:\n        print(\"Error: List does not have enough elements to split at the nth eelment.\")\n        return None\n    \n    first_part = l[:n]\n    last_part = l[n:]\n    return last_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # check if the input is valid\n    if not isinstance(l, list):\n        print(\"Input must be a list!\")\n        return\n    \n    # check if the n value is valid\n    if not isinstance(n, int) or n < 0 or n > len(l):\n        print(\"n must be a positive integer less than the length of the list!\")\n        return\n    \n    # split the list at the nth element and add the first part to the end\n    part1 = l[:n]\n    part2 = l[n:]\n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) % n!= 0:\n        print(\"Error: List length must be a multiple of n.\")\n        return\n    else:\n        for i in range(n):\n            if i == 0:\n                new_list = [l[0]] + l[n:]\n            else:\n                new_list = new_list + l[n:]\n        return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # Concatenate the first part with the second part\n    return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= n:\n        return l\n    else:\n        return l[:n] + split_Arr(l[n:], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    mid = n // 2\n    left = l[:mid]\n    right = l[mid:]\n    # Add the first part of the list to the end\n    l.extend(left)\n    # Return the modified list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Check if the list is empty\n    if len(l) == 0:\n        return []\n    \n    # Get the index of the nth element\n    i = 0\n    while i < n-1:\n        i += 1\n    \n    # Split the list at the nth element\n    first_part = l[:i]\n    second_part = l[i:]\n    \n    # Add the first part to the end of the second part\n    l.extend(first_part)\n    \n    # Return the updated list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # create a new list with the first n elements of l\n    new_list = l[:n]\n    # add the remaining elements to the end of new_list\n    new_list.extend(l[n:])\n    # return the new list\n    return new_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Find the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # Calculate the difference between the largest and smallest values\n    diff = max_num - min_num\n\n    # Return the difference between the largest and smallest values\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    \"\"\"\n    if len(nums) < 2:\n        raise ValueError(\"The list must have at least 2 elements.\")\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sorting the list in ascending order\n    nums.sort()\n    # Finding the difference between largest and smallest value\n    diff = nums[-1] - nums[0]\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty\"\n    else:\n        # find the smallest value in the list\n        min_num = nums[0]\n        for num in nums:\n            if num < min_num:\n                min_num = num\n        \n        # find the largest value in the list\n        max_num = nums[0]\n        for num in nums:\n            if num > max_num:\n                max_num = num\n        \n        # calculate the difference between the two numbers\n        diff = max_num - min_num\n        \n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty\"\n    if len(nums) == 1:\n        return \"List has only one element\"\n    \n    min_num = nums[0]\n    max_num = nums[0]\n    \n    for num in nums:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    \n    diff = max_num - min_num\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    \n    min_val = float('inf')\n    max_val = float('-inf')\n    \n    for num in nums:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"List should have at least 2 elements\")\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n\n    # Define the range of numbers to search for perfect squares\n    nums = list(range(a, b+1))\n\n    # Initialize a boolean array to keep track of prime numbers\n    is_prime = [True] * len(nums)\n\n    # Use the Sieve of Eratosthenes algorithm to find all prime numbers up to the square root of the given range\n    for i in range(2, int(nums[-1] ** 0.5) + 1):\n        if is_prime[i-1]:\n            for j in range(i*i, len(nums), i):\n                is_prime[j-1] = False\n\n    # Initialize an empty list to store perfect squares\n    perfect_squares = []\n\n    # Loop through the range of numbers to search for perfect squares\n    for num in nums:\n        # Check if the number is a perfect square\n        square = int(num ** 0.5)\n        if is_prime[square]:\n            perfect_squares.append(square ** 2)\n\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    squares = []\n    for i in range(int(a), int(b) + 1):\n        if i**2 == a or i**2 == b:\n            continue\n        for j in range(i + 1, int(b) + 1):\n            if j**2 == i or j**2 == b:\n                continue\n            if j**2 == a:\n                squares.append((i, j))\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        if num**2 == sum([int(digit) for digit in str(num**2)]):\n            print(num**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize two empty lists to store the perfect squares\n    perfect_a = []\n    perfect_b = []\n    \n    # Loop through all the numbers between a and b, inclusive\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        square = 0\n        while square * square <= i:\n            square += 1\n        if i == square * square:\n            perfect_a.append(square)\n            \n    # Loop through all the numbers between a and b, inclusive\n    for j in range(a, b+1):\n        # Check if j is a perfect square\n        square = 0\n        while square * square <= j:\n            square += 1\n        if j == square * square:\n            perfect_b.append(square)\n            \n    # Return the lists of perfect squares\n    return perfect_a, perfect_b"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two numbers as input, a and b, and returns a list containing all perfect squares between a and b.\n    '''\n    # Initialize a list to store the perfect squares\n    perfect_squares_list = []\n\n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if the square is a perfect square\n        if i**2 == i:\n            # If it is, add it to the list of perfect squares\n            perfect_squares_list.append(i)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a**0.5), int(b**0.5)+1):\n        for j in range(i, int(b**0.5)+1):\n            if i**2 + j**2 == a**2:\n                return True\n            elif i**2 + j**2 == b**2:\n                return True\n    return False"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    perfect_squares = []\n    for i in range(a, b+1):\n        j = i\n        while i*i <= j:\n            j -= i\n        perfect_squares.append(i*i)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # iterate through a range of numbers between a and b\n    for num in range(a, b+1):\n        # check if the square is a perfect square\n        if num == int(num ** 0.5) ** 2:\n            # print the square if it is\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # checking if a is smaller than b\n    if a < b:\n        temp = a\n        a = b\n        b = temp\n    # initialize count and sum to 0\n    count = 0\n    sum = 0\n    # loop through all possible values of a\n    for i in range(a, b+1):\n        # check if i is a perfect square\n        if i*i == a:\n            count += 1\n            sum += i\n    # return the count and sum\n    return count, sum"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers, a and b, as input and returns a list of all perfect squares between them.\n    '''\n    # initializing the list to store the perfect squares\n    perfect_squares_list = []\n    # loop through all numbers from a to b\n    for i in range(a, b+1):\n        # check if the square of the current number is a perfect square\n        if i*i == i:\n            # if it is, add it to the list of perfect squares\n            perfect_squares_list.append(i)\n    return perfect_squares_list"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    return (r*cmath.cos(phi), r*cmath.sin(phi))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes the radius and angle of a point in polar coordinates and returns the corresponding rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    phi = abs(y)\n    theta = cmath.phase(x + y * 1j)\n\n    x_rect = r * cmath.cos(phi)\n    y_rect = r * cmath.sin(phi)\n\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    x (float): the radius of the polar coordinate\n    y (float): the angle of the polar coordinate in radians\n\n    Returns:\n    (float, float): the corresponding rectangular coordinates\n    \"\"\"\n    angle = cmath.phase(y)\n    r = abs(x)\n    x_rect = r * cmath.cos(angle)\n    y_rect = r * cmath.sin(angle)\n    return (x_rect.real, x_rect.imag), (y_rect.real, y_rect.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n\n    r: float\n        Polar radius\n    theta: complex\n        Polar angle\n\n    Returns:\n    tuple\n        (x, y): rectangular coordinates\n\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n\n    return r * cmath.exp(phi * 1j)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n    return rect_x.real, rect_y.real"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list has at least two elements\n    if length < 2:\n        print(\"The list must have at least two elements.\")\n    else:\n        # Swap the first and last elements\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        # Print the modified list\n        print(newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list is not empty\n    if len(newList)!= 0:\n        # Check if the list has only one element\n        if len(newList) == 1:\n            return newList\n        else:\n            # Interchange the first and last elements\n            newList[0], newList[-1] = newList[-1], newList[0]\n            return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    print(\"New List:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        return \"The list must have at least 2 elements.\"\n    \n    # Interchange the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    # if the length of the list is less than 2, the function will raise an error\n    if len(newList) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Checking if the list has at least two elements\n    if len(newList) < 2:\n        print(\"List must have at least two elements to swap.\")\n        return\n    \n    # Swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # initializing variables\n    temp = None\n    \n    # swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # returning the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # set the first and last index of the list\n    first_index = 0\n    last_index = len(newList) - 1\n    \n    # swap the first and last elements\n    newList[first_index], newList[last_index] = newList[last_index], newList[first_index]\n    \n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k: \n        return 0\n    \n    numerator = n\n    denominator = 1\n    result = 0\n    \n    for i in range(k,n+1): \n        numerator *= i\n        denominator *= (n-i+1)\n        result += numerator//denominator\n    \n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k, n+1):\n        sum += i * binomial_Coeff(n-1, k-1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_of_products = 0\n    for i in range(1,n+1):\n        product = 1\n        for j in range(1,i+1):\n            product *= j\n        product //= i\n        sum_of_products += product\n    return sum_of_products"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return n * binomial_Coeff(n - 1, k - 1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += (1/i) * (n-i+1) * binomial_Coeff(n-i+1,k)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two parameters, n and k, which are the values of n and k in the binomial theorem.\n    The function returns the sum of the product of consecutive binomial co-efficients.\n    \n    The binomial theorem states that the sum of the product of consecutive binomial co-efficients can be found using the following formula:\n    \n    sum(binomial_Coeff(n,k) * binomial_Coeff(n-1,k-1))\n    \n    where binomial_Coeff(n,k) represents the binomial coefficient of n over k.\n    '''\n    \n    # initialize the sum variable to 0\n    sum = 0\n    \n    # calculate the factorial of n\n    factorial_n = 1\n    for i in range(1,n+1):\n        factorial_n *= i\n        \n    # calculate the factorial of k\n    factorial_k = 1\n    for i in range(1,k+1):\n        factorial_k *= i\n        \n    # calculate the factorial of (n-k)\n    factorial_n_minus_k = 1\n    for i in range(1,(n-k)+1):\n        factorial_n_minus_k *= i\n        \n    # calculate the product of consecutive binomial co-efficients\n    product = factorial_n_minus_k / (factorial_k * factorial_n)\n    \n    # add the product of consecutive binomial co-efficients to the sum variable\n    sum += product\n    \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(1, k + 1):\n        result *= (n - i + 1) / i\n    return result\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize a variable to store the sum of the products\n    sum = 0\n    # Loop through all possible combinations of consecutive numbers\n    for i in range(k, n+1):\n        for j in range(k, n+1):\n            # Calculate the product of the consecutive numbers\n            prod = 1\n            for x in range(j, i+1):\n                prod *= x\n            # Add the product to the sum\n            sum += prod\n    # Return the sum of the products\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize variables\n    sum_ = 0\n    factorial = 1\n    power = n\n\n    # Calculate the factorial of n\n    for i in range(1,n+1):\n        factorial *= i\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    for i in range(k,n+1):\n        sum_ += factorial // i\n        factorial //= i\n\n    return sum_"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k > 1 and k < n:\n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))\n    else:\n        return 0"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # remove leading zeroes from each octet\n    for i in range(4):\n        ip = re.sub(r'^\\d{1}', '', ip[i])\n\n    # check if any octet is left after removing zeroes\n    for i in range(4):\n        if ip[i]:\n            return ip\n        else:\n            ip = ip[:i] + '.' + ip[i+1:]\n\n    # if no octet is left, return None\n    return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+','',ip) # remove leading zeroes from the ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Use regular expression to find all zeroes at the beginning of the IP address\n    zero_pattern = r'^0+'\n    # Use re.sub() function to remove the zeroes from the IP address\n    ip_without_zero = re.sub(zero_pattern, '', ip)\n    # Return the modified IP address\n    return ip_without_zero"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        # remove leading zeroes from each octet\n        return '.'.join(map(lambda x: str(int(x)).lstrip('0'), ip.split('.')))\n    else:\n        return 'Invalid IP address format'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Define regular expression pattern for matching IP addresses\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    # Match the pattern with the input string\n    match = re.match(pattern, ip)\n    # If match is not None, extract the groups using index and replace them with empty string\n    if match is not None:\n        groups = match.groups()\n        for i in range(4):\n            ip = ip.replace(groups[i], '')\n    # Return the modified IP address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    Args:\n    ip (str): An IP address in string format.\n\n    Returns:\n    str: The IP address with leading zeroes removed.\n    \"\"\"\n    # Replace all leading zeroes with nothing\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function takes an IP address as input and removes leading zeroes from it.\n    '''\n    # Remove leading zeroes from each octet of the IP address\n    ip = re.sub(r'^\\D+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*([0-9]+)\\.\\s*([0-9]+)\\.\\s*([0-9]+)\\.\\s*([0-9]+)', r'\\1.\\2.\\3.\\4', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Removing leading zeroes from the ip address\n    ip = re.sub(r'^0+(\\d\\.)+\\d+$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_first = [x for x in list1 if x % 2 == 0][0]\n    odd_first = [x for x in list1 if x % 2!= 0][0]\n    diff = even_first - odd_first\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even_odd.append(num)\n    if even_odd:\n        return even_odd[-1] - even_odd[0]\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number in the list.\n    '''\n    # Find the first even number\n    even_index = 0\n    while list1[even_index] % 2!= 0:\n        even_index += 1\n    # Find the first odd number\n    odd_index = 0\n    while list1[odd_index] % 2 == 0:\n        odd_index += 1\n    # Calculate the difference and return it\n    return list1[even_index] - list1[odd_index]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Define variables for even and odd numbers\n    even_num = 0\n    odd_num = 0\n    \n    # Iterate through the list to find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    # Return the difference between even and odd numbers\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    diff = even_count - odd_count\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    if even_num % 2 == 0 and odd_num % 2 == 1:\n        return abs(even_num - odd_num)\n    else:\n        print(\"Invalid list\")\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = 0\n    odd_index = 0\n\n    while (even_index < len(list1) and odd_index < len(list1)):\n        if list1[even_index] % 2 == 0:\n            even_index += 1\n        else:\n            odd_index += 1\n\n    if odd_index < len(list1):\n        return list1[even_index] - list1[odd_index]\n    else:\n        return list1[even_index] - 1"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes in a list of integers and finds the difference between the first even and the first odd number in the list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_num = i\n        else:\n            odd_num = i\n            \n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = next(num for num in list1 if num % 2 == 0)\n    odd = next(num for num in list1 if num % 2!= 0)\n    diff = abs(even - odd)\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize variables\n    first_even = None\n    first_odd = None\n    diff = None\n    # iterate over list1\n    for num in list1:\n        # check if num is even\n        if num % 2 == 0:\n            # if even, check if it is the first even number\n            if first_even is None:\n                first_even = num\n        else:\n            # if odd, check if it is the first odd number\n            if first_odd is None:\n                first_odd = num\n        # calculate the difference between first_even and first_odd if it exists\n        if first_even is not None and first_odd is not None:\n            diff = first_even - first_odd\n            break\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    if len(str1)!= len(str2):\n        return \"Invalid input\"\n    \n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    n1 = len(str1)\n    n2 = len(str2)\n    swaps = 0\n    i = 0\n    j = 0\n    while i < n1 and j < n2:\n        if str1[i]!= str2[j]:\n            if str1[i] == '0' and str2[j] == '1':\n                str1[i], str2[j] = '1', '0'\n                swaps += 1\n            else:\n                str1[i], str2[j] = '0', '1'\n                swaps += 1\n            i += 1\n            j += 1\n        else:\n            if str1[i] == '1':\n                i += 1\n            elif str2[j] == '1':\n                j += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to lists of bits\n    list1 = [int(bit) for bit in str1]\n    list2 = [int(bit) for bit in str2]\n\n    # Find lengths of binary strings\n    n1 = len(list1)\n    n2 = len(list2)\n\n    # Initialize minimum swaps\n    min_swaps = 0\n\n    # Loop through all pairs of bits\n    for i in range(n1):\n        for j in range(n2):\n            # If bits do not match, increment minimum swaps\n            if list1[i]!= list2[j]:\n                min_swaps += 1\n\n    # Return minimum swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    # Convert the binary strings to integers\n    num1 = int(str1,2)\n    num2 = int(str2,2)\n\n    # Initialize variables for counting swaps\n    swaps = 0\n    temp = 0\n\n    # While num1 and num2 are not equal\n    while num1!= num2:\n        # If num1 is greater than num2\n        if num1 > num2:\n            # Swap bits of num1 and num2\n            temp = num1\n            num1 = num1 ^ num2\n            num2 = temp ^ num1\n            swaps += 1\n        # If num2 is greater than num1\n        else:\n            # Swap bits of num1 and num2\n            temp = num2\n            num1 = num1 ^ num2\n            num2 = temp ^ num1\n            swaps += 1\n\n    # Return the minimum number of swaps required to convert str1 to str2\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0] * n for _ in range(n + 1)]\n    min_swaps = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            if str1[j] == str2[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + 1\n                if dp[i][j] < dp[i - 1][j + 1]:\n                    dp[i][j] = dp[i - 1][j + 1]\n        min_swaps = min(min_swaps, dp[n][i - 1])\n    return min_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize swap count\n    swap = 0\n\n    # Loop through each bit of the binary strings\n    for i in range(len(str1)):\n        # If the bits are not equal, swap them\n        if num1 & (1 << i)!= num2 & (1 << i):\n            swap += 1\n            # If the number of swaps is odd, break out of the loop\n            if swap % 2!= 0:\n                break\n\n    # Return the final swap count\n    return swap"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # converting the two binary strings into binary arrays\n    arr1 = [int(i) for i in list(str1)]\n    arr2 = [int(i) for i in list(str2)]\n\n    # calculating the length of the two arrays\n    n = len(arr1)\n\n    # initializing a variable to keep track of the minimum number of swaps required\n    min_swaps = n\n\n    # iterating through all possible combinations of swaps\n    for i in range(n):\n        for j in range(i+1, n):\n            # creating a new binary array by swapping two elements in the current combination\n            new_arr = arr1.copy()\n            new_arr[i], new_arr[j] = new_arr[j], new_arr[i]\n\n            # comparing the new binary array with the original array to check if they are equal\n            if new_arr == arr2:\n                # calculating the number of swaps required to convert the two binary arrays to equal\n                min_swaps = min(min_swaps, n-i-1)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings into lists\n    list1 = [int(i) for i in str1]\n    list2 = [int(i) for i in str2]\n\n    # Initialize variables\n    i = 0\n    j = 0\n    swaps = 0\n\n    # Compare two binary strings and count number of swaps required to convert one to other\n    while i < len(list1) or j < len(list2):\n        # If one list is finished and the other is not, it means that we need to swap the last element in the longer list\n        if i == len(list1) and j < len(list2):\n            swaps += 1\n            list1[i] = list2[j]\n            list2[j] = 0\n            i += 1\n        # If both lists are not finished, compare the last elements of each list and swap if required\n        elif i < len(list1) and j == len(list2) or list1[i] > list2[j]:\n            swaps += 1\n            list1[i] = list2[j]\n            list2[j] = 0\n            i += 1\n            j += 1\n        # If both lists are finished and the last element in the longer list is less than or equal to the last element in the shorter list, then all elements are equal and we don't need to swap anything\n        else:\n            i += 1\n            j += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            str1[i], str2[i] = str2[i], str1[i]\n            swaps += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to lists of bits\n    bits1 = [int(bit) for bit in str1[::-1]]\n    bits2 = [int(bit) for bit in str2[::-1]]\n\n    # Initialize a matrix with zeros to store the cost of swaps\n    cost = [[0]*(len(bits1)+1) for _ in range(len(bits2)+1)]\n\n    # Fill in the matrix with the required values\n    for i in range(len(bits1)+1):\n        for j in range(len(bits2)+1):\n            if i == 0:\n                cost[i][j] = j\n            elif j == 0:\n                cost[i][j] = i\n            elif bits1[i-1] == bits2[j-1]:\n                cost[i][j] = cost[i-1][j-1]\n            else:\n                cost[i][j] = min(cost[i-1][j], cost[i][j-1], cost[i-1][j-1]) + 1\n\n    # Find the minimum number of swaps required\n    min_swaps = len(str1) - cost[len(bits1)][len(bits2)]\n\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    # Convert the tuple to bytes\n    tuple_bytes = bytes(tuple_list)\n\n    # Get the size of the bytes object\n    size = sys.getsizeof(tuple_bytes)\n\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # convert the tuple to bytes and get the length\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the size variable to 0\n    size = 0\n\n    # Iterate through each tuple in the list\n    for tuple in tuple_list:\n        # Add the size of each tuple element to the size variable\n        size += sys.getsizeof(tuple)\n\n    # Return the size of the tuple list\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Merge the two sorted arrays\n    arr = arr1 + arr2\n    \n    # Find the middle element of the merged array\n    mid = len(arr) // 2\n    \n    # Find the kth element in the left half of the merged array\n    left = mid\n    \n    # Find the kth element in the right half of the merged array\n    right = len(arr) - mid\n    \n    # If k is less than left element, find the kth element in the left half\n    if k < left:\n        return find_kth(arr1, arr, k)\n    \n    # If k is greater than right element, find the kth element in the right half\n    elif k > right:\n        return find_kth(arr, arr2, k - right)\n    \n    # If k is equal to the middle element, return it\n    elif k == mid:\n        return arr[k]\n    \n    # If k is less than the middle element, find the kth element in the left half\n    elif k < mid:\n        return find_kth(arr1, arr[:mid], k)\n    \n    # If k is greater than the middle element, find the kth element in the right half\n    else:\n        return find_kth(arr[mid:], arr2, k - mid)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and a value k\n    and returns the kth smallest element from both arrays.\n\n    Parameters:\n    arr1 (list): The first sorted array.\n    arr2 (list): The second sorted array.\n    k (int): The value of k.\n\n    Returns:\n    int: The kth smallest element from both arrays.\n\n    Examples:\n    >>> arr1 = [1, 3, 5, 7, 9]\n    >>> arr2 = [2, 4, 6, 8, 10]\n    >>> k = 3\n    >>> find_kth(arr1, arr2, k)\n    5\n\n    Note:\n    The time complexity of this function is O(n) where n is the\n    length of the smaller array.\n    \"\"\"\n    n = len(arr1)\n    m = len(arr2)\n    if n > m:\n        arr1, arr2, k, n, m = arr2, arr1, k, m, n\n\n    # Initialize two pointers, one for each array\n    i = 0\n    j = 0\n\n    # Iterate until the pointers meet or cross each other\n    while i < n and j < m:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n                j += 1\n\n    # If the array with remaining elements is the first array, return the\n    # remaining elements from the first array\n    if i == n:\n        return arr2[j:]\n    else:\n        return arr1[i:]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    count = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n            j += 1\n            \n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    len1 = len(arr1)\n    len2 = len(arr2)\n\n    while i < len1 and j < len2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n\n    if i < len1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Check if the length of the two arrays are equal\n    if len(arr1)!= len(arr2):\n        print(\"Error: The two arrays must have the same length.\")\n        return\n\n    # Find the midpoint of the two arrays\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    # If the length of the two arrays are odd, kth element will be the middle element of the two arrays\n    if len(arr1) % 2!= 0:\n        return arr1[mid1]\n\n    # If the length of the two arrays are even, kth element will be the average of the middle elements of the two arrays\n    kth_element = (arr1[mid1] + arr1[mid1 - 1]) / 2\n\n    # If k is less than the length of the first array, search for kth element in the first array\n    if k < len(arr1):\n        kth_element = min(kth_element, find_kth(arr1[:mid1], arr2, k))\n\n    # If k is less than the length of the second array, search for kth element in the second array\n    if k < len(arr1) + len(arr2):\n        kth_element = min(kth_element, find_kth(arr1, arr2[:mid2], k - len(arr1)))\n\n    # Return the kth element\n    return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return arr2[j-k]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n\n    # Initialize two pointers, one for each array\n    i, j = 0, 0\n\n    # Initialize a variable to keep track of the current position in the merged array\n    merged_idx = 0\n\n    # Iterate through both arrays until one of them is exhausted\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            arr1[merged_idx] = arr1[i]\n            i += 1\n        else:\n            arr1[merged_idx] = arr2[j]\n            j += 1\n\n        # Increment the merged index if the current element is greater than the kth element\n        merged_idx += 1\n\n        # If the merged index is equal to k, we have found the kth element\n        if merged_idx == k:\n            return arr1[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    i = j = 0\n    m, n = len(arr1), len(arr2)\n    \n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            k -= 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            j += 1\n            k -= 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    \n    if i == m:\n        if k > 0:\n            return arr2[j]\n        elif k == 0:\n            return arr2[j]\n        elif k < 0:\n            return arr1[i]\n    else:\n        if k > 0:\n            return arr1[i]\n        elif k == 0:\n            return arr1[i]\n        elif k < 0:\n            return arr2[j]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    num_str = str(number)\n    sum = 0\n    for digit in num_str:\n        digit = int(digit)\n        sum += digit ** len(num_str)\n    return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the input number to a string and remove any leading or trailing zeros\n    number_str = str(number).lstrip('0')\n    # Calculate the sum of the cubes of each digit in the number\n    sum_of_cubes = sum(int(digit) ** 3 for digit in number_str)\n    # If the sum is equal to the input number, the number is armstrong\n    if sum_of_cubes == number:\n        return True\n    # If the sum is not equal to the input number, the number is not armstrong\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check whether a number is an Armstrong number or not.\n    \"\"\"\n    sum_of_squares = 0\n    num = n\n    while num > 0:\n        digit = num % 10\n        sum_of_squares += digit ** 3\n        num //= 10\n    return sum_of_squares == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the input number to a string\n    number_str = str(number)\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through each digit in the string\n    for digit in number_str:\n        # Multiply the digit by the power of the number of digits\n        sum += int(digit) ** len(number_str)\n    \n    # Return whether the sum is equal to the input number\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function checks whether the given number is an armstrong number or not.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(number)\n    # Initialize the sum of the cubes of the digits of the number\n    cube_sum = 0\n    # Iterate over the digits of the number and add the cubes of the digits to the sum\n    for digit in num_str:\n        cube_sum += int(digit) ** 3\n    # Check if the sum of the cubes of the digits is equal to the original number\n    return cube_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(number)\n    # Initialize the sum of the powers of each digit\n    digit_sum = 0\n    # Loop through each digit in the number\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Add the power of the digit to the sum\n        digit_sum += digit_int ** len(num_str)\n    # Check if the sum is equal to the original number\n    if digit_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Check whether a number is armstrong or not.\n    \"\"\"\n    return sum(int(d)**len(str(n)) for d in str(n)) == n\n\ndef armstrong_number(number):\n    \"\"\"\n    Check whether a number is an armstrong number or not.\n    \"\"\"\n    if not isinstance(number, int):\n        return \"Input must be an integer.\"\n    elif number < 10:\n        return \"Input must be a number greater than or equal to 10.\"\n    else:\n        return \"The number is armstrong\" if is_armstrong(number) else \"The number is not armstrong\""
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize the sum of the squares of each digit of the number\n    sum_of_squares = 0\n\n    # Convert the number to a string\n    num_str = str(number)\n\n    # Loop through each digit of the number and calculate the sum of squares of that digit\n    for digit in num_str:\n        digit_int = int(digit)\n        sum_of_squares += digit_int**3\n\n    # Check if the sum of squares of all digits is equal to the original number\n    return number == sum_of_squares"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a list of digits\n    digits = [int(d) for d in str(number)]\n\n    # Calculate the power of each digit in the number\n    powers = [d ** len(digits) for d in digits]\n\n    # Sum all the powers and compare it to the original number\n    total_power = sum(powers)\n    return total_power == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(n):\n    '''\n    This function checks whether a given number is an armstrong number or not.\n    '''\n    # Convert the number to a string\n    s = str(n)\n    # Initialize the sum of the digits to 0\n    sum = 0\n    # Loop through each digit of the number\n    for digit in s:\n        # Convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    # Return whether the sum of the digits is equal to the original number\n    return sum == n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total / count\n    print(f\"The sum of the first {n} natural numbers is {total}\")\n    print(f\"The average of the first {n} natural numbers is {average}\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_n = 0\n    for i in range(1, number + 1):\n        sum_n += i\n    average = sum_n / number\n    return (sum_n, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find the sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    sum = 0\n    count = 0\n    # loop through the first n natural numbers\n    for i in range(1, number+1):\n        # add i to sum and increment count\n        sum += i\n        count += 1\n    # calculate and return the average\n    return sum/count"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(input(\"Enter the value of n: \"))\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    print(\"Sum of the first\", n, \"natural numbers is:\", sum)\n    print(\"Average of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_num = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_num += i\n        count += 1\n    average = sum_num / count\n    return sum_num, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number should be non-negative.\")\n    elif number == 0:\n        return (0, 0)\n    else:\n        sum_n = 0\n        for i in range(1, number+1):\n            sum_n += i\n        average = sum_n / number\n        return (sum_n, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average\n\nn = int(input(\"Enter the number of natural numbers to find the sum and average: \"))\nresult = sum_average(n)\nprint(\"Sum:\", result[0])\nprint(\"Average:\", result[1])"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    sum = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum += i\n        count += 1\n        \n    average = sum/count\n    \n    return sum, average\n\nn = int(input(\"Enter the value of n: \"))\n\nresult = sum_average(n)\n\nprint(\"Sum of the first\", n, \"natural numbers is:\", result[0])\nprint(\"Average of the first\", n, \"natural numbers is:\", result[1])"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if it is even and False otherwise.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_repeat = None\n    for char in str1:\n        if str1.count(char) > 1:\n            if first_repeat is None:\n                first_repeat = char\n            else:\n                return first_repeat\n    return first_repeat"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 2:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Initialize two variables to keep track of the first and last occurrences of the repeated character\n    first_occurrence = None\n    last_occurrence = None\n    # Loop through the list of characters\n    for i in range(len(char_list)):\n        # Check if the current character is the first occurrence of the repeated character\n        if char_list[i] in char_list[:i] and (first_occurrence is None or char_list.index(char_list[i]) < first_occurrence):\n            first_occurrence = char_list.index(char_list[i])\n        # Check if the current character is the last occurrence of the repeated character\n        if char_list[i] in char_list[i+1:] and (last_occurrence is None or char_list.index(char_list[i]) > last_occurrence):\n            last_occurrence = char_list.index(char_list[i])\n    # If there is no repeated character, return None\n    if first_occurrence is None:\n        return None\n    # Otherwise, return the first repeated character and its index in the string\n    else:\n        return (str1[first_occurrence], first_occurrence)"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(string):\n    '''\n    This function takes a string as input and returns the first repeated character in the string.\n    '''\n    char_set = set()\n    for char in string:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the frequency of each character\n    freq = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # loop through each character in the string again\n    for char in str1:\n        # if the character is in the dictionary and its frequency is greater than 1, return the character\n        if char in freq and freq[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            # Increment the frequency count for the character in the dictionary\n            freq_dict[char] += 1\n        else:\n            # Add the character to the dictionary with a frequency count of 1\n            freq_dict[char] = 1\n\n    # Iterate through the frequency dictionary and find the first character with a frequency count greater than 1\n    for char in freq_dict:\n        if freq_dict[char] > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize an empty dictionary to store the count of each character\n    char_count = {}\n    \n    # iterate through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if it is, return the first repeated character\n            return char\n        else:\n            # otherwise, add the character to the dictionary with a count of 1\n            char_count[char] = 1\n    \n    # if the function reaches here, it means that no repeated characters were found\n    return \"No repeated characters found\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first repeated character in the dictionary\n    for char in freq:\n        if freq[char] == 2:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Loop through each character in the string and return the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n\n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the character counts\n    char_counts = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_counts:\n            char_counts[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_counts[char] = 1\n            \n    # loop through the dictionary again and find the first repeated character\n    for char in char_counts:\n        if char_counts[char] > 1:\n            return char\n            \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(2, n+1):\n        if i % 2 == 1:\n            lucid_nums.append(i)\n    return lucid_nums\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n+1):\n        if i**2 + i == 2*i and i > 0:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(n+1):\n        if sum([int(digit) ** int(digit) for digit in str(i)]) == i:\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        j = 2\n        while j*j <= i:\n            if i % j == 0:\n                is_lucid = False\n                break\n            j += 1\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for num in range(n, 0, -1):\n        lucid_numbers.append(num)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1 or i == 2:\n            lucid_numbers.append(i)\n        elif i % 2 == 0:\n            if i < 4:\n                lucid_numbers.append(i)\n        elif i > 2 and i < 25:\n            if i % 3 == 0:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    ludic = []\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            ludic.append(i)\n        elif i % 2 == 0:\n            ludic.append(i)\n        else:\n            ludic.append(i*2)\n\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n        else:\n            j = 3\n            while j <= int(i**0.5):\n                if i % j == 0:\n                    lucid_numbers.append(i)\n                    break\n                j += 2\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string with spaces\n    result =''.join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert the string to a list of words\n    words = s.split()\n    # Initialize an empty string for the reversed words\n    reversed_words = ''\n    # Iterate through the list of words\n    for i in range(len(words)-1, -1, -1):\n        # Append each word to the reversed string\n        reversed_words += words[i] +''\n    # Remove the trailing space\n    reversed_words = reversed_words[:-1]\n    # Return the reversed words\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse the words\n    words.reverse()\n    # Join the words back into a string\n    result =''.join(words)\n    # Return the reversed string\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split the string into words\n    reversed_words = words[::-1] # reverse the order of words\n    reversed_s =''.join(reversed_words) # join the reversed words back into a string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    \n    # initialize an empty string to store the reversed words\n    reversed_words = \"\"\n    \n    # loop through each word in the list\n    for word in words:\n        # reverse the word and append it to the reversed_words string\n        reversed_word = word[::-1]\n        reversed_words += reversed_word + \" \"\n    \n    # remove the last space from the reversed_words string\n    return reversed_words[:-1]"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    words = [word[::-1] for word in words]\n    # Join the words back together into a string\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words =''.join(words[::-1])\n    return reversed_words"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # if the number is less than 2, it is not a prime number\n    if num < 2:\n        return False\n\n    # if the number is equal to 2 or 3, it is a prime number\n    if num == 2 or num == 3:\n        return True\n\n    # check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    # if none of the above conditions are met, the number is a prime number\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    Function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if (num % i) == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        print(num, \"is a prime number.\")\n    else:\n        print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n    \"\"\"\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n\ndegrees = 45\nradian = radian_degree(degrees)\n\nprint(f\"{degrees} degrees is equal to {radian:.2f} radian.\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literal = text[match.start():match.end()]\n        literals.append((literal, match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use the re.finditer() function to search for all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Initialize an empty list to store the matches\n    result = []\n    \n    # Loop through each match and add it to the result list\n    for match in matches:\n        result.append(match.group())\n    \n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match_obj in matches:\n        return match_obj.group(), match_obj.start(), match_obj.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    literals = re.findall(pattern, text)\n    if literals:\n        return literals[0][0], literals[0][1], literals[-1][1]\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literal = text[match.start():match.end()]\n        literals.append((literal, match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start = matches[0].start()\n        end = matches[0].end()\n        return matches[0], start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        # We need to extract the substring from the entire text, not just the match object\n        literal = text[match.start():match.end()]\n        # We also need to extract the start and end indices separately\n        start_index = match.start()\n        end_index = match.end()\n        yield literal, start_index, end_index"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_seq = [1, 12]\n    for i in range(2, n):\n        bell_seq.append(bell_seq[-1] + bell_seq[-2])\n    return bell_seq[n-1]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = 0\n    for i in range(n):\n        bell_num += pow(2, i)\n    return bell_num"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Function to find the nth Bell number\n    def nth_bell(n): \n        if n <= 0: \n            return 0\n        elif n == 1: \n            return 1\n        else: \n            return (2*n-1)*nth_bell(n-1) + (n-1)*nth_bell(n-2)\n\n    # Find the nth Bell number\n    return nth_bell(n)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Function to find nth Bell number \n    '''\n    a = 1\n    b = 2\n    count = 2\n    for i in range(2, n+1):\n        c = a + b\n        if c % 2 == 0:\n            count += 2\n            print(c, end ='')\n            a = b\n            b = c\n        else:\n            count += 1\n            print(c, end ='')\n            a = b\n            b = c\n    print('\\nTotal number of even Bell numbers is:', count)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    count = 0\n    for i in list1:\n        count += 1\n        if count == k:\n            list1.pop(count-1)\n        elif count > k:\n            list1.append(i)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.pop(L.index(list1[L.index(list1)-L.index(list1)//L.index(list1)]))\n    return L"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Create a copy of the list\n    list2 = list1.copy()\n    # Remove the kth element from the list\n    list2.pop(L - 1)\n    # Return the modified list\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    n = len(list1)\n    if k > n:\n        return []\n    result = []\n    index = 0\n    for i in range(n):\n        if index!= k-1:\n            result.append(list1[i])\n        index += 1\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    n = len(list1)\n    if L > n:\n        return list1\n    k = n - L\n    if L == 1:\n        return list1[0:k] + list1[k+1:]\n    else:\n        return list1[0:k] + remove_kth_element(list1[k:], L-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1[:L-1]\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements but the k'th element removed.\n    '''\n    new_list = []\n    count = 0\n    for i in range(len(list1)):\n        if count!= L:\n            new_list.append(list1[i])\n            count += 1\n        elif count == L:\n            new_list.append(list1[i+1])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # First, we split the list into two parts - the first k elements and the remaining elements\n    k_elements = list1[:L]\n    remaining_elements = list1[L:]\n    \n    # Then, we remove the k'th element from the first part of the list\n    k_elements.pop(L-1)\n    \n    # Finally, we concatenate the two parts of the list\n    final_list = k_elements + remaining_elements\n    \n    return final_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(test_list[i])\n            break\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # check if the list of lists is valid\n    if not all(isinstance(row, list) for row in test_list):\n        raise ValueError('Input must be a list of lists')\n\n    # find the maximum value of then'th column\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            if row[N] > max_val:\n                max_val = row[N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # create an empty list to store the column max values\n    column_max = []\n    \n    # loop through each row of the matrix\n    for row in test_list:\n        # loop through each element in the row and append it to the column_max list if it's the nth column\n        if N == 1:\n            column_max.append(row[0])\n        elif N == 2:\n            column_max.append(row[1])\n        elif N == 3:\n            column_max.append(row[2])\n        elif N == 4:\n            column_max.append(row[3])\n        elif N == 5:\n            column_max.append(row[4])\n        elif N == 6:\n            column_max.append(row[5])\n        elif N == 7:\n            column_max.append(row[6])\n        elif N == 8:\n            column_max.append(row[7])\n        elif N == 9:\n            column_max.append(row[8])\n    \n    # return the maximum value in the column_max list\n    return max(column_max)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the list to get the number of rows\n    num_rows = len(test_list)\n    # Initialize the max value to be the first element of the first row\n    max_value = test_list[0][0]\n    # Loop through each row\n    for i in range(num_rows):\n        # Compare the nth element of the current row with the max value\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    # Return the max value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        max_value = max(max_value, row[N-1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Find the length of the longest row in the matrix\n    longest_row_len = len(max(test_list, key=len))\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate over each row in the matrix\n    for i in range(len(test_list)):\n\n        # If the row length is greater than then'th column\n        if i < N:\n            continue\n\n        # If the row length is equal to then'th column\n        else:\n            # Initialize a variable to store the current column sum\n            current_sum = 0\n\n            # Iterate over each element in the row\n            for j in range(longest_row_len):\n                # Add the value at the current index to the current column sum\n                current_sum += test_list[i][j]\n\n            # If the current column sum is greater than the result so far\n            if current_sum > result:\n                # Update the result with the current column sum\n                result = current_sum\n\n    # Return the result\n    return result"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max variable to the first element in the first row\n    max_num = test_list[0][0]\n\n    # loop through each row in the matrix\n    for row in test_list:\n        # check if the current element is greater than the max\n        if row[N-1] > max_num:\n            max_num = row[N-1]\n\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Check if input is a list of lists\n    if not isinstance(test_list, list) or not all(isinstance(row, list) for row in test_list):\n        raise ValueError(\"Input should be a list of lists.\")\n    \n    # Check if N is a valid integer\n    if not isinstance(N, int) or N < 1:\n        raise ValueError(\"N should be a positive integer.\")\n    \n    # Get the length of the first row of the matrix\n    row_length = len(test_list[0])\n    \n    # Check if N is greater than or equal to the length of the first row\n    if N >= row_length:\n        raise ValueError(\"N should be less than the length of the first row.\")\n    \n    # Initialize an empty list to store the max values of each column\n    max_values = []\n    \n    # Loop through the rows of the matrix\n    for row in test_list:\n        # Check if the length of the row is greater than the length of the first row\n        if len(row) > row_length:\n            raise ValueError(\"The length of each row should be equal to the length of the first row.\")\n        \n        # Initialize variables to store the sum of then'th column and the max value of then'th column\n        nth_col_sum = 0\n        nth_col_max = float('-inf')\n        \n        # Loop through the columns of the row\n        for i in range(row_length):\n            # Check if the column number is equal to N\n            if i == N - 1:\n                # Add the value of the column to the sum of then'th column\n                nth_col_sum += row[i]\n                \n                # Update the max value of then'th column if the current value is greater\n                if row[i] > nth_col_max:\n                    nth_col_max = row[i]\n        \n        # Add the max value of then'th column to the list of max values\n        max_values.append(nth_col_max)\n    \n    # Return the maximum value of then'th column\n    return max(max_values)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the list of lists is valid\n    if not isinstance(test_list, list) or not isinstance(test_list[0], list):\n        raise ValueError('Input must be a list of lists.')\n    \n    # Check if the N is valid\n    if N < 1 or N > len(test_list[0]):\n        raise ValueError('N must be a positive integer less than or equal to the number of columns in the matrix.')\n    \n    # Find the max of then'th column and return it\n    max_val = max([row[N-1] for row in test_list])\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        sublist1 = lst[i]\n        sublist2 = lst[i+1]\n        if sublist1[0] < sublist2[0]:\n            result.append(sublist1)\n        elif sublist1[0] > sublist2[0]:\n            result.append(sublist2)\n        else:\n            if sublist1[1] < sublist2[1]:\n                result.append(sublist1)\n            else:\n                result.append(sublist2)\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    # Initialize an empty list to store the merged lists\n    merged_lst = []\n\n    # Iterate over the sublists in the input list\n    for sublist in lst:\n        # Check if the sublist has at least two elements\n        if len(sublist) >= 2:\n            # Extract the first element and the second one from the sublist\n            first_elem = sublist[0]\n            second_elem = sublist[1]\n            # Add the merged sublist to the merged list\n            merged_lst.append([first_elem, second_elem])\n\n    # Return the merged list\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][0]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not isinstance(test_list, list):\n        raise TypeError(\"The input must be a list of tuples.\")\n\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        if not isinstance(test_list[i], tuple):\n            raise TypeError(\"All values in the input list must be tuples.\")\n        for j in range(len(test_list[i])):\n            if not isinstance(test_list[i][j], (int, float)):\n                raise TypeError(\"All values in a tuple must be numbers.\")\n        cumulative_sum += sum(test_list[i])\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    # Iterate through the tuple list\n    for tup in test_list:\n        # Add the value of the tuple to the cumulative sum\n        cum_sum += tup[1]\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for i in test_list:\n        cumsum += i\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumsum = 0\n    for i in range(len(test_list)):\n        cumsum += test_list[i][1]\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize an empty list to store the cumulative sum of values\n    cum_sum = []\n\n    # Iterate over each tuple in the list\n    for tup in test_list:\n\n        # Iterate over each value in the tuple\n        for val in tup:\n\n            # If the value is not None, append it to the cumulative sum list\n            if val is not None:\n                cum_sum.append(val)\n\n    # Return the cumulative sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][1]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize variables to store the sum of all values and the current index\n    sum_of_values = 0\n    current_index = 0\n    # loop through the tuple list\n    for value in test_list:\n        # add the value to the sum of all values and increment the current index\n        sum_of_values += value\n        current_index += 1\n    # return the sum of all values\n    return sum_of_values"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to hold the cumulative sum\n    cum_sum = 0\n\n    # loop through each tuple in the list\n    for tup in test_list:\n        # loop through each value in the tuple and add it to the cumulative sum\n        for val in tup:\n            cum_sum += val\n\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n    return total"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        avg = total / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        average = sum(tup)/len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # loop through each element in the tuple\n        for num in tup:\n            # add the element to the running sum\n            total += num\n    # divide the running sum by the total number of elements\n    avg = total / len(nums)\n    # return the average as a list\n    return [avg]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        average = sum(tup) / len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        total = sum(i)\n        average = total / len(i)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_list = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        avg_tup = sum_tup / len(tup)\n        total_list.append(avg_tup)\n    return total_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    averages = []\n    for tup in nums:\n        average = sum(tup)/len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        result.append(sum(tup)/len(tup))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = sum(num)\n        average = total / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have same length\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= 0:\n            test_tup1[i] = test_tup1[i] % test_tup2[i]\n        else:\n            test_tup1[i] = test_tup1[i] % test_tup2[i] + test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    # Perform element-wise modulo\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    \n    # Return the result tuple\n    return tuple(result_tup)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Function to check if the point is in the desired form or not\n    def check_point(point):\n        if point[0] == d and point[1] == 0:\n            return True\n        else:\n            return False\n\n    # Initialize variables\n    current_point = [0, 0]\n    jumps = 0\n\n    # Check all possible points\n    for i in range(1, steps+1):\n        next_point = [current_point[0] + i*d, current_point[1]]\n        if check_point(next_point):\n            jumps += 1\n            current_point = next_point\n\n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # If d is greater than or equal to steps, we can reach (d, 0) directly from origin\n    if d >= steps: \n        return 0\n\n    # If d is less than steps, we can reach (d, 0) by jumping one step\n    elif d < steps:\n        return 1 + min_Jumps(steps - 1, d)\n\n    # If d is equal to steps, we need to jump multiple steps to reach (d, 0) from origin\n    else:\n        return 2 + min_Jumps(steps - 2, d)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Create a list of adjacent points for each step\n    adjacent = []\n    for i in range(steps):\n        if i == 0:\n            adjacent.append((i, 1))\n        elif i == steps - 1:\n            adjacent.append((i, -1))\n        else:\n            adjacent.append((i, 0))\n\n    # Initialize variables to keep track of minimum jumps and current position\n    min_jumps = float('inf')\n    curr_pos = 0\n\n    # Perform breadth-first search to find the minimum number of jumps\n    while curr_pos < len(adjacent):\n        curr_jumps = 0\n        for i in range(len(adjacent)):\n            new_pos = (adjacent[i][0] + curr_pos) % len(adjacent)\n            if abs(adjacent[i][1]) <= d and new_pos not in visited:\n                curr_jumps += 1\n                visited.add(new_pos)\n        if curr_jumps < min_jumps:\n            min_jumps = curr_jumps\n        curr_pos = (curr_pos + 1) % len(adjacent)\n\n    # Return the minimum number of jumps required\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables to store the number of jumps and the number of steps required to reach the destination point\n    num_jumps = 0\n    num_steps = 0\n    \n    # Loop until the destination point is reached\n    while d > 0:\n        # Calculate the number of steps required to reach the destination point\n        num_steps += steps\n        \n        # Decrement the distance to move\n        d -= 1\n        \n        # Increment the number of jumps\n        num_jumps += 1\n    \n    return num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    jumps = 0\n    left, right = 0, steps\n    while left < right:\n        jumps += 1\n        left += 1\n        right = min(right, left + steps)\n        if left + d >= right:\n            return jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    # Step 1: Initialize variables\n    min_jumps = float('inf')\n    count = 0\n\n    # Step 2: Iterate through steps and check if we can reach the destination point\n    for i in range(steps):\n        if i >= d:\n            if i - d < min_jumps:\n                min_jumps = i - d\n                count = 1\n            elif i - d == min_jumps:\n                count += 1\n\n    # Step 3: Return the minimum number of jumps\n    return min_jumps if min_jumps!= float('inf') else -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    # calculating the number of jumps required\n    jumps = 0\n    steps -= 1\n    while steps > 0:\n        if steps >= d:\n            steps -= d\n            jumps += 1\n        else:\n            steps = 0\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    steps_taken = 0\n    start = (0, 0)\n    destination = (d, 0)\n\n    while steps_taken < steps:\n        steps_taken += 1\n\n        # Check if we've reached the destination point\n        if start == destination:\n            return jumps\n\n        # Check if we need to make a jump\n        left, right = max(start[0] - 1, 0), min(start[0] + 1, d)\n        up, down = max(start[1] - 1, 0), min(start[1] + 1, d)\n\n        if up == start[1] and down == start[1]:\n            # We need to make a jump if we're at a corner\n            jumps += 1\n\n        # Move forward in the current direction\n        if start[0] < d:\n            start = (start[0] + 1, start[1])\n        elif start[0] > 0:\n            start = (start[0] - 1, start[1])\n        elif start[1] < d:\n            start = (start[0], start[1] + 1)\n        else:\n            start = (start[0], start[1] - 1)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n\n    # initialize variables\n    steps = max(0, steps)  # ensure steps is a non-negative integer\n    if d < 0 or d > steps:  # ensure d is between 0 and steps\n        return -1\n\n    # calculate the number of jumps required for the given length\n    jumps = 0\n    i = 0\n    current_position = 0\n    while current_position <= d and i < steps:\n        current_position += steps\n        jumps += 1\n        i += 1\n\n    # check if d is reachable at all\n    if current_position > d and i == steps:\n        return jumps\n\n    # if d is not reachable, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Step 1: Initialize variables\n    current_x = 0\n    current_y = 0\n    jumps = 0\n\n    # Step 2: Calculate the distance to reach (d, 0)\n    distance = abs(d)\n\n    # Step 3: Calculate the number of jumps required\n    while current_y!= distance:\n        current_x += 1\n        current_y += current_x\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have same length.\")\n        return None\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must be of equal length.')\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError('Cannot divide by zero.')\n        nums1[i] = nums1[i] // nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists should have same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should have the same length\")\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have the same length\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isdigit():\n            nums.append(test_str[i])\n            i += 1\n        else:\n            i += 1\n    nums.reverse()\n    nums = ''.join(nums)\n    test_str = test_str.replace(nums, '', 1)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # initialize variables\n    digits = []\n    has_digits = False\n    \n    # iterate through the characters in the string\n    for char in test_str:\n        # if the character is a digit, add it to the digits list\n        if char.isdigit():\n            digits.append(char)\n            has_digits = True\n        # if the character is not a digit, but has already been seen, move it to the end of the string\n        elif has_digits:\n            test_str = test_str[:test_str.index(char)] + char + test_str[test_str.index(char)+1:]\n            has_digits = False\n    \n    # return the modified string with all numbers moved to the end\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list to store the numbers\n    num_list = []\n    # iterate through the characters in the string\n    for char in test_str:\n        # if the character is a number, append it to the number list\n        if char.isdigit():\n            num_list.append(char)\n        # otherwise, append the character to the string\n        else:\n            test_str = test_str + char\n    # join the number list into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = [char for char in test_str if char.isdigit()]\n    return test_str[:-len(nums)] + ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to store the numbers\n    num_str = \"\"\n    # loop through the characters in the input string\n    for char in test_str:\n        # if the character is a digit, append it to the number string\n        if char.isdigit():\n            num_str += char\n        # if the character is not a digit, append it to the end of the output string\n        else:\n            test_str += char\n    # return the modified string with numbers at the end\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    for i in range(len(num_list)):\n        test_str = test_str.replace(num_list[i], '')\n    return test_str + ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    # Initialize a variable to store the index of the last non-digit character\n    last_non_digit = len(test_str) - 1\n\n    # Loop through each character in the string\n    for i in range(len(test_str) - 1, -1, -1):\n        # Check if the current character is a digit\n        if test_str[i].isdigit():\n            # If it is, move it to the end of the string\n            test_str = test_str[:i] + test_str[i:]\n            # Update the index of the last non-digit character\n            last_non_digit = i\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to store the numbers\n    nums = ''\n\n    # loop through each character in the given string\n    for char in test_str:\n        # if the character is a number, add it to the nums string\n        if char.isdigit():\n            nums += char\n        # if the character is not a number, add it to the original string\n        else:\n            test_str = test_str.replace(char, '')\n\n    # return the original string with all numbers moved to the end\n    return test_str + nums"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            continue\n    num_str = ''.join(num_list)\n    test_str = test_str.replace(num_str, '')\n    test_str += num_str\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    max_size = 1\n    start = 0\n    \n    for i in range(1, n):\n        if a[i] % a[start] == 0:\n            dp[i] = dp[start] + 1\n            if dp[i] > max_size:\n                max_size = dp[i]\n                start = i\n        else:\n            start += 1\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in non-decreasing order\n    a.sort()\n    # initialize two pointers at the beginning and end of the list\n    start = 0\n    end = len(a) - 1\n    # initialize two variables to store the size of the largest subsets found so far\n    subset_size = 0\n    # initialize a variable to store the current size of the current subset\n    current_size = 0\n    # loop through the list using a while loop\n    while start <= end:\n        # add the current element to the current subset and increase the current size\n        current_size += 1\n        # check if the sum of the current element and the previous element is divisible by 2\n        if a[start] + a[end] % 2 == 0:\n            # if so, increment the subset size and move the pointers to the right\n            subset_size = max(subset_size, current_size)\n            start += 1\n            end -= 1\n        # if the sum is not divisible by 2, move the pointers to the right\n        else:\n            end -= 1\n    # return the size of the largest subset found\n    return subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 1\n    current_size = 1\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n    max_size = max(max_size, current_size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a dictionary to store the frequency of each element in the input list\n    freq = {}\n    for num in a:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # create a list to store the pair frequency as a tuple\n    pair_freq = []\n    for key in freq:\n        for i in range(freq[key]):\n            pair_freq.append((key, i))\n    \n    # sort the pair_freq list by frequency in descending order\n    pair_freq.sort(key=lambda x: x[1], reverse=True)\n    \n    # initialize the max_length to 0 and the current_subset to an empty list\n    max_length = 0\n    current_subset = []\n    \n    # loop through the sorted pair_freq list\n    for i in range(len(pair_freq)):\n        # add the current pair to the current_subset\n        current_subset.append(pair_freq[i][0])\n        \n        # check if the current subset is divisible by every other element in the list\n        divisible = True\n        for j in range(len(current_subset)):\n            if j!= i:\n                if pair_freq[j][0] % current_subset[j]!= 0:\n                    divisible = False\n                    break\n        \n        # if the current subset is divisible, update max_length\n        if divisible:\n            max_length = max(max_length, len(current_subset))\n        \n        # remove the current element from the current_subset to remove the pair\n        current_subset.pop()\n    \n    # return the max_length\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    # create a dictionary to store the count of numbers that are divisible by k\n    count_dict = {}\n    \n    # loop through the list of numbers\n    for num in a:\n        # find the largest multiple of k that is less than or equal to the current number\n        multiple = max(count_dict, key=lambda x: x*num)\n        \n        # increment the count of the multiple in the dictionary\n        if multiple:\n            count_dict[multiple] += 1\n        else:\n            count_dict[num] = 1\n    \n    # initialize variables to store the size of the largest subset and its members\n    max_size = 0\n    subset = []\n    \n    # loop through the dictionary to find the largest subset that is divisible by k\n    for multiple, count in count_dict.items():\n        # check if the subset is divisible by k\n        if multiple*count % k == 0:\n            # update the size of the largest subset and its members\n            if len(subset) < count:\n                subset = [multiple]*count\n            elif len(subset) == count:\n                subset.append(multiple)\n            max_size = max(max_size, len(subset))\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # sort the list in non-descending order\n    a.sort()\n    \n    # initialize variables for the largest subset and the sum of the largest subset\n    largest = 0\n    current_sum = 0\n    \n    # loop through the sorted list\n    for i in range(len(a)):\n        # check if the current element is divisible by the previous element\n        if a[i] % a[i-1] == 0:\n            # if it is, add it to the current sum and update the largest subset if necessary\n            current_sum += a[i]\n            largest = max(largest, current_sum)\n        # if the current element is not divisible by the previous element, start a new current sum\n        else:\n            current_sum = a[i]\n            \n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    # Find the maximum value in the list\n    max_val = max(a)\n    # Initialize an empty set to store the indices of the numbers that can be divided\n    subset = set()\n    # Initialize a variable to store the size of the largest subset\n    max_size = 0\n    # Iterate through the list and check if every pair can be divided\n    for i in range(len(a)):\n        # Check if the current value is divisible by the maximum value\n        if a[i] % max_val == 0:\n            # If yes, add the index of the current number to the subset\n            subset.add(i)\n            # Update the size of the largest subset if necessary\n            if len(subset) > max_size:\n                max_size = len(subset)\n    # Return the size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Check if the list is empty\n    if len(a) == 0:\n        return 0\n\n    # Initialize the size of the largest subset to be 1\n    largest_size = 1\n\n    # Initialize the largest subset to be the first element of the list\n    largest_subset = [a[0]]\n\n    # Loop through the rest of the list\n    for num in a[1:]:\n        # Check if the number is divisible by any of the elements in the largest subset\n        divisible = False\n        for subset_num in largest_subset:\n            if subset_num % num == 0:\n                divisible = True\n                break\n        # If the number is not divisible by any of the elements in the largest subset, add it to the subset\n        if not divisible:\n            largest_subset.append(num)\n        # Update the largest size if necessary\n        if len(largest_subset) > largest_size:\n            largest_size = len(largest_subset)\n\n    # Return the largest size of the subset\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize a dictionary to store the count of each number in the list\n    count_dict = {}\n    for num in a:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Initialize variables to keep track of the maximum length of the subset\n    max_length = 1\n    max_subset = [a[0]]\n    \n    # Iterate over the count dictionary\n    for key, value in count_dict.items():\n        # Find the subset that contains the key with value value\n        subset = []\n        while value > 0:\n            subset.append(key)\n            if key in count_dict:\n                value -= count_dict[key]\n                count_dict[key] = 0\n            else:\n                key = -1\n        # If the length of the subset is greater than the maximum length found so far, update the variables\n        if len(subset) > max_length:\n            max_length = len(subset)\n            max_subset = subset\n    \n    # Return the length of the largest subset found\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    subset = [0] * len(a)\n    \n    for num in a:\n        index = 0\n        while index < len(subset) and num % subset[index]!= 0:\n            index += 1\n        \n        if index == len(subset):\n            subset.append(num)\n            max_size = max(max_size, len(subset))\n        else:\n            subset[index] = num\n    \n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Calculate the median of two sorted lists of the same size.\n    \"\"\"\n    # Combine the two lists into a single sorted list\n    combined = sorted(arr1 + arr2)\n    # Calculate the index of the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (combined[mid - 1] + combined[mid]) / 2\n    else:\n        median = combined[mid]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    # Find the length of the two arrays\n    length = len(arr1)\n\n    # Merge the two arrays into a single array\n    merged_arr = arr1 + arr2\n\n    # Sort the merged array\n    merged_arr.sort()\n\n    # Calculate the middle index\n    middle_index = n // 2\n\n    # If the length of the array is odd, the median is the middle element\n    if n % 2 == 1:\n        median = merged_arr[middle_index]\n    # If the length of the array is even, the median is the average of the two middle elements\n    else:\n        median = (merged_arr[middle_index] + merged_arr[middle_index - 1]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Calculate the median\n    median = sorted_list[n]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    merged_list.sort()\n\n    # Get the middle element of the merged list\n    median = merged_list[n]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists into a single sorted list\n    merged = arr1 + arr2\n    # Sort the merged list\n    merged.sort()\n    # Return the median\n    if n % 2 == 0:\n        return (merged[n//2-1] + merged[n//2]) / 2\n    else:\n        return merged[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n\n    # Sort the array\n    arr.sort()\n\n    # Find the median index\n    median_index = n // 2\n\n    # If n is odd, then the median is in the middle element\n    if n % 2!= 0:\n        median = arr[median_index]\n    else:\n        # If n is even, then the median is the average of the two middle elements\n        median = (arr[median_index - 1] + arr[median_index]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted lists and sort it\n    arr = arr1 + arr2\n    arr.sort()\n\n    # Calculate the median\n    if n % 2 == 0:\n        # If n is even, then the median is the average of the two middle numbers\n        mid = n // 2\n        return (arr[mid-1] + arr[mid])/2\n    else:\n        # If n is odd, then the median is the middle number\n        return arr[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge both sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n    \n    # Find the median of the merged list\n    merged_list.sort()\n    if n % 2 == 0:\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        print(\"Both input lists must have the same size.\")\n        return None\n    \n    # Merge the two sorted lists into a single sorted list\n    merged_list = sorted(arr1 + arr2)\n\n    # Find the median\n    median = merged_list[n]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists\n    merged = merge(arr1, arr2)\n\n    # find the middle element of the merged list\n    mid = n // 2\n\n    if n % 2 == 0:\n        # find the median of the middle two elements\n        median = (merged[mid - 1] + merged[mid]) / 2\n    else:\n        # find the median of the middle element\n        median = merged[mid]\n\n    return median\n\n\ndef merge(arr1, arr2):\n    '''\n    Merge two sorted lists.\n    '''\n    merged = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    merged.extend(arr1[i:])\n    merged.extend(arr2[j:])\n    return merged"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): a list of numbers\n        n (int): the exponent\n\n    Returns:\n        list: the list of n-th powers\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is all uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    # Checking if the length of the list is less than 2\n    if len(newList) < 2:\n        print(\"The list should have at least 2 elements.\")\n        return None\n    \n    # Swapping the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n\n    # Interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    if length < 2:\n        return \"List should have at least 2 elements\"\n    \n    first = newList[0]\n    last = newList[length-1]\n    newList[0] = last\n    newList[length-1] = first\n    \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n\n    # Get the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n\n    # Interchange the first and last elements\n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Getting the length of the list\n    length = len(newList)\n\n    # Checking if the length of the list is greater than 1\n    if length > 1:\n        # Checking if the length of the list is odd or even\n        if length % 2 == 0:\n            # Swapping the first and last elements of the list\n            newList[0], newList[length-1] = newList[length-1], newList[0]\n        else:\n            # Swapping the first and second to last elements of the list\n            newList[0], newList[length-2] = newList[length-2], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    import math\n    \n    # formula to calculate the area of a triangle\n    def triangle_area_formula(a, b, c):\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # calculate the semi-perimeter of the triangle\n    def semi_perimeter(a, b, c):\n        return (a + b + c) / 2\n\n    # check if the triangle can be inscribed in a semicircle\n    def can_inscribe(a, b, c, r):\n        return (semi_perimeter(a, b, c) <= 2 * r)\n\n    # main function to find the area of the largest triangle\n    def largest_triangle(r):\n        a, b, c = r, 0, r\n        while not can_inscribe(a, b, c, r):\n            if can_inscribe(a, b, c + 1, r):\n                a = b\n                b = c + 1\n            else:\n                c = b\n                b = a\n        return triangle_area_formula(a, b, c)\n\n    # calculate the area of the largest triangle inscribed in a semicircle with radius r\n    return largest_triangle(r)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # Calculate the semi-perimeter of the circle\n    semi_perimeter = 2 * math.pi * r\n    \n    # Calculate the area of the smallest triangle that can be inscribed in the circle\n    area_1 = (semi_perimeter ** 2) / 4\n    \n    # Calculate the area of the largest triangle that can be inscribed in the circle\n    area_2 = math.pi * r ** 2\n    \n    # Return the maximum area\n    return max(area_1, area_2)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 4*r**2 / 3\n    area = math.sqrt(3*math.pi/2*r**2) * 2 * r**2 * math.cos(math.pi/3)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculating the semi-perimeter of the triangle\n    s = 2 * math.sqrt(3) * r\n    \n    # Calculating the area of the triangle\n    area = math.sqrt(s * (s - r) * (s - 2*r) * (s - 3*r))\n    \n    # Returning the area of the triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # finding the semi-perimeter\n    sp = math.pi * r * 2\n\n    # finding the area of the largest triangle\n    a = math.sqrt(sp)\n\n    # finding the area of the smallest triangle\n    b = math.sqrt(r * r + a * a)\n\n    # finding the area of the semi-circle\n    c = math.pi * r * r\n\n    # finding the area of the largest triangle that can be inscribed in the semicircle\n    largest_area = math.sqrt(c * (a ** 2 + b ** 2))\n\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # calculate semi-perimeter and area\n    s = 2 * r\n    a = math.pi * r * r\n    \n    # find largest triangle that can be inscribed in semicircle\n    area = s * (1 - math.sin(math.pi/s))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # define the function to find the area of a triangle with given sides\n    def triangle_area(a, b, c):\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # define the function to calculate the circumradius of a triangle with given sides\n    def circumradius(a, b, c):\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # function to find the area of the largest triangle inscribed in the semicircle with given radius r\n    def find_largest_triangle(r):\n        # find the circumradius of the largest triangle\n        a = 1\n        b = r - 1\n        c = 1\n        while b > 0:\n            if circumradius(a, b, c) > r:\n                break\n            a += 1\n            b -= 1\n        a -= 1\n        b += 1\n\n        # find the area of the largest triangle\n        area = triangle_area(a, b, c)\n        return area\n\n    # test the function\n    print(find_largest_triangle(10))  # output: 12.566370614359172"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    return (r * (r + 1) * (r + 2)) ** (1 / 2)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Formula to calculate the area of a triangle using Heron's formula\n    def herons_formula(a, b, c):\n        s = (a + b + c) / 2.0\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return area\n    \n    # Formula to calculate the semi-perimeter of a triangle using Heron's formula\n    def semi_perimeter(a, b, c):\n        area = herons_formula(a, b, c)\n        s = (a + b + c) / 2.0\n        semi_perimeter = area * (s-a) / (2*s)\n        return semi_perimeter\n    \n    # Find the semi-perimeter of the largest triangle\n    a, b, c = 0, r, 0\n    \n    # Check if the semi-perimeter is less than or equal to r\n    if semi_perimeter(a, b, c) <= r:\n        max_triangle = a, b, c\n        area = herons_formula(a, b, c)\n    else:\n        # If the semi-perimeter is greater than r, find the largest triangle that can be inscribed in a semicircle\n        a, b, c = 0, 0, r\n        \n        # Check if the semi-perimeter is less than or equal to r\n        if semi_perimeter(a, b, c) <= r:\n            max_triangle = a, b, c\n            area = herons_formula(a, b, c)\n        else:\n            # If the semi-perimeter is greater than r, find the largest triangle that can be inscribed in a semicircle\n            a, b, c = 0, r, 0\n            \n            # Check if the semi-perimeter is less than or equal to r\n            if semi_perimeter(a, b, c) <= r:\n                max_triangle = a, b, c\n                area = herons_formula(a, b, c)\n            else:\n                # If the semi-perimeter is greater than r, find the largest triangle that can be inscribed in a semicircle\n                a, b, c = r, 0, 0\n                \n                # Check if the semi-perimeter is less than or equal to r\n                if semi_perimeter(a, b, c) <= r:\n                    max_triangle = a, b, c\n                    area = herons_formula(a, b, c)\n                else:\n                    # If the semi-perimeter is greater than r, find the largest triangle that can be inscribed in a semicircle\n                    a, b, c = r, r, 0\n                    \n                    # Check if the semi-perimeter is less than or equal to r\n                    if semi_perimeter(a, b, c) <= r:\n                        max_triangle = a, b, c\n                        area = herons_formula(a, b, c)\n                    else:\n                        # If the semi-perimeter is greater than r, find the largest triangle that can be inscribed in a semicircle\n                        a, b, c = r, 0, r\n                        \n                        # Check if the semi-perimeter is less than or equal to r\n                        if semi_perimeter(a, b, c) <= r:\n                            max_triangle = a, b, c\n                            area = herons_formula(a, b, c)\n    \n    # Return the area of the largest triangle that can be inscribed in a semicircle\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int, optional): The starting index for the search. Defaults to 0.\n        end (int, optional): The ending index for the search. Defaults to None (i.e. until the end of the list).\n\n    Returns:\n        int: The smallest missing number in the sorted list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if i == array[i]:\n            return i+1\n\n    # If we reach here, it means that we have checked all numbers from start to end, but still haven't found any missing number\n    return len(array) + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a Python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int, optional): The starting index of the sub-array to consider. Defaults to 0.\n        end (int, optional): The ending index of the sub-array to consider. Defaults to None.\n\n    Returns:\n        int: The smallest missing number from the sub-array.\n    \"\"\"\n    if end is None:\n        end = len(array)\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    # Check if the input array is sorted\n    if start > 0 and array[start-1] >= array[start]:\n        return None\n\n    # Check if the input array is empty\n    if not array:\n        return None\n\n    # Check if the input array has only one element\n    if len(array) == 1:\n        if array[0]!= 1:\n            return 1\n        else:\n            return None\n\n    # Check if the input array has only two elements\n    if len(array) == 2:\n        if array[0]!= 1 or array[1]!= 2:\n            return 1\n        else:\n            return None\n\n    # Find the missing number in the array using binary search\n    def binary_search(array,start,end,target):\n        if start > end:\n            return None\n\n        mid = (start + end) // 2\n\n        if array[mid] == target:\n            return mid\n        elif array[mid] < target:\n            return binary_search(array,mid+1,end,target)\n        else:\n            return binary_search(array,start,mid-1,target)\n\n    missing = binary_search(array,start,end,array[-1] + 1)\n\n    if missing is None:\n        return None\n\n    # Return the missing number\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number in the list.\n\n    Parameters:\n    array (list): A sorted list of natural numbers.\n    start (int): An optional parameter to specify the starting index of the array. Default is 0.\n    end (int): An optional parameter to specify the ending index of the array. Default is None.\n\n    Returns:\n    int: The smallest missing number in the sorted array.\n\n    Example:\n    >>> find_First_Missing([1, 2, 3, 4, 5])\n    6\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if the array is empty or not\n    if not array or len(array) == 0:\n        return None\n\n    # If end is not given, set it as the length of the array\n    if end is None:\n        end = len(array)\n\n    # Initialize a variable to store the smallest missing number\n    missing_number = start\n\n    # Iterate through the array and check for the missing numbers\n    while start < end:\n        # Check if the missing number is present in the array\n        if array[start] == missing_number:\n            start += 1\n        else:\n            # If the missing number is not present, add 1 to the missing_number and continue the iteration\n            missing_number += 1\n            start = start + 1\n\n    # If the missing_number has not reached the end of the array, it means there are no missing numbers\n    if missing_number < end:\n        return None\n\n    return missing_number"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a list of natural numbers sorted in ascending order and returns the smallest missing number.\n    If no missing number is found, it returns None.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    for i in range(start,end+1):\n        if i not in array:\n            return i\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers and returns the smallest missing number.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int): The start index of the array to consider. Default is 0.\n        end (int): The end index of the array to consider. Default is None, which means consider the entire array.\n\n    Returns:\n        int: The smallest missing number in the sorted list.\n    \"\"\"\n\n    # If the start index is greater than the end index, return None\n    if start > end:\n        return None\n\n    # Initialize the smallest missing number to the start of the array\n    smallest_missing = start\n\n    # Iterate through the array, starting from the start index\n    for i in range(start, end + 1):\n        # If the current number is greater than the smallest missing number, update the smallest missing number\n        if i > smallest_missing:\n            smallest_missing = i\n\n    # If the smallest missing number is greater than the end of the array, return None\n    if smallest_missing > end:\n        return None\n\n    # Otherwise, return the smallest missing number\n    return smallest_missing\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    even_list = []\n    for num in lst:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list containing even numbers.\n    \"\"\"\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for number in list:\n        if number % 2 == 0:\n            result.append(number)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only even numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a list containing all even numbers from the original list.\n    '''\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if x > 0 and y > 0:\n        sub.append((x-1, y-1))\n    if x > 0:\n        sub.append((x-1, y))\n    if x > 0 and y < 4:\n        sub.append((x-1, y+1))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < 4:\n        sub.append((x, y+1))\n    if x < 4 and y > 0:\n        sub.append((x+1, y-1))\n    if x < 4:\n        sub.append((x+1, y))\n    if x < 4 and y < 4:\n        sub.append((x+1, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple as input and returns all the adjacent coordinates of that \n    coordinate tuple. The sublist argument is used to store the adjacent coordinates already \n    found.\n    '''\n    # initializing x, y coordinates\n    x, y = ele\n    \n    # initializing adjacent coordinates list\n    adj = []\n    \n    # checking if the current coordinate is the top left corner\n    if x == 0 and y == 0:\n        adj.append((x+1, y+1))\n        adj.append((x+1, y))\n        adj.append((x+1, y-1))\n        adj.append((x, y-1))\n        adj.append((x-1, y-1))\n        adj.append((x-1, y))\n        adj.append((x-1, y+1))\n        \n    # checking if the current coordinate is the top right corner\n    elif x == len(sub)-1 and y == 0:\n        adj.append((x-1, y+1))\n        adj.append((x-1, y))\n        adj.append((x-1, y-1))\n        adj.append((x, y-1))\n        adj.append((x+1, y-1))\n        adj.append((x+1, y))\n        adj.append((x+1, y+1))\n        \n    # checking if the current coordinate is the bottom left corner\n    elif x == 0 and y == len(sub[0])-1:\n        adj.append((x+1, y-1))\n        adj.append((x+1, y))\n        adj.append((x+1, y+1))\n        adj.append((x, y+1))\n        adj.append((x-1, y+1))\n        adj.append((x-1, y))\n        adj.append((x-1, y-1))\n        \n    # checking if the current coordinate is the bottom right corner\n    elif x == len(sub)-1 and y == len(sub[0])-1:\n        adj.append((x-1, y-1))\n        adj.append((x-1, y))\n        adj.append((x-1, y+1))\n        adj.append((x, y+1))\n        adj.append((x+1, y+1))\n        adj.append((x+1, y))\n        adj.append((x+1, y-1))\n        \n    # checking if the current coordinate is the left side\n    elif y == 0:\n        adj.append((x+1, y))\n        adj.append((x+1, y+1))\n        adj.append((x, y+1))\n        adj.append((x-1, y+1))\n        adj.append((x-1, y))\n        adj.append((x-1, y-1))\n        adj.append((x, y-1))\n        \n    # checking if the current coordinate is the right side\n    elif y == len(sub[0])-1:\n        adj.append((x-1, y))\n        adj.append((x-1, y-1))\n        adj.append((x, y-1))\n        adj.append((x+1, y-1))\n        adj.append((x+1, y))\n        adj.append((x+1, y+1))\n        adj.append((x, y+1))\n        \n    # checking if the current coordinate is the top side\n    elif x == 0:\n        adj.append((x+1, y))\n        adj.append((x+1, y+1))\n        adj.append((x+1, y+2))\n        adj.append((x, y+2))\n        adj.append((x-1, y+2))\n        adj.append((x-1, y+1))\n        adj.append((x-1, y))\n        \n    # checking if the current coordinate is the bottom side\n    elif x == len(sub)-1:\n        adj.append((x-1, y))\n        adj.append((x-1, y-1))\n        adj.append((x-1, y-2))\n        adj.append((x, y-2))\n        adj.append((x+1, y-2))\n        adj.append((x+1, y-1))\n        adj.append((x+1, y))\n        \n    # checking if the current coordinate is a corner\n    elif x == 0 and y == 1:\n        adj.append((x+1, y))\n        adj.append((x+1, y+1))\n        adj.append((x+2, y))\n        adj.append((x+2, y"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i!= x or j!= y:\n                adj.append((i, j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if y == 0:\n        return [(x, y), (x, y+1)]\n    elif y == len(grid)-1:\n        return [(x, y), (x, y-1)]\n    elif x == 0:\n        return [(x, y), (x+1, y)]\n    elif x == len(grid[0])-1:\n        return [(x, y), (x-1, y)]\n    else:\n        return [(x, y), (x+1, y), (x, y+1), (x-1, y), (x, y-1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = []\n    if isinstance(ele, tuple):\n        if len(ele) == 2:\n            sub.append(ele)\n        if len(ele) == 3:\n            sub.append((ele[0], ele[1]))\n            sub.append((ele[0], ele[2]))\n            sub.append((ele[1], ele[2]))\n        if len(ele) == 4:\n            sub.append((ele[0], ele[1]))\n            sub.append((ele[0], ele[2]))\n            sub.append((ele[0], ele[3]))\n            sub.append((ele[1], ele[2]))\n            sub.append((ele[1], ele[3]))\n            sub.append((ele[2], ele[3]))\n    elif isinstance(ele, list):\n        for i in ele:\n            adjac(i, sub)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    x, y = ele\n    adj = []\n    if x-1 >= 0 and (x, y) not in sub:\n        adj.append((x-1, y))\n    if x+1 < n and (x, y) not in sub:\n        adj.append((x+1, y))\n    if y-1 >= 0 and (x, y-1) not in sub:\n        adj.append((x, y-1))\n    if y+1 < m and (x, y+1) not in sub:\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    if row - 1 >= 0:\n        sub.append((row - 1, col))\n    if row + 1 < n:\n        sub.append((row + 1, col))\n    if col - 1 >= 0:\n        sub.append((row, col - 1))\n    if col + 1 < m:\n        sub.append((row, col + 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x-1 >= 0:\n        adj.append((x-1, y))\n    if x+1 < len(grid):\n        adj.append((x+1, y))\n    if y-1 >= 0:\n        adj.append((x, y-1))\n    if y+1 < len(grid[0]):\n        adj.append((x, y+1))\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0 and y > 0:\n        adj.append((x-1,y-1))\n    if x > 0 and y < 9:\n        adj.append((x-1,y+1))\n    if x < 9 and y > 0:\n        adj.append((x+1,y-1))\n    if x < 9 and y < 9:\n        adj.append((x+1,y+1))\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Initialize an empty list to store the adjacent coordinates\n    adj = []\n\n    # Extract the x and y coordinates of the given element\n    x, y = ele\n    \n    # Check the four adjacent tiles\n    if y - 1 >= 0:\n        adj.append((x, y - 1))\n    if y + 1 < len(sub):\n        adj.append((x, y + 1))\n    if x - 1 >= 0:\n        adj.append((x - 1, y))\n    if x + 1 < len(sub[0]):\n        adj.append((x + 1, y))\n\n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert spaces to underscores\n    text = text.replace(' ', '_')\n    # Convert underscores to spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert all whitespace characters to underscores\n    text = text.replace(\" \", \"_\")\n    # convert all underscores to spaces\n    text = text.replace(\"_\", \" \")\n    # return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in text:\n        if i == \" \":\n            new_text += \"_\"\n        elif i == \"_\":\n            new_text += \" \"\n        else:\n            new_text += i\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    # replace spaces with underscores\n    text = text.replace(' ', '_')\n    # replace underscores with spaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    # Initialize an empty list to store non-zero numbers\n    non_zero_list = []\n\n    # Iterate over each number in the input list\n    for num in num_list:\n\n        # If the number is not zero, append it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # Copy the non_zero_list to the input list, starting from index 0\n    for i in range(len(non_zero_list)):\n        num_list[i] = non_zero_list[i]\n\n    # Delete the non_zero_list to free up memory\n    del non_zero_list\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            # move current zero to the end of the list\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            # reduce length of list by 1\n            num_list.pop()\n        else:\n            # increment index for next non-zero element\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list.pop(zero_index)\n        num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n\n    for i in range(len(num_list)-1, -1, -1):\n        if i in zero_index:\n            del num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            break\n        else:\n            i += 1\n    while i < len(num_list):\n        num_list[i], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[i]\n        i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    # Initialize two pointers: one at the beginning and one at the end of the list.\n    i = 0\n    j = len(num_list) - 1\n\n    # Loop through the list until j is less than or equal to i.\n    while j >= i:\n\n        # If the current element at index j is zero, swap it with the last element at index i.\n        if num_list[j] == 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n\n            # Increment the value of i, which is where the zero has moved to.\n            i += 1\n\n            # Decrement the value of j, which is where the zero is currently at.\n            j -= 1\n        else:\n            # If the current element at index j is not zero, decrement j.\n            j -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            zero_count += 1\n    print(\"The number of zeroes moved to the end is:\", zero_count)\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[i+n]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[n-1-i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Given a list of numbers, find the sum of their xor of all pairs.\n\n    Args:\n        arr: list of integers\n        n: number of elements in the list\n\n    Returns:\n        int: the sum of xor of all pairs\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        return arr[0] ^ pair_xor_Sum(arr[1:], n-1)"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # xor function\n    def xor(a,b):\n        return (a^b)\n    # sum function\n    def sum(arr):\n        return sum(arr)\n    \n    # initialize sum and xor_sum variables\n    xor_sum = 0\n    sum_arr = sum(arr)\n    \n    # loop through the list\n    for i in range(n):\n        # calculate xor of current element and previous xor_sum\n        xor_sum = xor(xor_sum,arr[i])\n        # add xor_sum to sum_arr\n        sum_arr = sum_arr + xor_sum\n        \n    return sum_arr"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n        for j in range(i + 1, n):\n            xor_sum ^= arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR of all pairs\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) :\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    heap = [None] * len(iterable)\n    for i, item in enumerate(iterable):\n        heap[i] = item\n        hq.heapify(heap)\n    \n    # sort the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    \n    # convert the sorted list back to a list\n    sorted_list = [item for item in result if item is not None]\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a min-heap\n    heap = hq.nsmallest(len(iterable), iterable)\n    \n    # Create an empty list to store the sorted elements\n    result = []\n    \n    # Iterate through the min-heap and add elements to the result list\n    while heap:\n        result.append(heap[0])\n        heapq.heappop(heap)\n    \n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)  # convert list to heap\n\n    while iterable:\n        yield hq.heappop(iterable)  # remove and yield smallest element from heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    data = list(iterable)\n\n    # Build a max heap from the list\n    for i in range(len(data) // 2 - 1, -1, -1):\n        hq.heapify(data, i, len(data))\n\n    # Extract the maximum element from the heap and add it to the end of the sorted list\n    for i in range(len(data) - 1, 0, -1):\n        hq.heapify(data, 0, i)\n        data[0], data[i] = data[i], data[0]\n\n    return data"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Create a min-heap from the input iterable\n    heapq.heapify(iterable)\n\n    # Sort the heap using a list comprehension and remove the first element\n    sorted_list = [heapq.heappop(iterable) for _ in range(len(iterable))]\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    n = len(iterable)\n    heap = [0] * n\n    for i in range(n):\n        heap[i] = iterable[i]\n    for i in range(n//2-1, -1, -1):\n        hq.heapify(heap, i, n)\n    for i in range(n-1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        hq.heapify(heap, 0, i)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n\n    for i in range(n-1, 0, -1):\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        hq.heapify(iterable, 0, i)\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check if the sale amount is greater than the actual cost\n    if sale_amount > actual_cost:\n        return \"No profit and no loss\"\n\n    # If the sale amount is equal to the actual cost, calculate the profit\n    else:\n        profit = sale_amount - actual_cost\n        return \"Profit: \" + str(profit) + \" units\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n\n    Args:\n        actual_cost (float): The actual cost of the sale.\n        sale_amount (float): The amount being sold.\n\n    Returns:\n        bool: True if the given amount has no profit and no loss, False otherwise.\n    \"\"\"\n\n    if sale_amount <= actual_cost:\n        # If the sale amount is less than or equal to the actual cost, there is no profit and no loss\n        return True\n    else:\n        # If the sale amount is greater than the actual cost, there is a profit and no loss\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    This function checks whether the given amount has no profit and no loss.\n    \n    Input:\n    actual_cost - Actual cost of the item in terms of money.\n    sale_amount - Amount of the item sold in terms of money.\n    \n    Output:\n    Returns True if the given amount has no profit and no loss, False otherwise.\n    '''\n    \n    if actual_cost <= sale_amount:\n        return False\n    \n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    if profit <= 0 or loss <= 0:\n        return True\n    \n    return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # If actual cost is greater than sale amount, it has no profit\n    if actual_cost > sale_amount:\n        return True\n    # If actual cost is less than or equal to sale amount, it has no loss\n    elif actual_cost <= sale_amount:\n        return True\n    # If there is no profit or loss, return False\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    # Check if the actual cost is greater than the sale amount\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Input:\n    actual_cost: the actual cost of the sale \n    sale_amount: the amount of the sale\n    \n    Output:\n    True if the sale has no profit and no loss, else False\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return True\n    elif actual_cost == sale_amount:\n        return True\n    elif sale_amount > actual_cost:\n        return False\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    \"\"\"\n    This function takes two parameters, actual_cost and sale_amount, representing the actual cost of a good sold and the amount sold.\n    The function returns True if the sale has no profit and no loss, and False otherwise.\n    \"\"\"\n    if actual_cost >= sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return False\n    else:\n        profit = sale_amount - actual_cost\n        if profit > 0:\n            return False\n        else:\n            loss = actual_cost - sale_amount\n            if loss > 0:\n                return False\n            else:\n                return True"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        return \"Invalid input, wind velocity must be greater than 0\"\n    if t <= 0:\n        return \"Invalid input, temperature must be greater than 0\"\n    if t > 20:\n        return \"Invalid input, temperature must be less than or equal to 20\"\n\n    # Convert temperature to fahrenheit\n    t = (t * 9/5) + 32\n\n    # Convert wind speed to miles per hour\n    v = v * 1.60934  # convert to miles per hour\n\n    # Calculate wind chill index\n    wc_index = 35.74 + 0.6215 * t - 35.75 * math.exp((17.625 * t) / (t + 243.5)) + 0.4275 * v\n\n    # Round wind chill index to the nearest integer\n    wc_index = math.ceil(wc_index)\n\n    # Convert wind chill index back to celsius\n    wc_index = (wc_index - 32) * 5/9\n\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # Calculate the wind chill index\n    wc = 35.74 + (0.6215 * v) + (t_f - 32) * 0.0065\n    \n    # Round the wind chill index to the nearest integer\n    wc_int = int(wc + 0.5)\n    \n    # Return the wind chill index rounded to the nearest integer\n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_speed_in_mps = v * 1000 # Convert from km/h to meters per second\n    temperature_in_celsius = t - 273.15 # Convert from Celsius to Kelvin\n    \n    # Calculate the constant term\n    constant_term = 1.5 * math.log(temperature_in_celsius) + 32\n    \n    # Calculate the power term\n    power_term = (13.12 + 0.6215 * temperature_in_celsius) * temperature_in_celsius\n    \n    # Calculate the combined term\n    combined_term = math.sqrt(wind_speed_in_mps) * (constant_term + power_term)\n    \n    # Calculate the wind chill index\n    wind_chill_index = round(combined_term)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    tc = (t - 32) * 5/9\n    w = v * math.cos(math.radians(t))\n    wc = 35.74 + 0.6215 * tc - 35.75 * math.exp((17.625 * tc)/(t + 243.5)) + 0.4275 * w\n    wc_rounded = round(wc)\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    wind_chill_index = round(35.74 + 0.6215*t - 35.75*math.log(v)/10)\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index (WCI) rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n\n    The WCI is defined as:\n    WCI = floor(13.12 + 0.6215*T - 11.37*V + 0.3965*T*V + 0.14*T^2 - 0.0128*V^2)\n\n    where T is the temperature in Celsius, V is the wind velocity in km/h, and floor() is used to round the result down to the nearest integer.\n\n    If T is less than or equal to 0, the function returns None. If V is less than or equal to 0, the function returns 0.\n    '''\n\n    if t <= 0 or v <= 0:\n        return None\n    \n    # Convert to celsius\n    c = (t - 32) * 5/9\n    \n    # Calculate WCI\n    wci = math.floor(13.12 + 0.6215*c - 11.37*v + 0.3965*c*v + 0.14*c**2 - 0.0128*v**2)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from Celsius to Kelvin\n    k = t + 273.15\n\n    # Calculate the dew point temperature\n    dp = 13.12 + 0.6215 * v + 17.67 * k / (k + 243.12)\n\n    # Calculate the wind chill index\n    wc = 0.01 * (v - 11.3) * math.log(dp)\n\n    # Round the wind chill index to the nearest integer\n    wc = math.ceil(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to Kelvin\n    k = t + 273.15\n\n    # Calculate the dew point temperature\n    D = math.exp((17.67*k)/(k-243.12)) - 273.15\n\n    # Calculate the wind chill index\n    wc = 13.12 + 0.6215*v + 10.4*(D-273.15)/(D-10.2)\n\n    # Round the wind chill index to the nearest integer\n    wc = int(math.ceil(wc))\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v > 10:\n        chill = (25 - ((13.12 + (0.6215 * t)) / 5.257 * (t + 273.15 - 0.0065 * v ** 2))) / (1.34 + 0.114 * (t - 273.15) ** 0.2)\n        return round(chill)\n    else:\n        return -99999"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return math.ceil(35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v))"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper(): # Check if the first character is uppercase\n            continue # Skip to the next name\n        else:\n            result += len(name) # Add the length of the name to the result\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the total length of names\n    total_length = 0\n    \n    # Iterate through each name in the list of names\n    for name in sample_names:\n        # Remove the first character of the name if it's a lowercase letter\n        if name[0].islower():\n            name = name[1:]\n        # Add the length of the name to the total length\n        total_length += len(name)\n    \n    # Return the total length of names after removing the lowercase names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_name_lengths = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_name_lengths += len(name)\n    return sum_name_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of the lengths of the names\n    length_sum = 0\n    \n    # loop through each name in the list\n    for name in sample_names:\n        # if the name starts with a lowercase letter, skip it and move on to the next name\n        if name[0].islower():\n            continue\n        # otherwise, add the length of the name to the sum\n        else:\n            length_sum += len(name)\n    \n    # return the sum of the lengths of the names after removing those that start with a lowercase letter\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names that start with a lowercase letter\n    start_with_lower = []\n    # loop through the list of names\n    for name in sample_names:\n        # if the name starts with a lowercase letter, add it to the start_with_lower list\n        if name[0].islower():\n            start_with_lower.append(name)\n    # sum the lengths of the names that start with a lowercase letter\n    return sum([len(name) for name in start_with_lower])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define a list to store the names without the lowercase letters\n    clean_names = []\n    # Loop over the names in the list\n    for name in sample_names:\n        # Check if the first letter of the name is a lowercase letter\n        if name[0].islower():\n            # If it is, do nothing and move on to the next name\n            continue\n        # If the name does not start with a lowercase letter, add it to the clean_names list\n        clean_names.append(name)\n    # Sum the lengths of the names in the clean_names list\n    total_length = sum([len(name) for name in clean_names])\n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum of the lengths of names as 0\n    total_length = 0\n    # Loop through each name in the list of names\n    for name in sample_names:\n        # Remove the name starting with a lowercase letter\n        if name[0].islower():\n            continue\n        # Add the length of the remaining name to the total\n        total_length += len(name)\n    # Return the total length of all names after removing the starting lowercase letters\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if not name[0].islower()]\n    total_len = sum([len(name) for name in names])\n    return total_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Create a pattern to match any parenthesis enclosed word\n    pattern = r'\\((.*?)\\)'\n    # Use re.sub() to replace all parenthesis enclosed words with empty string\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression to find all the parenthesis and what is inbetween them\n    pattern = re.compile(r'\\((.*?)\\)')\n    # Use the findall() function to find all the parenthesis and what is inbetween them\n    matches = pattern.findall(items)\n    # Loop through the matches and remove the parenthesis and what is inbetween them from the string\n    for match in matches:\n        items = items.replace('(' + match + ')', '')\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)' # matches any sequence of characters between parentheses\n    result = re.sub(pattern, '', items) # removes the matched characters\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^\\)]+\\)' # pattern to match parenthesis\n    return re.sub(pattern, '', items) # remove matched parenthesis"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]+\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    This function takes a string of items and removes the parenthesis and what's inside them.\n    For example, if the input is \"a(b)c(d)e\" then the output should be \"abcde\".\n    \"\"\"\n\n    # Remove the parenthesis using regular expressions\n    pattern = r'\\([^()]*\\)'\n    items = re.sub(pattern, '', items)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis and what is inbetween them from a string.\n\n    Parameters:\n    items (str): The string containing the parenthesis to be removed.\n\n    Returns:\n    str: The string without the parenthesis.\n    '''\n    # Define a regular expression pattern for matching parenthesis\n    pattern = r'\\((.*?)\\)'\n\n    # Use the re.sub() function to remove the parenthesis from the string\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return n*(n+1)//2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += i * (2 * i - 1)\n    return count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n\n\ndef nth_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n) - is_nonagonal(n-1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Base case: if n is less than 2, return n * (n-1)\n    if n < 2: \n        return n * (n-1)\n    else:\n        # Initialize variables to store the previous two nonagonal numbers\n        prev_nonagonal = 1\n        curr_nonagonal = 2\n        \n        # Loop through the range of numbers from 2 to n\n        for i in range(2, n+1):\n            \n            # Calculate the next nonagonal number\n            next_nonagonal = 2 * curr_nonagonal - prev_nonagonal\n            \n            # Update the previous and current nonagonal numbers\n            prev_nonagonal = curr_nonagonal\n            curr_nonagonal = next_nonagonal\n            \n        return curr_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        return ((n * (n+1)) // 2) - (n * (n+1) // 2)\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        return \"n should be a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        nonagonal_number = (n * (n - 1)) / 2\n        return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the first nonagonal number as 1\n    nonagonal = 1\n\n    # loop for n-1 nonagonal numbers\n    for i in range(1, n):\n        # add the current nonagonal number to the sum of previous two nonagonal numbers\n        nonagonal = nonagonal + (i*2) + (i*3)\n\n    # return the nth nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return (n * (n - 1)) // 2\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Function to calculate the nth nonagonal number\n    def nth_nonagonal(n):\n        return (n*(n+1))//2\n    \n    # Calculate the nth nonagonal number\n    nth = nth_nonagonal(n)\n    \n    # Return the nth nonagonal number\n    return nth"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 2:\n        return None\n    else:\n        nonagonal_num = 0\n        for i in range(1, n+1):\n            nonagonal_num += i * (n-i)\n        return nonagonal_num"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'[a-zA-Z]+[zZ][a-zA-Z]*'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(word_pattern, text)\n\n    for match in matches:\n        if len(match) > 2 and match[0] == 'z' and match[-1] == 'z':\n            print(f'The word \"{match}\" contains \"z\" at the start and end')\n        else:\n            print(f'The word \"{match}\" does not contain \"z\" at the start and end')"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            if 'z' in match[1:-1]:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ]\\w*\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    return re.search(pattern, text) is not None\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = re.sub(r'^\\W+', '', text) # Remove leading non-word characters\n    text = re.sub(r'\\W+$', '', text) # Remove trailing non-word characters\n    words = text.split()\n    for i, word in enumerate(words):\n        if word.lower() == 'z':\n            if i == 0 or i == len(words)-1: # Check if word is at start or end of sentence\n                print(f'Found word \"{word}\" at the start or end of a sentence.')\n            elif i == (len(words)//2)-1 or i == (len(words)//2)+1: # Check if word is in the middle of the sentence\n                print(f'Found word \"{word}\" in the middle of a sentence.')\n            else: # If word is neither start nor end, it must be at the end of the sentence\n                print(f'Found word \"{word}\" at the end of a sentence.')\n    return\n\ntext = input(\"Enter a string: \")\ntext_match_wordz_middle(text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = re.sub(r'\\b\\w+\\b', '', text)\n    if re.search(r'\\bz\\b', text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression pattern to match a word that contains 'z'\n    pattern = r'\\b[a-zA-Z]+z\\b'\n\n    # Find all the words in the text that match the pattern\n    matches = re.findall(pattern, text)\n\n    # Check if there are any matches\n    if matches:\n        # Return the word that contains 'z', except at the start and end of the word\n        return matches[0][1:-1]\n    else:\n        # Return None if there are no matches\n        return None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+[zZ][a-zA-Z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create a new array to store the reversed elements\n    output = []\n    # Initialize the reverse pointer to the end of the array\n    reverse_pointer = len(input) - 1\n    # Iterate through the input array from the first element upto the k-th element\n    for i in range(k):\n        # Append the element at the current pointer to the output array\n        output.append(input[i])\n        # Decrement the reverse pointer\n        reverse_pointer -= 1\n    # Iterate through the input array from the k-th element upto the end of the array\n    for i in range(k, len(input)):\n        # Append the element at the current pointer to the output array\n        output.append(input[i])\n        # Increment the reverse pointer\n        reverse_pointer += 1\n    # Return the reversed output array\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements of the array\n    input[:k] = reversed(input[:k])\n    \n    # Reverse the remaining elements of the array\n    input[k:] = reversed(input[k:])\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from index 0 to k-1\n    input = input[:k][::-1] + input[k:]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from 0 to k-1\n    for i in range(k): \n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n\n    # Reverse the array from k to len(input)-1\n    for i in range(k, len(input)): \n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Get the length of the array\n    n = len(input)\n    # Get the index of the given position\n    index = k-1\n    # Initialize a variable to keep track of the position\n    pos = 0\n    # Reverse the array from the given position to the last element\n    while pos < index:\n        input[pos], input[index] = input[index], input[pos]\n        pos += 1\n        index -= 1\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the start to the k-1 index\n    input[0:k] = input[0:k][::-1]\n    # Reverse the array from the k-1 index to the end\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    start = 0\n    end = k-1\n\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    return input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # calculate the length of the array\n    n = len(input)\n    # check if the k is within the range of the array\n    if k > n:\n        print(\"Error: k is greater than the length of the array.\")\n        return\n    elif k < 1:\n        print(\"Error: k is less than 1. The array is not reversed.\")\n        return\n    # reverse the array from k-1 to n-1\n    for i in range(k-1, n-1, -1):\n        input[i], input[n-i] = input[n-i], input[i]\n    print(\"The reversed array is:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        temp = input[i]\n        input[i] = input[n-i-1]\n        input[n-i-1] = temp\n    # Reverse the array from k to n-1\n    for i in range(k, n//2):\n        temp = input[i]\n        input[i] = input[n-i-1]\n        input[n-i-1] = temp"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # reverse the first k elements of the array\n    for i in range(k):\n        input[i], input[-1-i] = input[-1-i], input[i]\n\n    # reverse the remaining elements of the array\n    for i in range(k, len(input)//2):\n        input[i], input[-1-i] = input[-1-i], input[i]\n\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + tuple(test_dict.values())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a list of tuples\n    test_list = list(test_dict.items())\n    # Join the list of tuples into a tuple\n    new_tuple = tuple(test_tup + test_list)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a tuple\n    test_dict = tuple(test_dict.items())\n    # Concatenate the tuple and the dictionary\n    test_tuple = test_tup + test_dict\n    # Return the modified tuple\n    return test_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert test_dict to a list of tuples to add to test_tup\n    dict_as_list = list(test_dict.items())\n    # Add the list of tuples to test_tup and return the result\n    return test_tup + tuple(dict_as_list)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Check if the input is a tuple\n    if type(test_tup)!= tuple:\n        print(\"Input is not a tuple\")\n        return\n    \n    # Create a new dictionary with the values of the input dictionary\n    new_dict = {k:test_dict[k] for k in test_dict.keys()}\n    \n    # Add the new dictionary to the input tuple\n    new_tuple = test_tup + (new_dict,)\n    \n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + (test_dict,))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of key-value pairs\n    key_value_pairs = list(test_dict.items())\n    # Append the key-value pairs to the tuple\n    new_tup = tuple(test_tup) + key_value_pairs\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # add the dictionary to the tuple\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # concatenate the tuple with the dictionary\n    new_tuple = tuple(test_tup + list(test_dict.items()))\n    return new_tuple"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[float('-inf') for _ in range(N)] for _ in range(N)]\n    dp[0][0] = 0\n    for i in range(1, N):\n        dp[i][0] = max(dp[i][0], cost[0][i])\n    for j in range(1, N):\n        dp[0][j] = max(dp[0][j], cost[j][0])\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j] + cost[i][j], dp[i][j-1] + cost[i][j])\n    return dp[N-1][N-1]"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False] * N for _ in range(N)]\n    max_avg = float('-inf')\n    max_path = None\n    \n    def dfs(i, j, path, total_cost):\n        if i == N-1 and j == N-1:\n            avg = total_cost / (i+1)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path.copy()\n            return\n        \n        if not visited[i][j]:\n            visited[i][j] = True\n            dfs(i+1, j, path+[(i,j)], total_cost+cost[i][j])\n            visited[i][j] = False\n            dfs(i, j+1, path+[(i,j)], total_cost+cost[i][j])\n    \n    dfs(0, 0, [(0,0)], 0)\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Create a copy of the given matrix to avoid modifying the original matrix\n    cost = [[x for x in row] for row in cost]\n    \n    # Function to check if the current cell can be visited in the path\n    def can_visit(i, j):\n        # Check if the current cell is not already visited\n        if cost[i][j] == float('inf'):\n            return False\n        \n        # Check if the current cell has not been visited before\n        if cost[i][j] == float('-inf'):\n            return True\n        \n        # If the current cell has been visited before, check if the current cell can be visited in the path\n        if j+1 < len(cost[i]) and can_visit(i, j+1):\n            return True\n        if i+1 < len(cost) and can_visit(i+1, j):\n            return True\n        \n        # If the current cell cannot be visited in the path, mark it as visited\n        cost[i][j] = float('inf')\n        return False\n    \n    # Initialize the maximum average and the maximum path\n    max_avg = float('-inf')\n    max_path = None\n    \n    # Loop through all cells in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if can_visit(i, j):\n                # Compute the total cost and the number of cells visited in the path\n                total_cost = cost[i][j]\n                num_cells = 1\n                \n                # Check all possible paths starting from the current cell\n                if j+1 < len(cost[i]) and can_visit(i, j+1):\n                    total_cost += cost[i][j+1]\n                    num_cells += 1\n                if i+1 < len(cost) and can_visit(i+1, j):\n                    total_cost += cost[i+1][j]\n                    num_cells += 1\n                if j+1 < len(cost[i]) and i+1 < len(cost) and can_visit(i, j+1) and can_visit(i+1, j):\n                    total_cost += cost[i][j+1] + cost[i+1][j]\n                    num_cells += 2\n                    \n                # Update the maximum average and the maximum path if the current average is greater than the current maximum average\n                if total_cost / num_cells > max_avg:\n                    max_avg = total_cost / num_cells\n                    max_path = (i, j)\n    \n    # Return the maximum average and the maximum path\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n\n    # Find the maximum average of any path from top-left cell\n    max_path_avg = float('-inf')\n    for i in range(n):\n        max_path_avg = max(max_path_avg, sum(cost[0][i:])/i+sum(cost[i][j] for j in range(n)))\n\n    # Find the maximum average of any path from any other cell\n    for i in range(n):\n        for j in range(n):\n            if j == n-1:\n                continue\n            if i == n-1:\n                max_path_avg = max(max_path_avg, sum(cost[0][j]) + sum(cost[i][j]) + sum(cost[i+1][j])/2)\n            else:\n                max_path_avg = max(max_path_avg, sum(cost[i][j]) + sum(cost[i+1][j]) + sum(cost[i+1][j+1])/3)\n\n    return max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    max_avg = float('-inf')\n    \n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if i == n-1 and j == n-1:\n                avg = dp[i][j] / (i+1)\n                max_avg = max(max_avg, avg)\n                \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def max_average_path(cost, i, j, path_cost, path_length):\n        if i == N-1 and j == N-1:\n            path_cost.append(cost[i][j])\n            return path_cost, path_length\n        \n        if i < N-1:\n            right_cost, right_length = max_average_path(cost, i+1, j, path_cost, path_length)\n            down_cost, down_length = max_average_path(cost, i, j+1, path_cost, path_length)\n        \n        if i > 0 and j > 0:\n            left_cost, left_length = max_average_path(cost, i-1, j, path_cost, path_length)\n            up_cost, up_length = max_average_path(cost, i, j-1, path_cost, path_length)\n        \n        max_avg_cost = max(right_cost, down_cost, left_cost, up_cost)\n        max_avg_length = max(right_length, down_length, left_length, up_length)\n        \n        if max_avg_cost == right_cost and right_cost!= down_cost and right_cost!= left_cost and right_cost!= up_cost:\n            max_avg_cost = down_cost\n            max_avg_length = down_length\n        elif max_avg_cost == down_cost and down_cost!= left_cost and down_cost!= up_cost:\n            max_avg_cost = left_cost\n            max_avg_length = left_length\n        elif max_avg_cost == left_cost and left_cost!= up_cost:\n            max_avg_cost = up_cost\n            max_avg_length = up_length\n        \n        return max_avg_cost, max_avg_length\n    \n    N = len(cost)\n    max_avg_cost, max_avg_length = max_average_path(cost, 0, 0, [], 0)\n    return max_avg_cost / max_avg_length"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Calculate the total cost and number of cells\n    total_cost = sum([sum(row) for row in cost])\n    num_cells = len(cost) * len(cost[0])\n\n    # Initialize variables for max average and current average\n    max_avg = 0\n    curr_avg = 0\n\n    # Iterate through all possible paths and calculate the average\n    for i in range(num_cells):\n        # Find the row and column of the current cell\n        row = i // len(cost)\n        col = i % len(cost[0])\n\n        # Check if this cell is part of the path\n        if (row, col) == (len(cost)-1, len(cost[0])-1):\n            curr_avg = total_cost / num_cells\n        else:\n            # Calculate the cost of moving to this cell\n            move_cost = cost[row+1][col] if (row+1) < len(cost) else 0\n            move_cost += cost[row][col+1] if (col+1) < len(cost[0]) else 0\n\n            # Add the cost to the current average\n            curr_avg += move_cost\n\n        # Update the maximum average if the current average is greater\n        if curr_avg > max_avg:\n            max_avg = curr_avg\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    dp = [[0]*(N+1) for _ in range(N+1)]\n    max_avg = 0\n    \n    for i in range(N+1):\n        dp[i][0] = 0\n    for j in range(N+1):\n        dp[0][j] = 0\n    \n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i == j:\n                dp[i][j] = cost[i-1][j-1]\n            elif i < j:\n                dp[i][j] = dp[i][j-1] + cost[i-1][j-1]\n            else:\n                dp[i][j] = dp[i-1][j] + cost[i-1][j-1]\n            \n            max_avg = max(max_avg, dp[i][j])\n    \n    return max_avg/N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables to store the maximum average and the total cost of the paths\n    max_avg = float('-inf')\n    total_cost = 0\n\n    # Iterate through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Check if this cell is the final cell\n            if i == len(cost) - 1 and j == len(cost[i]) - 1:\n                # If it is, then add the cost of the path to the total cost and update the maximum average if necessary\n                total_cost += cost[i][j]\n                max_avg = max(max_avg, total_cost / (i + j + 1))\n            else:\n                # If it's not, then expand the path to the next possible cell and recursively check if it has a higher average\n                total_cost += cost[i][j]\n                if j < len(cost[i]) - 1:\n                    next_cell = [cost[i][j+1], cost[i+1][j+1]]\n                else:\n                    next_cell = [cost[i+1][j], cost[i+1][j-1]]\n                max_avg = max(max_avg, maxAverageOfPath(next_cell) + total_cost / (i + j + 1))\n\n    # Return the maximum average\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n\n    # Create a copy of the cost matrix to work with\n    cost_matrix = [[0] * N for i in range(N)]\n    for i in range(N):\n        for j in range(N):\n            cost_matrix[i][j] = cost[i][j]\n\n    # Initialize a list to store the maximum average of any path\n    max_avg = -float('inf')\n\n    # Iterate over all possible starting points\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n\n            # Compute the maximum average of any path from the current point\n            current_path = [(i, j)]\n            current_avg = cost_matrix[i][j]\n            current_sum = cost_matrix[i][j]\n            current_count = 1\n\n            # Move right or down if possible, until we reach the bottom right corner\n            while current_path[-1][0] < N-1 and current_path[-1][1] < N-1:\n                if current_path[-1][0] == N-1 and current_path[-1][1] == N-1:\n                    break\n\n                if current_path[-1][0] == N-1:\n                    current_path[-1] = (current_path[-1][0], current_path[-1][1]+1)\n                else:\n                    current_path[-1] = (current_path[-1][0]+1, current_path[-1][1])\n\n                next_cell = current_path[-1]\n                if cost_matrix[next_cell[0]][next_cell[1]] == 0:\n                    current_avg += cost_matrix[next_cell[0]][next_cell[1]]\n                    current_sum += cost_matrix[next_cell[0]][next_cell[1]]\n                    current_count += 1\n                else:\n                    current_avg += cost_matrix[next_cell[0]][next_cell[1]]\n                    current_sum += cost_matrix[next_cell[0]][next_cell[1]]\n                    current_count += 1\n\n            # Update the maximum average if the current path has a higher average\n            if current_avg > max_avg:\n                max_avg = current_avg\n\n    # Divide the maximum average by the number of cells visited in the path\n    return max_avg / (N*N)"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = students[name]\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    # Filter the students that have height and weight above the minimum\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = students[name]\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    result = {}\n\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            result[name] = data\n\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter the students based on the minimum height and weight\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    result = {}\n\n    # Iterate over all students and check if they meet the height and weight requirements\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            result[name] = data\n\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # initialize a dictionary to store the count of the same values in each list\n    count_dict = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in count_dict:\n            count_dict[nums1[i]] = 0\n        count_dict[nums1[i]] += 1\n\n    # count the number of same values in the second list\n    same_count = 0\n    for i in range(len(nums2)):\n        if nums2[i] in count_dict and count_dict[nums2[i]] > 0:\n            count_dict[nums2[i]] -= 1\n            same_count += 1\n\n    return same_count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Using the built-in function zip() to create pairs of elements from each list\n    pairs = list(zip(nums1, nums2))\n    # Using the built-in function set() to create a set of unique pairs\n    unique_pairs = set(pairs)\n    # Using the built-in function map() to count the number of pairs that have the same value\n    count = sum(map(lambda x: 1 if len(set(x)) == 1 else 0, unique_pairs))\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power -= 1\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for digit in str(base):\n        total += int(digit) ** power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to string and split into list of digits\n    digits = [int(d) for d in str(base)]\n    # initialize sum to 0\n    sum_digits = 0\n    # loop through digits and calculate sum to specified power\n    for i in range(len(digits)):\n        digit_sum = 0\n        for j in range(pow(10, i)):\n            digit_sum += digits[i]\n        if digit_sum >= power:\n            sum_digits += digit_sum\n        power -= digit_sum\n    # return sum of all digits to specified power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Calculate the sum of all digits of the base to the specified power\n    result = sum([int(digit) ** power for digit in str(base)])\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit ** power\n        base //= 10\n        power -= 1\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        result += int(base % 10)\n        base //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string and get the list of digits\n    base_str = str(base)\n    digits = list(base_str)\n    \n    # calculate the sum of digits raised to the power\n    sum_digits = sum([int(digit) ** power for digit in digits])\n    \n    # return the sum of digits raised to the power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    for digit in str(base):\n        total += int(digit) ** power\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"(.*?)\"')\n    result = pattern.findall(text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Define the regular expression pattern to match the values between quotation marks\n    pattern = r'\"[^\"]*\"'\n    # Use the re.findall() function to extract all the matches of the pattern in the given string\n    matches = re.findall(pattern, text1)\n    # If there are matches, return the first one, else return an empty string\n    return matches[0] if matches else \"\""
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    # use the findall() method to find all occurrences of quotation marks\n    # the pattern '(?s)\"[^\"]*\"' matches any character that is not a double quote followed by a double quote followed by any character other than a double quote\n    # the re.DOTALL flag makes the \".\" match any character, including a newline character\n    matches = re.findall(r'(?s)\"[^\"]*\"', text1, re.DOTALL)\n    \n    # loop through the matches and extract the value between the quotation marks\n    result = []\n    for match in matches:\n        # remove the first and last characters of the match (the double quotes)\n        value = match[1:-1]\n        # add the value to the result list\n        result.append(value)\n    \n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expressions to extract values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n\n    # Return the list of extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(\".*?\")'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"' # find all matches of quotation marks\n    matches = re.findall(pattern, text) # find all matches using the pattern\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Remove all special characters from the input string\n    text1 = re.sub('[^A-Za-z0-9\\s]', '', text1)\n\n    # Split the string into words\n    words = text1.split()\n\n    # Initialize empty list to store values between quotation marks\n    values = []\n\n    # Loop through each word in the list\n    for word in words:\n\n        # Check if the word is enclosed in quotation marks\n        if word[0] == '\"' and word[-1] == '\"':\n\n            # If the word is enclosed in quotation marks, add the contents between the quotes to the values list\n            values.append(word[1:-1])\n\n    # Return the list of values between quotation marks\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"' # using regular expression to match quotation marks\n    match = re.findall(pattern, text1) # using re.findall() to extract values between quotation marks\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    result = pattern.findall(text1)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty list to store the result\n    result_list = []\n    # Loop through the elements of the input tuple\n    for i in range(len(test_tup)-1):\n        # Append the product of the current element and the next element to the result list\n        result_list.append(test_tup[i] * test_tup[i+1])\n    # Append the last element of the input tuple to the result list\n    result_list.append(test_tup[-1])\n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[0] * test_tup[3], test_tup[0] * test_tup[4], test_tup[0] * test_tup[5], test_tup[0] * test_tup[6], test_tup[0] * test_tup[7], test_tup[0] * test_tup[8], test_tup[0] * test_tup[9])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result = tuple(i * test_tup[i+1] for i in range(N))\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup) - 1):\n        result += (test_tup[i] * test_tup[i+1],)\n    result += (test_tup[-1] * test_tup[0],)\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = [lst1[i] + lst2[i] for i in range(len(lst1))]\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1) == len(lst2):\n        result = [lst1[i] + lst2[i] for i in range(len(lst1))]\n    else:\n        raise ValueError('Input lists must have the same length.')\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [i+j for i,j in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # Create a dictionary to store consecutive duplicates\n    consecutive_dict = {}\n    # Iterate through the given list\n    for num in nums:\n        # Check if the current number is already in the dictionary\n        if num in consecutive_dict:\n            # If it is, increment its count by 1\n            consecutive_dict[num] += 1\n        else:\n            # If not, add it to the dictionary with a count of 1\n            consecutive_dict[num] = 1\n    # Create a new list to store the non-consecutive duplicates\n    non_consecutive_list = []\n    # Iterate through the keys of the dictionary (which are the consecutive duplicates)\n    for num, count in consecutive_dict.items():\n        # If the count is greater than 1, add the duplicate to the non_consecutive_list\n        if count > 1:\n            non_consecutive_list.extend(num for i, x in groupby(nums) if x == num)\n    # Return the list of non-consecutive duplicates\n    return non_consecutive_list"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    nums_iter = iter(nums)\n    current_group = None\n    consecutive_duplicates = []\n    for num in nums_iter:\n        if current_group is None or num!= current_group[-1]:\n            current_group = [num]\n        elif current_group[-1] == num:\n            continue\n        else:\n            consecutive_duplicates.extend(current_group)\n            current_group = [num]\n    if current_group:\n        consecutive_duplicates.extend(current_group)\n    return consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use itertools to group consecutive duplicates together\n    for group in groupby(nums):\n        # Check if consecutive duplicates exist\n        if len(list(group)) > 1:\n            # Remove consecutive duplicates from the list\n            nums = [n for i, n in enumerate(nums) if i!= nums.index(n)]\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_nums = set(nums)\n    # Convert the set back to a list to preserve the original order\n    nums = list(unique_nums)\n    # Group the list by consecutive duplicates\n    grouped_nums = groupby(nums)\n    # Filter out consecutive duplicates\n    non_consecutive_nums = [num for key, group in grouped_nums if len(list(group)) == 1]\n    # Return the filtered list\n    return non_consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the numbers by their frequency in the list\n    grouped_nums = groupby(enumerate(nums), lambda x: x[1])\n\n    # keep only groups of consecutive numbers\n    consecutive_nums = [list(group) for key, group in grouped_nums if key == 0]\n\n    # remove duplicates from the list of consecutive numbers\n    unique_consecutive_nums = []\n    for num in consecutive_nums:\n        if num[0] not in unique_consecutive_nums:\n            unique_consecutive_nums.append(num[0])\n\n    return unique_consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(enumerate(nums), key=lambda x: x[1]):\n        if len(list(group)) > 1:\n            yield from group[1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to remove duplicates and sort the set\n    nums = sorted(set(nums))\n    # Use itertools.groupby to group the numbers by their consecutive duplicates\n    consecutive_nums = [(k, list(g)) for k, g in groupby(nums)]\n    # Convert the list of consecutive duplicates back to a list\n    result = [num for nums in consecutive_nums for num in nums[1]]\n    return result"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * r**2  # surface area of the cone\n    phi = 2 * math.pi / 3  # angular increment of the cone\n\n    # formula to calculate the lateral surface area of a cone\n    lateral_surface_area = s * math.tan(phi) + 2 * math.tan(phi) * h\n\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area using the formula:\n    # S = pi * r^2 * h / 3\n    S = math.pi * r ** 2 * h / 3\n    return S"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area using the formula:\n    # A = 1/2 * r^2 * h\n    area = 0.5 * r * r * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula to find the lateral surface area of a cone\n    lateral_surface_area = math.pi*r**2*h\n    \n    # Return the lateral surface area of the cone\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * r**2\n    A = math.pi * r * h\n    B = math.pi * (r**2 + h**2)\n    \n    return (s + A + B)/2"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes in two arguments: the radius of the cone and the height of the cone.\n    The function then calculates the lateral surface area of the cone using the formula:\n    lateral surface area = 1/3 * pi * r^2 * h\n    \n    Note that this function uses the math module for mathematical constants.\n    '''\n\n    lateral_surface_area = (1/3) * math.pi * (r**2) * h\n\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r ** 2 + h ** 2)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    lateral_area = (math.pi * r**2) / 3\n    surface_area = math.pi * r * h\n    return lateral_area - surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'(\\s|\\,|\\.|:)'\n    text = re.sub(pattern, r' : ', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,.]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,\\. ]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    text = re.sub(r'[^\\w\\s]', '', text) # remove all non-word, non-space characters\n    text = text.replace(' ', ':') # replace all spaces with a colon\n    text = text.replace(',', ':') # replace all commas with a colon\n    text = text.replace('.', ':') # replace all dots with a colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[^a-zA-Z0-9_]+'\n    replacement = ':'\n    text = re.sub(pattern, replacement, text)\n    return text\n\nif __name__ == \"__main__\":\n    # Example usage:\n    text = \"Hello, world! How are you today?\"\n    result = replace_specialchar(text)\n    print(result)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)  # replace multiple spaces with a colon\n    text = re.sub(r'[^\\w\\s]+', ':', text)  # replace any non-word characters with a colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # replace multiple spaces with a single space\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s.,;!?:]+'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern for finding special characters\n    special_char_pattern = re.compile(r'[\\\\., ]')\n    # Use search() method to find all occurrences of special characters in the text\n    special_chars = special_char_pattern.findall(text)\n    # Replace each special character with a colon\n    for char in special_chars:\n        text = text.replace(char, ':')\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text) # replaces multiple whitespace characters with a single colon\n    text = re.sub(r',', ':', text) # replaces commas with a single colon\n    text = re.sub(r'\\.|\\.', ':', text) # replaces dots with a single colon\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    index = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Use the binary search algorithm to find the first occurrence of x in A\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            left = mid + 1\n            index = mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return index if index < len(A) and A[index] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right pointers to the first and last index of the array\n    left = 0\n    right = len(A) - 1\n    \n    # Initialize the first occurrence index as -1 (meaning the number is not found)\n    first_occurrence_index = -1\n    \n    # Loop through the array until the right pointer is greater than the left pointer\n    while left <= right:\n        # Calculate the mid index\n        mid = (left + right) // 2\n        \n        # If the mid element is equal to the target, check if it's the first occurrence\n        if A[mid] == x:\n            # If it's the first occurrence, update the first occurrence index\n            if first_occurrence_index == -1:\n                first_occurrence_index = mid\n            # If it's not the first occurrence, update the right pointer to the mid index\n            else:\n                right = mid - 1\n        # If the mid element is less than the target, update the left pointer to the mid index\n        elif A[mid] < x:\n            left = mid + 1\n        # If the mid element is greater than the target, update the right pointer to the mid index\n        else:\n            right = mid - 1\n    \n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if A[i] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    A (list): A sorted array.\n    x (int): The number to search for in the array.\n\n    Returns:\n    int: The index of the first occurrence of x in the sorted array A.\n\n    Example:\n    A = [1, 2, 3, 4, 4, 5, 5]\n    x = 4\n\n    Output:\n    3\n    '''\n\n    # Initialize variables to keep track of the first and last occurrences\n    first_occurrence = -1\n    last_occurrence = -1\n\n    # Loop through the array and check if the current element is equal to x\n    for i in range(len(A)):\n        if A[i] == x:\n            if first_occurrence == -1:\n                # If the first occurrence hasn't been found yet, set it to the current index\n                first_occurrence = i\n            # If the current occurrence is a subsequent occurrence, update the last occurrence\n            else:\n                last_occurrence = i\n\n    # Return the index of the first occurrence of x\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            # Check if x is at the left or right of mid index\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if A[i] == x else -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    def product_of_sublist(sublist):\n        product = 1\n        for num in sublist:\n            product *= num\n        return product\n    \n    def sum_of_products_of_subarrays(sublists):\n        sum = 0\n        for sublist in sublists:\n            sum += product_of_sublist(sublist)\n        return sum\n    \n    sublists = []\n    for i in range(1, len(arr) + 1):\n        sublists.append(arr[:i])\n    \n    return sum_of_products_of_subarrays(sublists)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = [0]*(n+1)\n    prod[0] = 1\n    prod[1] = arr[0]\n\n    for i in range(2, n+1):\n        prod[i] = prod[i-1]*arr[i-1]\n\n    # finding the sum of products of all subarrays\n    sub_sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_sum += prod[j]\n\n    return sub_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Create a new list to store the products of subarrays\n    products = [0] * (n + 1)\n\n    # Initialize the first product as 1\n    products[0] = 1\n\n    # Loop through all possible subarrays\n    for i in range(1, n + 1):\n        # Initialize the sum of products of the current subarray as 0\n        products[i] = 0\n\n        # Loop through all previous subarrays and find the product of the current subarray\n        for j in range(i):\n            products[i] += arr[j] * products[j]\n\n    # Initialize the sum of products as 0\n    sum_of_products = 0\n\n    # Loop through all possible subarrays and add the product to the sum of products\n    for i in range(1, n + 1):\n        sum_of_products += products[i]\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n\n    # Store all subarray products in a list\n    subarray_products = [1] * n\n\n    # Calculate all subarray products for all subarrays\n    for i in range(n):\n        for j in range(i, n):\n            subarray_products[j] *= arr[j]\n\n    # Calculate sum of products of all subarrays\n    for i in range(n):\n        ans += subarray_products[i]\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n    MOD = 10**9 + 7\n    \n    for i in range(n):\n        if i == 0:\n            ans = arr[i]\n        else:\n            temp = (arr[i] * (i+1)) % MOD\n            ans = (ans + temp) % MOD\n            \n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    prod_sum = 0\n    sub_sum = 1\n    for i in range(n):\n        sub_sum = prod * arr[i]\n        prod_sum += sub_sum\n        prod *= arr[i] - 1\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    # calculate sum of all elements\n    sum_arr = sum(arr)\n    # initialize the sum of products of subarrays\n    subarray_prod = 0\n    # loop through all sublists of length from 1 to n\n    for i in range(1, n+1):\n        # loop through all possible starting indexes of the sublist\n        for j in range(n-i+1):\n            # calculate the product of the sublist\n            subarray_prod += arr[j]*arr[j+i-1]\n            # add the sum of products of all sublists of length i to the sum of products of all sublists of length i+1\n            subarray_prod += subarray_prod\n    # return the sum of products of all sublists of length n\n    return subarray_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Calculate the product of each subarray\n    products = [1] * n\n    for i in range(1, n):\n        products[i] = products[i-1] * arr[i]\n    # Calculate the sum of products of all subarrays\n    subarray_prod_sum = sum(products)\n    # Initialize the result with the sum of products of the first subarray\n    result = subarray_prod_sum\n    # Calculate the sum of products of all possible sublists of the array\n    for i in range(n):\n        for j in range(i+1, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= products[k]\n            result += prod\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 1\n    sum_prod = 0\n    for i in range(n):\n        prod *= arr[i]\n        sum_prod += prod\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    subarray = []\n    sum = 0\n    \n    for i in range(n):\n        prod *= arr[i]\n        subarray.append(arr[i])\n        \n        if i >= 2:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 2\n                \n        if i >= 3:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 3\n        \n        if i >= 4:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 4\n        \n        if i >= 5:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 5\n        \n        if i >= 6:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 6\n        \n        if i >= 7:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 7\n        \n        if i >= 8:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 8\n        \n        if i >= 9:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 9\n        \n        if i >= 10:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 10\n        \n        if i >= 11:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 11\n        \n        if i >= 12:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 12\n        \n        if i >= 13:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 13\n        \n        if i >= 14:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 14\n        \n        if i >= 15:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 15\n        \n        if i >= 16:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 16\n        \n        if i >= 17:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 17\n        \n        if i >= 18:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 18\n        \n        if i >= 19:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 19\n        \n        if i >= 20:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 20\n        \n        if i >= 21:\n            if prod == 1:\n                subarray.pop(0)\n            else:\n                subarray.pop(0)\n                subarray.pop(0)\n                prod /= 21\n        \n        if i >="
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b11111111111111111111111111111111\n    n = n & mask\n    n = n ^ (n & (mask + 1))\n    n = n ^ (n & (mask - 1))\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Convert the binary number to a list of bits\n    bits = [int(digit) for digit in bin(n)[2:]]\n    # Toggle the middle bits\n    for i in range(len(bits)//2):\n        if bits[i] == 1:\n            bits[i] = 0\n        else:\n            bits[i] = 1\n    # Convert the list of bits back to a binary number\n    middle_bits = int(''.join(str(bit) for bit in bits), 2)\n    # Return the original number with the middle bits toggled\n    return n ^ middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Create an array of length 32 to store the binary representation of n\n    binary_representation = bin(n)[2:].zfill(32)\n\n    # Create two variables to store the index of the first and the last bit\n    first_index = binary_representation.find('1')\n    last_index = binary_representation.rfind('1')\n\n    # Create a string to store the binary representation of the modified number\n    modified_binary_representation = ''\n\n    # Iterate through the binary representation and toggle the bits except the first and the last bit\n    for i in range(31, -1, -1):\n        if i!= first_index and i!= last_index:\n            modified_binary_representation += str(int(binary_representation[i]) ^ 1)\n        else:\n            modified_binary_representation += binary_representation[i]\n\n    # Convert the modified binary representation to an integer and return it\n    return int(modified_binary_representation, 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # Set the first and last bits to 1\n    n |= 0x0101010101010101\n    \n    # Set the middle bits to 0\n    n &= 0x5555555555555555\n    \n    # Set the first and last bits to 1\n    n |= 0x0101010101010101\n    \n    # Return the number with the middle bits toggled\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n\n    # Find the number of bits in the number\n    n_bits = bin(n).count('1')\n\n    # Initialize variables to keep track of the first and last bits\n    first_bit = n & 1\n    last_bit = n >> (n_bits - 1) & 1\n\n    # Set all other bits to the opposite of the first and last bits\n    n ^= first_bit ^ last_bit\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    # Get the length of the binary representation of n\n    length = len(bin(n)[2:])\n\n    # If the length of the binary representation of n is odd, the middle bit is at the middle index\n    if length % 2 == 1:\n        middle_index = length // 2\n    # If the length of the binary representation of n is even, the middle bit is at the middle index plus 1\n    else:\n        middle_index = length // 2 + 1\n\n    # Find the bit to toggle\n    bit_to_toggle = n & (1 << middle_index)\n\n    # Toggle the bit\n    n ^= bit_to_toggle\n\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Find the number of bits in the number\n    num_bits = len(bin(n)[2:])\n\n    # Toggle the middle bits\n    for i in range(1, num_bits-1):\n        n = (n & ~(1 << i)) | ((n >> i) & 1)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Convert the number to a binary string\n    binary = bin(n)[2:]\n\n    # Initialize the first and last bits\n    first_bit = binary[0]\n    last_bit = binary[-1]\n\n    # Initialize the new binary string without first and last bits\n    new_binary = binary[1:-1]\n\n    # Iterate over the binary string and toggle the middle bits\n    for i in range(len(new_binary)):\n        if i == len(new_binary) // 2:\n            new_binary[i] = '0' if new_binary[i] == '1' else '1'\n        else:\n            new_binary[i] = '0' if new_binary[i] == '0' else '1'\n\n    # Convert the new binary string back to an integer\n    new_number = int(new_binary, 2)\n\n    # Return the new number\n    return new_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Get the binary representation of the given number\n    num_binary = bin(n)[2:]\n\n    # Get the length of the binary number\n    num_bits = len(num_binary)\n\n    # Get the number of bits to shift to the left\n    shift_left = num_bits - 2\n\n    # Get the number of bits to shift to the right\n    shift_right = num_bits - 3\n\n    # Toggle the first and last bits\n    num_binary = num_binary[:shift_left] + '0' + num_binary[shift_left+1:shift_right+1] + '0' + num_binary[shift_right+2:]\n\n    # Convert the binary number back to integer\n    num_binary = int(num_binary, 2)\n\n    return num_binary"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # mask to get all bits except first and last\n    mask = 0b11111110  # 0b0000000111111110\n\n    # mask to get all bits except first and last\n    mask_last = 0b00000001  # 0b0000000000000001\n\n    # get first two bits (00 and 00)\n    first_two_bits = (n & 0b1100) >> 1\n\n    # toggle middle bits\n    middle_bits = (n ^ mask) & mask  # XOR the middle bits with mask\n\n    # get last two bits (11 and 11)\n    last_two_bits = (n & 0b0011) << 1\n\n    # toggle last bits\n    last_bits = (n ^ mask_last) & mask_last  # XOR the last bits with mask\n\n    # combine first two bits, middle bits, and last two bits\n    new_n = first_two_bits | middle_bits | last_two_bits | last_bits\n\n    return new_n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n\n    i = bisect.bisect_left(a, x)\n\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    a (list): sorted list of integers\n    x (int): value to locate\n\n    Returns:\n    int: index of left insertion point\n\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i if a[i-1]!= x else i-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    :param a: a list of sorted integers\n    :param x: the value to be searched for in the list\n    :return: the index of the left insertion point\n    \"\"\"\n    i = bisect.bisect_left(a, x)  # find the insertion point using the bisect_left function\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1  # if the value is not found, return the index of the leftmost element that is smaller than x"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(pattern, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 1 + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * (1 - (1/n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function takes an integer n as input and returns the index of the smallest triangular number with n digits. \n    '''\n    # Convert n to a list of digits\n    n = list(str(n)) \n    # Initialize a variable to store the length of the list\n    length = len(n) \n    \n    # Create a list of digits with n digits \n    digits = [0]*n \n    \n    # Initialize a variable to store the index of the smallest triangular number with n digits\n    smallest_index = 0 \n    \n    # Check if n is greater than 0, if not return 0 \n    if n == [0]: \n        return 0 \n    \n    # Iterate through the list of digits from the right to the left\n    for i in range(length-1, -1, -1): \n\n        # If the current digit is greater than 0, add the sum of the previous two digits and the current digit to the smallest_index \n        if n[i] > 0: \n            if i == length-1: \n                smallest_index += int(n[i]) \n            else: \n                smallest_index += int(n[i])+int(n[i+1])\n        \n        # If the current digit is 0 or less, add the current digit to the smallest_index \n        else: \n            smallest_index += int(n[i])\n    \n    # Return the smallest_index \n    return smallest_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def triangular_num(n): \n        # base case \n        if n == 1: \n            return 1 \n        return n * triangular_num(n-1) \n\n    def smallest_triangular(n): \n        # check if n is odd \n        if n % 2 == 1: \n            return triangular_num(n) - (triangular_num(n-1) - 1) \n        else: \n            return triangular_num(n) - triangular_num(n-1) \n\n    return triangular_num(n) - smallest_triangular(n) "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    min_num = 10**(n-1)\n    triangular_numbers = []\n    for i in range(min_num, 10**(n+1)):\n        triangular_numbers.append(i)\n    min_triangular_num = math.inf\n    for i in range(len(triangular_numbers)):\n        for j in range(i+1, len(triangular_numbers)):\n            triangular_sum = triangular_numbers[i] + triangular_numbers[j]\n            if triangular_sum < min_triangular_num:\n                min_triangular_num = triangular_sum\n                index = i+1\n                break\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n):\n    # function to find smallest triangular number with n digits\n    def find_SmallestTriangular(n):\n        triangular = []\n        triangular.append(1)\n        index = 1\n        while len(str(index)) < n:\n            triangular.append(triangular[index-1] + triangular[index-2])\n            index += 1\n        return triangular\n\n    # function to find index of smallest triangular number with n digits\n    def find_Index(n):\n        triangular = find_SmallestTriangular(n)\n        return triangular.index(min(triangular))\n\n    return find_Index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return math.log(n, 3) + 2"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize variables \n    ans = 0 \n    tri_n = 1 \n    \n    # Loop through n-1 digits \n    for i in range(n-1): \n        # Calculate next triangular number \n        tri_n = tri_n + math.factorial(n-1-i) * (i+1) \n        \n        # Update the ans if triangular number is smaller than previous ans \n        if tri_n < ans: \n            ans = tri_n \n            \n    # Return the index of smallest triangular number \n    return ans "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    def is_triangular(n):\n        sqrt_n = math.sqrt(n)\n        return sqrt_n == int(sqrt_n)\n\n    def next_triangular(n):\n        sqrt_n = math.sqrt(n)\n        return int(sqrt_n) + 1\n\n    def find_smallest_triangular(n):\n        max_triangular = int(10**n)\n        smallest_triangular = max_triangular\n        for i in range(max_triangular, 1, -1):\n            if is_triangular(i):\n                smallest_triangular = i\n                break\n        return smallest_triangular\n\n    def count_digits(num):\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n\n    def count_digits_in_triangular(triangular):\n        count = 0\n        num = triangular\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n\n    index = n - count_digits(find_smallest_triangular(n))\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    if n == 1: \n        return 0\n    \n    triangular_numbers = []\n    \n    for i in range(1, n+1): \n        triangular_numbers.append(int(\"\".join(str(i) for j in range(i+1))))\n    \n    smallest_triangular_number = min(triangular_numbers)\n    \n    smallest_triangular_number_digits = len(str(smallest_triangular_number))\n    \n    for i in range(smallest_triangular_number_digits, 0, -1): \n        if smallest_triangular_number_digits - i == 0: \n            return n - i\n        \n        for j in range(1, smallest_triangular_number//(smallest_triangular_number_digits - i) + 1): \n            triangular_number = triangular_numbers[j]\n            if triangular_number < smallest_triangular_number and triangular_number % (smallest_triangular_number_digits - i) == 0: \n                return j - 1 - (smallest_triangular_number//(smallest_triangular_number_digits - i))\n            \n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        triangular = 0\n        count = 0\n        while triangular < math.pow(10, n):\n            triangular += 1\n            count += 1\n        return count\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Generate the first n digits of the triangular number\n    triangular = []\n    for i in range(n):\n        triangular.append(math.factorial(n - i) / (math.factorial(i) * math.factorial(n - i - i)))\n    # Use binary search to find the index of the smallest triangular number\n    left, right = 0, 2**n - 1\n    while left < right:\n        mid = (left + right) // 2\n        triangular_mid = [math.floor(x * 10**i) / 10**i for i, x in enumerate(triangular)]\n        if any(x < 1 for x in triangular_mid):\n            # Check if any of the digits is less than 1, which means the triangular number is invalid\n            left = mid + 1\n        else:\n            # Check if the last digit is greater than 0\n            if triangular_mid[-1] > 0:\n                # If the last digit is greater than 0, check if the digits are valid\n                index = 0\n                for i in range(len(triangular_mid) - 1, -1, -1):\n                    if triangular_mid[i] > 0:\n                        index = i\n                        break\n                if index < len(triangular_mid) - 1:\n                    # The digits are valid, so we can return the index\n                    return index\n            # If the last digit is less than or equal to 0, we need to search for the next smaller triangular number\n            right = mid\n    # If we reach this point, the smallest triangular number with n digits was not found\n    return -1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_data = {}\n    i = 0\n    while i < len(test_tup):\n        dict_data[i] = test_tup[i]\n        i += 1\n        if i < len(test_tup):\n            dict_data[i] = test_tup[i]\n        i += 1\n    return dict_data"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    result = {}\n    # iterate over the tuple elements\n    for i in range(0, len(test_tup), 2):\n        # extract the current element\n        current_elem = test_tup[i]\n        # check if the current element is already a dictionary\n        if isinstance(current_elem, dict):\n            # update the result dictionary with the current dictionary\n            result.update(current_elem)\n        else:\n            # create a new dictionary with the current element as the key and None as the value\n            new_dict = {current_elem: None}\n            # update the result dictionary with the new dictionary\n            result.update(new_dict)\n    # return the resulting dictionary\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Example:\n    test_tup = (1, 2, 3, 4, 5)\n    tuple_to_dict(test_tup) # Output: {1:2, 3:4, 5:None}\n    \"\"\"\n    # Convert the tuple to a dictionary using adjacent elements\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    dict_obj = {}\n    # Iterate over each pair of adjacent elements of the tuple\n    for i in range(0, len(test_tup)-1, 2):\n        # Add the key-value pair to the dictionary\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # initializing an empty dictionary\n    dict_obj = {}\n\n    # iterating over the tuple elements\n    for i in range(0, len(test_tup), 2):\n        # assigning the tuple element as key and next adjacent element as value\n        dict_obj[test_tup[i]] = test_tup[i+1]\n\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # Initialize an empty dictionary\n    my_dict = {}\n    # Loop through the tuple elements\n    for i in range(len(test_tup)-1):\n        # Append the key-value pair to the dictionary\n        my_dict.update({test_tup[i]: test_tup[i+1]})\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_data = {}\n    i = 0\n    while i < len(test_tup):\n        dict_data[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return dict_data"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # initialize an empty dictionary\n    my_dict = {}\n    \n    # iterate through the tuple elements\n    for i in range(len(test_tup) - 1):\n        # add the tuple elements as key-value pairs to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n    \n    return my_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n\n    # Iterate through each character in the string and compare it to the first character\n    for char in s:\n        if char!= first_char:\n            return False\n    \n    # If we make it through the loop without returning False, then all the characters are the same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    \n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are same, else it returns False.\n    '''\n    return all(s[0] == c for c in s)"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same and False otherwise.\n    '''\n\n    # Check if the string is empty\n    if len(s) == 0:\n        return True\n\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n\n    # Iterate over the characters of the string\n    for i in range(1, len(s)):\n        # If the current character is not equal to the first character, return False\n        if s[i]!= first_char:\n            return False\n\n    # If all the characters are equal to the first character, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Convert the string to a list of characters\n    chars = list(s)\n    # Check if all the characters in the list are same\n    return all(chars[0] == c for c in chars)"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n\n    Args:\n        s (str): a string\n\n    Returns:\n        bool: True if all the characters in s are the same, False otherwise.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        first_char = s[0]\n        for i in range(1, len(s)):\n            if s[i]!= first_char:\n                return False\n        return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** (1/2)\n    area = (1 + math.cos(math.pi/3)) * s * (1 - math.cos(math.pi/3))\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3 * side ** 2) / (4 * math.tan(math.pi / 3))\n    area = math.sqrt(s) ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return math.sqrt(3) / 4 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2)/12\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for the area of a tetrahedron\n    # (1/6) * side^2 * (1 + 3/2 * side^2 + 1/2 * side^4)\n    return (1/6) * side**2 * (1 + 3/2 * side**2 + 1/2 * side**4)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 1/6 * side ** 3\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/3 * side * (side + math.sqrt(3) * side)\n    return s"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = math.sqrt(3)/4 * side**2\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    # check if the list is empty\n    if not lst:\n        return []\n    \n    # get the length of the list\n    length = len(lst)\n    \n    # check if the number of items to rotate is greater than the length of the list\n    if n > length:\n        n = n % length\n    \n    # initialize two pointers\n    left = 0\n    right = n\n    \n    # swap the elements of the list from left to right\n    while left < right:\n        lst[left], lst[right] = lst[right], lst[left]\n        left += 1\n        right -= 1\n    \n    # rotate the list by swapping the elements from the right of the list to the end\n    # with the elements from the left of the list\n    while right < length:\n        lst[right], lst[length - 1] = lst[length - 1], lst[right]\n        right += 1\n    \n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # Calculate the number of rotations required to reach the end of the list\n    rotations = m % n\n    \n    # Reverse the first n-rotations of the list\n    list[:n-rotations] = list[:n-rotations][::-1]\n    \n    # Reverse the rest of the list\n    list[-rotations:] = list[-rotations:][::-1]\n    \n    # Reverse the entire list\n    list[:] = list[:][::-1]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    # Check if the list is empty or not\n    if n == 0:\n        return list\n\n    # Check if the m is greater than or equal to n, if yes then m = n-m\n    m = m % n\n\n    # Traverse the list from the second last item to the first item\n    for i in range(n-m-1, -1, -1):\n        # Store the item at current index\n        temp = list[i]\n        # Shift the item to the next index\n        list[i] = list[i+m]\n        # Shift the next item to the previous index\n        list[i+m] = temp\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(lst)\n    m = m % n\n    lst.extend(lst[:m])\n    lst = lst[m:]\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # If m is greater than or equal to n, no rotation is needed.\n    if m >= n:\n        return list\n    \n    # Find the number of items to be rotated.\n    k = m % n\n    \n    # Reverse the first k items of the list.\n    list = list[n-k:] + list[:n-k]\n\n    # Reverse the last n-k items of the list.\n    list = list[::-1]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    This function rotates a list to the right by a specified number of items.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Get the length of the list\n    n = len(list)\n    \n    # Check if m is greater than n\n    if m > n:\n        print(\"m should be less than or equal to n\")\n        return\n    \n    # Initialize two pointers, i and j, to 0\n    i = j = 0\n    \n    # Traverse the list from left to right\n    while j < n-m:\n        # Move i pointer to the right\n        i = (i+1) % n\n        \n        # Move j pointer to the right\n        j = (j+1) % n\n        \n        # Swap the elements at i and j pointers\n        list[i], list[j] = list[j], list[i]\n    \n    # Traverse the list from right to left\n    while i!= j:\n        # Move i pointer to the right\n        i = (i+1) % n\n        \n        # Move j pointer to the left\n        j = (j-1) % n\n        \n        # Swap the elements at i and j pointers\n        list[i], list[j] = list[j], list[i]\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Create a copy of the list\n    temp_list = list[:]\n    # Initialize the index of the last item\n    last_index = len(list)-1\n    # Loop through the list from the last item to the second last item\n    for i in range(last_index, m-1, -1):\n        # Rotate the element at index i to the index m-i-1\n        temp_list[i], temp_list[m-i-1] = temp_list[m-i-1], temp_list[i]\n    # Add the last item to the front of the list\n    temp_list[last_index], temp_list[0] = temp_list[0], temp_list[last_index]\n    # Return the rotated list\n    return temp_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        # Copy last element to the first position\n        list[i] = list[n-i-1]\n        # Shift the remaining elements to the right\n        for j in range(n-i-1, n-1):\n            list[j] = list[j+i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Find the number of items in the list\n    n = len(list)\n    # Find the number of items to be rotated\n    k = n - m\n    \n    # Reverse the first k items of the list\n    for i in range(k):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    \n    # Reverse the remaining part of the list\n    for i in range(k, n):\n        list[i], list[i-k] = list[i-k], list[i]\n        \n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    This function checks if the given tuple has any none value or not.\n    \"\"\"\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for element in test_tup:\n        if element is None:\n            none_count += 1\n    if none_count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    def is_divisible_by_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        return all(digit in digits for digit in digits)\n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit == 0:\n                return False\n        return all(num % digit == 0 for digit in digits)\n    \n    return filter(lambda x: is_divisible_by_digits(x), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(d in str(x) for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Define a lambda function that checks if a number is divisible by every digit it contains\n    is_divisible = lambda x: all(int(d) in str(x) for d in str(x))\n\n    # Use the is_divisible function to filter out numbers outside the given range\n    filtered_numbers = filter(lambda x: startnum <= x <= endnum, range(startnum, endnum + 1))\n\n    # Use the lambda function to filter out numbers that are not divisible by every digit they contain\n    divisible_numbers = filter(is_divisible, filtered_numbers)\n\n    # Print the result\n    for num in divisible_numbers:\n        print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits = '1234567890'\n    num_list = [str(i) for i in range(startnum, endnum+1)]\n    divisible_list = []\n    for num in num_list:\n        if all(int(digit) % int(num[i]) == 0 for i, digit in enumerate(num)):\n            divisible_list.append(int(num))\n    return divisible_list"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % int(d) == 0 for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit!= 0 and num % digit!= 0:\n                return False\n        return True\n    \n    return filter(is_divisible, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(x % int(d) == 0 for d in str(x)) and x >= startnum and x <= endnum"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2) * (a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * r**2 * a / 360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * (r ** 2) * a / 360\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * r**2 * a/360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # If angle is larger than 360 degrees, return None\n    if a > 360:\n        return None\n    \n    # Calculate the area of a sector\n    area = r * a * math.pi / 180\n    \n    # Return the area of the sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Calculate the angle in radians\n    angle_rad = math.radians(a)\n\n    # Check if the angle is valid\n    if angle_rad > math.pi * 2:\n        return None\n\n    # Calculate the area of the sector\n    area = r * r * angle_rad\n\n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store the lengths of LCS of three strings\n    LCS = [[0] * (p+1) for i in range(m+1)]\n\n    # Fill in the first row of the table\n    for i in range(m+1):\n        LCS[i][0] = 0\n\n    # Fill in the first column of the table\n    for j in range(p+1):\n        LCS[0][j] = 0\n\n    # Fill in the rest of the table\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            elif LCS[i-1][j] > LCS[i][j-1]:\n                LCS[i][j] = LCS[i-1][j]\n            else:\n                LCS[i][j] = LCS[i][j-1]\n\n    # Create a list to store the LCS\n    lcs = []\n\n    # Starting from the bottom-right corner of the table,\n    # backtrack to find the LCS\n    i = m\n    j = p\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif LCS[i-1][j] > LCS[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the LCS\n    lcs.reverse()\n\n    # Print the LCS\n    print(\"Longest Common Subsequence:\", \"\".join(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    p = [[0] * (m + 1) for i in range(n + 1)] \n  \n    # Step 1 \n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n  \n            # If the characters are same, then use previous diagonals \n            if X[i - 1] == Y[j - 1]: \n                p[i][j] = p[i - 1][j - 1] + 1 \n  \n            # If not same, then use the greater of two and previous columns \n            else: \n                p[i][j] = max(p[i - 1][j], p[i][j - 1]) \n  \n    # Step 2 \n    L = [] \n    i = n \n    j = m \n  \n    # Step 3 \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            L.append(X[i - 1]) \n            i -= 1 \n            j -= 1 \n        elif p[i - 1][j] > p[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    # Reverse the list \n    L.reverse() \n  \n    return ''.join(L) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a dictionary to store the lengths of the longest common subsequences of all prefixes of the given strings \n    dp = {} \n\n    # Traverse the given strings and calculate the lengths of the longest common subsequences of all prefixes \n    for i in range(len(X) + 1): \n        for j in range(len(Y) + 1): \n            for k in range(len(Z) + 1): \n                if i == 0 or j == 0 or k == 0: \n                    dp[(i, j, k)] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    dp[(i, j, k)] = dp[(i-1, j-1, k-1)] + 1 \n                else: \n                    dp[(i, j, k)] = max(dp[(i-1, j, k)], dp[(i, j-1, k)], dp[(i, j, k-1)]) \n\n    # Return the length of the longest common subsequence for all prefixes \n    return dp[(len(X), len(Y), len(Z))] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Find lengths of X, Y and Z\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 2D table to store lengths of longest common subsequences\n    # of all prefixes of X, Y and Z\n    L = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # Fill the 2D table using dynamic programming\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # Extract the longest common subsequence from the 2D table\n    i, j, k = m, n, o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n\n    # Reverse the lcs to get the actual LCS\n    lcs = lcs[::-1]\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                elif X[i - 1] == Y[j - 1] or Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k])\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n    return dp[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    return dp[m][n][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Find the length of the longest common subsequence of X and Y\n    m, n = len(X), len(Y)\n    # Initialize a table to store the lengths of the longest common subsequences of X[0..m-1] and Y[0..n-1]\n    table = [[0] * (n+1) for _ in range(m+1)]\n    # Fill the table in bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    # Backtrack to find the longest common subsequence\n    i, j = m, n\n    lcs = ''\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n = len(X), len(Y)\n    t = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                t[i][j] = t[i - 1][j - 1] + 1\n            else:\n                t[i][j] = max(t[i - 1][j], t[i][j - 1])\n\n    L = t[m][n]\n    lcs = ''\n    i = m\n    j = n\n    while L!= 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif t[i - 1][j] > t[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Function to find the length of the longest common subsequence of three strings\n    def lcs(X, Y, Z):\n        m, n, o = len(X), len(Y), len(Z)\n        table = [[0] * (o + 1) for _ in range(3)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                for k in range(1, o + 1):\n                    if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                        table[i % 3][j % 3][k % 3] = table[(i - 1) % 3][j % 3][k % 3] + 1\n                    else:\n                        table[i % 3][j % 3][k % 3] = max(table[(i - 1) % 3][j % 3][k % 3], table[i % 3][j - 1][k % 3], table[i % 3][j % 3][k - 1])\n        return table[m % 3][n % 3][o % 3]\n\n    # Find the length of the longest common subsequence\n    LCS = lcs(X, Y, Z)\n\n    # Find the common subsequence\n    for i in range(LCS):\n        if X[i - 1] == Y[i - 1] and Y[i - 1] == Z[i - 1]:\n            result.append(X[i - 1])\n        else:\n            break\n\n    return ''.join(result[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Function to find the length of the LCS of three strings \n    def lcs(X, Y): \n        m, n = len(X), len(Y) \n        L = [[0] * (n + 1) for _ in range(m + 1)] \n  \n        # Fill L[][] in bottom up manner. Note that L[i][j] contains length of LCS of X[0...i-1] and Y[0...j-1] \n        for i in range(m + 1): \n            for j in range(n + 1): \n                if i == 0 or j == 0: \n                    L[i][j] = 0 \n                elif X[i-1] == Y[j-1]: \n                    L[i][j] = L[i-1][j-1] + 1 \n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n        return L[m][n] \n  \n    # Find the length of LCS of all three strings \n    m, n = len(X), len(Y) \n    length = lcs(X, Y) \n    length_z = lcs(X, Z) \n  \n    # Initialize LCS matrix \n    L = [[0] * (length + 1) for _ in range(3)] \n  \n    # Fill L[][] in bottom up manner. Note that L[i][j] contains length of LCS of X[0...i-1], Y[0...j-1] and Z[0...k-1] \n    for i in range(3): \n        for j in range(length + 1): \n            if j == 0 or i == 0: \n                L[i][j] = 0 \n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1 \n            elif X[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1] + 1 \n            elif Y[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1] + 1 \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][j-1]) \n  \n    # Return the length of LCS of X, Y and Z \n    return max(L[0][length], L[1][length], L[2][length], key=L[0][length])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-word characters with a space\n    str1 = re.sub(r'\\W+','', str1)\n    # split the string into words\n    words = str1.split()\n    # loop through each word\n    for i in range(len(words)):\n        # if the first letter of the word is capital, add a space before it\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', string)\n    return''.join(words).title()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    # Remove all non-alphanumeric characters\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n    \n    # Split the string into a list of words\n    words = str1.split()\n    \n    # Add spaces between words starting with capital letters\n    new_words = []\n    for word in words:\n        if word[0].isupper():\n            new_words.append(word +'')\n        else:\n            new_words.append(word)\n    \n    # Join the new words into a string\n    new_str =''.join(new_words)\n    \n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Remove all non-alphabetic characters except spaces\n    str1 = re.sub(r'[^a-zA-Z\\s]', '', str1)\n\n    # Split the string into a list of words\n    words = str1.split()\n\n    # Iterate over the list and capitalize the first letter of each word\n    for i in range(len(words)):\n        if words[i][0].isupper() and len(words[i]) > 1:\n            words[i] = words[i][0].upper() + words[i][1:]\n\n    # Join the words back together into a string with spaces between them\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1)\n    new_words = []\n    for word in words:\n        if word[0].isupper():\n            new_words.append(word)\n            new_words.append(' ')\n        else:\n            new_words.append(word)\n    return ''.join(new_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b([A-Z][a-z]+)', r' \\1', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to find all the capital letters at the beginning of a word\n    pattern = r'\\b[A-Z][a-z]+'\n\n    # Use re.sub() function to replace all the matches found in pattern with a single space\n    return re.sub(pattern, r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # create a string with spaces between words starting with capital letters\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b\\w*[A-Z]\\w*\\b'\n    return re.sub(pattern, r'\\1 ', string)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to numeric values\n    nums = [float(num) for num in nums_str]\n\n    # Sort the numeric values\n    nums.sort()\n\n    # Convert the sorted numeric values back to strings and return the sorted list\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # convert all the strings to integers\n    nums = [int(num) for num in nums_str]\n    # sort the list in numeric order\n    nums.sort()\n    # convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    # return the sorted list\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings of numbers and sorts them numerically.\n    \"\"\"\n    # Convert all strings to float\n    nums = [float(num) for num in nums_str]\n    # Sort the list in ascending order\n    nums.sort()\n    # Convert the sorted list back to strings\n    sorted_nums = [str(num) for num in nums]\n    # Return the sorted list of strings\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(x) for x in nums_str]  # convert strings to integers\n    nums.sort()  # sort the list in numeric order\n    sorted_nums_str = [str(x) for x in nums]  # convert integers back to strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_int = []\n    for num_str in nums_str:\n        if num_str.isdigit():\n            nums_int.append(int(num_str))\n        else:\n            nums_int.append(float('inf'))\n    nums_int.sort()\n    sorted_nums_str = []\n    for num in nums_int:\n        if num!= float('inf'):\n            sorted_nums_str.append(str(num))\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def is_numeric(s):\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False\n\n    nums = [float(num) for num in nums_str if is_numeric(num)]\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all strings to float values\n    nums_float = [float(num) for num in nums_str]\n\n    # Sort the float values using the built-in `sorted` function\n    nums_sorted = sorted(nums_float)\n\n    # Convert the sorted float values back to strings and return them in a list\n    return [str(num) for num in nums_sorted]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert the list of strings to a list of integers\n    nums_int = [int(num) for num in nums_str]\n    # Sort the list of integers numerically\n    nums_int.sort()\n    # Convert the sorted list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums_int]\n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings in the list to float\n    nums = [float(num_str) for num_str in nums_str]\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Convert the sorted list back to string and return it\n    return [str(num) for num in nums]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_list:\n        if i not in test_tup:\n            test_list.append(i)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Loop through each element in the test list and add the corresponding element from the test tuple to it.\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]\n        \n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    elif arr[i] > arr[2 * i + 1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the root is greater than or equal to the left child\n    if i > 0 and arr[i] < arr[2 * i]:\n        return False\n    # Check if the left child is greater than or equal to the right child\n    if i < len(arr) - 1 and arr[2 * i] > arr[2 * i + 1]:\n        return False\n    # Recursively check if the left and right children are heaps\n    return check_min_heap_helper(arr, 2 * i) and check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array of integers as input and returns True if the array represents a min heap, else False.\n    '''\n    return check_min_heap_helper(arr, len(arr) // 2 - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_min_heap(arr):\n    n = len(arr)\n\n    # Check if the array is a valid binary heap\n    for i in range(n//2 - 1, -1, -1):\n        if arr[i] > arr[2*i + 1]:\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents a min heap or not.\n    A min heap is a binary tree where each parent node has a smaller value than its children.\n    The root of the tree is the minimum value in the heap.\n\n    Args:\n    arr (list of integers): The given array to be checked for min heap property.\n    i (integer): The current index of the array.\n\n    Returns:\n    bool: True if the given array represents a min heap, False otherwise.\n\n    '''\n\n    if i == len(arr) // 2:  # Base case: if the current index is equal to the middle index\n        return True\n    elif arr[i] > arr[2 * i + 1]:  # If the current index has a larger value than its children, it is not a min heap\n        return False\n    else:  # Recursively check the child nodes of the current index\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    A min heap is a binary tree where each parent node has a smaller value than its children.\n    The root of the tree is the minimum value in the heap.\n\n    Args:\n    arr (list of integers): The given array to be checked for min heap property.\n\n    Returns:\n    bool: True if the given array represents a min heap, False otherwise.\n\n    '''\n\n    if not arr:  # Base case: if the array is empty, it is not a min heap\n        return False\n    else:\n        return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i > 0 and arr[i] < arr[i // 2]:\n        return False\n\n    if i * 2 + 1 <= len(arr) - 1 and arr[i] < arr[i * 2 + 1]:\n        return False\n\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if len(arr) <= 1:\n        return True\n\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_min_heap(arr):\n    '''\n    Returns True if the given array represents a min heap, False otherwise.\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i//2]:\n            return False\n    return True\n\ndef check_min_heap_helper(arr, i):\n    '''\n    Checks if the given array represents a min heap. If it does, returns the value of i.\n    If it doesn't, returns -1.\n    '''\n    if i < 0 or i >= len(arr):\n        return -1\n    \n    if i == 0:\n        return arr[i]\n    \n    if arr[i] >= arr[i//2]:\n        return -1\n    \n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Checks if the given array represents a min heap. If it does, prints True.\n    If it doesn't, prints False.\n    '''\n    if is_min_heap(arr):\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 0:\n        return True\n    if i == 0:\n        return arr[i] <= arr[2*i + 1]\n    return arr[i] <= arr[2*i] and arr[i] <= arr[2*i + 1] and check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i + 1)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2!= 0:\n        return False\n    return check_min_heap_helper(arr, len(arr) // 2 - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= len(arr) // 2:\n        return True\n\n    if arr[i] < arr[2 * i + 1] or arr[i] < arr[2 * i + 2]:\n        return False\n\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # Check if current element is greater than the next element\n    if i >= 1 and arr[i] > arr[i//2]:\n        return False\n    \n    # Recursively check for the left and right child\n    if i * 2 <= len(arr) and check_min_heap_helper(arr, i * 2):\n        return False\n    if i * 2 + 1 <= len(arr) and check_min_heap_helper(arr, i * 2 + 1):\n        return False\n    \n    # If all checks are passed, then array represents a min heap\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n\n    if arr[i] < arr[(i - 1) // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i - 1) // 2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * (jacobsthal_num(n//2) - 1)\n    else:\n        return 2 * (jacobsthal_num((n-1)//2) - 1) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = 1\n    for i in range(2, n+1):\n        jacobsthal = (jacobsthal * i) % 1000000007\n    return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    # Initialize variables\n    j_prev = 0\n    j_curr = 1\n    j_next = 1\n    count = 1\n    \n    # Iterate until n is reached\n    while count < n:\n        # Add the previous two values to get the next value\n        j_next = j_curr + j_prev\n        # Update the values\n        j_prev = j_curr\n        j_curr = j_next\n        count += 1\n    \n    return j_curr"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num_n = jacobsthal_num(n-1)\n        if jacobsthal_num_n % 2 == 0:\n            return jacobsthal_num_n + jacobsthal_num(n-2)\n        else:\n            return 2*jacobsthal_num_n - jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j = 0\n        for i in range(2, n+1):\n            j += i\n        return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (jacobsthal_num(n-1) + jacobsthal_num(n-2)) % 1000000007"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (1 + jacobsthal_num(n-1))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the first two elements of the sequence \n    a, b = 0, 1 \n    \n    # Initialize the nth element of the sequence as the sum of the (n-1)th and (n-2)th elements of the sequence \n    jaco = (n-1) * a + (n-2) * b \n    \n    # Return the nth element of the sequence \n    return jaco"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 1\n    jacobsthal = []\n    for i in range(n-2):\n        j += 2\n        if j % 2 == 0:\n            j /= 2\n        else:\n            j -= 1\n        jacobsthal.append(j)\n    return jacobsthal[-1]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Sort the list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize the minimum count to infinity\n    min_count = float('inf')\n\n    # Initialize the count of records that have been selected as minimum\n    count = 0\n\n    # Initialize the minimum tuple\n    min_tuple = None\n\n    # Iterate over the list\n    for tup in test_list:\n        # Check if the current tuple satisfies the condition for k records\n        if count < K:\n            count += 1\n        else:\n            # If the count is greater than K, update the minimum count and minimum tuple\n            if tup[1] < min_tuple[1] or (tup[1] == min_tuple[1] and tup[0] < min_tuple[0]):\n                min_count = count\n                min_tuple = tup\n                count = 1\n            # Otherwise, move on to the next tuple\n            else:\n                count += 1\n\n    # Return the minimum count and minimum tuple\n    return min_count, min_tuple"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    # sort the list of tuples by the first element\n    test_list.sort(key=lambda x: x[0])\n\n    # initialize the minimum value to infinity\n    min_val = float('inf')\n\n    # loop over the first K elements of the sorted list\n    for i in range(K):\n        # if the value of the current element is less than the minimum value, update the minimum value\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n\n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    minimum = test_list[K-1]\n    return minimum"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Initialize variables for minimum k count and minimum k records\n    min_k_count = K\n    min_k_records = []\n\n    # Sort the given list of tuples based on the second element of the tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Iterate over the sorted list of tuples\n    for i in range(len(sorted_list)):\n\n        # If the count of k records is greater than or equal to the minimum k count, then update the minimum k count and minimum k records\n        if len(min_k_records) >= min_k_count:\n            min_k_count = len(min_k_records)\n            min_k_records = sorted_list[:min_k_count]\n\n        # If the count of k records is less than the minimum k count, then add the current tuple to the list of minimum k records\n        if len(min_k_records) < min_k_count:\n            min_k_records.append(sorted_list[i])\n\n    # Return the list of minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Args:\n    test_list: list of tuples\n    K: integer\n    \n    Returns:\n    list of tuples containing minimum k records from test_list\n    '''\n    \n    min_list = []\n    min_key = []\n    \n    for i in range(len(test_list)):\n        if i % 2 == 0: # even index\n            if len(min_list) < K:\n                min_list.append(test_list[i])\n                min_key.append(i)\n            else:\n                min_list.remove(min_list[0])\n                min_key.remove(min_key[0])\n                min_list.append(test_list[i])\n                min_key.append(i)\n        else: # odd index\n            if len(min_list) < K:\n                min_list.append(test_list[i])\n                min_key.append(i)\n            else:\n                min_list.remove(min_list[0])\n                min_key.remove(min_key[0])\n                min_list.append(test_list[i])\n                min_key.append(i)\n    \n    min_result = []\n    for i in range(len(min_list)):\n        min_result.append(test_list[min_key[i]])\n    \n    return min_result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    test_list = sorted(test_list, key=lambda x: x[0])\n    min_records = []\n    min_count = float('inf')\n\n    for i in range(len(test_list)):\n        count = 0\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] < test_list[j][0]:\n                count += 1\n            if count >= K:\n                break\n        if count < min_count:\n            min_count = count\n            min_records = [test_list[i]]\n        elif count == min_count:\n            min_records.append(test_list[i])\n\n    return min_records\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize a variable to keep track of the minimum k values\n    min_val = float('inf')\n    min_index = []\n\n    # Iterate through the sorted list and update the min_val and min_index\n    for i in range(len(sorted_list)):\n        if i >= K:\n            # if min_val is greater than the value of the current tuple, update min_val and min_index\n            if sorted_list[i][1] < min_val:\n                min_val = sorted_list[i][1]\n                min_index = [i]\n            elif sorted_list[i][1] == min_val and i not in min_index:\n                min_index.append(i)\n\n    # Return the minimum k values\n    return [sorted_list[i][1] for i in min_index]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a dictionary to store unique values and their frequency\n    freq_dict = {}\n    for tup in test_list:\n        if tup[1] in freq_dict:\n            freq_dict[tup[1]] += 1\n        else:\n            freq_dict[tup[1]] = 1\n\n    # find the minimum k values\n    min_list = []\n    for value, freq in freq_dict.items():\n        if freq >= K:\n            min_list.append((value, freq))\n        elif len(min_list) < K:\n            min_list.append((value, freq))\n        else:\n            break\n\n    # sort the list in ascending order of frequency\n    min_list.sort(key=lambda x: x[1])\n\n    # return the minimum k values\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes in a list of tuples containing values and their corresponding counts.\n    It then finds the minimum K records from the list.\n    '''\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n    \n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Check if the key exists in the dictionary, otherwise create a new key with the value of 1\n        if tup[0] in counts:\n            counts[tup[0]] += tup[1]\n        else:\n            counts[tup[0]] = tup[1]\n    \n    # Sort the dictionary by value in descending order\n    sorted_counts = dict(sorted(counts.items(), key=lambda item: item[1], reverse=True))\n    \n    # Initialize an empty list to store the records\n    records = []\n    \n    # Iterate through the sorted dictionary\n    for key, value in sorted_counts.items():\n        # Check if the list has reached K\n        if len(records) == K:\n            break\n        \n        # Add the key to the records list\n        records.append(key)\n    \n    return records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    min_k_records = []\n    for i in range(K):\n        min_k_records.append(test_list[i])\n    return min_k_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Loop through each index of each list\n    for i in range(len(l1)):\n        # Check if the element at this index is in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            # If the element is common, add it to the list\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    # Loop through each index in l1, l2, and l3\n    for i in range(len(l1)):\n        # Check if the element at that index is also in all three lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if l2[l2.index(l1[i])] == l3[l3.index(l1[i])]:\n                common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    elif len(numbers) == 2:\n        return min(numbers)\n    else:\n        return min(numbers[1:], key=lambda x: abs(x - min(numbers[1:]))**2)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Finds the second smallest number in a list.\n\n    Args:\n    numbers: a list of numbers\n\n    Returns:\n    the second smallest number in the list, or None if the list has fewer than 2 elements\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for number in numbers:\n            if number < smallest:\n                second_smallest = smallest\n                smallest = number\n            elif number < second_smallest and number!= smallest:\n                second_smallest = number\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(numbers)\n    # Sort the set in ascending order and return the second element\n    return sorted(unique_numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number in the list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Check if the list is empty or has only one element\n    if len(numbers) == 1:\n        return None\n    \n    # Initialize variables to store the smallest and second smallest numbers\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    # Iterate through the list and update the smallest and second smallest numbers\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=.*b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return \"No match found\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?P<zero_or_more_bs>b+)'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Found a string with an 'a' followed by one or more 'b's:\")\n        print(\"Number of 'a's:\", match.group('zero_or_more_bs').count('a'))\n        print(\"Number of 'b's:\", match.group('zero_or_more_bs').count('b'))\n    else:\n        print(\"The string does not match the pattern.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    This function matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n\n    pattern = r'ab*'\n    matches = re.findall(pattern, text)\n\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            reverse_i = test_list[j][::-1]\n            if reverse_i in test_list[:i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    # Create a dictionary to store the count of reverse pairs\n    reverse_pair_count = {}\n    for string in test_list:\n        # Reverse the string and check if the reversed string exists in the dictionary\n        if string[::-1] in reverse_pair_count:\n            reverse_pair_count[string[::-1]] += 1\n        else:\n            # If the reversed string doesn't exist, add it to the dictionary with a count of 1\n            reverse_pair_count[string[::-1]] = 1\n    \n    # Return the count of reverse pairs\n    return len(reverse_pair_count)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    # Initialize the count to 0\n    count = 0\n\n    # Sort the list of strings\n    test_list = sorted(test_list)\n\n    # Iterate through the list of strings\n    for i in range(len(test_list)):\n        # Get the current string\n        current_str = test_list[i]\n\n        # Iterate through the remaining strings after the current string\n        for j in range(i+1, len(test_list)):\n            # Get the next string\n            next_str = test_list[j]\n\n            # Compare the two strings and count the pairs if they are reversed\n            if current_str[::-1] == next_str:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] and test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    \n    # Iterate through the list of strings\n    for string1 in test_list:\n        # Remove any leading and trailing whitespaces from the string\n        string1 = string1.strip()\n        \n        # Iterate through the remaining strings in the list\n        for string2 in test_list[test_list.index(string1) + 1:]:\n            # Remove any leading and trailing whitespaces from the string\n            string2 = string2.strip()\n            \n            # Check if the strings are in reverse order\n            if string1 == string2[::-1]:\n                # Increment the count\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if is_reverse(test_list[i]) and is_reverse(test_list[j]):\n                count += 1\n    return count\n\ndef is_reverse(s):\n    return s == s[::-1]"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Define a function to check if a string is a reverse of another\n    def is_reverse(str1, str2):\n        return str1 == str2[::-1]\n    \n    # Count the pairs of reverse strings in the list\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the two strings are reverse\n            if is_reverse(test_list[i], test_list[j]):\n                count += 1\n    \n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = list(list1)\n    count_dict = {}\n    for i in range(len(list1)):\n        if tuple(list1[i]) not in count_dict:\n            count_dict[tuple(list1[i])] = 1\n        else:\n            count_dict[tuple(list1[i])] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # loop through each element in the original list\n    for elem in list1:\n        # convert the element to a tuple and check if it is in the dictionary\n        if tuple(elem) in count_dict:\n            # if it is, increment its count\n            count_dict[tuple(elem)] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            count_dict[tuple(elem)] = 1\n            \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    sublists_dict = {}\n    # Loop through the list1 and convert each list to tuple\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        # If the tuple already exists in the dictionary, increment its value\n        if sublist_tuple in sublists_dict:\n            sublists_dict[sublist_tuple] += 1\n        # Otherwise, add the tuple to the dictionary with a value of 1\n        else:\n            sublists_dict[sublist_tuple] = 1\n    # Return the dictionary\n    return sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # creating a dictionary to store the count of lists within the original list\n    count_dict = {}\n    \n    # iterating over all the lists in the original list\n    for sublist in list1:\n        # converting the list to a tuple\n        sublist = tuple(sublist)\n        # checking if the tuple is already in the dictionary\n        if sublist in count_dict:\n            # incrementing the count of the tuple by 1\n            count_dict[sublist] += 1\n        else:\n            # adding the tuple to the dictionary with initial count of 1\n            count_dict[sublist] = 1\n            \n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create a dictionary to store unique sublists and their counts\n    unique_sublists_dict = {}\n\n    # Iterate over each element in the list\n    for i in range(len(list1)):\n        # Check if the current element is a list\n        if isinstance(list1[i], list):\n            # Convert the list to a tuple and append it to the unique_sublists_dict if it's not already present\n            if tuple(list1[i]) not in unique_sublists_dict:\n                unique_sublists_dict[tuple(list1[i])] = 1\n            # Increment the count of the tuple in the unique_sublists_dict\n            else:\n                unique_sublists_dict[tuple(list1[i])] += 1\n\n    # Return the dictionary\n    return unique_sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    count = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            list2.append(tuple(list1[i:j]))\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            count += 1\n    result = {}\n    for i in range(len(list2)):\n        if list2[i] not in result:\n            result[list2[i]] = 0\n        result[list2[i]] += 1\n    return result"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    '''\n    Count lists within a list.\n    '''\n    count = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if sublist not in count:\n                count[sublist] = 1\n            else:\n                count[sublist] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create an empty dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Iterate over each list in the input list\n    for sublist in list1:\n\n        # Convert the sublist to a tuple and check if it's already in the dictionary\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n\n            # Increment the count of the tuple by 1\n            count_dict[tuple_sublist] += 1\n\n        else:\n\n            # Add the tuple and count to the dictionary\n            count_dict[tuple_sublist] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for item in list1:\n        item = tuple(item)\n        if item in unique_dict:\n            unique_dict[item] += 1\n        else:\n            unique_dict[item] = 1\n    return unique_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    num = num.split('.')\n    if len(num[0]) > 1 or len(num[1]) > 2:\n        return False\n    try:\n        float(num[0])\n    except ValueError:\n        return False\n    try:\n        float(num[1])\n        if len(num[1]) > 2:\n            return False\n    except ValueError:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    # Remove all non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n\n    # Check if the input string is a valid decimal number with a precision of 2\n    if num.count('.') == 1 and len(num.split('.')[0]) <= 2 and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove any non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n\n    # Convert the remaining numeric characters to integers\n    num = [int(x) for x in num]\n\n    # Check if the length of the resulting list is 2 and if the list is in ascending order\n    if len(num) == 2 and num[0] <= num[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' not in num:\n        return False\n    else:\n        parts = num.split('.')\n        if len(parts)!= 2:\n            return False\n        else:\n            if len(parts[0]) > 1 or len(parts[1]) > 2:\n                return False\n            else:\n                for i in parts[0]:\n                    if not (i.isdigit() or i == '.'):\n                        return False\n                for i in parts[1]:\n                    if not (i.isdigit() or i == '.'):\n                        return False\n                return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # convert the string to float and check if it has a precision of 2\n        float(num)\n        num_str = str(num)\n        num_len = len(num_str)\n        if num_len > 1 and num_str[num_len-1] == '0':\n            return True\n        elif num_len == 1 and num_str[0] == '0':\n            return True\n        elif num_str.count('.') == 1:\n            return True\n        else:\n            return False\n    except ValueError:\n        # if the string cannot be converted to a float, return False\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    try:\n        # Convert the string to a float with a precision of 2\n        float_num = float(num)\n        # Check if the float is an integer\n        if int(float_num) == float_num:\n            # If the float is an integer, return True\n            return True\n        else:\n            # If the float is not an integer, return False\n            return False\n    except ValueError:\n        # If the string cannot be converted to a float, return False\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    # check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # check if the string contains only digits\n    if not num.isdigit():\n        return False\n    \n    # check if the string is a decimal number with a precision of 2\n    if '.' not in num:\n        return False\n    \n    # check the length of the decimal part\n    if len(num.split('.')[1]) > 2:\n        return False\n    \n    # if all checks pass, the input is a decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    for digit in num:\n        if digit < '0' or digit > '9':\n            return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    decimal_places = num.split('.')[-1]\n    if len(decimal_places)!= 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        num = float(num)\n        return True if '.' in str(num) and len(str(num).split('.')[1]) <= 2 else False\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Iterate through the list and add each element to the set\n    for num in arr:\n        unique_set.add(num)\n\n    # Check if the set has only one element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Check if the list contains only one unique element\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        if arr.count(arr[i])!= len(arr):\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == len(set(arr)):\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains more than one distinct element\")\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 in [4, 6, 9, 11]:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                days_in_month[monthnum3-1] = 30\n            else:\n                days_in_month[monthnum3-1] = 29\n        return days_in_month[monthnum3-1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum % 3 == 0:\n        if monthnum % 10 == 0:\n            if monthnum % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 % 2 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        print(\"Month number {} contains 30 days.\".format(monthnum))\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        print(\"Month number {} contains 31 days.\".format(monthnum))\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in months:\n        if months[monthnum3] == 30:\n            print(monthnum3, \"contains 30 days.\")\n        else:\n            print(monthnum3, \"contains\", months[monthnum3], \"days.\")\n    else:\n        print(monthnum3, \"is an invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthnum3 in range(1, 13):\n        for num, month in enumerate(months):\n            if num + 1 == monthnum3:\n                if len(month) == 3 and month[-1] =='s':\n                    return True\n                else:\n                    return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        if monthnum3 in [4,6,9,11]:\n            if monthnum3%2==0:\n                return False\n            else:\n                return True\n        elif monthnum3 in [1,3,5,7,8,10,12]:\n            if monthnum3%2==0:\n                return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2 and year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    days[1] = 29\n            else:\n                days[1] = 28\n        if days[monthnum3 - 1] == 30:\n            return True\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    # Define a dictionary to map month numbers to days in a month\n    months_days = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    # Check if the given month number is valid\n    if monthnum3 not in months_days:\n        return \"Invalid month number\"\n\n    # Check if the number of days in the given month is 30\n    if months_days[monthnum3] == 30:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n\n    # Traverse the array from the second element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[i - 1]\n\n        # Update the minimum difference if the difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n    # Traverse through the sorted array and check if the difference between any two elements is smaller than the current minimum difference\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    min_diff = float('inf')\n    # Traverse through the sorted array and check the difference between adjacent elements\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    diff = float('inf')\n\n    for i in range(n - 1):\n        diff = min(diff, arr[i + 1] - arr[i])\n\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to store minimum and maximum values of the array\n    min_diff = float('inf')\n    max_diff = float('-inf')\n\n    # Iterate through the sorted array and find minimum and maximum differences\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        min_diff = min(min_diff, diff)\n        max_diff = max(max_diff, diff)\n\n    return min_diff, max_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference as infinity\n    min_diff = float('inf')\n\n    # Initialize two variables for the current minimum and maximum difference\n    min_diff_1 = float('inf')\n    max_diff_1 = float('-inf')\n\n    # Iterate through the array to find the minimum and maximum difference\n    for i in range(1,n):\n        diff = arr[i]-arr[i-1]\n        if diff < min_diff_1:\n            min_diff_1 = diff\n            max_diff_1 = arr[i]\n        elif diff > max_diff_1:\n            max_diff_1 = diff\n\n    # Calculate the minimum difference\n    min_diff = min(max_diff_1, min_diff_1)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference and index of minimum element\n    min_diff = arr[1] - arr[0]\n    min_index = 0\n\n    # Traverse the array and check for minimum difference between adjacent elements\n    for i in range(1, n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n            min_index = i\n\n    return min_diff, min_index\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array of integers and its length as input, and returns the minimum difference between any two elements in the array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize two variables to store the minimum difference and the current difference\n    min_diff = float('inf')\n    curr_diff = float('inf')\n    \n    # Iterate through the sorted array\n    for i in range(n-1):\n        # Calculate the difference between current element and next element\n        curr_diff = arr[i+1] - arr[i]\n        \n        # Update the minimum difference if the current difference is less than the minimum difference\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n        \n        # Update the current difference with the next element\n        curr_diff = arr[i+1] - arr[i]\n    \n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    # Initialize count variable\n    count = 0\n\n    # Loop through each character in the string\n    for char in str:\n        # If the character is a digit, increment the count\n        if char.isdigit():\n            count += 1\n\n    # Return the count of digits\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(string):\n    '''\n    This function takes a string as input and returns the count of digits in the string.\n    '''\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    count = 0\n\n    for i in str:\n        if i.isdigit():\n            count += 1\n\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    count = 0\n    while count <= n:\n        if count % 2 == 0:\n            count += 2\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    polite_number = 1\n    if n <= 1:\n        return polite_number\n    else:\n        for i in range(1, n+1):\n            polite_number *= (i + 1) / (2 * i + 1)\n        return int(polite_number)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n <= 0: \n        return 0\n    \n    # First polite number is 1\n    polite = 1\n    \n    # Count of polite numbers starting from 2\n    count = 1\n    \n    # Calculate the nth polite number using the formula: (n * (n + 1)) / 2\n    while count < n:\n        polite = (polite * (polite + 1)) // 2\n        count += 1\n    \n    return polite\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    a = 1\n    b = 1\n    count = 1\n    \n    while count < n:\n        if count % 2 == 1:\n            a += 1\n        else:\n            b += 1\n        count += 1\n        \n    if a == 1:\n        return b\n    else:\n        return a\n    "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    g = math.gcd(n, 1, n)\n    common_factors = [i for i in range(1, n + 1) if math.gcd(n, i, n) == 1]\n\n    for y in range(1, n + 1):\n        if n % y == 0:\n            x = math.lcm(common_factors)\n            return x * (y - 1) + 1\n\n    # if we reach this point, there is no polite number\n    return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        if i % 2 == 0:\n            i += 1\n        else:\n            count += 1\n            i += 2\n    return i"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n\n    return num - 1\n\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 4\n    elif n == 3: \n        return 6\n    else: \n        return 8 * math.factorial(n-3)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    polite_number = 1\n    count = 0\n    while count < n:\n        if is_prime(polite_number):\n            count += 1\n            polite_number += 1\n        else:\n            polite_number += 2\n    \n    return polite_number\n\nn = 10\nprint(is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        if n % 2 == 0:\n            return is_polite(n//2) + 1\n        else:\n            return is_polite((n-1)//2) + 2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    n = len(l1)\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        pairs = []\n        for i in range(len(l1)-1):\n            pairs.append((l1[i], l1[i+1]))\n        return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    if n < 2:\n        return result\n    else:\n        for i in range(n-1):\n            result.append((l1[i], l1[i+1]))\n        return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    n = len(l1)\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Compute the difference between two lists.\n\n    Args:\n        li1 (list): A list of elements\n        li2 (list): A list of elements\n\n    Returns:\n        list: A new list with the elements of `li1` that are not in `li2`\n    \"\"\"\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements present in list1 but not in list2.\n    \"\"\"\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list\n"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # concatenate the two lists\n    lst = li1 + li2\n    # remove duplicates\n    lst = list(set(lst))\n    # sort the list\n    lst.sort()\n    # reverse the list to get the difference\n    return lst[::-1]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Create an empty list to store the difference between li1 and li2\n    diff = []\n    # Loop through li1 and li2\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    # Return the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the list of elements that are present in the first list but not in the second list.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create a new list to store the difference between the two lists\n    diff_list = []\n    # iterate over each element of the first list\n    for i in li1:\n        # check if the element is not in the second list\n        if i not in li2:\n            # if not, add it to the new list\n            diff_list.append(i)\n    # return the new list with the difference between the two lists\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements of the first list that are not in the second list.\n    \"\"\"\n    diff_list = []\n    for element in li1:\n        if element not in li2:\n            diff_list.append(element)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    \n    while i <= n:\n        if i % 2!= 0:\n            sum += i ** 4\n        i += 1\n    \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    sum = 0\n    while count < n:\n        num = 3 * 3 * 3 * 3\n        if num % 2 == 1:\n            sum += num\n        count += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_nums = [i for i in range(n+1, 2*n+1, 2)]\n    return sum(i**4 for i in odd_nums)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_fourth_powers += i ** 4\n    return sum_of_fourth_powers\n\nn = int(input(\"Enter the number of odd natural numbers: \"))\nprint(\"The sum of fourth power of first {} odd natural numbers is {}\".format(n, odd_num_sum(n)))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = [i for i in range(1, 2*n+1, 2)] # generate odd numbers from 1 to 2n\n    sum_fourth = 0\n    for num in odd_nums:\n        fourth_power = num ** 4 # calculate fourth power of the number\n        sum_fourth += fourth_power # add the fourth power to the sum\n    return sum_fourth"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    i = 1\n    while i <= n:\n        sum_of_fourth_powers += i ** 4\n        i += 2\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1):\n        sum_of_fourth_powers += i ** 4\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if char == ')' and top!= '(':\n                    return False\n                elif char == '}' and top!= '{':\n                    return False\n                elif char == ']' and top!= '[':\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n    \n    for bracket in exp:\n        if bracket in open_brackets:\n            stack.append(bracket)\n        elif bracket in close_brackets:\n            if not stack:\n                return False\n            if close_brackets[bracket]!= stack.pop():\n                return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            expected = {'(': ')', '{': '}', '[': ']'}[stack.pop()]\n            if char!= expected:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    # Initialize a stack\n    stack = deque()\n\n    # Traverse the expression\n    for char in exp:\n\n        # If the character is an opening parenthesis, push it to the stack\n        if char == '(':\n            stack.append(char)\n\n        # If the character is a closing parenthesis, pop the stack and check if it matches\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= '(':\n                return False\n\n    # If the stack is not empty, it means there are unmatched opening parentheses\n    if len(stack)!= 0:\n        return False\n\n    # If the function reaches this point, the expression is balanced\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n    \n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char not in open_brackets.values():\n                return False\n            if top_char in close_brackets:\n                if char!= close_brackets[top_char]:\n                    return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balance = 0\n\n    for char in exp:\n        if char in '([{':\n            stack.append(char)\n            balance += 1\n        elif char in ')]}':\n            if not stack:\n                return False\n            elif char == ']' and stack[-1] == '[' or char == ')' and stack[-1] == '(' or char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n            balance -= 1\n        elif char =='':\n            continue\n        else:\n            return False\n\n    return balance == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_parentheses = {'(', '{', '['}\n    close_parentheses = {')', '}', ']'}\n\n    for char in exp:\n        if char in open_parentheses:\n            stack.append(char)\n        elif char in close_parentheses and not stack:\n            return False\n        elif char in close_parentheses and stack:\n            if close_parentheses[char] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return \"Not Balanced\"\n            j = stack.pop()\n            if j >= i:\n                return \"Not Balanced\"\n    if stack:\n        return \"Not Balanced\"\n    return \"Balanced\""
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create a set to store the words with length K\n    k_length_words = set()\n    \n    # Iterate through each word and check if its length is equal to K\n    for word in words:\n        if len(word) == K:\n            k_length_words.add(word)\n    \n    # Convert the set of k length words to a list and join them into a string\n    result =''.join(list(k_length_words))\n    \n    # Return the result string\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Create an empty list to store the new string without the words with k length\n    new_str = []\n    # Loop through each word in the words list\n    for word in words:\n        # Check if the length of the word is greater than or equal to K\n        if len(word) >= K:\n            # If the length of the word is greater than or equal to K, append it to the new string\n            new_str.append(word)\n    # Join the words in the new string with spaces\n    final_str =''.join(new_str)\n    # Return the final string\n    return final_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)\n\n\nif __name__ == \"__main__\":\n    test_str = \"This is a sample sentence. There are words with length 6, 7, and 8 in this sentence.\"\n    K = 7\n    print(remove_length(test_str, K))"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        matches = re.findall(pattern, text)\n        if len(matches) == 0:\n            return None\n        else:\n            for match in matches:\n                print(f\"Match found at position {text.index(match)}: '{match}'\")\n            return matches\n    except re.error:\n        print(\"Error in the pattern.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        count = len(matches)\n        position = text.index(matches[0])\n        return count, position\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for matchNum, match in enumerate(matches, start=1):\n            start = match.start()\n            end = match.end()\n            print(f\"Occurrence {matchNum}: '{match.group()}' found at positions {start} to {end}\")\n        return None\n    else:\n        print(\"No match found.\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    # Define a function to find the position of the first occurrence of the pattern in the text\n    def find_position(text, pattern):\n        match = re.search(pattern, text)\n        if match:\n            return match.start()\n        else:\n            return None\n    \n    # Define a function to find the occurrence of the pattern in the text\n    def find_occurrence(text, pattern):\n        count = 0\n        match = re.search(pattern, text)\n        while match:\n            count += 1\n            match = re.search(pattern, text, pos=match.end())\n        return count\n    \n    # Find the position of the pattern in the text\n    position = find_position(text, pattern)\n    # If the pattern is not found, return None\n    if position is None:\n        return None\n    \n    # Find the occurrence of the pattern in the text\n    occurrence = find_occurrence(text, pattern)\n    \n    # Return the result as a tuple\n    return (position, occurrence)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        # Extract the positions and occurrences of the matches\n        positions = [match.start() for match in matches]\n        occurrences = [match.end() - match.start() for match in matches]\n        # Create a dictionary with the matches and their positions and occurrences\n        result = dict(zip(matches, (positions, occurrences)))\n        # Return the dictionary\n        return result\n    else:\n        # Return None if no match is found\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], matches[0].start()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            start = match.start()\n            end = match.end()\n            print(\"Substring found at position {} and length {}\".format(start, end - start))\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    # initialize a counter for odd numbers at odd positions\n    odd_count = 0\n\n    # loop through the list and count the number of odd numbers at odd positions\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0 and i % 2 == 1:\n            odd_count += 1\n\n    # check if all odd numbers at odd positions have been found\n    return odd_count == len(nums) - 1"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not nums[i].isdigit():\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:  # check if i is odd\n            if len([num for num in nums[i:] if num % 2 == 1]) % 2 == 1:  # check if any odd number is found after i\n                return False  # return False if odd number is found\n    return True  # return True if no odd number is found"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # initialize a list to store the odd numbers of the list\n    odd_nums = []\n    \n    # loop through the list and append the odd numbers to a new list\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    \n    # check if the length of the odd_nums list is equal to the length of the original list\n    if len(odd_nums) == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        count = 0\n        for num in nums:\n            if num % 2 == 0:\n                count += 1\n                if count % 2!= 0:\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if i % 2!= 0:\n                if nums[i] % 2 == 0:\n                    return False\n            else:\n                if nums[i] % 2 == 0:\n                    return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2 == 1:\n                odd_count += 1\n            else:\n                return False\n    if odd_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # Loop through each odd index of the list\n    for i in range(1, len(nums), 2):\n        # Check if the odd index contains odd numbers\n        if not any(nums[i] % 2 == 0 for num in nums[i:]):\n            return False\n\n    # If we made it through the loop without returning False, return True\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            for j in range(max(0, i-2), min(i+3, len(test_str))):\n                if test_str[j] in vowels:\n                    count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    num_vowels = 0\n    for char in test_str:\n        if char in vowels:\n            num_vowels += 1\n            if len(test_str) > 1:\n                prev_char = test_str[test_str.index(char)-1]\n                if prev_char in vowels:\n                    num_vowels -= 1\n    return num_vowels"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # create a dictionary to store the vowels and their neighboring characters\n    vowels = {'a': 'aeiou', 'e': 'aeiou', 'i': 'aeiou', 'o': 'aeiou', 'u': 'aeiou'}\n    # initialize a counter for the number of vowels found\n    count = 0\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character has vowels as its neighbors\n        if char in vowels.values():\n            # increment the counter\n            count += 1\n    # return the count of vowels\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    if not arr:\n        return 0\n    \n    seen = set()\n    sum = 0\n    \n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            sum += num\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initialize a set to keep track of the non-repeated elements\n    seen = set()\n    # Initialize a variable to store the sum of the non-repeated elements\n    sum = 0\n    # Loop through the elements of the list\n    for element in arr: \n        # If the element is not in the set, add it and update the sum\n        if element not in seen: \n            seen.add(element) \n            sum += element\n    # Return the sum of the non-repeated elements\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # Convert the set back to a list for the final sum calculation\n    unique_list = list(unique_set)\n    # Calculate the sum of the unique list\n    sum_unique = sum(unique_list)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements\n    unique_elements = set(arr)\n    # initialize the sum variable to 0\n    sum_non_repeated = 0\n    # iterate over the unique elements\n    for element in unique_elements:\n        # add the element to the sum variable\n        sum_non_repeated += element\n    # return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n    \n    # Calculate the sum of non-repeated elements in the list\n    sum_sum = sum(unique_set)\n    \n    return sum_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Loop through the list and increment the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Initialize a variable to store the sum of non-repeated elements\n    total_sum = 0\n\n    # Loop through the list and add up the non-repeated elements' frequencies\n    for num, freq_count in freq.items():\n        if freq_count == 1:\n            total_sum += num\n\n    # Return the total sum of non-repeated elements\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    sum_of_unique = sum(unique_elements)\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    # create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # create a list of elements that have a count of 1 in the dictionary\n    unique_elements = [key for key, value in count_dict.items() if value == 1]\n\n    # calculate the sum of the unique elements in the array\n    sum_unique_elements = sum(unique_elements)\n\n    return sum_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the given list\n    unique_set = set(arr)\n    # Convert the set to a list and sort it in ascending order\n    unique_list = sorted(list(unique_set))\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_of_non_repeated = 0\n    # Iterate through the list and add the elements that appear only once to the sum\n    for i in range(len(unique_list)):\n        if unique_list[i] == unique_list[i+1]:\n            continue\n        else:\n            sum_of_non_repeated += unique_list[i]\n    # Return the sum of non-repeated elements\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # create a new list to store non-repeated elements\n    non_repeated = []\n    # iterate through the unique set and add the elements to the new list\n    for element in unique_set:\n        non_repeated.append(element)\n    # calculate the sum of the non-repeated elements\n    sum_non_repeated = sum(non_repeated)\n    # return the sum\n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        list1 (list): List of elements to be packed.\n\n    Returns:\n        list: List of packed sublists.\n    \"\"\"\n    # group the list by consecutive duplicates and pack them into sublists\n    grouped_list = groupby(list1)\n    packed_list = []\n    for key, group in grouped_list:\n        if len(list(group)) > 1:\n            packed_list.append([key])\n        else:\n            packed_list.append(list(group))\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [''.join(g) for k, g in groupby(list1) if k]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(lst):\n        if not key:\n            result.append(list(group))\n        else:\n            result.append(list(group))\n            if not key.startswith(result[-1][-1]):\n                result[-1].append(key)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # use groupby to group consecutive elements of the list\n    group_list = [(k, list(g)) for k, g in groupby(list1) if k == next(iter(g))]\n    # create sublists for each consecutive group of duplicates\n    sublists = []\n    for i in range(len(group_list)):\n        sublist = []\n        for j in range(i+1, len(group_list)):\n            if group_list[i][0] == group_list[j][0]:\n                sublist.append(group_list[j][1])\n            else:\n                sublists.append(sublist)\n                sublist = []\n    sublists.append(sublist)\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list and returns a list of sublists containing consecutive duplicates.\n    '''\n    return [list(g) for k, g in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list by its elements and use a list comprehension to create a new list with sublists\n    sublists = [list(group) for key, group in groupby(list1) if len(list(group)) > 1]\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if not key:\n            continue\n        group = list(group)\n        if len(group) == 1:\n            result.append(group)\n        else:\n            result.append(group[:-1])\n            result.append(group[-1:])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(enumerate(list1), lambda x: x[0] - x[1])\n    result = []\n    for item in grouped_list:\n        group = list(item[1])\n        result.append(group)\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in sublist_counts:\n            sublist_counts[sublist] += 1\n        else:\n            sublist_counts[sublist] = 1\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts of lists\n    count_dict = {}\n    \n    # Loop through each list in the input list\n    for lst in list1:\n        # Turn the list into a tuple and add it to the count dictionary\n        count_dict[(tuple(lst))] = count_dict.get((tuple(lst)), 0) + 1\n    \n    # Return the dictionary with counts of lists\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the count of unique sublists\n    count_dict = {}\n\n    # Iterate over each element in the list1\n    for elem in list1:\n\n        # If the element is a list, turn it into a tuple and check if it is already in the dictionary\n        if type(elem) == list:\n            if tuple(elem) in count_dict:\n                count_dict[tuple(elem)] += 1\n            else:\n                count_dict[tuple(elem)] = 1\n\n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublists = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist_tuple = tuple(item)\n            if sublist_tuple not in sublists:\n                sublists[sublist_tuple] = 1\n            else:\n                sublists[sublist_tuple] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Initialize an empty dictionary to store the counts of lists\n    counts = {}\n    # Loop through the input list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sublist) not in counts:\n            # If it doesn't exist, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n        # If it does exist, increment the count by 1\n        else:\n            counts[tuple(sublist)] += 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the counts of unique sublists\n    sublist_counts = {}\n    \n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # If the tuple is already in the dictionary, increment its count by 1\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    \n    # Return the dictionary of unique sublist counts\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for item in list1:\n        # turn the list into a tuple to compare it to others\n        tuple_item = tuple(item)\n        if tuple_item in counts:\n            counts[tuple_item] += 1\n        else:\n            counts[tuple_item] = 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if tuple(sublist) not in sublist_count:\n            sublist_count[tuple(sublist)] = 1\n        else:\n            sublist_count[tuple(sublist)] += 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function counts the number of unique sublists within the given list.\n    \"\"\"\n    # Create an empty dictionary to store the unique sublists and their counts\n    count_dict = {}\n    \n    # Loop through each sublist in the list\n    for sublist in lst:\n        # Turn the sublist into a tuple and add it to the dictionary if it doesn't already exist\n        if tuple(sublist) not in count_dict:\n            count_dict[tuple(sublist)] = 1\n        else:\n            count_dict[tuple(sublist)] += 1\n    \n    # Return the dictionary of unique sublists and their counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the unique sublists\n    unique_sublists = {}\n    # Loop through each element of the list1\n    for i in range(len(list1)):\n        # Check if the element is a list\n        if isinstance(list1[i], list):\n            # Turn the list to a tuple\n            sublist = tuple(list1[i])\n            # If the tuple is not in the dictionary, add it with value 1\n            if sublist not in unique_sublists:\n                unique_sublists[sublist] = 1\n            # If the tuple is already in the dictionary, increment its value by 1\n            else:\n                unique_sublists[sublist] += 1\n    # Return the dictionary\n    return unique_sublists"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def helper(combination, remaining_sum, target_sum, result):\n        if remaining_sum == 0 and target_sum == 0:\n            result.append(tuple(combination))\n        elif remaining_sum < 0 or target_sum < 0:\n            return\n        else:\n            for i in range(len(combination)):\n                if i > 0 and combination[i] == combination[i-1]:\n                    continue\n                new_combination = combination[:i] + (combination[i] + 1,) + combination[i+1:]\n                new_target_sum = target_sum - combination[i]\n                helper(new_combination, remaining_sum - combination[i], new_target_sum, result)\n    \n    helper([], sum(test_list), sum(test_list), [])\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for combination in combinations(test_list, r=2):\n        if sum(combination) == 0:\n            print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def check_combinations(combination):\n        '''\n        This function checks if the combination is valid or not.\n        '''\n        sum_combination = sum(combination)\n        if sum_combination in test_list:\n            return True\n        else:\n            return False\n\n    combinations_list = [tuple(x) for x in combinations(test_list, len(test_list))]\n    return [combination for combination in combinations_list if check_combinations(combination)]"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    # Create a set of all the sums in the list\n    sums = set()\n    for tup in test_list:\n        sums.add(sum(tup))\n\n    # Find all combinations of sums with tuples in the list\n    result = []\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(sums, i):\n            # Check if the combination is a tuple of tuples\n            if all(isinstance(tup, tuple) for tup in comb):\n                result.append(comb)\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Find the total sum of all the tuples in the list\n    total_sum = sum(sum(tup) for tup in test_list)\n    print(\"The total sum is:\", total_sum)\n    \n    # Find all possible combinations of sums from the total sum\n    combinations_list = list(combinations(range(1, total_sum+1), len(test_list)))\n    print(\"The list of combinations is:\", combinations_list)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    # Sort the given list of tuples in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Define a recursive function to find the combinations of sums\n    def find_combinations_helper(current_sum, current_combination, index):\n        \"\"\"\n        Define a recursive function to find the combinations of sums with tuples in the given tuple list.\n        \"\"\"\n        # Base case: if the current combination has a length of 2, it's a valid combination\n        if len(current_combination) == 2:\n            combinations_list.append(tuple(current_combination))\n            return\n\n        # Recursive case: add the current element to the current combination and recursively call the function\n        for i in range(index, len(sorted_list)):\n            if current_sum + sorted_list[i][0] <= sorted_list[-1][0]:\n                current_combination.append(sorted_list[i])\n                find_combinations_helper(current_sum + sorted_list[i][0], current_combination, i)\n                current_combination.pop()\n\n    # Call the helper function to find the combinations of sums\n    find_combinations_helper(0, [], 0)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            current_combination = (sum(test_list[i]), sum(test_list[j]))\n            if current_combination not in all_combinations:\n                all_combinations.append(current_combination)\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function finds all the combinations of sums with tuples in the given tuple list.\n    '''\n    test_list = sorted(test_list) # Sort the list\n    n = len(test_list)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_of_two = sum(test_list[i:j+1]) # Calculate the sum of two numbers in the tuple\n            if sum_of_two in test_list: # Check if the sum is already present in the list\n                comb = tuple(sorted(set(test_list[i:j+1]))) # Get the combination of unique elements in the tuple\n                if comb not in result: # Check if the combination is already present in the result\n                    result.append(comb) # If not, add it to the result\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Create a dictionary to store the tuples and their indices in the list\n    tuples_dict = {}\n    for i, tuple_ in enumerate(test_list):\n        tuples_dict[tuple_] = i\n    \n    # Find all possible combinations of sums of pairs from the list\n    combinations_list = []\n    for i, tuple_ in enumerate(test_list):\n        for j, tup in enumerate(test_list[i+1:], i+1):\n            if tup not in combinations_list:\n                combinations_list.append((tuple_, tup))\n    \n    # Iterate through the combinations and check if they contain a tuple in the given list\n    for combination in combinations_list:\n        if combination[0] in tuples_dict and combination[1] in tuples_dict:\n            # If both tuples are in the list, add the combination to the result list\n            result_list = combinations_list.copy()\n            result_list.remove(combination)\n            result_list.append(combination)\n            return result_list\n    \n    # If no combination contains both tuples, return an empty list\n    return []"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # List of all possible sums\n    all_sums = []\n    for i in range(1, len(test_list)+1):\n        for j in range(i, len(test_list)+1):\n            all_sums.append((i,j))\n    \n    # Find all combinations of sums from the given list of tuples\n    combinations_of_sums = []\n    for sum_tuple in all_sums:\n        for tuple_combination in combinations(test_list, sum_tuple[0]):\n            if sum(tuple_combination) == sum_tuple[1]:\n                combinations_of_sums.append(tuple_combination)\n    \n    return combinations_of_sums"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 2\n    if n > 1 and n % 2 == 0:\n        divisor_count += 1\n    return divisor_count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_divisors(n):\n    '''\n    This function counts the number of divisors of a given number using the Sieve of Eratosthenes algorithm.\n    '''\n    # Create a list of numbers from 2 to n (inclusive)\n    divisors = list(range(2, n+1))\n\n    # Initialize a boolean array of size n+1 to mark if each number is a divisor or not\n    is_divisor = [True] * (n+1)\n\n    # Start from 2 (not included) and mark all divisors of 2\n    for i in range(2, int(math.sqrt(n))+1):\n        if is_divisor[i]:\n            for j in range(i*i, n+1, i):\n                is_divisor[j] = False\n\n    # Count the number of remaining divisors (those that are still marked as true)\n    count = sum(is_divisor[2:])\n\n    # Return the count of divisors as even or odd based on whether they are even or odd\n    if count % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes a number n as input and returns True if the count of divisors is even, and False otherwise.\n    \"\"\"\n    # Calculate the count of divisors of n\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    \n    # Check if the count of divisors is even or odd\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # calculate the sum of divisors of n\n    sum_div = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            sum_div += i \n            if i!= n/i: \n                sum_div += n/i \n    # check whether the count of divisors is even or odd\n    if sum_div % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    count += 1 if n > 1 else 0\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function checks whether the count of divisors is even or odd. \n    It returns True if the count of divisors is even and False if it is odd.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    count_div = len(divisors)\n    if count_div % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function counts the number of divisors of a number n.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    divisors.append(n)\n    return divisors"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if len(arr[i]) % 2!= 0:\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        total = 0\n        for i in range(len(arr)):\n            if len(arr[i]) % 2!= 0:\n                total += sum(arr[i])\n        return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n\n    for i in range(n):\n        for j in range(i+2, n+1, 2):\n            sub_arr = arr[i:j]\n            sum += sum(sub_arr)\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    # initialize a variable to store the sum of odd length subarrays\n    sum_odd_length = 0\n    \n    # loop through each element in the input array\n    for i in range(len(arr)):\n        # loop through each possible starting index for the current element\n        for j in range(i+1, len(arr)+1):\n            # check if the length of the current subarray is odd and the sum of all elements in the subarray is odd\n            if (j-i+1) % 2!= 0 and sum(arr[i:j]) % 2!= 0:\n                # add the sum of all elements in the subarray to the sum of odd length subarrays\n                sum_odd_length += sum(arr[i:j])\n    \n    # return the sum of odd length subarrays\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            total += arr[j-2]\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    temp_sum = 0\n    \n    for i in range(n):\n        temp_sum += arr[i]\n        if i > 0 and i % 2!= 0 and i % 5 == 0:\n            result += temp_sum\n            temp_sum = 0\n    \n    if temp_sum!= 0:\n        result += temp_sum\n        \n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_len_subarrays = 0\n    n = len(arr)\n    for i in range(n-2):\n        current_sum = 0\n        for j in range(i, i+3):\n            current_sum += arr[j]\n        if current_sum % 2!= 0:\n            sum_odd_len_subarrays += current_sum\n    return sum_odd_len_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    odd_sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            odd_sum += arr[j-1]\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if j-i+1 % 2 == 1:\n                result += sum(arr[i:j+1])\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    sum_of_subarrays = 0\n    n = len(arr)\n    \n    for i in range(n-1):\n        for j in range(i+2, n, 2):\n            subarray = arr[i:j]\n            sum_of_subarrays += sum(subarray)\n    \n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of all odd length subarrays in the array.\n    \"\"\"\n    # Initialize the sum of odd length subarrays to zero\n    odd_sum = 0\n    \n    # Loop through the array of integers\n    for i in range(len(arr)):\n        # Check if the length of the subarray is odd\n        if i % 2 == 1:\n            # Add the sum of the subarray to the total sum of odd length subarrays\n            odd_sum += sum(arr[i:i+3])\n    \n    # Return the total sum of odd length subarrays\n    return odd_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert an RGB color value to HSV color value.\n    Conversion formula:\n    H = degrees(max(min(r, g, b), 0))\n    S = if H == 0 or H == 1 or H == 3 or H == 5 or H == 7 or H == 9 or H == 11 then 0\n           else (max(r, g, b) - min(r, g, b)) / (max(H, 1 - H))\n    V = max(r, g, b)\n    \"\"\"\n\n    # Convert RGB to HSV\n    h = 0\n    if r >= g and r >= b:\n        h = (b - g) / (r - g)\n    elif g >= r and g >= b:\n        h = 2 + (r - b) / (g - b)\n    elif b >= r and b >= g:\n        h = 4 + (g - r) / (b - r)\n\n    if r == g and r == b:\n        s = 0\n    elif max(r, g, b) - min(r, g, b) == 0:\n        s = 0\n    else:\n        s = (max(r, g, b) - min(r, g, b)) / max(r, g, b)\n\n    v = max(r, g, b)\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255, g / 255, b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = 0\n        s = 0\n    elif cmax == r:\n        h = 60 * ((g - b) / delta)\n    elif cmax == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n    \n    h = int(h)\n    if h < 0:\n        h += 360\n        \n    if delta == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    \n    v = cmax\n    \n    return [h, s, v]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert r,g,b to floats\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    \n    # Find the maximum and minimum values in the RGB color space\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between the maximum and minimum values\n    delta = max_val - min_val\n    \n    # Calculate the hue\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    hue = hue * 60 if delta > 0 else hue * 60\n    \n    # Calculate the saturation\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n    \n    # Calculate the value\n    value = max_val\n    \n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r, g, b = r/255, g/255, b/255  # Normalize the values to the range of 0-1\n\n    # Convert to HSV color model\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val\n\n    if max_val == min_val:\n        h = 0  # achromatic\n    elif max_val == r and g >= b:\n        h = 60 * ((g - b) / (max_val - min_val))\n    elif max_val == r and g < b:\n        h = 60 * ((g - b) / (max_val - min_val)) + 360\n    elif max_val == g:\n        h = 60 * ((b - r) / (max_val - min_val)) + 120\n    elif max_val == b:\n        h = 60 * ((r - g) / (max_val - min_val)) + 240\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = (max_val - min_val) / max_val\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    delta = max_value - min_value\n    \n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif max_value == g:\n        h = 60 * (((b - r) / delta) + 2)\n    else:\n        h = 60 * (((r - g) / delta) + 4)\n    \n    h = int(h)\n    \n    if h < 0:\n        h += 360\n        \n    s = delta / max_value\n    \n    if max_value == 0:\n        v = 0\n    else:\n        v = max_value\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert r, g, and b to float\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n    \n    # calculate minimum and maximum values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # calculate chroma and hue values\n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        delta = max_val - min_val\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h / 6.0\n        \n        # calculate chroma\n        if max_val == r:\n            s = delta / (max_val - min_val)\n        elif max_val == g:\n            s = delta / (max_val - min_val)\n        else:\n            s = delta / (max_val - min_val)\n        \n        # calculate hue\n        if h < 0:\n            h += 1\n    \n    # convert hsv values to float and return them as a tuple\n    h = round(h * 360, 1)\n    s = round(s * 100, 1)\n    v = round(max_val * 100, 1)\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    :param r: Red value (0 to 255)\n    :param g: Green value (0 to 255)\n    :param b: Blue value (0 to 255)\n    :return: Hue (0 to 360), Saturation (0 to 100), Value (0 to 100)\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255  # Normalize to 0-1 range\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n\n    if max_rgb == min_rgb:\n        h = s = 0  # achromatic\n    else:\n        s = delta / max_rgb\n        h = 60 * (g - b) / delta\n        if h < 0:\n            h += 360\n        h = h / 60\n\n    hsv = (int(h * 360), int(s * 100), int(v * 100))\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\n    :param r: Red value in range 0-255\n    :param g: Green value in range 0-255\n    :param b: Blue value in range 0-255\n    :return: Tuple of h, s, and v values in range 0-1\n    \"\"\"\n    # Convert the RGB values to HSV values\n    h = r / 255\n    if g == r:\n        h = (g / 255) + ((b / 255) - (g / 255)) / 6\n    elif b == r:\n        h = (b / 255) + ((g / 255) - (b / 255)) / 6\n    else:\n        h = (g / 255) + ((b / 255) - (g / 255)) / 6\n\n    h = h % 1\n\n    s = max(r, g, b) - min(r, g, b)\n\n    if s == 0:\n        v = 0\n    else:\n        v = max(r, g, b) / s\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes three integers (r, g, b) representing the red, green and blue values of an rgb color and returns the hue, saturation and value of the color in the HSV (hue, saturation, value) format.\n    The HSV color model is commonly used to represent color in a wide variety of applications, including image processing, computer graphics, artificial intelligence and machine learning.\n    '''\n\n    # Normalize the input values to the range of 0-255\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * ((g - b) / delta)\n    elif max_val == g:\n        hue = 60 * ((b - r) / delta + 2)\n    else:\n        hue = 60 * ((r - g) / delta + 4)\n\n    if hue < 0:\n        hue += 360\n\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    value = max_val\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == min_val:\n        h = s = 0\n    else:\n        s = delta / max_val\n\n    if r == max_val:\n        h = (g - b) / delta\n    elif g == max_val:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h *= 60 if delta > 0 else 0\n\n    return (int(h), int(s * 100), int(v * 100))"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num % 2 == 0 and count == 0:\n            even_num = num\n            count += 1\n        elif num % 2!= 0 and count == 1:\n            odd_num = num\n            count += 1\n        if count == 2:\n            return even_num * odd_num\n    return None\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    count = 0\n    even = 0\n    odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even += num\n            count += 1\n        else:\n            odd += num\n            \n    if count == 0:\n        return 0\n    else:\n        return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product = product * num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            product = num * product\n            even_count = 0\n            odd_count = 0\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0:\n        return None\n    else:\n        return odd_count * even_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n    if even_count > 0 and odd_count > 0:\n        result = even_product * odd_product\n        return result\n    else:\n        return \"Not enough even or odd numbers found in the list.\""
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        product = list1[0] * list1[-1]\n    elif even_count > 0 and odd_count == 0:\n        product = list1[0] * list1[len(list1)//2]\n    elif even_count == 0 and odd_count > 0:\n        product = list1[-1] * list1[len(list1)//2]\n    else:\n        product = 1\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        product *= num\n\n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2 == 0:\n            count += 1\n            if count == 2:\n                return i*list1[list1.index(i)+1]\n    return 0\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the product of the first even and odd numbers.\n    If the list has an odd number of elements, then it will return None.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    if even_count == 0:\n        return None\n\n    product = even_count * odd_count\n\n    return product\n"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define a function to convert string to integer tuple\n    def string_to_int_tuple(s):\n        # Create an empty list to store the integer values\n        int_list = []\n        # Split the string by comma and space to get individual values\n        values = s.split(',')\n        # Iterate through the values and convert each value to an integer\n        for value in values:\n            int_list.append(int(value.strip()))\n        # Return the integer tuple\n        return tuple(int_list)\n    \n    # Convert the string to an integer tuple and return it\n    return string_to_int_tuple(test_str)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # split the tuple string into a list of strings\n    lst_str = test_str.replace('(', '').replace(')', '').replace(',','').split()\n\n    # convert each string to an integer\n    lst_int = [int(num) for num in lst_str]\n\n    # convert the list of integers to a tuple\n    tup_int = tuple(lst_int)\n\n    return tup_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into a list of words\n    words = test_str.split()\n    # Convert each word to an integer and append to a new list\n    int_list = [int(word) for word in words]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a list of strings\n    str_list = test_str.split(\",\")\n\n    # Create an empty list to store integers\n    int_list = []\n\n    # Loop through each string in the list\n    for str_item in str_list:\n        # Convert the string to an integer\n        int_item = int(str_item.strip())\n        # Add the integer to the list\n        int_list.append(int_item)\n\n    # Return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_list = []\n    for item in str_list:\n        if item.isdigit():\n            int_list.append(int(item))\n        else:\n            int_list.append(0)\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Initialize an empty list to store the integers\n    result = []\n    \n    # Split the input string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Iterate over the list of strings and convert each string to an integer\n    for item in str_list:\n        result.append(int(item))\n    \n    # Return the tuple of integers\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # convert the string to a tuple using split() method\n    test_tuple = tuple(test_str.split(','))\n\n    # convert each element of the tuple to an integer using map() method\n    test_tuple = tuple(map(int, test_tuple))\n\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert tuple string to list of strings\n    lst = list(map(str, test_str))\n    # Convert the list of strings to tuple of integers\n    result = tuple(map(int, lst))\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    result = ()\n    for i in test_str:\n        try:\n            result += (int(i),)\n        except ValueError:\n            pass\n    return result"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the right insertion point for x in a\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            # x is already in the list, return the rightmost index\n            return mid\n    # If x is not in the list, return the leftmost index\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index > 0 and a[index-1] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Args:\n        a (list): List of sorted integers\n        x (int): Integer to be inserted\n\n    Returns:\n        int: Index of the right insertion point for x\n    \"\"\"\n\n    # Use bisect to find the index where x should be inserted\n    index = bisect.bisect_right(a, x)\n\n    # Check if x is already present in the list\n    if index == len(a) or a[index]!= x:\n        # If not, insert x at the right insertion point\n        index += 1\n\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Given a sorted list a of integers, and a value x, find the right insertion point\n    for x in the sorted list.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the index where x belongs in the sorted array a\n    index = bisect.bisect_left(a, x)\n\n    # If x is equal to the last element in the array, return the index.\n    if index == len(a):\n        return index\n\n    # If x is less than the first element in the array, return the index.\n    if a[index] > x:\n        return index - 1\n\n    # If x is greater than the first element in the array, but less than or equal to the last element,\n    # return the index.\n    if a[index] == x and a[index + 1] > x:\n        return index\n\n    # If x is greater than the last element in the array, return the index plus one.\n    if a[index] == x and a[index - 1] < x:\n        return index + 1\n\n    # If x is greater than both elements in the array, return the index plus one.\n    if a[index] == x and a[index - 1] < x and a[index + 1] > x:\n        return index + 1\n\n    # If none of the above conditions are met, return the index plus one.\n    return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the right insertion point\n    lo, hi = 0, len(a) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i == 0 or a[i-1]!= x:\n        return i\n    else:\n        return i-1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'[a][b][b][a]'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{3})'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{1}b{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    return match"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    pattern = r'a.*b{3}'\n\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    \n    # Concatenate the tuple and the string\n    new_tuple_str = str(test_tuple) + test_str\n    \n    # Convert the concatenated string back to a tuple\n    new_tuple = eval(new_tuple_str)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Create a new list containing only the first letter of each word\n    first_letters = [word[0] for word in words]\n\n    # Create a new list containing only the last letter of each word\n    last_letters = [word[-1] for word in words]\n\n    # Create a new list containing only the letters of each word in the original list\n    all_letters = [word for word in test_list]\n\n    # Combine the two lists to form a new list of tuples\n    new_list = list(zip(first_letters, last_letters, all_letters))\n\n    # Return the new list as a tuple\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_list + [test_str]\n    # Convert the combined list into a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # concatenate the list and string using the join() method\n    combined_str = ''.join(test_list) + test_str\n    \n    # convert the concatenated string into a list of characters\n    char_list = list(combined_str)\n    \n    # convert the list of characters into a tuple\n    new_tuple = tuple(char_list)\n    \n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_list = []\n    for item in test_list:\n        new_tuple_list.append(item + test_str)\n    new_tuple_list.append(test_str)\n    new_tuple = tuple(new_tuple_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_list) + (test_str,)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, test_list)\n    return new_tup"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Initialize a variable to store the count of even numbers in each index\n    even_count = [0] * len(nums)\n\n    # Iterate over the list and count the even numbers in each index\n    for num in nums:\n        if num % 2 == 0:\n            even_count[num//2] += 1\n\n    # Iterate over the list of even indices and check if each even index contains an even number\n    for i in range(0, len(even_count), 2):\n        if even_count[i] % 2 == 0:\n            return False\n\n    # If all even indices contain even numbers, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count += 1\n            if count > 2:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        for j in range(i + 2, len(nums) + 1, 2):\n            if nums[i:j] == sorted(nums[i:j]):\n                even_count += 1\n                break\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n    return count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n            else:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    return True if even_count == len(nums) else False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                count += 1\n            else:\n                return False\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_indices = []\n    \n    # Loop through the list and check if each even index has an even number of elements\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(nums[i:]) % 2 == 0:\n                even_indices.append(i)\n    \n    # Return True if all even indices have even numbers of elements, otherwise False\n    return True if len(even_indices) == len(nums) else False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for i in test_tup:\n        if type(i) == tuple:\n            for j in i:\n                new_list.append(j)\n        else:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [x for tup in test_tup for x in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for tup in test_tup for item in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            new_tup += i\n        else:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_list = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            for j in i:\n                new_list.append(j)\n        else:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Define a recursive function to flatten the tuple\n    def flatten(t):\n        if isinstance(t, tuple):\n            return [el for sublist in flatten(t) for el in sublist]\n        else:\n            return [t]\n    # Flatten the input tuple\n    flat_tup = flatten(test_tup)\n    # Remove the nested tuples from the flattened tuple\n    final_tup = [el for el in flat_tup if not isinstance(el, tuple)]\n    return final_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # check if the input is a tuple\n    if isinstance(test_tup, tuple):\n        # iterate over the elements of the tuple\n        for i in range(len(test_tup)):\n            # check if the element is also a tuple\n            if isinstance(test_tup[i], tuple):\n                # remove the nested tuple by recursively calling the function\n                test_tup[i] = remove_nested(test_tup[i])\n        # remove the nested tuple from the original tuple\n        return tuple([x for x in test_tup if not isinstance(x, tuple)])\n    else:\n        # if the input is not a tuple, just return it\n        return test_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    count = 0 \n    for item in input_list: \n        if isinstance(item, list): \n            count += 1 \n            count += count_list(item) \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # iterate through the array to find the last occurrence of the element x\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1  # if element not found in array, return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            result = mid\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function takes in two arguments: arr and x, where arr is the sorted array and x is the element that we want to find the last position of.\n    The function uses binary search to find the last position of the element in the array.\n    '''\n\n    # Initialize the left and right indices\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the last index to -1\n    last_index = -1\n\n    # Initialize the value of the mid index\n    mid = 0\n\n    # Keep looping until we find the last index\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the mid element is less than or equal to x, update the left index\n        if arr[mid] <= x:\n            left = mid + 1\n        else:\n            # If the mid element is greater than x, update the right index\n            right = mid - 1\n\n    # If the last index is still -1, it means that the element was not found in the array\n    if last_index == -1:\n        print(\"Element not found in the array.\")\n    else:\n        print(\"The last index of the element is:\", last_index)"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == x:\n            return mid\n        \n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two parameters, the sorted array and the element to be searched for.\n    It returns the index of the last occurrence of the element in the array.\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the index of the last occurrence of x\n    index = bisect_right(arr, x)\n    return index if index!= len(arr) and arr[index] == x else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n\n    # Initialize last position as -1\n    last_pos = -1\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is equal to the element to be found\n        if arr[i] == x:\n            # Update the last position\n            last_pos = i\n\n    # Return the last position\n    return last_pos"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*?b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)([a-zA-Z0-9]+)(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.match(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its items.\n    \"\"\"\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        sum = 0\n        i = 1\n        while i <= n:\n            if i % 2!= 0:\n                sum += i\n            i += 1\n        return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = int(input(\"Enter the lower limit of the range: \")), int(input(\"Enter the upper limit of the range: \"))\n    sum_of_odds = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_of_odds += i\n    print(\"The sum of all odd natural numbers in the range\", l, \"to\", r, \"is\", sum_of_odds)\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 0, n\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum to zero\n    total_sum = 0\n    # iterate over odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add each odd number to the sum\n        total_sum += i\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # take input for lower and upper limit\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    \n    # initialize sum variable to zero\n    total = 0\n    \n    # loop through the range of odd natural numbers from l to r\n    for i in range(l, r+1, 2):\n        # add each odd natural number to the total\n        total += i\n        \n    # print the sum\n    print(\"The sum of all odd natural numbers within the range\", l, \"to\", r, \"is\", total)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    sum_ = 0\n    \n    for i in range(l, r+1, 2):\n        sum_ += i\n    \n    return sum_"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all elements in the array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    # initialize the sum variable to zero\n    sum = 0\n    # loop through each element in the array\n    for i in arr:\n        # add the element to the sum variable\n        sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = 0xFFFFFFFF  # assume 32 bit number\n    if d >= 32:  # overflow\n        return 0\n    elif d > 0:\n        n = (n << d) | (n >> (32 - d))\n    else:  # d < 0\n        n = (n >> (-d)) | (n << (32 + d))\n    return n & mask  # truncate to 32 bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the number of bits to rotate\n    num_bits = len(bin(n)) - 2 # number of bits in binary form of n\n\n    # Calculate the number of bits to shift\n    shift_bits = d % num_bits\n\n    # Shift the binary representation of n left by shift_bits bits\n    rotated = (n << shift_bits) | (n >> (num_bits - shift_bits))\n\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # We convert the input to binary string representation and then split it into two parts\n    binary_string = bin(n)[2:]\n    # We calculate the number of bits that we need to rotate to the right\n    num_bits_to_rotate = len(binary_string) - d\n    \n    # We split the binary string into two parts\n    binary_string_left = binary_string[:num_bits_to_rotate]\n    binary_string_right = binary_string[num_bits_to_rotate:]\n    \n    # We convert the binary strings back to integers and then left-shift them by d bits\n    rotated_integer = int(binary_string_left, 2) << d\n    \n    # We concatenate the left and right binary strings to form the rotated binary string\n    rotated_binary_string = format(rotated_integer, '0' + str(num_bits_to_rotate) + 'b')\n    \n    # We convert the rotated binary string back to an integer\n    rotated_integer = int(rotated_binary_string, 2)\n    \n    # We return the rotated integer\n    return rotated_integer"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    # convert the given number to binary string\n    binary_str = bin(n)[2:].zfill(32)\n    # calculate the number of bits to rotate\n    rotate_bits = d % 32\n    # calculate the number of bits to be shifted\n    shift_bits = 32 - rotate_bits\n    # rotate the binary string to the left\n    rotated_binary_str = binary_str[rotate_bits:] + binary_str[:rotate_bits]\n    # convert the rotated binary string back to integer\n    rotated_num = int(rotated_binary_str, 2)\n    # return the rotated number\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert the given number into a binary string\n    n_bin = bin(n)[2:]\n\n    # If d is 0, return the original number\n    if d == 0:\n        return int(n,2)\n\n    # Check if d is greater than the number of bits in the number\n    elif d > len(n_bin):\n        return 0\n\n    # If d is less than or equal to the number of bits in the number, rotate left by d bits\n    else:\n        return int(n_bin[-d:] + n_bin[:-d], 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary representation\n    binary = bin(n)[2:]\n\n    # Pad the binary representation with zeros if necessary\n    if len(binary) < 32:\n        binary = \"0\" * (32 - len(binary)) + binary\n\n    # Calculate the new position of the leftmost bit\n    new_position = d % 32\n\n    # Calculate the number of bits to shift to the right\n    shift_amount = 32 - new_position\n\n    # Shift the bits to the right by shift_amount\n    new_binary = binary[shift_amount:] + binary[:shift_amount]\n\n    # Convert the new binary representation to decimal\n    new_n = int(new_binary, 2)\n\n    return new_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary and pad with zeros if necessary\n    bin_str = bin(n)[2:]\n    if len(bin_str) < 32:\n        bin_str = '0' * (32 - len(bin_str)) + bin_str\n\n    # Rotate left d bits\n    rotated_bin = bin_str[d:] + bin_str[:d]\n\n    # Convert back to decimal and return the result\n    return int(rotated_bin, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary string and split it into 4-bit groups\n    binary_str = format(n, '032b')\n    binary_groups = [binary_str[i:i+4] for i in range(0, len(binary_str), 4)]\n\n    # Rotate each group by d bits\n    for i in range(len(binary_groups)):\n        shift = int(d/4)\n        for j in range(shift):\n            binary_groups[i] = binary_groups[i] + '0'\n        binary_groups[i] = binary_groups[i][-d:]\n\n    # Convert the rotated groups back to decimal and combine them into a single 32-bit number\n    rotated_num = int(''.join(binary_groups), 2)\n    return rotated_num"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all whitespaces\n    pattern = r'\\s+'\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regex\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # remove all whitespaces using regular expression\n    text = re.sub(r'\\s+','', text)\n    # remove any single quotes\n    text = re.sub(r\"'\", '', text)\n    # remove any double quotes\n    text = re.sub(r'\"', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    # Remove all whitespaces using regular expression\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from a string.\n\n    Parameters\n    ----------\n    text : str\n        A string containing whitespaces.\n\n    Returns\n    -------\n    str\n        A string with all whitespaces removed.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n        elif num == y:\n            count += 1\n        elif num == z:\n            count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z) + 1):\n        if x == i:\n            count += 1\n        if y == i:\n            count += 1\n        if z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(1, 100):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    # Create a copy of the input array to avoid modifying the original array\n    arr_copy = arr.copy()\n    # Initialize the number of rotations to 0\n    count = 0\n    # Loop through the array from the second element to the last element\n    for i in range(1, len(arr_copy)):\n        # If the current element is greater than the next element, swap them\n        if arr_copy[i] > arr_copy[i+1]:\n            arr_copy[i], arr_copy[i+1] = arr_copy[i+1], arr_copy[i]\n            # Increment the count of rotations\n            count += 1\n            # Exit the loop after the first rotation\n            if count == 1:\n                break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    # check if the array is already sorted\n    if n == 1 or (n > 1 and arr[0] <= arr[1]):\n        return 0\n    \n    # check if the array is already sorted in reverse\n    if n == 2 or (n > 2 and arr[n-1] >= arr[n-2]):\n        return 0\n    \n    # find the smallest element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    \n    # find the index of the smallest element\n    index = arr.index(min_element)\n    \n    # count the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(n):\n        j = (i+index)%n\n        if arr[i] > arr[j]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    # Get the length of the array\n    n = len(arr)\n\n    # Traverse through all possible rotations\n    for i in range(n):\n        # Find the starting index of each rotation\n        start = i\n\n        # Traverse through the remaining unsorted portion of the array\n        for j in range(i+1, n):\n            # If the current element is greater than the next element, swap them\n            if arr[j] < arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n                # Update the starting index of the next rotation\n                start = j\n\n                # The next rotation starts from the next element after this one\n                break\n\n        # Update the length of the array after the rotation\n        n = start\n\n    # Count the number of rotations required\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n\n    # If array is already sorted, there is no rotation required.\n    if arr == sorted(arr):\n        return 0\n\n    # Find the minimum element in the array.\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    # Count the number of rotations required.\n    count = 0\n    for i in range(n):\n        if arr[i] < min_element:\n            count += 1\n        else:\n            break\n\n    # Since we are rotating the array, we need to find the minimum element in the rotated array.\n    min_rotated_element = arr[count]\n    for i in range(1, n):\n        if arr[count + i] < min_rotated_element:\n            min_rotated_element = arr[count + i]\n\n    # Find the number of rotations required to rotate the array such that the minimum element becomes the minimum element of the original array.\n    rotations = 0\n    while min_element!= min_rotated_element:\n        rotations += 1\n        temp = min_rotated_element\n        min_rotated_element = arr[count + rotations % n]\n        min_element = arr[count + n - rotations % n - 1]\n\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n    \n    # Count the number of rotations required to generate a sorted array\n    count = 0\n    # Traverse the array from right to left\n    for i in range(n-1, -1, -1):\n        if arr[i]!= min_element:\n            # If we encounter a different element than the minimum, we need to rotate the array\n            count += 1\n            # Update the minimum element\n            min_element = arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n            elif arr[i] < arr[j]:\n                break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            break\n        else:\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. \n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    count = 0\n    i = 0\n    j = n - 1\n    \n    while i <= j:\n        if arr[i] > arr[j]:\n            count += 1\n            i += 1\n        else:\n            j -= 1\n            \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    # check if array is sorted in ascending or descending order\n    if arr[0] <= arr[n-1]:\n        for i in range(n-1):\n            if arr[i] >= arr[i+1]:\n                count += 1\n    else:\n        for i in range(n-1):\n            if arr[i] <= arr[i+1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        j = i+1\n        while j < n and arr[j-1] > arr[j]:\n            j += 1\n        if j-i-1!= n-i:\n            return j-i-1\n    return 0"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Convert the given number to an integer\n    n = int(n)\n\n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n\n    # Set the lower and upper bounds for the binary search\n    left = 0\n    right = n\n\n    # Perform binary search until we find the perfect square\n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n\n        # Check if the mid is a perfect square\n        if square == n:\n            return True\n        elif square < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If we get to this point, the number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # If n is 0 or 1, then it is a perfect square\n    if n == 0 or n == 1:\n        return True\n    \n    # Check if the square root of n is an integer or not\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n * sqrt_n == n:\n        return True\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # using the sqrt() function to get the square root of the given number\n    sqrt_n = int(n**0.5)\n\n    # checking whether the square root of the given number is an integer or not\n    if sqrt_n**2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    # calculate the square root of n\n    root = n ** 0.5\n\n    # check if the square root is an integer\n    if root.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = n\n    while root**2 > n:\n        root = (root + n // root) // 2\n    return root**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Initialize a variable to store the square root\n    sqrt_n = 0\n\n    # Calculate the square root of the given number using the Babylonian method\n    while n > 0:\n        sqrt_n += 1\n        n -= sqrt_n * sqrt_n\n\n    # Check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if the given number is a perfect square or not.\n    \"\"\"\n    if n < 2:\n        return False\n\n    # Use the babylonian method to check if n is a perfect square\n    x = n\n    y = x + 1\n    while y * y <= n:\n        x = y\n        y += 1\n\n    return y * y == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if n is a positive integer\n    if n <= 0:\n        return False\n\n    # Check if n is a perfect square\n    for i in range(int(n**0.5) + 1):\n        if n % i**2 == 0:\n            return True\n\n    # If we reach here, n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether the given number is a perfect square or not.\n    '''\n    # Function to check whether a number is a perfect square or not\n    def is_square(num):\n        # base case\n        if num < 2:\n            return True\n        # check for divisibility by 2\n        if num % 2 == 0:\n            return False\n        # check for divisibility by odd numbers up to square root of num\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    # check whether n is a perfect square\n    if is_square(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # If the number is less than 2, then it is not a perfect square.\n    if n < 2:\n        return False\n    \n    # Calculate the square root of the number.\n    sqrt_n = int(n**0.5) + 1\n    \n    # If the square root is equal to the number, then it is a perfect square.\n    if sqrt_n**2 == n:\n        return True\n    \n    # Otherwise, it is not a perfect square.\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    This function checks whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize the max_sum variable to 0\n    max_sum = 0\n    # loop through each list in the input list of lists\n    for i in range(len(lists)):\n        # initialize a variable to the sum of the current list\n        current_sum = 0\n        # loop through each element in the current list\n        for j in range(len(lists[i])):\n            # add the current element to the sum\n            current_sum += lists[i][j]\n        # check if the current sum is greater than the max_sum\n        if current_sum > max_sum:\n            # update the max_sum to the current sum\n            max_sum = current_sum\n    # loop through each list in the input list of lists again and check if the current sum is equal to the max_sum\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum == max_sum:\n            # return the current list\n            return lists[i]\n    # if no lists are equal to the max_sum, return None\n    return None"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    # initialize variables to keep track of the current max sum and the list of lists\n    max_sum = float('-inf')\n    max_list = None\n    \n    # loop through each list in the input list of lists\n    for sublist in lists:\n        # calculate the sum of all elements in the sublist\n        sublist_sum = sum(sublist)\n        # if the sum is greater than the current max sum, update both variables\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n    \n    # return the list of lists with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_list = [lists[i][j]]\n            elif lists[i][j] == max_sum:\n                max_list.append(lists[i][j])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result = []\n    \n    # Loop through each list in the input list of lists\n    for i in range(len(lists)):\n        # Loop through each element in the current list\n        for j in range(len(lists[i])):\n            # Add the current element to the sum\n            sum = lists[i][j]\n            \n            # Loop through the remaining elements in the current list\n            for k in range(len(lists[i])):\n                # If the current element is not the last element, add it to the sum\n                if k!= j:\n                    sum += lists[i][k]\n            \n            # If the current sum is greater than the current max sum, update the result and max sum\n            if sum > max_sum:\n                max_sum = sum\n                result = lists[i]\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            result = l\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = []\n    \n    for i in range(len(lists)):\n        for j in range(i+1, len(lists[i])):\n            current_sum = lists[i][j]\n            \n            for k in range(j+1, len(lists[i])):\n                current_sum += lists[i][k]\n                \n            if current_sum > max_sum:\n                max_sum = current_sum\n                result = [[lists[i][j]], [lists[i][k] for k in range(j+1, len(lists[i]))]]\n                \n            elif current_sum == max_sum and k > j:\n                max_sum = current_sum\n                result = [[lists[i][j]], [lists[i][k] for k in range(j+1, len(lists[i]))]]\n                \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum and the index of the maximum sum\n    max_sum = float('-inf')\n    max_sum_index = 0\n\n    # Iterate over each list in the input lists\n    for i, lst in enumerate(lists):\n        # Initialize the sum and the current index\n        current_sum = 0\n        current_index = 0\n\n        # Iterate over each element in the list\n        while current_index < len(lst):\n            # Add the current element to the sum and increment the index\n            current_sum += lst[current_index]\n            current_index += 1\n\n            # If the sum is greater than the current maximum sum, update the maximum sum and its index\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_index = i\n\n    # Return the list with the maximum sum\n    return lists[max_sum_index]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Find the list in a list of lists whose sum of elements is the highest.\n\n    Parameters:\n    - lists: a list of lists, where each sublist contains elements to sum\n\n    Returns:\n    - the list whose sum of elements is the highest\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    result = None\n\n    # Iterate over all sublists\n    for sublist in lists:\n        # Compute the sum of the elements in this sublist\n        sublist_sum = sum(sublist)\n\n        # Update the max sum and the result if necessary\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            result = sublist\n\n    # Return the result\n    return result"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    current_char = test_str[0]\n\n    # Loop through the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, update the current run length\n            current_run += 1\n        else:\n            # If it's not, check if the current run length is longer than the previous maximum\n            if current_run > max_run:\n                # If it is, update the maximum run length\n                max_run = current_run\n                # Reset the current run length and character\n                current_run = 0\n                current_char = char\n            # If the current run length is not longer than the maximum, reset the current run length and character\n            else:\n                current_run = 0\n                current_char = char\n\n    # Return the maximum run length\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    prev_char = None\n    current_char = None\n\n    for char in test_str:\n        if char.isupper():\n            if prev_char is not None and prev_char.isupper():\n                count += 1\n                if count > max_count:\n                    max_count = count\n            else:\n                count = 1\n        prev_char = current_char\n        current_char = char\n\n    if prev_char is not None and prev_char.isupper() and current_char.isupper():\n        count += 1\n\n    if count > max_count:\n        max_count = count\n\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    current_char = \"\"\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        if current_run > max_run:\n            max_run = current_run\n            current_char = char\n    return max_run, current_char"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 1\n    max_count = 1\n    max_start = 0\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_start = i - count + 1\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_start = len(test_str) - count\n    return test_str[max_start:max_start+max_count]\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    current_run_length = 0\n    max_run_length = 0\n    max_run_start = 0\n\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            if uppercase_count > 0:\n                if current_run_length > max_run_length:\n                    max_run_length = current_run_length\n                    max_run_start = i - max_run_length + 1\n            uppercase_count = 0\n            current_run_length = 0\n\n        current_run_length += 1\n\n    if uppercase_count > 0:\n        if current_run_length > max_run_length:\n            max_run_length = current_run_length\n            max_run_start = i - max_run_length + 1\n\n    return test_str[max_run_start:max_run_start + max_run_length]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    run_start = 0\n    max_run = 0\n    \n    for i, char in enumerate(test_str):\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n            if i-run_start > 0:\n                run_start = i-uppercase_count+1\n            uppercase_count = 0\n    \n    if uppercase_count > max_run:\n        max_run = uppercase_count\n    if len(test_str)-run_start > 0:\n        max_run = max(max_run, len(test_str)-run_start)\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    current_run = 0\n    max_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            current_run += 1\n\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            uppercase_count -= 1\n            current_run = 0\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to store the current run and its length\n    current_run = \"\"\n    current_run_length = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is an uppercase letter, add it to the current run and increase its length\n        if char.isupper():\n            current_run += char\n            current_run_length += 1\n        # If the character is not an uppercase letter, reset the current run and its length\n        else:\n            if current_run_length > max_run:\n                max_run = current_run_length\n                max_run_str = current_run\n    \n    return max_run_str"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    run_start = 0\n    max_run = 0\n    max_len = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n            if count > max_run:\n                max_run = count\n                max_len = i - run_start + 1\n                run_start = i\n                \n    return max_len"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there is no odd number in the list, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Initialize a variable to store the first odd number\n    first_odd_num = None\n    \n    # Loop through the list of numbers and check if each number is odd\n    for num in nums:\n        if num % 2!= 0:\n            # If the number is odd, set the first odd number to the current number\n            first_odd_num = num\n            # Break out of the loop since we've found the first odd number\n            break\n    \n    # Return the first odd number\n    return first_odd_num"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] in K and test_tup[1] in K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(K):\n            if i < len(test_tup) and i < len(K):\n                if test_tup[i]!= K[i]:\n                    return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(len(test_tup)):\n            if i == K-1:\n                if test_tup[i] == K:\n                    return True\n            else:\n                if test_tup[i] == K:\n                    continue\n                else:\n                    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[:i]:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] in test_tup[1:]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must be of the same length to compare\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The element in the second tuple is greater than its corresponding element in the first tuple.\")\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the tuples is not equal.\")\n        return\n\n    # Iterate through the tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"The element {test_tup1[i]} in tuple 1 is smaller than the element {test_tup2[i]} in tuple 2 at index {i}.\")\n            return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # Check if each element of the second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    \n    # If all elements are smaller, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have the same number of elements.')\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]