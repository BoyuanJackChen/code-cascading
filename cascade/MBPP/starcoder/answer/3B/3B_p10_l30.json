[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    common_set = set1 & set2\n    return list(common_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item1 in test_tup1:\n        if item1 in test_tup2:\n            shared_elements.append(item1)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize an empty set to store the common elements\n    shared_set = set()\n    \n    # Iterate over the first list\n    for item in test_tup1:\n        # Check if the item is in the second list\n        if item in test_tup2:\n            # Add the item to the shared set\n            shared_set.add(item)\n    \n    # Return the shared set as a list\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_list.append(element)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # Find the shared elements between the lists\n    shared_elements = [x for x in list1 if x in list2 and x not in test_tup1]\n    # Convert the shared elements to a tuple and return it\n    return tuple(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize variables\n    shared_elements = []\n\n    # Compare each element from the two lists\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                shared_elements.append(elem1)\n\n    # Return the shared elements\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it's not a prime number,\n    and False otherwise.\n    '''\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 3:\n        return False\n    elif n == 5:\n        return False\n    elif n == 7:\n        return False\n    elif n == 11:\n        return False\n    elif n == 13:\n        return False\n    elif n == 17:\n        return False\n    elif n == 19:\n        return False\n    elif n == 23:\n        return False\n    elif n == 29:\n        return False\n    elif n == 31:\n        return False\n    elif n == 37:\n        return False\n    elif n == 41:\n        return False\n    elif n == 43:\n        return False\n    elif n == 47:\n        return False\n    elif n == 53:\n        return False\n    elif n == 59:\n        return False\n    elif n == 61:\n        return False\n    elif n == 67:\n        return False\n    elif n == 71:\n        return False\n    elif n == 73:\n        return False\n    elif n == 79:\n        return False\n    elif n == 83:\n        return False\n    elif n == 89:\n        return False\n    elif n == 97:\n        return False\n    else:\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    Write a Python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes an integer as input and returns True if it is not a prime number, and False otherwise.\n    \"\"\"\n    if n <= 1:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a max heap to store the n largest numbers\n    max_heap = []\n    # Add the first n numbers to the max heap\n    for num in nums[:n]:\n        heapq.heappush(max_heap, num)\n    # Remove the smallest number from the max heap for each subsequent number\n    for num in nums[n:]:\n        heapq.heappop(max_heap)\n        # Add the new number to the max heap if the max heap is not full yet\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n    # Return the n largest numbers from the max heap\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list into a max heap\n    nums_heap = [nums[i] for i in range(n)]\n    hq.heapify(nums_heap)\n    \n    # Extract the largest n elements from the heap and return them in descending order\n    return [hq.heappop(nums_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert list of numbers to a heap\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        \n    # Extract the n largest numbers from the heap and convert back to a list\n    result = [hq.heappop(heap) for _ in range(n)]\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = hq.nlargest(n, nums)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    while len(nums) > n:\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Given a list of numbers, find the n largest integers in descending order.\n    \"\"\"\n    # Build a min-heap of the first n elements of the list\n    heap = hq.nsmallest(n, nums)\n    # Add the remaining elements to the heap\n    for num in nums[n:]:\n        hq.heappush(heap, num)\n    # Return the n largest elements in descending order\n    return hq.nlargest(n, heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    result = []\n    for _ in range(n):\n        result.append(hq.heappop(nums))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap from the first n elements of the list\n    hq.heapify(nums[:n])\n\n    # Pop the largest n elements from the heap and return them\n    return [hq.heappop(nums) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap of size n\n    min_heap = []\n    # add the first n elements of the list to the min heap\n    for i in range(n):\n        heapq.heappush(min_heap, nums[i])\n    # remove the smallest element from the min heap and add the next smallest element to the min heap\n    for i in range(n, len(nums)):\n        if nums[i] > min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, nums[i])\n    # return the min heap as a list of integers\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        elif num > max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, num)\n    return max_heap"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    if x & (x - 1) == 0: # if x is a power of 2, x & (x - 1) will be 0, so it will return True\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or x == 1: # base case for 0 and 1\n        return True\n\n    if x & (x - 1) == 0: # if x is a power of 2, it must be a power of 2 only when the only bit that differs is the last bit\n        return True\n\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer x as input and returns True if x is a power of 2, False otherwise.\n    A power of 2 is a number that is a multiple of 2, i.e. it has no remainder when divided by 2.\n    \"\"\"\n    if x <= 0:\n        return False\n    if x == 1:\n        return True\n    if x % 2 == 0:\n        return is_Power_Of_Two(x // 2)\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # convert the numbers to binary strings\n    x_str = bin(x)[2:]\n    y_str = bin(y)[2:]\n\n    # get the length of the binary strings\n    x_len = len(x_str)\n    y_len = len(y_str)\n\n    # check if the lengths are same or not\n    if x_len!= y_len:\n        return False\n\n    # loop through the strings and compare the bits at differing positions\n    for i in range(x_len):\n        if x_str[i]!= y_str[i]:\n            return True\n\n    # if all bits are same, then the two numbers differ at one bit position only\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = bin(x)[2:]\n    y = bin(x)[2:]\n    if x == y:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0: #loop until x has only one set bit\n        x &= (x-1) #clear the least significant bit\n    return x == 1 #return True if x is a power of 2, otherwise False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns a boolean value indicating whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x == 1:\n        return False\n    else:\n        if x & (x-1) == 0: # If x is a power of two\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = bin(x ^ (x-1))[2:]\n    if len(diff) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    if x & (x - 1) == 0: \n        return True\n    return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Filter out words with less than 4 characters\n    result = [word for word in words if len(word) >= 4]\n    \n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Compile the regular expression pattern\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Find all non-overlapping matches of the pattern in the text\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Iterate over each element in the list\n    for num in nums:\n        # Find the square of the current element\n        square = num ** 2\n        # Append the square to the result list\n        result.append(square)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num*num)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Iterate over the list of numbers\n    for num in nums:\n        # Square the number and append it to the new list\n        new_list.append(num**2)\n    return new_list"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Find the length of the string\n    n = len(str)\n    \n    # Initialize the number of rotations\n    count = 0\n    \n    # Loop through all possible rotations\n    for i in range(n):\n        # Convert the current rotation to a string\n        temp = str[i:] + str[:i]\n        \n        # If the rotated string is same as the original string, increment the count\n        if temp == str:\n            count += 1\n    \n    # Return the minimum number of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize the dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Sort the dictionary by frequency in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Initialize the minimum number of rotations required to get the same string\n    min_rot = 0\n\n    # Check if the last character is repeated, if it is, the minimum number of rotations required is 1\n    if sorted_freq[0][0] == str[-1]:\n        min_rot = 1\n\n    # Initialize the current string with the sorted dictionary keys\n    current_str = ''.join(sorted_freq[0][0])\n\n    # Check if the current string is the same as the original string\n    while current_str!= str:\n        # Check if the next character in the current string is repeated, if it is, the minimum number of rotations required is 1\n        if sorted_freq[0][0][sorted_freq[0][0].index(current_str[0])+1] == current_str[1]:\n            min_rot += 1\n        # Update the current string with the next character\n        current_str = current_str[1] + current_str[0]\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rot\n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # create a dictionary to store the rotations for each character of the string\n    char_rotations = {}\n    \n    # iterate through the string and find the rotations for each character\n    for char in str:\n        if char in char_rotations:\n            char_rotations[char] += 1\n        else:\n            char_rotations[char] = 1\n    \n    # create a list of unique characters\n    unique_chars = list(char_rotations.keys())\n    \n    # initialize a variable to store the minimum number of rotations\n    min_rotations = float('inf')\n    \n    # iterate through the unique characters and find the minimum number of rotations required for each character\n    for char in unique_chars:\n        if char_rotations[char] % 2 == 0:\n            min_rotations = min(min_rotations, char_rotations[char]//2)\n        else:\n            min_rotations = min(min_rotations, char_rotations[char]//2 + 1)\n    \n    # return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rot = n\n    \n    for i in range(n):\n        if str[i]!= str[(i+n) % n]:\n            min_rot = min(min_rot, i+1)\n    \n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations required to get the same string.\n    \"\"\"\n    \n    # converting the given string into a list of characters\n    str_list = list(str)\n    \n    # finding the minimum number of rotations required to get the same string\n    min_rotations = 0\n    while str_list!= sorted(str_list):\n        str_list = sorted(str_list)\n        min_rotations += 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n-1):\n        if str[i] > str[i+1]:\n            return 0\n    return 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                count += 1\n                for k in range(j, n-1):\n                    if str[k]!= str[j]:\n                        count += 1\n                        break\n                for k in range(n-1, j-1, -1):\n                    if str[k]!= str[j]:\n                        count += 1\n                        break\n                return count - 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for c in str:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    \n    # create a list of all the characters in the string\n    char_list = list(str)\n    \n    # find the minimum number of rotations required to get the same string\n    min_rotations = n\n    for i in range(n):\n        for j in range(i, n):\n            sub_str = ''.join(char_list[i:j+1])\n            if freq[sub_str] == freq[str]:\n                min_rotations = min(min_rotations, j - i + 1)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    for char in str: \n        freq[char] = freq.get(char, 0) + 1\n\n    # Initialize two variables to store the minimum number of rotations and the current string\n    min_rotations = float('inf')\n    curr_str = str\n    \n    # Loop through the frequency dictionary and for each character, find the next character with the same frequency.\n    # If such a character is not present, then we have to rotate the string.\n    for char, count in freq.items(): \n        if count > 1: \n            for next_char, next_count in freq.items(): \n                if next_count == count - 1 and next_char!= char: \n                    min_rotations = min(min_rotations, count - 1)\n                    curr_str = curr_str[count:] + curr_str[:count]\n                    break\n\n    return min_rotations + 1 if min_rotations!= 0 else 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    # initialize the count of rotations to 0\n    count = 0\n    \n    # loop through each character in the string\n    for i in range(len(str)-1):\n        # if the characters in the string are not equal, increment the count\n        if str[i]!= str[i+1]:\n            count += 1\n            # if the count reaches 2, rotate the string by 1 character and repeat the process\n            if count == 2:\n                str = str[1:] + str[0]\n                count = 0\n                \n    # return the count of rotations\n    return count"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '')\n    else:\n        return \"Character not found in the string.\"\n    if len(s) > 1:\n        if s[0] == s[-1]:\n            s = s[1:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    s = s[s.find(ch)+1:]\n    return s[0:-s[::-1].find(ch)]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character is present in the string\n    if ch in s:\n        # split the string into a list of characters\n        lst = list(s)\n        # remove first occurrence of the character\n        lst.remove(ch)\n        # remove last occurrence of the character\n        lst.remove(ch)\n        # convert the list of characters back to a string\n        return ''.join(lst)\n    else:\n        # if the character is not present, return the original string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'').strip()"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    s = list(s)\n    i = 0\n    j = len(s)-1\n    while i <= j:\n        if s[i] == ch:\n            del s[i]\n            i -= 1\n        elif s[j] == ch:\n            del s[j]\n            j += 1\n        else:\n            i += 1\n            j -= 1\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    # remove first occurrence of character\n    if s[0] == ch:\n        s = s[1:]\n    # remove last occurrence of character\n    if s[-1] == ch:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Find the first and last occurrence of the given character in the string\n    idx_first = s.find(ch)\n    idx_last = s.rfind(ch)\n\n    # If both indices are found, remove them and return the modified string\n    if idx_first!= -1 and idx_last!= -1:\n        s = s[:idx_first] + s[idx_last+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s:\n        return \"\"\n    elif s[0] == ch:\n        return remove_Occ(s[1:],ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1],ch)\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s: \n        print(\"Character not found in the string\")\n    else:\n        s = s.replace(ch,'')\n        return s[1:-1]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][j] > M[j+1][j+1]:\n                M[j], M[j+1] = M[j+1], M[j]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Iterate over rows\n    for i in range(n):\n        # Initialize min_row and min_sum variables\n        min_row = i\n        min_sum = M[i][i]\n        # Iterate over columns of current row\n        for j in range(i+1, n):\n            # Update min_sum if new element is smaller\n            if M[i][j] < min_sum:\n                min_sum = M[i][j]\n                min_row = j\n        # Swap the rows with the minimum sum\n        M[i], M[min_row] = M[min_row], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Initialize variables for the sorted matrix and the sum of rows\n    sorted_M = []\n    sum_rows = 0\n\n    # Loop through each row of the matrix\n    for row in M:\n        # Calculate the sum of the row\n        row_sum = sum(row)\n        # Append the row to the sorted matrix and update the sum of rows\n        sorted_M.append(row)\n        sum_rows += row_sum\n\n    # Loop through each row of the sorted matrix\n    for row in sorted_M:\n        # Sort the row in ascending order\n        row.sort()\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the minimum element in the current row and swap it with the first element\n        min_index = i\n        for j in range(i+1, n):\n            if M[j][i] < M[min_index][i]:\n                min_index = j\n        M[i], M[min_index] = M[min_index], M[i]\n\n    # Sort the remaining elements of the matrix in ascending order\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if M[j][i] < M[i][i]:\n                M[i], M[j] = M[j], M[i]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    sums = [sum(row) for row in M]\n\n    # Sort the rows by the sum\n    M.sort(key=lambda x: sums.index(sum(x)))\n\n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a new matrix with the same dimensions as the original matrix\n    new_M = [[0]*len(M[0]) for i in range(len(M))]\n\n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Find the sum of the i-th row\n        row_sum = sum(M[i])\n\n        # Loop through each column of the matrix\n        for j in range(len(M[0])):\n            # Find the row index that contains the element with the highest sum\n            max_sum_index = 0\n            for k in range(len(M)):\n                if M[k][j] > M[max_sum_index][j]:\n                    max_sum_index = k\n\n            # Copy the element from the maximum sum row to the j-th column of the new matrix\n            new_M[i][j] = M[max_sum_index][j]\n\n        # Sort the new matrix in ascending order of the sum of its rows\n        new_M[i] = sorted(new_M[i])\n\n    # Return the sorted matrix\n    return new_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # initialize the index of the row with the largest sum\n    row_idx = 0\n    \n    # loop through each row of the matrix\n    for i in range(len(M)):\n        \n        # loop through each element in the row\n        for j in range(len(M[i])):\n            \n            # calculate the sum of the row\n            row_sum = 0\n            for k in range(len(M[i])):\n                row_sum += M[i][k]\n            \n            # check if the row with the largest sum is already at index i\n            if i == row_idx:\n                break\n            \n            # if not, compare the sum with the sum of the current row and the sum of the previous row\n            if row_sum > M[row_idx][i]:\n                row_idx = i\n                break\n                \n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    for i in range(rows):\n        row_sum = sum(M[i])\n        for j in range(cols):\n            if M[i][j]!= row_sum:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize two empty lists to store the sorted rows and their indices\n    sorted_rows = []\n    sorted_indices = []\n\n    # Loop through each row in the matrix\n    for i in range(len(M)):\n        # Initialize a variable to store the sum of the current row\n        row_sum = 0\n\n        # Loop through each element in the current row\n        for j in range(len(M[i])):\n            # Add the value of the current element to the row_sum\n            row_sum += M[i][j]\n\n        # Append the current row to the sorted_rows list and its index to the sorted_indices list\n        sorted_rows.append(M[i])\n        sorted_indices.append(i)\n\n    # Sort the rows in ascending order of their row_sums\n    sorted_rows.sort(key=lambda x: sum(x), reverse=False)\n\n    # Sort the indices in ascending order of their row sums\n    sorted_indices.sort(key=lambda x: sum(M[x]), reverse=False)\n\n    # Loop through each row in the sorted_rows list and swap it with the original row in the matrix\n    for i in range(len(sorted_rows)):\n        M[i] = sorted_rows[i]\n\n    # Loop through each row in the matrix and swap it with the row from the sorted_rows list at its index\n    for i in range(len(M)):\n        M[i] = M[i][:sorted_indices[i]] + sorted_rows[sorted_indices[i]] + M[i][sorted_indices[i]:]\n\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area = l * b\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the semi-perimeter of the prism\n    s = (l + b + h) / 2\n\n    # calculate the area of the prism\n    A = (s * (s - l) * (s - b) * (s - h)) ** 0.5\n\n    # calculate the volume of the prism\n    V = A * h / 3\n\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 2\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l*b*h\n    print(\"The volume of the triangular prism is\", Volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*(l*b*h)\n    return V"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"(?<=[a-z])[A-Z]+\"\n    result = re.findall(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'(?<![a-z])([a-z]+)(?![a-z])_'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'[a-z]*_[a-z]*'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![a-z])(?=[a-z])(?!_)(?=[A-Z])\\w+(?=[a-z])|(?<=\\w)(_\\w+)'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'(?<=[a-z])[A-Z](?=[a-z])|(?<=[A-Z])[a-z](?=[A-Z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Match any sequence of lowercase letters joined with an underscore\n    underscore_pattern = r'([a-z]+)_([a-z]+)'\n\n    # Search the input string for the pattern\n    match = re.search(underscore_pattern, text)\n\n    # If the pattern is found, return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'(?<![a-z])(?=[a-z])(?<![0-9])(?=[0-9])\\w+_'\n\n    # Use the re.search() method to search for matches in the input string\n    match = re.search(pattern, text)\n\n    # If a match is found, return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z][a-z0-9]*_[a-z0-9]*'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z](?=[A-Z]|_)'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    result = re.search(pattern, text)\n\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            string = string.replace(chr(i), '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a dictionary to store the frequency of characters in the first string\n    freq = {}\n    for char in string:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # Remove the characters from the first string which are present in the second string\n    for char in string:\n        if freq[char] == 1:\n            string = string.replace(char, \"\")\n    \n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    new_string = \"\"\n    for char in string:\n        if char not in char_list:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Create an empty list to store the characters to be removed\n    chars_to_remove = []\n\n    # Loop through the string and check if each character is present in the second string\n    for char in string:\n        if char in second_string:\n            chars_to_remove.append(char)\n\n    # Remove the characters from the first string\n    for char in chars_to_remove:\n        string = string.replace(char, \"\")\n\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            string = string.replace(chr(i), '', 1)\n    return string\n\nstring = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\nnew_string = str_to_list(string)\nprint(new_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    # Create an array of 256 characters to store the ASCII values of each character\n    char_array = [i for i in range(NO_OF_CHARS)]\n    # Convert the input string to a list of integers representing the ASCII values of each character\n    string_list = list(map(ord, string))\n    # Iterate over the characters in the input string and remove those present in the second string\n    for i in range(len(string_list)):\n        if string_list[i] in char_array:\n            char_array.remove(string_list[i])\n    # Convert the array back to a string and return it\n    return ''.join(chr(i) for i in char_array)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Get the set of characters in the second string\n    set2 = set(string)\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through the characters in the first string\n    for char in string:\n        # Check if the character is not in the second string\n        if char not in set2:\n            # Add the character to the result list\n            result.append(char)\n    # Convert the result list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a set of characters to check if they exist in the first string\n    char_set = set(string)\n\n    # Iterate over each character in the second string\n    for char in string:\n        # Check if the character exists in the set\n        if char in char_set:\n            # If it does, remove it from the first string\n            string = string.replace(char, '')\n\n    # Return the modified string\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = list(string)\n    for i in range(len(list_str)):\n        if list_str[i] in string:\n            list_str.pop(i)\n        elif list_str[i] >= NO_OF_CHARS:\n            list_str.pop(i)\n        elif i == len(list_str) - 1:\n            list_str.pop(i)\n    return ''.join(list_str)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    count_dict = {}\n    for i in range(NO_OF_CHARS):\n        count_dict[chr(i)] = 0\n\n    # count the occurrence of each character in the first string\n    for char in string:\n        count_dict[char] += 1\n\n    # remove the characters from the first string\n    for char in string:\n        if count_dict[char] == 0:\n            string = string.replace(char, \"\")\n\n    return string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    # loop through the array and add elements to the set\n    for num in arraynums:\n        unique_set.add(num)\n    # check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        print(\"The array does not contain any duplicate elements.\")\n    else:\n        print(\"The array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Using a dictionary to store the count of each element in the array\n    counts = {}\n\n    # Loop through the array and count the occurrences of each element\n    for num in arraynums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # Loop through the dictionary and check for duplicate elements\n    for num, count in counts.items():\n        if count > 1:\n            return True\n\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize a set to store the unique elements\n    unique_set = set()\n    \n    # Iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n    \n    # Check if the set contains any duplicate elements\n    if len(unique_set)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        else:\n            num_set.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # loop through the array and check for duplicates\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements of the array\n    element_dict = {}\n\n    # Iterate through the array and add each element to the dictionary\n    for element in arraynums:\n        if element in element_dict:\n            # If the element already exists in the dictionary, it means there's a duplicate\n            return True\n        else:\n            # Add the element to the dictionary if it's not already in it\n            element_dict[element] = True\n\n    # If no duplicate was found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if the number is divisible by 13\n    if x % 13 == 0: \n        return \"The number is a Woodall number.\"\n    else: \n        return \"The number is not a Woodall number.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1:\n        return \"Woodball\"\n    elif x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 3 == 0 and x % 5 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        print(\"Woodball\")\n    else:\n        print(\"Not a Woodball\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 1 and x <= 100:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    # Check if the number is divisible by 5, 3, and 2\n    if x % 5 == 0 and x % 3 == 0 and x % 2 == 0:\n        # If it is, check if the sum of digits is also divisible by 5\n        digits = [int(digit) for digit in str(x)]\n        total_sum = sum(digits)\n        if total_sum % 5 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        print(x, 'is not a woodball.')\n    else:\n        print(x, 'is a woodball.')"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    if x % 2 == 0 and (x % 3 == 0 or x % 3 == 2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num % 2 == 0: # check if num is even\n        rev_num = int(num/2) # calculate reverse of num\n    else:\n        rev_num = (int(num/2)+1) # calculate reverse of num-1\n    if num+rev_num == 4: # check if num+reverse(num) is equal to 4\n        print(\"The given number is one less than twice its reverse.\")\n    else:\n        print(\"The given number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n    return reverse * 2 == num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse * 2 - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Reverse the given number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n\n    # Check if the reversed number is one less than twice the original number\n    if num == 0 and (rev_num - 2) % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return (rev_num == 2 * num)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Calculate the difference between the original number and the twice-reversed number\n    diff = abs(num - (2 * rev_num))\n    # Check if the difference is one less than the original number\n    if diff == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n    if reverse == num-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 10:\n        return False\n    else:\n        return rev(num // 10) + num % 10\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the given number\n    reverse_num = int(str(num)[::-1])\n    # Compute the sum of the original number and its reverse\n    sum_of_nums = num + reverse_num\n    # Check if the sum is one less than twice the reverse\n    if sum_of_nums < 2 * reverse_num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    # convert the number to a string and reverse it\n    reverse_num = str(num)[::-1]\n    # convert the reverse number back to an integer and subtract 1\n    return int(reverse_num) * 2 - 1"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed with the digits.\n    \"\"\"\n    n = len(arr)\n    max_num = 0\n    for i in range(2**n) : \n        # check if the current number is a valid form of the digits\n        num = 0\n        for j in range(n) : \n            if (i>>j) & 1 == 1 : \n                num += arr[j]\n        if num > max_num : \n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the maximum number that can be formed by adding up all the digits.\n    '''\n    arr.sort(reverse=True) # sort the array in descending order\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] ** (len(arr)-i-1) # calculate the maximum number using the formulae for each digit\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    # create a set to store unique digits from the input list\n    unique_digits = set(arr)\n    # sort the unique digits in descending order\n    sorted_digits = sorted(unique_digits, reverse=True)\n    # initialize an empty list to store the power of each digit in the sorted digits\n    powers = [1] * len(sorted_digits)\n    # loop through the sorted digits and calculate the power of each digit in the sorted digits\n    for i in range(len(sorted_digits)):\n        for j in range(i+1, len(sorted_digits)):\n            if sorted_digits[i] * sorted_digits[j] <= 9:\n                powers[j] += powers[i]\n    # initialize the largest number to be 1\n    max_num = 1\n    # loop through the sorted digits and multiply it with the power of that digit to form the next largest number\n    for digit, power in zip(sorted_digits, powers):\n        max_num = max(max_num, digit * power)\n    # return the largest number that can be formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    max_num = 0\n    for i in range(len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # initialize maximum number to 0\n    max_num = 0\n\n    # loop through each digit in the list\n    for digit in arr:\n\n        # loop through each digit in the list\n        for num in range(max_num+1, 1000000):\n\n            # if the current digit is less than or equal to the current number, check if it can be added to the current number\n            if digit <= num:\n\n                # create a new number with the current digit added to the current number\n                new_num = num + digit\n\n                # if the new number is greater than the maximum number, update the maximum number\n                if new_num > max_num:\n                    max_num = new_num\n\n    # return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max_num * 10 + arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as an input and returns the largest number that can be formed with those digits.\n    '''\n    # initialize max_num as the minimum integer value\n    max_num = float('-inf')\n    # loop through the list of digits and for each digit, check if it can form the maximum number by adding the digit to it\n    for digit in arr:\n        temp_num = max_num + int(digit)\n        if temp_num > max_num:\n            max_num = temp_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    # Initialize variables\n    max_num = 0\n    count = 0\n    \n    # Loop through the array and find the maximum number\n    for num in arr : \n        while num > max_num : \n            count += 1\n            max_num = max_num * 10 + num % 10\n            num //= 10\n            \n    return max_num, count"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)) : \n        for j in range(len(arr)) : \n            for k in range(len(arr)) : \n                if arr[i] + arr[j] + arr[k] == int(max(arr)) : \n                    if arr[i] + arr[j] + arr[k] > max_num : \n                        max_num = arr[i] + arr[j] + arr[k]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_num = arr[i]\n        else:\n            max_num = max(max_num, arr[i])\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether two integers have opposite signs or not.\n\n    Parameters:\n    x (int): First integer to be checked.\n    y (int): Second integer to be checked.\n\n    Returns:\n    bool: True if x and y have opposite signs, False otherwise.\n    \"\"\"\n    if (x * y) < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        print(x,\"and\",y,\"have opposite signs.\")\n    elif x > 0 and y > 0:\n        print(x,\"and\",y,\"have opposite signs.\")\n    elif x == 0 and y == 0:\n        print(\"Both numbers are zero.\")\n    else:\n        print(x,\"and\",y,\"have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    This function takes two integer inputs x and y and returns True if they have opposite signs, otherwise False.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return \"Both numbers are zero.\"\n    elif x * y < 0:\n        return \"Both numbers have opposite signs.\"\n    else:\n        return \"Both numbers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Check for signs of x and y\n    x_sign = 1 if x >= 0 else -1\n    y_sign = 1 if y >= 0 else -1\n\n    # If signs are not opposite, then the two numbers have opposite signs\n    if x_sign!= y_sign:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x < 0 and y < 0:\n        return \"Both numbers have opposite signs.\"\n    elif x >= 0 and y >= 0:\n        return \"Both numbers have same or positive signs.\"\n    else:\n        return \"One of the numbers has negative sign and other has positive sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    if x>=0 and y>=0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_number = 0\n    for i in range(1, n+1):\n        octagonal_number += i**2\n    return octagonal_number\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        i = 2\n        while i <= n:\n            if n - i < i:\n                return True\n            elif i * (i - 2) + (i - 1) * (i - 1) == 16 * i * i - 16:\n                return True\n            i += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return 4 * (is_octagonal(n - 1) + is_octagonal(n - 2)) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    oct_num = 1\n    count = 1\n    while count <= n:\n        oct_num += 12 * count - 1\n        count += 1\n    return oct_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 2\n    c = 3\n    \n    while a < n:\n        b = 2 * b - 1\n        c = 2 * c + 1\n        a = b + c\n    \n    return b"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # convert n to int\n    n = int(n)\n\n    # check if n is even\n    if n % 2 == 0:\n        return False\n\n    # calculate the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # check if n is a prime number\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            return False\n\n    # check if n is a square number\n    if sqrt_n ** 2 == n:\n        return True\n\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Find the value of n^(1/3)\n    sqrt_n = n ** 0.5\n\n    # Calculate the value of the nth octagonal number\n    oct_n = 2 * (n ** 0.5) + 1\n\n    # Check if the value of n^(1/3) is an integer\n    if sqrt_n.is_integer():\n        return oct_n\n    else:\n        return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a += i * (i-1)\n    return a\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Calculate the base of the nth octagonal number\n    oct_base = n * (3 * n - 1) // 2\n    # Calculate the difference between the nth octagonal number and its base\n    diff = n - oct_base\n    # Check if the difference is zero or one\n    if diff == 0 or diff == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    \n    # The first octagonal number is 1\n    if n == 1:\n        return True\n    \n    # The second octagonal number is 100\n    if n == 2:\n        return True\n    \n    # The third octagonal number is 400\n    if n == 3:\n        return True\n    \n    # To find the nth octagonal number, we need to find the sum of the square of the first n-1 octagonal numbers.\n    # We can do this by finding the sum of the squares of the first n-1 odd numbers.\n    # The first odd number is 1, so we start at 1.\n    sum_of_squares = 0\n    for i in range(1, n):\n        if i % 2 == 1:\n            sum_of_squares += i**2\n    \n    # The nth octagonal number is the sum of the square of the first n-1 odd numbers.\n    return sum_of_squares == n**2"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(digit) for digit in s[i:j+1]) == len(s[i:j+1]):\n                count[len(s[i:j+1])] += 1\n\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    dp = defaultdict(int)\n    dp[0] = 1\n    for i in range(n):\n        dp[i+1] = dp[i] + 1\n        for j in range(i+1, n+1):\n            if sum(int(s[k]) for k in range(j)) == j-i:\n                count += dp[j] - 2*dp[i]\n                break\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            digits_sum = sum(int(digit) for digit in s[i:j+1])\n            if digits_sum == len(s[i:j+1]):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(d) for d in s[i:j+1]) == j-i+1:\n                count[j-i+1] += 1\n    \n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0] * (10**2) for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][s[i] - '0'] = 1\n        \n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            dp[i][j] = sum(int(s[k]) for k in range(i, j+1)) - dp[i][j-1]\n        \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += dp[i][j]\n            \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of each substring\n    count = defaultdict(int)\n\n    # loop through each character in the string\n    for i in range(len(s)):\n        # loop through each character from the current index to the end of the string\n        for j in range(i, len(s)):\n            # concatenate the current substring and check if the sum of digits is equal to the substring length\n            if sum(int(digit) for digit in s[i:j+1]) == len(s[i:j+1]):\n                # increment the count of the substring\n                count[s[i:j+1]] += 1\n\n    # return the count of each substring\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    digit_count = defaultdict(int)\n    \n    for char in s:\n        digit_count[ord(char) - ord('0')] += 1\n    \n    for length in range(2, len(s) + 1):\n        for start in range(len(s) - length + 1):\n            end = start + length - 1\n            if sum(digit_count[ord(s[i]) - ord('0')] for i in range(start, end + 1)) == length:\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of substrings with given length\n    count = defaultdict(int)\n    # Iterate through all possible substrings of length n\n    for i in range(len(s)+1):\n        # Initialize the sum of digits for each substring\n        substring_sum = 0\n        # Iterate through all possible substrings of length i\n        for j in range(i, len(s)+1):\n            # If the substring has only digits, add its sum to the count dictionary\n            if s[j-1].isdigit():\n                substring_sum += int(s[j-1])\n            # Add the substring to the count dictionary\n            count[substring_sum] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Convert the string to a list of characters\n    s = list(s)\n    # Initialize a dictionary to store the count of substrings with the given sum of digits\n    counts = defaultdict(int)\n    # Loop through each substring of length 1 to n\n    for i in range(1, len(s)+1):\n        # Loop through each character in the substring\n        for j in range(len(s)-i+1):\n            # Convert the substring to an integer and calculate the sum of digits\n            substring = int(''.join(map(str, s[j:j+i])))\n            digit_sum = sum(int(digit) for digit in str(substring))\n            # If the sum of digits is equal to the length of the substring, increment the count\n            if digit_sum == i:\n                counts[substring] += 1\n    # Return the count of substrings with the given sum of digits\n    return sum(counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)  # use a defaultdict to store the count of each substring\n\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digits_sum = sum(int(digit) for digit in substring)\n            substrings[digits_sum] += 1\n\n    return sum(substrings.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Find the smallest number in a list.\n    \"\"\"\n    # Initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n    # Loop over the rest of the elements of the list\n    for x in xs[1:]:\n        # If the current element is smaller than the smallest so far, update smallest\n        if x < smallest:\n            smallest = x\n    # Return the smallest number found\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest number to infinity\n    smallest = float('inf')\n    # iterate over the list of numbers\n    for num in xs:\n        # if the current number is smaller than smallest, update smallest\n        if num < smallest:\n            smallest = num\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest number to the first element of the list\n    smallest = xs[0]\n    # loop through the rest of the list\n    for i in range(1, len(xs)):\n        # check if the current element is smaller than the smallest so far\n        if xs[i] < smallest:\n            # if it is, update smallest\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    pairs = sorted(test_list)\n    max_diff = 0\n    for i in range(len(pairs)):\n        for j in range(i+1, len(pairs)):\n            diff = pairs[j] - pairs[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples as input and returns the maximum difference between available pairs.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][1] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    max_diff = 0\n    prev = test_list[0]\n    \n    # Loop through the list and calculate the difference\n    for i in range(1, len(test_list)):\n        diff = test_list[i][0] - prev[1]\n        if diff > max_diff:\n            max_diff = diff\n        prev = test_list[i]\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # create a dictionary to store the difference between elements\n    diff_dict = {}\n    # loop through each element in the list\n    for i in range(len(test_list)):\n        # loop through each element in the list from the next index\n        for j in range(i+1, len(test_list)):\n            # calculate the difference between the current and next elements and store it in the dictionary\n            diff_dict[(test_list[i], test_list[j])] = abs(test_list[i] - test_list[j])\n    # find the maximum difference between available pairs in the dictionary\n    max_diff = max(diff_dict.values())\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]:\n                max_diff = max(max_diff, test_list[i][0]-test_list[j][0])\n            elif test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]:\n                max_diff = max(max_diff, test_list[i][0]-test_list[j][0])\n            elif test_list[i][0] < test_list[j][0] and test_list[i][1] < test_list[j][1]:\n                max_diff = max(max_diff, test_list[i][0]-test_list[j][0])\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_max = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > diff_max:\n                diff_max = diff\n    return diff_max"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Create a list of tuples with the second value as key\n    key_list = [(subject[1], subject) for subject in subjectmarks]\n\n    # Sort the list of tuples using the second value as key\n    key_list.sort()\n\n    # Create a list of tuples with the sorted values\n    sorted_list = [(key, value) for key, value in key_list]\n\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function sorts a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n    # Recursive case: If the list has at least one element, recursively sum its first and second elements\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(data_list) + recursive_list_sum(sum(data_list))\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list has only one element, return the element\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    # Recursive case: flatten the rest of the list and sum the elements\n    else:\n        flattened_list = data_list[0] + recursive_list_sum(data_list[1:])\n        return flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(recursive_list_sum(item))\n            else:\n                flat_list.append(item)\n        return recursive_list_sum(flat_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        # if the current item in the list is a list, call the function recursively\n        # and add the sum to the sum of all previous elements\n        return sum(recursive_list_sum(item) for item in data_list)\n    else:\n        # if the current item is not a list, simply add it to the sum of all previous elements\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        return data_list\n\ndef flatten_list(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements recursively.\n    '''\n    return recursive_list_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            if isinstance(item, list):\n                recursive_list_sum(item)\n            else:\n                data_list.append(item)\n    else:\n        return data_list\n\n    return sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        result = []\n        for item in data_list:\n            if type(item) == list:\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n\n    def flatten(lst):\n        nonlocal total\n        for item in lst:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                total += item\n\n    flatten(data_list)\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list of integers and returns the count of positive integers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for x in lst:\n        if x > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Returns the count of positive integers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition the set of Bell numbers\n    ways = [0] * (n+1)\n    \n    # Initialize the array of Bell numbers\n    bell = [0] * (n+1)\n    \n    # Fill in the array of Bell numbers with the Bell numbers\n    for i in range(1, n+1):\n        bell[i] = i\n    \n    # Initialize the array of indices\n    indices = [0] * (n+1)\n    \n    # Fill in the array of indices with the indices\n    for i in range(1, n+1):\n        indices[i] = i\n    \n    # Iterate through the array of indices\n    for i in range(2, n+1):\n        # Find the previous index\n        j = indices[i]\n        \n        # Find the previous Bell number\n        b = bell[j]\n        \n        # Iterate through the array of Bell numbers\n        for k in range(1, b+1):\n            # Check if the current Bell number is less than the current index\n            if k < i:\n                # Add 1 to the number of ways to partition the set of Bell numbers\n                ways[i] += ways[j]\n    \n    # Return the number of ways to partition the set of Bell numbers\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2679145, 9227465, 35357677, 122400477, 475912321, 1767883941, 6561151321, 24329020081, 94244291111, 377487748013, 1376375309221, 5402823669209, 20736755181907, 81591528324789, 321781104963867, 1176493355924229, 4922789880081377, 18849694095731785, 73035254607693035, 288230376151711747, 1051121004333098593, 4440240985984000611, 16645251382890294845, 63245980762847724493, 229906528292190164415, 871782918811397182261, 3295432106439297690237, 11495326414609508220701, 46035364267255878761821, 178511973964568769022155, 687194767355888016028177, 2588194933444709948054497, 9922220444084417990791107, 39788907076413154143774311, 146393637650561270238899897, 562949953421370288321587591, 2139062188124802118570705737, 8412289373780707163489007963, 34758103683931289204185077961, 124598478523020763384594493733, 501889008187913853244343742449, 1944429035933298502706023936237, 7672800497757122"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (n * (n-1)) // 2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Calculate the sum of Bell numbers from 0 to n\n    bell_sum = sum(range(n+1))\n    # Calculate the number of ways to partition a set of Bell numbers\n    ways = 0\n    for i in range(n+1):\n        ways += bell_sum // i\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    def helper(n, k, res):\n        if n == 0 and k == 0:\n            res.append(1)\n        elif n == 0:\n            res.append(0)\n        else:\n            for i in range(1, n+1):\n                helper(i, k-1, res)\n                res[-1] += res[-2]\n\n    res = []\n    helper(n, n, res)\n    return res[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n        n (int): The number of Bell numbers to be partitioned.\n\n    Returns:\n        int: The number of ways to partition the set of Bell numbers.\n\n    Example:\n        bell_number(10) returns 175\n    '''\n\n    # Initialize variables\n    num_ways = 1\n    fact = 1\n\n    # Calculate the factorial of n\n    for i in range(1, n+1):\n        fact *= i\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    for i in range(1, n+1):\n        num_ways *= (i * fact) // (fact - i)\n\n    return num_ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case: n = 0 or n = 1\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize an array to store the number of ways to partition the set of Bell numbers\n    # with n elements\n    ways = [0] * (n+1)\n    \n    # Initialize the first two Bell numbers\n    ways[0] = 1\n    ways[1] = 1\n    \n    # Iterate through the remaining elements\n    for i in range(2, n+1):\n        # For each element, add the number of ways to partition it with the remaining elements\n        ways[i] = ways[i-1] + ways[i-2]\n    \n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize variables\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    for i in range(2, n+1):\n        dp[i] = 2\n        for j in range(1, int(i**0.5)+1):\n            if i % j == 0:\n                dp[i] += dp[j-1]\n                dp[i] += dp[i//j-1]\n\n    return dp[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a dictionary to store the number of ways to partition the set of Bell numbers\n    bell_dict = {}\n    \n    # Initialize the first element of the set as the number of ways to partition the set of Bell numbers\n    bell_dict[0] = 1\n    \n    # Loop through the set of Bell numbers from 1 to n\n    for i in range(1, n+1):\n        # Initialize the number of ways to partition the current Bell number as 0\n        ways_to_partition = 0\n        \n        # Loop through all the previous Bell numbers that are less than or equal to the current Bell number\n        for j in range(0, i):\n            # If the current Bell number is less than or equal to the previous Bell number, add the number of ways to partition that previous Bell number to the number of ways to partition the current Bell number\n            if j <= i-j:\n                ways_to_partition += bell_dict[j]\n                \n        # Add the number of ways to partition the current Bell number to the dictionary\n        bell_dict[i] = ways_to_partition\n        \n    # Return the number of ways to partition the set of Bell numbers\n    return bell_dict[n]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n\n    if A[0] >= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n < 2:\n        return True\n\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1): \n        if A[i] >= A[i+1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif A[n-1] < A[0]:\n        return False\n    else:\n        for i in range(1,n):\n            if A[i] < A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    elif A[0] == A[-1]:\n        return False\n    elif A[0] < A[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if array is empty\n    if len(A) == 0:\n        return True\n\n    # Check if array has only one element\n    if len(A) == 1:\n        return True\n\n    # Initialize variables to store last element and direction\n    prev = A[0]\n    direction = 1\n\n    # Loop through the array\n    for i in range(1, len(A)):\n        # Check if current element is greater than or equal to previous element\n        if A[i] >= prev:\n            # If direction is negative, update direction to positive\n            if direction == -1:\n                direction = 1\n        # Check if current element is less than or equal to previous element\n        elif A[i] <= prev:\n            # If direction is positive, update direction to negative\n            if direction == 1:\n                direction = -1\n        else:\n            # If direction is zero, array is not monotonic\n            return False\n        # Update previous element\n        prev = A[i]\n\n    # If loop completes without returning False, array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array as input and returns True if the array is monotonic and False otherwise.\n    '''\n    if len(A) == 1:\n        return True\n    else:\n        if A[0] < A[1] and all(A[i] < A[i+1] for i in range(len(A)-1)):\n            return True\n        elif A[0] > A[1] and all(A[i] > A[i+1] for i in range(len(A)-1)):\n            return True\n        else:\n            return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if the array is monotonic and False otherwise.\n    An array is said to be monotonic if it is either:\n    1. Increasing\n    2. Decreasing\n    3. Increasing and Decreasing or Decreasing and Increasing\n    \n    This function uses a two-pointer approach to solve the problem. We start by defining two pointers, one at the beginning and the other at the end of the array. We then compare the values pointed by the two pointers. If the values pointed by the two pointers are equal, then the array is not monotonic and we return False. Otherwise, we move the pointer that is greater than the value pointed by the other pointer one step closer to the other pointer. If the array is now increasing or decreasing, we return True. If the array is increasing and decreasing or decreasing and increasing, we continue iterating until we find a monotonic array.\n    \n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    '''\n    \n    if len(A) < 2: \n        return False\n    \n    left = 0\n    right = len(A) - 1\n    \n    while left < right: \n        if A[left] > A[right]: \n            return False\n        \n        left += 1\n        right -= 1\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    if A[0] == A[-1]:\n        return is_Monotonic(A[1:-1])\n    if A[0] > A[-1]:\n        return is_Monotonic(A[1:]) and A[0] <= A[1]\n    else:\n        return is_Monotonic(A[1:]) and A[-1] >= A[-2]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 2:\n        return True\n\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n        else:\n            return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return False\n    if not s:\n        return True\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the sublist is empty\n    if not s:\n        return True\n    # Check if the first element of the sublist matches the first element of the list\n    if l[0]!= s[0]:\n        return False\n    # Check if the remaining elements of the sublist are present in the list\n    return is_sublist(l[1:], s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if s is a sublist of l\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    elif s[0] in l:\n        return is_sublist(l, s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    if not s:\n        return True\n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n\n    if len(set([len(t) for t in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length_set = set()\n    for i in Input:\n        length_set.add(len(i))\n    if len(length_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Initialize a list to store the lengths of the tuples\n    lengths = []\n\n    # Loop through each tuple in the input list\n    for tup in Input:\n        # Append the length of the tuple to the list\n        lengths.append(len(tup))\n\n    # Check if all the lengths are the same\n    if len(set(lengths)) == 1:\n        # If they are, return True\n        return True\n    else:\n        # If not, return False\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, else it returns False.\n    \"\"\"\n    count = len(Input[0])\n    for i in Input:\n        if len(i)!= count:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    # Initialize the minimum and maximum values to be sorted\n    min_val = min(nums)\n    max_val = max(nums)\n    \n    # Initialize the number of swaps to 0\n    num_swaps = 0\n    \n    # Set a flag to keep track of whether the list is already sorted\n    sorted_flag = False\n    \n    while not sorted_flag:\n        # Flag to keep track of whether the list is already sorted\n        sorted_flag = True\n        \n        # Start a loop to iterate over all possible swaps\n        for i in range(len(nums) - 1):\n            # Calculate the average value of the two elements to swap\n            avg_val = (nums[i] + nums[i + 1]) / 2\n            \n            # Check if the current element is less than the average value\n            if nums[i] > avg_val:\n                # Swap the current element with the average value\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                # Increment the number of swaps\n                num_swaps += 1\n                # Update the flag to indicate that the list is not yet sorted\n                sorted_flag = False\n        \n        # Check if the list is already sorted\n        if sorted_flag:\n            # If the number of swaps is less than or equal to 1, then the list is already sorted\n            if num_swaps <= 1:\n                break\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n\n    Parameters:\n    nums (list): List of elements to be sorted\n\n    Returns:\n    list: Sorted list\n    '''\n\n    # initialize the low and high indices\n    low = 0\n    high = len(nums) - 1\n\n    # loop until the low index is less than the high index\n    while low < high:\n\n        # initialize the gap variable\n        gap = high - low\n\n        # loop until the gap variable is greater than 1\n        while gap > 1:\n\n            # calculate the middle index\n            mid = low + gap // 2\n\n            # if the mid element is greater than the last element, swap them\n            if nums[mid] > nums[high]:\n                nums[low], nums[mid] = nums[mid], nums[low]\n\n            # move the gap to half of its previous value\n            gap //= 2\n\n            # if the gap is less than or equal to 1, it means that the array is already sorted\n            if gap <= 1:\n                break\n\n        # move the high index to the next element that is greater than the current element\n        low += 1\n\n        # move the gap to half of its previous value\n        gap = high - low\n\n        # loop until the gap variable is greater than 1\n        while gap > 1:\n\n            # calculate the middle index\n            mid = low + gap // 2\n\n            # if the mid element is less than the first element, swap them\n            if nums[mid] < nums[low]:\n                nums[mid], nums[low] = nums[low], nums[mid]\n\n            # move the gap to half of its previous value\n            gap //= 2\n\n            # if the gap is less than or equal to 1, it means that the array is already sorted\n            if gap <= 1:\n                break\n\n        # move the low index to the previous element that is less than the current element\n        high -= 1\n\n        # move the gap to half of its previous value\n        gap = high - low\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    def comb_sort_helper(nums):\n        n = len(nums)\n        gap = n\n        while gap > 1:\n            gap = (gap * 10) // 13\n            for i in range(gap, n):\n                j = i\n                while j >= gap and nums[j] > nums[j - gap]:\n                    swap(nums, j, j - gap)\n                    j -= gap\n                swap(nums, i, j)\n\n    comb_sort_helper(nums)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        if not swapped:\n            gap = gap // 1.3  # reduce gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(gap):\n            for j in range(0, n-gap, gap):\n                if nums[j] > nums[j+gap]:\n                    nums[j], nums[j+gap] = nums[j+gap], nums[j]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    gap = len(nums) // 2\n\n    while gap > 1:\n        for i in range(gap, len(nums)):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        gap //= 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # Initialize parameters\n    gap = len(nums)\n    swapped = True\n    i = 0\n\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)  # Calculate the next gap size\n        swapped = False\n\n        for j in range(gap, len(nums)):\n            if nums[j] < nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                swapped = True\n\n        i += 1\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number is odd or even\n    if n % 2 == 0:\n        return False\n\n    # Check if the difference between n and the square of it is also a square\n    if (n - (n ** 0.5)) ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = int(n**0.5)\n    if square**2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    # First, check if n is a perfect square.\n    is_perfect_square = lambda x: x == int(x**0.5)**2\n    if is_perfect_square(n):\n        return True\n    \n    # If n is not a perfect square, check if it is a sum of two squares.\n    is_sum_of_squares = lambda x: all(x - y == int(x**0.5)**2 for y in range(int(x**0.5)+1))\n    if is_sum_of_squares(n):\n        return True\n    \n    # If n is neither a perfect square nor a sum of two squares, it cannot be represented as the difference of two squares.\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = n * n\n    b = (n - a) * (n - a)\n    c = b + n * n\n    if c == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Function to check whether a number can be represented as the difference of two squares or not\n    def is_square(num):\n        return num == int(num**0.5)**2\n    \n    # Function to check whether the difference of two squares can be represented as a number or not\n    def is_diff_square(num):\n        square1 = int(num**0.5)**2\n        square2 = int((num-square1)**0.5)**2\n        return square1+square2 == num\n    \n    # Check if the number can be represented as the difference of two squares\n    if is_square(n) and is_diff_square(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    if n%4 == 0:\n        return False\n    else:\n        a = n//2\n        b = (a**2+n)%4\n        return b == 0 or b == 2"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    def is_square(num):\n        return num == int(num**0.5 + 0.5)**2\n\n    def is_difference_of_squares(num):\n        for i in range(1, int(num**0.5) + 1):\n            if is_square(num - i*i) and is_square(num + i*i):\n                return True\n        return False\n\n    if is_difference_of_squares(n):\n        print(\"Yes, it can be represented as the difference of two squares.\")\n    else:\n        print(\"No, it cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # calculate the square of the number\n    square = n*n\n\n    # find the difference of squares\n    diff = square - 2*n*n\n\n    # check if the difference is a square number\n    if diff*diff == square:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    if n % 4 == 0: \n        return \"Cannot be represented as the difference of two squares\"\n\n    a = n**2\n    b = a + 4\n\n    if b % 4 == 0: \n        return \"Cannot be represented as the difference of two squares\"\n\n    c = b**2\n    d = c - 4\n\n    if d % 4 == 0: \n        return \"Cannot be represented as the difference of two squares\"\n\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square = int(n**(1/2))\n    if square*square == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Initialize variables for the current pattern and color index\n    current_pattern = 0\n    current_color = 0\n\n    # Loop through the colors array\n    for i in range(len(colors)):\n\n        # If the current color matches the color in the current pattern\n        if colors[i] == patterns[current_pattern][current_color]:\n\n            # Increment the color index and check if it is the last color in the pattern\n            current_color += 1\n            if current_color == len(patterns[current_pattern]):\n\n                # Increment the current pattern index and reset the color index\n                current_pattern += 1\n                current_color = 0\n\n        # If the current color does not match the color in the current pattern\n        else:\n\n            # If the color in the current pattern is greater than the current color\n            if current_color > 0:\n\n                # Find the last color in the current pattern that matches the current color\n                last_match_index = -1\n                for j in range(current_pattern):\n                    if patterns[j][current_color] == colors[i]:\n                        last_match_index = j\n                        break\n                if last_match_index == -1:\n                    return False\n\n                # Check if the last color in the current pattern matches the next color in the sequence\n                next_color_index = current_color - 1\n                if patterns[last_match_index][next_color_index]!= colors[i]:\n                    return False\n\n                # Reset the current pattern index to the last matched pattern\n                current_pattern = last_match_index\n\n            # If the color in the current pattern is less than the current color\n            else:\n\n                # Find the first color in the current pattern that matches the current color\n                first_match_index = -1\n                for j in range(current_pattern):\n                    if patterns[j][current_color] == colors[i]:\n                        first_match_index = j\n                        break\n                if first_match_index == -1:\n                    return False\n\n                # Check if the first color in the current pattern matches the next color in the sequence\n                next_color_index = current_color + 1\n                if patterns[first_match_index][next_color_index]!= colors[i]:\n                    return False\n\n                # Reset the current pattern index to the first matched pattern\n                current_pattern = first_match_index\n\n    # If the loop completes without returning False, it means the sequence is valid\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Find the length of the patterns array\n    n = len(patterns)\n\n    # Loop through the colors array\n    for i in range(n):\n        # Check if the current color is equal to the next pattern color\n        if colors[i]!= patterns[i]:\n            # If not, return False\n            return False\n\n    # If we reach this point, the colors array follows the patterns array\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(colors) - 1):\n        if colors[i]!= colors[i + 1]:\n            return False\n    if colors[-1] in patterns:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Check if the given colors follow the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize variables\n    i = 0\n    n = len(colors)\n\n    # Loop through each pattern and compare colors with it\n    while i < n:\n        pattern = patterns[i]\n        j = 0\n\n        # Compare colors with the pattern\n        while j < len(pattern):\n            if colors[i+j]!= pattern[j]:\n                return False\n            j += 1\n\n        # Move to the next pattern\n        i += len(pattern)\n\n    # If we reach the end of the patterns array without finding any mismatch, it means it follows the sequence\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Initialize variables to keep track of current pattern and count of matching colors\n    curr_pattern = 0\n    count = 0\n    \n    # Loop through each color in the colors array\n    for color in colors:\n        # Check if the color matches the current pattern\n        if color == patterns[curr_pattern]:\n            # If it does, increment the count of matching colors\n            count += 1\n            # Move to the next pattern if all colors match the current pattern\n            if count == len(patterns[curr_pattern]):\n                curr_pattern += 1\n                count = 0\n                # If there are no more patterns to check, return True\n                if curr_pattern == len(patterns):\n                    return True\n                # If there are more patterns to check, loop back to the beginning of the loop\n                else:\n                    continue\n        # If the color does not match the current pattern, reset the count of matching colors to 0\n        else:\n            count = 0\n    \n    # If the loop completes without finding any more patterns to match, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # initialize variables\n    n = len(colors)\n    count = 0\n\n    # iterate through the patterns array\n    for i in range(n):\n        # check if the current color is the same as the next pattern in the array\n        if colors[i] == patterns[i]:\n            count += 1\n        else:\n            # if the current color is not the same as the next pattern, check if there are any patterns left to match\n            if i + 1 < n and patterns[i+1] == colors[i]:\n                count += 1\n\n    # check if there are any patterns left to match\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    length = len(colors)\n    # Check if there are enough colors for all patterns\n    if length < len(patterns):\n        return False\n\n    # Loop through all patterns and compare colors\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function takes two lists of colors and patterns, where each color is a tuple of two integers and each pattern is a tuple of integers.\n    It returns True if the colors follow the sequence given in the patterns array, and False otherwise.\n    \"\"\"\n    for i in range(len(colors)):\n        if colors[i][0]!= colors[i][1] - 1:\n            return False\n\n    for pattern in patterns:\n        for i in range(len(colors) - len(pattern) + 1):\n            is_pattern_found = True\n            for j in range(len(pattern)):\n                if colors[i+j][0]!= pattern[j]:\n                    is_pattern_found = False\n                    break\n            if is_pattern_found:\n                break\n        else:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            count = 0\n            for k in range(len(test_list[i])):\n                if test_list[i][k] % K!= 0:\n                    count += 1\n            if count == 0:\n                divisible_tuples.append((test_list[i], test_list[j]))\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n    - test_list: list of tuples, where each tuple contains integers.\n    - K: integer, the smallest multiple of which all elements of the tuples must be divisible.\n\n    Returns:\n    - list of tuples, where each tuple contains integers.\n    \"\"\"\n\n    # create an empty list to store the tuples\n    result = []\n\n    # loop through each tuple in the test_list\n    for t in test_list:\n        # check if each element of the tuple is divisible by K\n        if all(x % K == 0 for x in t):\n            # if all elements are divisible by K, add the tuple to the result list\n            result.append(t)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Initialize an empty list to store the matching tuples\n    matching_tuples = []\n    # Loop through the list of tuples\n    for tuple in test_list:\n        # Check if all elements are divisible by K\n        if all(elem % K == 0 for elem in tuple):\n            # If all elements are divisible by K, add the tuple to the matching list\n            matching_tuples.append(tuple)\n    # Return the matching list of tuples\n    return matching_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_list = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            filtered_list.append(tup)\n    return filtered_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    filtered_list = []\n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            filtered_list.append(test_list[i])\n    return filtered_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in test_list:\n        if all(j % K == 0 for j in i):\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            divisible_tuples.append(tup)\n\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is divisible by 11 and False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the sentence into words using whitespace as the delimiter\n    words = s.split()\n    # iterate over each word in the list\n    for word in words:\n        # check the length of the word and return True if odd, False if even\n        if len(word) % 2!= 0:\n            return True\n    # if no odd word is found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    odd_len = False\n    for word in words:\n        if len(word) % 2!= 0:\n            odd_len = True\n            break\n    return odd_len"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even\"\n    else:\n        return \"The length of the word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is an even length word.\")\n        else:\n            print(word, \"is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 1:\n            print(word, \"is odd-length.\")\n        else:\n            print(word, \"is even-length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    if len(word) == 1:\n        return True\n    elif len(word) % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    words = s.split() # Splitting the string into words\n    for word in words:\n        if len(word) % 2 == 0: # Checking if the length of the word is even or not\n            return False # Returning False if the length of the word is even\n        else:\n            return True # Returning True if the length of the word is odd"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into a list of words\n    for word in words:\n        if len(word) % 2 == 0: # check if the length of the word is even\n            return False # if it is even, return False\n    return True # if all words are odd, return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split(): \n        if len(word) % 2 == 1: \n            print(word) "
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the sum of tetrahedral numbers\n    sum_of_tetrahedral_numbers = 0\n    \n    # Calculate the term of the tetrahedral number\n    for i in range(1, n+1):\n        sum_of_tetrahedral_numbers += ((n+1)*(n+2)*i*(i+1))//2\n    \n    # Return the calculated sum\n    return sum_of_tetrahedral_numbers"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (4*n*n-3*n+1)/2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # define the base cases\n    if n == 1:\n        return 6\n    elif n == 2:\n        return 15\n    elif n == 3:\n        return 24\n    \n    # define the recursive formula\n    for i in range(4, n+1):\n        tetrahedral_number[i] = 4*tetrahedral_number[i-1] + 6\n    \n    return tetrahedral_number[n]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 0\n    c = 0\n    d = 1\n    for i in range(n):\n        a, b, c, d = d, a + b + c, a, b + c\n    return d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4*n*(n+1)*(n+2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = n\n    while a > 1:\n        a -= 1\n    return a\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    else:\n        return 4 * n + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 20\n    else:\n        return 42 + n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    def helper(n, k, a, b, c):\n        if k == 0:\n            return a + b + c\n        elif k % 2 == 0:\n            return helper(n, k-1, a, b+c, a)\n        else:\n            return helper(n, k-1, b+c, a, a)\n    \n    return helper(n, 4, 0, 1, 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Calculate the base cases\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 5\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 15\n\n    # Calculate the nth tetrahedral number\n    num = 1\n    i = 1\n\n    while i < n:\n        num += (4 * num) - 1\n        i += 1\n\n    return num"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r ** 3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of the sphere as input and returns the volume of the sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere using the formula V = (4/3)\u03c0r^3.\n    '''\n\n    volume = (4/3) * math.pi * (r**3)\n    \n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * math.pi * r**3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the result string\n    result = ''\n\n    # Loop through all the characters of the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_val = ord(char)\n\n        # Add the ASCII value to the result string\n        result += str(ascii_val % 26)\n\n    # Return the result string\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for i in range(len(strr)):\n        ascii_sum += ord(strr[i])\n    char_sum = ascii_sum % 26\n    if char_sum < 10:\n        return chr(ord('a') + char_sum)\n    else:\n        return chr(ord('A') + char_sum - 10)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = sum([ord(char) for char in strr]) % 26\n    return chr(ascii_value + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    result = result % 26\n    return chr(65 + result)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for i in strr:\n        total += ord(i)\n    return chr((total % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for char in strr:\n        char_ascii = ord(char)\n        char_num = (char_ascii - 65 + 26) % 26\n        char = chr(char_num + 65)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_value = 65 # assuming the first character in the string is A\n    for i in range(1, len(strr)):\n        ASCII_value = (ASCII_value + ord(strr[i])) % 26\n    return chr(ASCII_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Initialize a variable to hold the sum of ASCII values of characters in the string\n    sum = 0\n\n    # Iterate over each character in the string\n    for char in strr:\n\n        # Convert the character to its ASCII value\n        ascii_val = ord(char)\n\n        # Add the ASCII value to the sum\n        sum += ascii_val\n\n    # Convert the sum to its equivalent character by subtracting the ASCII value of 'a'\n    result = chr(sum - 97)\n\n    # Return the result\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize a string to store the ASCII value of each character\n    ascii_str = ''\n    # iterate through each character in the input string\n    for char in strr:\n        # convert the character to its ASCII value\n        ascii_val = ord(char)\n        # add the ASCII value to the ascii_str string\n        ascii_str += str(ascii_val)\n    # find the sum of the ASCII values in the ascii_str string modulo 26\n    char_ascii = sum([int(ascii_str[i:i+2]) for i in range(0, len(ascii_str), 2)]) % 26\n    # convert the sum back to a character and return it\n    return chr(char_ascii)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize the sequence with 1\n    seq = [1]\n\n    # Loop n-1 times\n    for i in range(n-1):\n        # Create a new sequence with half the length of the current one\n        new_seq = [0] * len(seq)\n\n        # Add the previous two numbers to the new sequence\n        new_seq[0] = seq[-1] + seq[-2]\n\n        # Add the new sequence to the sequence list\n        seq = new_seq + seq\n\n    # Return the nth number in the sequence\n    return seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 3, 1, 4, 7, 5, 8, 6, 9, 10]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize the sequence with the first two terms\n    sequence = [1, 1]\n\n    # loop through the sequence and calculate the next term\n    for i in range(2, n):\n        sequence.append(4 * sequence[i-1] - sequence[i-2])\n\n    # return the nth term in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        print(a, end=\" \")\n        c = a + b\n        a = b\n        b = c"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n+1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    a, b = 1, 1\n    for i in range(n):\n        yield a\n        a, b = b, a + b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]  # initialize sequence with 1\n    \n    for i in range(2, n+1):  # loop through sequence until n\n        next_sequence = [2*j for j in sequence]  # double each number in sequence\n        for j in range(len(next_sequence)):\n            next_sequence[j] -= next_sequence[j]  # subtract twice the number from its square\n        sequence = next_sequence  # update sequence\n    \n    return sequence[n-1]  # return the nth number in the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # Initialize sequence as a list of integers\n    sequence = [1]\n\n    # Loop n-1 times to get the nth number in the sequence\n    for i in range(n-1):\n        # Create a new list of integers as the next iteration of the sequence\n        new_sequence = []\n        # Loop through the previous sequence\n        for j in sequence:\n            # If the current number is even, add it to the new list\n            if j % 2 == 0:\n                new_sequence.append(j)\n            # If the current number is odd, add it to the new list twice\n            else:\n                new_sequence.append(j)\n                new_sequence.append(j)\n        # Update the sequence to the new list\n        sequence = new_sequence\n\n    # Return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for surface area of a sphere: 4/3 * pi * r^3\n    surface_area = 4/3 * math.pi * (r**3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r * r\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # compute the surface area using the formula\n    surface_area = (4/3) * math.pi * (r**3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    print(\"The surface area of a sphere of radius\", r, \"is\", area)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3)*math.pi*(r**3)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*(r**3)\n    return area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [0, 1]\n    centered_hexagonal_numbers = []\n\n    for i in range(2, n+1):\n        if hexagonal_numbers[i-2] <= hexagonal_numbers[i-1]:\n            centered_hexagonal_numbers.append(hexagonal_numbers[i-2] + hexagonal_numbers[i-1])\n        else:\n            centered_hexagonal_numbers.append(hexagonal_numbers[i-1] + hexagonal_numbers[i-2])\n\n    return centered_hexagonal_numbers[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the formula for centered hexagonal numbers\n    a = (1 + 5**(0.5)) / 2\n    b = (3 - 7**(0.5)) / 2\n    c = (a - b) / 2\n\n    # Return the nth centered hexagonal number\n    return round((n-1) * c + b)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize variables\n    a = 1\n    b = 6\n    c = 3\n    d = 14\n    \n    # calculate the nth centered hexagonal number\n    if n < 1:\n        print(\"Invalid input. n must be a positive integer.\")\n        return\n    \n    elif n == 1:\n        print(\"The\", n, \"th centered hexagonal number is\", a)\n    \n    elif n == 2:\n        print(\"The\", n, \"th centered hexagonal number is\", a + b)\n    \n    elif n == 3:\n        print(\"The\", n, \"th centered hexagonal number is\", a + b + c)\n    \n    elif n == 4:\n        print(\"The\", n, \"th centered hexagonal number is\", a + b + c + d)\n    \n    else:\n        # calculate the sum of centered hexagonal numbers from 1 to n-1\n        sum_of_centered_hexagonal_numbers = 0\n        for i in range(1, n):\n            sum_of_centered_hexagonal_numbers += centered_hexagonal_number(i)\n        \n        print(\"The\", n, \"th centered hexagonal number is\", a + b + c + d + sum_of_centered_hexagonal_numbers)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    \n    # Calculate the sum of centered hexagonal numbers from 1 to n\n    centered_hexagonal_sum = (n*(2*n-1) // 6) + (3*n-1) // 2\n    \n    return centered_hexagonal_sum"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_numbers = [1, 6, 15, 28, 45, 66, 91, 120, 153, 189, 229, 274, 324, 379, 439, 504, 574, 649, 729, 814, 904, 999]\n    return hexagonal_numbers[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    result = 0\n\n    for i in range(n):\n        result += a + b + c\n        a, b, c = b, c, 2*a + b\n\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # find the number of hexagons in each row\n    hexagons_in_row = int(n / 2)\n\n    # calculate the distance from center to the hexagon\n    hexagon_distance = 3 * hexagons_in_row + 1\n\n    # calculate the number of hexagons to the right of the center\n    right_hexagons = (n - 1) // 2\n\n    # calculate the number of hexagons to the left of the center\n    left_hexagons = n - right_hexagons - 1\n\n    # find the total number of hexagons\n    total_hexagons = 3 * left_hexagons + 6 * right_hexagons + 6\n\n    # calculate the center distance and the number of hexagons to the right of the center\n    center_distance = (total_hexagons - 1) // 2 + 1\n\n    # calculate the index of the center hexagon\n    center_index = center_distance - left_hexagons\n\n    # calculate the base of the centered hexagon\n    centered_base = center_distance * center_index\n\n    # calculate the number of hexagons that fall outside the centered hexagon\n    outside_hexagons = (total_hexagons - 1) // 2 - centered_base + 1\n\n    # find the total number of centered hexagons\n    total_centered_hexagons = (total_hexagons - 1) // 2\n\n    # calculate the index of the nth centered hexagon\n    n_centered_index = n - right_hexagons - left_hexagons - outside_hexagons\n\n    # find the base of the nth centered hexagon\n    n_centered_base = n_centered_index * (3 * hexagons_in_row + 1) + 1\n\n    # return the nth centered hexagon\n    return n_centered_base"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Centered hexagonal number formula\n    # n * (5n^2 - 3n)\n    c = (5 * n * n - 3 * n) // 2\n    \n    return c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Constants\n    a = 1/2\n    b = 1/3\n\n    # Calculate the nth centered hexagonal number\n    c = a * (n * n - 1) + (b * n - 1)\n\n    return int(c)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find the nth centered hexagonal number.\n    '''\n    # define constants\n    hexagon_side_length = 3\n    center_hexagon_side_length = 4\n    \n    # calculate the number of hexagons\n    hexagons_in_circle = 2 * n - 1\n    \n    # calculate the number of side lengths in each hexagon\n    hexagon_side_lengths = [hexagon_side_length] * hexagons_in_circle\n    \n    # center the hexagon side lengths\n    center_hexagon_side_length = hexagon_side_length - (2 * center_hexagon_side_length)\n    hexagon_side_lengths[n-1] = center_hexagon_side_length\n    \n    # calculate the centered hexagonal number\n    centered_hexagonal_number = sum(hexagon_side_lengths)\n    \n    return centered_hexagonal_number"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): First dictionary to merge.\n        dict2 (dict): Second dictionary to merge.\n        dict3 (dict): Third dictionary to merge.\n\n    Returns:\n        dict: Merged dictionary.\n    \"\"\"\n    merged = {}\n    for key, value in dict1.items():\n        merged[key] = value\n    for key, value in dict2.items():\n        merged[key] = value\n    for key, value in dict3.items():\n        merged[key] = value\n    return merged"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine dictionaries into a single dictionary\n    merged_dict = {**dict1, **dict2, **dict3}\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merges three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        elif isinstance(merged_dict[key], list):\n            merged_dict[key].append(value)\n        else:\n            merged_dict[key] = [merged_dict[key], value]\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        elif isinstance(merged_dict[key], list):\n            merged_dict[key].append(value)\n        else:\n            merged_dict[key] = [merged_dict[key], value]\n\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        result[key] = value\n    for key, value in dict2.items():\n        result[key] = value\n    for key, value in dict3.items():\n        result[key] = value\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes in three dictionaries as input and merges them into a single dictionary.\n    \n    Args:\n        dict1 (dict): The first dictionary to be merged.\n        dict2 (dict): The second dictionary to be merged.\n        dict3 (dict): The third dictionary to be merged.\n        \n    Returns:\n        dict: The merged dictionary.\n    '''\n    # Merge the three dictionaries into a single dictionary.\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n        \n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    # Use collections.Counter() to get the frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n    # Return the dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    # loop through each element in the list\n    for elem in list1:\n        # check if the element is in the dictionary\n        if elem in freq_dict:\n            # if it is, increment its frequency by 1\n            freq_dict[elem] += 1\n        else:\n            # if it isn't, add it to the dictionary with a frequency of 1\n            freq_dict[elem] = 1\n    # return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary where the keys are the elements in the list and the values are their frequencies.\n    '''\n\n    freq = {}\n\n    for elem in lst:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    closest = float('inf')\n\n    for num in nums:\n        if abs(num - N) < closest:\n            closest = abs(num - N)\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    count = 0\n    while True:\n        n -= 1\n        count += 1\n        if n < N:\n            return n, count\n        if n == N:\n            return n, count"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Calculate the difference between the given number and its smallest number\n    smallest_diff = abs(N - min(N))\n\n    # Calculate the difference between the given number and its largest number\n    largest_diff = abs(N - max(N))\n\n    # If the difference between the smallest and largest numbers is greater,\n    # then the closest smaller number is the maximum number\n    if smallest_diff > largest_diff:\n        closest_num = max(N)\n    else:\n        closest_num = min(N)\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize min_diff and closest_num to infinity\n    min_diff = float('inf')\n    closest_num = float('inf')\n\n    # Loop through the numbers from 1 to N\n    for num in range(1, N+1):\n        # Calculate the absolute difference between num and N\n        diff = abs(num - N)\n\n        # Update min_diff and closest_num if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num\n\n    # Return the closest smaller number than N\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = 1\n    while True:\n        if N <= n:\n            return n\n        n += 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = []\n    for i in range(1, N+1):\n        num_list.append(i)\n    min_diff = abs(N - num_list[0])\n    closest_num = num_list[0]\n    for i in range(1, len(num_list)):\n        diff = abs(N - num_list[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = num_list[i]\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    elif N%2 == 0:\n        return closest_num(N//2) + 1\n    else:\n        return closest_num((N-1)//2) + 2"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    # initialize variables to keep track of the closest smaller and larger number\n    smallest = float('inf')\n    largest = float('-inf')\n    # loop through the numbers from 0 to N-1\n    for num in range(N):\n        # check if the current number is smaller than the smallest number seen so far\n        if num < smallest:\n            # update the smallest and largest variables\n            smallest = num\n        # check if the current number is larger than the largest number seen so far\n        if num > largest:\n            largest = num\n    # calculate the absolute difference between the smallest and largest numbers\n    diff = abs(smallest - largest)\n    # if the difference is less than 1, return the smallest number\n    if diff < 1:\n        return smallest\n    # otherwise, return the largest number\n    else:\n        return largest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    num_list = list(map(int, input(\"Enter a list of numbers separated by space: \").split()))\n    num_list.append(n)\n    num_list.sort()\n    print(\"Sorted list:\", num_list)\n    smallest_diff = abs(num_list[1] - n)\n    print(\"Smallest difference:\", smallest_diff)\n    if smallest_diff <= abs(num_list[0] - n):\n        print(\"The closest smaller number is:\", num_list[1])\n    else:\n        print(\"The closest smaller number is:\", num_list[0])\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Use binary search to find the closest smaller number than N\n    left = 0\n    right = N\n    while left <= right:\n        mid = (left + right) // 2\n        if mid > 0 and N - mid == mid:\n            return mid - 1\n        elif mid < N:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return N"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of sentences.\n    '''\n    longest = 0\n    for sentence in list1:\n        words = sentence.split()\n        for word in words:\n            if len(word) > longest:\n                longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for i in list1:\n        if len(i) > longest:\n            longest = len(i)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    # initialize the longest word length as 0\n    longest = 0\n    \n    # loop through the list and compare each word length to the current longest word length\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    \n    # return the length of the longest word\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(lst, sub_str):\n    '''\n    Check if a string is present as a substring in a given list of string values.\n    '''\n    for string in lst:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    This function takes a list of strings (str_list) and a substring (sub_str) as input\n    and returns a boolean value indicating whether the substring is present in the list of strings.\n    '''\n    if sub_str in str_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, str) or not isinstance(sub_str, str):\n        return False\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1 in sub_str"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if the number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n\n    # If the number is even, it can't be undulating\n    if n % 2 == 0:\n        return False\n\n    # Initialize sum and count for even factors\n    even_sum = 0\n    even_count = 0\n\n    # Iterate through all numbers from 2 to sqrt(n)\n    for i in range(2, int(n**0.5) + 1):\n\n        # Check if i divides n\n        if n % i == 0:\n\n            # If i is even, add its factor to the sum and count\n            if i % 2 == 0:\n                even_sum += i\n                even_count += 1\n\n            # If i is odd, multiply it by itself and check if it divides n\n            else:\n                if n % (i*i) == 0:\n                    even_sum += i*i\n                    even_count += 1\n\n    # If the number has an odd factor less than sqrt(n), it can't be undulating\n    if n % (even_sum + even_count) == 0:\n        return False\n\n    # If the number has an odd factor greater than sqrt(n), it can be undulating\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n <= 2:\n        return True\n    else:\n        return is_undulating(n - 1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_undulating(n-1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is even or odd\n    if n % 2 == 0:\n        # If even, check if it is divisible by 3 or not\n        if n % 3 == 0:\n            return True\n        else:\n            return False\n    else:\n        # If odd, check if it is divisible by 5 or not\n        if n % 5 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is even\n    if n % 2 == 0:\n        # If even, return False\n        return False\n    # Check if the number is divisible by 7\n    if n % 7 == 0:\n        # If divisible by 7, return True\n        return True\n    # If none of the above conditions are met, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: # if the number is even \n        return 'The number is odd and undulating'\n    else: # if the number is odd\n        return 'The number is even and undulating'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # check if the number is even\n    if n % 2 == 0: \n        # if it is even, check if the sum of digits is equal to n\n        if sum(int(digit) for digit in str(n)) == n: \n            # if it is, return True\n            return True\n        else:\n            # if not, return False\n            return False\n    else: \n        # if it is odd, check if the sum of digits is equal to (n-1)\n        if sum(int(digit) for digit in str(n-1)) == n-1: \n            # if it is, return True\n            return True\n        else: \n            # if not, return False\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    index = 0\n    min_index = 0\n    min_value = test_list[0][1]\n\n    for i, tup in enumerate(test_list):\n        if tup[1] < min_value:\n            min_value = tup[1]\n            min_index = i\n        elif tup[1] == min_value and tup[0] < test_list[index][0]:\n            min_index = i\n\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    index = 0\n    for i, tup in enumerate(test_list):\n        if tup[1] < test_list[index][1]:\n            index = i\n    return index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second element (which represents the second value of the tuples)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value in ascending order\n    test_list.sort(key=itemgetter(1))\n    \n    # Return the first value of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list in ascending order of the second element of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 1000 #initialize minimum length to a very large value\n    for i in lst: #loop through the list of lists\n        if len(i)<min_len: #if the length of the current list is less than the minimum length, update the minimum length\n            min_len = len(i)\n    return min_len #return the minimum length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0][0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize the length of the smallest list to be infinity\n    min_length = float('inf')\n\n    # Iterate through the list of lists and update the length of the smallest list if a shorter list is found\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    # Return the length of the smallest list\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = None\n    for sublist in lst:\n        if min_length is None or len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000 #initialize the minimum length as a very large value\n    for lst in lst:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = 999999999\n\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of the integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of the integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_count += 1\n    return div_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Loop through all the integers from 1 to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If it is, add one to the count variable\n            count += 1\n\n    # Return the count variable as the number of divisors of n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(lst):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Parameters:\n    lst (list): A flattened list of lists, where each element is itself a list.\n\n    Returns:\n    dict: A dictionary with keys being the elements in lst and values being their frequency in the original list.\n\n    Example:\n    >>> frequency_lists([[1, 2], [2, 3], [3, 4]])\n    {1: 1, 2: 2, 3: 1, 4: 1}\n    \"\"\"\n    freq_dict = {}\n    for sublist in lst:\n        for elem in sublist:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                freq_dict[sub_item] = freq_dict.get(sub_item, 0) + 1\n        else:\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for sublist in list1:\n        flattened_list.extend(sublist)\n    freq_dict = {}\n    for elem in flattened_list:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist] # flatten the list\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq:\n                freq[subitem] += 1\n            else:\n                freq[subitem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary\n    freq_dict = {}\n    # Loop through each element in the list1\n    for element in list1:\n        # Check if the element is already in the dictionary\n        if element in freq_dict:\n            # Increment the count of the element by 1\n            freq_dict[element] += 1\n        else:\n            # If the element is not in the dictionary, add it with a count of 1\n            freq_dict[element] = 1\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element in list1\n    freq_dict = {}\n    # Loop through each element in list1\n    for element in list1:\n        # Check if the element is already in the dictionary\n        if element in freq_dict:\n            # If it is, increment its frequency by 1\n            freq_dict[element] += 1\n        else:\n            # If it's not, add it to the dictionary with a frequency of 1\n            freq_dict[element] = 1\n    # Return the dictionary with the frequency of each element in list1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = {}\n\n    # loop through each element in the list\n    for elem in list1:\n        # check if the element is already in the dictionary\n        if elem in freq_dict:\n            # increment the count of the element by 1\n            freq_dict[elem] += 1\n        else:\n            # if the element is not in the dictionary, add it with a count of 1\n            freq_dict[elem] = 1\n\n    # return the dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n\n    result = product / len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # multiply all numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # divide the product with the length of the list\n    result = product / len(numbers)\n    \n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if not isinstance(numbers, list):\n        raise ValueError('Input must be a list')\n    \n    # Multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n    \n    # Divide by the length of the list\n    result /= len(numbers)\n    \n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Initialize an empty string to store the binary number\n    binary_str = \"\"\n    # Loop through each digit of the decimal number\n    while n > 0:\n        # Get the last digit of the decimal number\n        digit = n % 2\n        # Append the last digit to the binary number as a string\n        binary_str = str(digit) + binary_str\n        # Remove the last digit from the decimal number\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    elif n > 0:\n        return str(n % 2) + decimal_to_binary(n // 2)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_string = \"\"\n    while n > 0:\n        binary_string = str(n % 2) + binary_string\n        n //= 2\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n //= 2\n    return binary[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Converts decimal to binary representation of an integer.\n    \"\"\"\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0' \n    else: \n        return str(decimal_to_binary(n//2)) + str(n%2)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n\n    # Convert the input integer to a string and reverse it\n    num_str = str(num)\n    reversed_num_str = num_str[::-1]\n\n    # Convert the reversed string to an integer and add 1\n    next_smallest_num = int(reversed_num_str) + 1\n\n    # Check if the resulting integer is a palindrome\n    while str(next_smallest_num)[::-1]!= num_str:\n        next_smallest_num += 1\n\n    return next_smallest_num\n\n\nif __name__ == \"__main__\":\n    # Test the function with an example input\n    num = 12321\n    print(next_smallest_palindrome(num))\n\n    # Test the function with another example input\n    num = 2147483647\n    print(next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n    \n    # Initialize variables\n    smallest_palindrome = -1\n    palindrome_found = False\n    \n    # Iterate over all possible palindromes starting with the smallest palindrome\n    for i in range(len(num_str), 0, -1):\n        palindrome = int(num_str[:i])\n        \n        # Check if the palindrome is a palindrome\n        if str(palindrome) == str(palindrome)[::-1]:\n            \n            # Check if it's the next smallest palindrome\n            if palindrome > smallest_palindrome:\n                smallest_palindrome = palindrome\n                \n            # Check if the palindrome is already in the list of palindromes\n            if palindrome not in palindromes:\n                palindromes.append(palindrome)\n                palindrome_found = True\n                \n            # Check if the palindrome is smaller than the number\n            if palindrome < num:\n                return palindrome\n            \n    # If no palindromes were found, return -1\n    if not palindrome_found:\n        return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    This function takes an integer as input and returns the next smallest palindrome of that integer.\n\n    Example:\n    next_smallest_palindrome(123)\n    Output: 987\n    \n    next_smallest_palindrome(999)\n    Output: 1000\n    \n    next_smallest_palindrome(49)\n    Output: 100\n    \n    next_smallest_palindrome(100)\n    Output: 101\n    \n    '''\n\n    # If the input number is already a palindrome, return it as is.\n    if num > 0 and num % 10 == 0 and num // 10 == 0:\n        return num\n\n    # Initialize a flag to check if the input number is palindromic.\n    is_palindromic = True\n\n    # Reverse the input number.\n    reversed_num = 0\n    while num > 0:\n        remainder = num % 10\n        reversed_num = reversed_num * 10 + remainder\n        num //= 10\n\n    # If the reversed number is not already a palindrome, return the next smallest palindrome.\n    if reversed_num % 10!= 0 or reversed_num // 10!= 0:\n        reversed_num = reversed_num + 1\n        while reversed_num % 10!= 0 or reversed_num // 10!= 0:\n            reversed_num += 1\n\n    # Convert the reversed number to an integer and return it.\n    return int(reversed_num)\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    # Convert the input number to string\n    num_str = str(num)\n    # Reverse the string\n    rev_num_str = num_str[::-1]\n    # Convert the reversed number to integer\n    rev_num = int(rev_num_str)\n    # Convert the original number to string\n    orig_num_str = str(num)\n    # Add 1 to the original number\n    orig_num_str = str(int(orig_num_str) + 1)\n    # Convert the modified number to integer\n    new_num = int(orig_num_str)\n    # Check if the modified number is palindrome or not\n    while new_num!= 0 and new_num % 10 == new_num // 10:\n        new_num = int(new_num_str)\n        new_num_str = str(new_num)\n        new_num = int(new_num_str)\n    # Check if the original number is palindrome or not\n    while new_num % 10 == new_num // 10:\n        new_num = int(new_num_str)\n        new_num_str = str(new_num)\n        new_num = int(new_num_str)\n    # Find the next smallest palindrome\n    if new_num < rev_num:\n        return next_smallest_palindrome(new_num)\n    else:\n        return new_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is odd\n    if num % 2 == 1:\n        # Get the largest odd number\n        largest_odd = 1\n        while largest_odd * 10 <= num:\n            largest_odd *= 10\n        # Find the next largest palindrome\n        while True:\n            is_palindrome = True\n            temp = largest_odd\n            while temp % 10 == num % 10:\n                if temp < largest_odd:\n                    break\n                temp //= 10\n            if temp % 10 == 0:\n                largest_odd *= 10\n            else:\n                break\n    else:\n        # Get the largest even number\n        largest_even = 2\n        while largest_even * 10 <= num:\n            largest_even *= 10\n        # Find the next largest palindrome\n        while True:\n            is_palindrome = True\n            temp = largest_even\n            while temp % 10 == num % 10:\n                if temp < largest_even:\n                    break\n                temp //= 10\n            if temp % 10 == 0:\n                largest_even *= 10\n            else:\n                break\n    # Calculate the next smallest palindrome\n    next_smallest = largest_even if largest_even % 2 == 0 else largest_odd\n    # Return the next smallest palindrome\n    return next_smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # find the smallest palindrome greater than num\n    while num % 10 == 9:\n        num += 10\n    \n    # check if the smallest palindrome greater than num is divisible by 10\n    while num % 10 == 0:\n        num += 1\n    \n    # convert num to a string and reverse it\n    num_str = str(num)\n    reversed_num_str = num_str[::-1]\n    \n    # create a list of digits in the reversed number\n    digits = [int(digit) for digit in reversed_num_str]\n    \n    # find the smallest palindrome that is not divisible by 10\n    while num % 10 == 0:\n        for i in range(len(digits)):\n            digits[i] += 1\n            if digits[i] > 9:\n                digits[i] = 0\n                break\n        else:\n            print(\"No more palindromes found!\")\n            sys.exit()\n        \n        # convert the list of digits to a palindrome\n        palindrome = int(''.join(str(digit) for digit in digits))\n        \n        # check if the palindrome is less than or equal to num\n        if palindrome > num:\n            return palindrome\n        \n        # reset the digits list to the first digit and increment num by 10\n        digits = [1]\n        num += 10\n    \n    # if no palindromes are found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    reversed_num = 0\n    temp = num\n    while temp!= 0:\n        remainder = temp % 10\n        reversed_num = reversed_num * 10 + remainder\n        temp //= 10\n    return num == reversed_num\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num % 2 == 0:\n        num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num + 1\n    \n    # Find the largest palindrome less than or equal to the number\n    max_palindrome = 0\n    for i in range(10**num, 10**(num+1)-1):\n        if i == int(str(i)[::-1]):\n            max_palindrome = i\n    \n    # Find the next smallest palindrome\n    next_smallest_palindrome = max_palindrome + 1\n    \n    # Check if the next smallest palindrome is a palindrome\n    while str(next_smallest_palindrome)[::-1]!= str(next_smallest_palindrome):\n        next_smallest_palindrome += 1\n        \n    return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_valid_palindrome(n):\n        for i in range(5):\n            if n % 10 == 0:\n                return False\n            n //= 10\n        return True\n\n    def is_next_smallest(n):\n        next_n = n * 10 + 1\n        return is_valid_palindrome(next_n) and is_palindrome(next_n)\n\n    while not is_next_smallest(num):\n        num += 1\n\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the input integer to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # Check if the reversed string is smaller than the original number\n    if int(num_str) < num:\n        # If it is, add 1 to the reversed string and convert it back to an integer\n        next_num = int(num_str[::-1] + \"1\")\n    else:\n        # Otherwise, just take the next number in the sequence\n        next_num = num + 1\n\n    return next_num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    for i in range(len(arr)):\n        if i == k - 1:\n            return arr[i]\n        elif arr[i] < arr[k - 1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n\n    left = 1\n    right = len(arr)\n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError('Index out of range')\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n\n    # Initialize the left and right pointers\n    left, right = 1, len(arr)\n\n    # Find the pivot element\n    pivot = arr[right // 2]\n\n    # Iterate through the array and partition the elements\n    while True:\n        # Move the left pointer to the right until it finds an element that is greater than the pivot\n        while arr[left - 1] > pivot:\n            left += 1\n\n        # Move the right pointer to the left until it finds an element that is smaller than the pivot\n        while arr[right] < pivot:\n            right -= 1\n\n        # If the pointers meet, the pivot is the kth element\n        if left < right:\n            return None\n\n        # If the left pointer is greater than the kth element, move the right pointer to the left\n        elif left > k:\n            right -= 1\n\n        # If the right pointer is smaller than the kth element, move the left pointer to the right\n        else:\n            left += 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        print(\"Array length is less than k\")\n        return None\n    \n    if k < 1:\n        print(\"k should be greater than or equal to 1\")\n        return None\n    \n    if k == 1:\n        return arr[0]\n    \n    if k == len(arr):\n        return arr[-1]\n    \n    # Check if k is in the middle\n    mid = k // 2\n    if k % 2 == 0:\n        return (kth_element(arr[:mid], k) + kth_element(arr[mid:], k)) / 2\n    else:\n        return kth_element(arr[:mid+1], k)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    # Check if the array is empty\n    if not arr:\n        return None\n    # Find the length of the array\n    n = len(arr)\n    # Check if k is less than 1 or greater than or equal to the length of the array\n    if k < 1 or k > n:\n        return None\n    # Initialize two pointers i and j\n    i = 0\n    j = n - 1\n    # Traverse the array using two pointers until kth element is found\n    while i < j:\n        # Calculate the middle index of the array\n        mid = (i + j) // 2\n        # Check if k is equal to the middle index\n        if k == mid + 1:\n            return arr[mid]\n        # If k is smaller than the middle index, update j to mid\n        elif k < mid + 1:\n            j = mid\n        # If k is greater than the middle index, update i to mid + 1\n        else:\n            i = mid + 1\n    # If k is not found in the array, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif word[i].isupper():\n            camel_word += '_' + word[i].lower()\n        else:\n            camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i, letter in enumerate(word):\n        if i == 0 or letter.isupper():\n            camel_case += letter.lower()\n        else:\n            camel_case += letter\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i, letter in enumerate(word):\n        if i == 0:\n            camel_case += letter.lower()\n        else:\n            camel_case += letter.upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    parts = word.split('_')\n    camel_word = ''\n    for part in parts:\n        camel_word += part.capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = words[0]\n    for word in words[1:]:\n        camel_case_word += word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n\n    # Convert the first word to lowercase and append it to the list of words\n    words[0] = words[0].lower()\n    words.insert(0, words[0])\n\n    # Join the list of words back into a string\n    camel_case_word = ''.join(words)\n\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Splitting the word into parts\n    parts = word.split('_')\n    \n    # Creating a new string with the first character converted to lowercase\n    camel_word = parts[0].lower()\n    \n    # Looping over the rest of the parts and converting each part to camel case\n    for i in range(1, len(parts)):\n        # Adding an underscore before the next part\n        camel_word += '_'\n        \n        # Converting the next part to camel case\n        camel_word += parts[i].capitalize()\n    \n    # Returning the camel case word\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # convert all lowercase letters to uppercase\n    word = word.upper()\n    # split the word into words\n    words = word.split('_')\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # join the words into a camel case string\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake_word = word.split('_')\n    camel_word = []\n    for i in snake_word:\n        camel_word.append(i.capitalize())\n    return ''.join(camel_word)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    # Split the word into individual words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case = [word.capitalize() for word in words]\n    # Join the words into a single string\n    return ''.join(camel_case)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case: if n or m is 0, there is no Eulerian number\n    if n == 0 or m == 0:\n        return 0\n    \n    # Base case: if n is 1, then there is a single Eulerian number\n    elif n == 1:\n        return m\n    \n    # General case: n > 1 and m > 1\n    else:\n        # Define a list to store the Eulerian numbers for n, m\n        eulerian = []\n        \n        # Iterate from 1 to m\n        for i in range(1, m+1):\n            # Calculate the Eulerian number for n and i\n            e = (n-1)*i + i\n            \n            # Check if the Eulerian number is already in the list\n            if e not in eulerian:\n                # If not, add it to the list\n                eulerian.append(e)\n        \n        # Return the list with the Eulerian numbers for n, m\n        return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function takes two arguments, n and m, representing the dimensions of a rectangular grid.\n    The Eulerian number a(n, m) is defined as the number of paths of length n from the top-left corner of the grid to the bottom-right corner of the grid, where each path goes through a single cell.\n    '''\n    # Initialize the variable for the Eulerian number\n    eul_num = 0\n\n    # Check for odd dimensions\n    if n % 2 == 0 or m % 2 == 0:\n        print(\"The dimensions of the grid must be odd.\")\n        return\n\n    # Calculate the number of paths in each direction\n    down = n // 2\n    right = m // 2\n\n    # Find the number of paths in each direction\n    if n % 2 == 0:\n        up = n // 2\n    else:\n        up = n // 2 + 1\n    if m % 2 == 0:\n        left = m // 2\n    else:\n        left = m // 2 + 1\n\n    # Combine the paths to get the final Eulerian number\n    eul_num = (up * down) * (right * left)\n\n    # Return the Eulerian number\n    return eul_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize a dictionary to store values\n    values = {}\n    \n    # Initialize the first row with 1\n    values[1] = 1\n    \n    # Loop through the remaining rows\n    for i in range(2, n+1):\n        \n        # Initialize the values of the row\n        row = {}\n        \n        # Loop through the previous row and add the values\n        for j in range(1, i+1):\n            if i % j == 0:\n                if j in row:\n                    row[j] += 1\n                else:\n                    row[j] = 1\n        \n        # Check if the row has even values\n        if sum(row.values()) % 2 == 0:\n            values[i] = 1\n        else:\n            values[i] = 0\n    \n    # Multiply the values in the first row to find the Eulerian number\n    return values[1] * sum(values.values())"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = [0] * (n + 1)\n\n    # Generate all Eulerian numbers\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == 1 or j == 1:\n                a[i] = 1\n            else:\n                a[i] = (a[i] + a[i - 1]) % m\n\n    # Return the last element of the list as the Eulerian number\n    return a[-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0: \n        return 1 \n    elif n == 0: \n        return 2 * (m - 1) \n    else: \n        return eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the array a to store the values of a(n, m)\n    a = [0] * (n * m + 1)\n\n    # Set the first row and first column of the array a\n    a[0] = 1\n\n    # Loop through the rest of the array\n    for i in range(1, n * m + 1):\n        # Calculate the value of a(i, j) using the formula a(i, j) = (a(i-1, j) + a(i-1, j-1)) mod m\n        a[i] = (a[i-1] + a[i-1-m]) % m\n\n    # Return the value of a(n, m)\n    return a[n * m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case\n    if n == 1:\n        return 2**m - 1\n    \n    # recursive case\n    else:\n        return (eulerian_num(n-1, m) * (n - m)) // m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case\n    if n == 1:\n        return m\n    \n    # recursive case\n    return eulerian_num(n-1, m+1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def generate_graph(n, m):\n        # Create a graph with n nodes\n        graph = [[0] * (m + 1) for _ in range(n + 1)]\n\n        # Add edges to the graph\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if i % 2 == j % 2:\n                    graph[i][j] = 1\n\n        return graph\n\n    def max_flow(graph):\n        # Create a residual graph with the same dimensions as the original graph\n        res_graph = [[0] * (m + 1) for _ in range(n + 1)]\n\n        # Initialize the residual graph with the same values as the original graph\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                res_graph[i][j] = graph[i][j]\n\n        # Find a augmenting path in the residual graph\n        augmenting_path = bellman_ford(res_graph)\n\n        # If no augmenting path was found, there is no flow\n        if augmenting_path is None:\n            return 0\n\n        # Convert the augmenting path to a flow\n        flow = 0\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if augmenting_path[i][j]!= 0 and graph[i][j] > 0:\n                    if augmenting_path[i][j] > graph[i][j]:\n                        flow += graph[i][j]\n                        graph[i][j] -= augmenting_path[i][j]\n                    else:\n                        flow += augmenting_path[i][j]\n                        graph[i][j] -= augmenting_path[i][j]\n\n        return flow\n\n    def bellman_ford(graph):\n        # Initialize a list to store the shortest distances from the source node\n        distances = [0] * (n + 1)\n        distances[1] = graph[1][1]\n\n        # Iterate through each node to update the distances\n        for _ in range(n - 1):\n            for i in range(1, n + 1):\n                for j in range(1, m + 1):\n                    if graph[i][j] > 0 and distances[i] + graph[i][j] < distances[j]:\n                        distances[j] = distances[i] + graph[i][j]\n\n        # Check if the distance from the source to any other node in the graph is negative\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if graph[i][j] > 0 and distances[i] + graph[i][j] < distances[j]:\n                    return None\n\n        return distances\n\n    # Create the graph\n    graph = generate_graph(n, m)\n\n    # Find the maximum flow\n    flow = max_flow(graph)\n\n    # If no flow was found, return 0\n    if flow == 0:\n        return 0\n\n    # Calculate the Eulerian number\n    eulerian_num = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if graph[i][j] > 0:\n                eulerian_num += graph[i][j]\n\n    return eulerian_num\n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    def phi(n):\n        \"\"\"\n        Compute the Euler's totient function.\n        \"\"\"\n        if n <= 1:\n            return n\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return phi(n//i) * (1 - 1/i)\n        return phi(n)\n\n    def phi_inv(n, k):\n        \"\"\"\n        Compute the inverse of Euler's totient function phi(n).\n        \"\"\"\n        if n == 1:\n            return k\n        for i in range(2, n+1):\n            if phi(n) % i == 0 and phi(i) % k == 0:\n                return phi_inv(n//i, k//i)\n        return -1\n\n    def phi_inv_2(n, k):\n        \"\"\"\n        Compute the inverse of Euler's totient function phi(n).\n        \"\"\"\n        if n == 1:\n            return k\n        for i in range(2, n+1):\n            if phi(n) % i == 0 and phi(i) % k == 0:\n                return phi_inv_2(n//i, k//i)\n        return -1\n\n    a = (1 + phi(n) * phi_inv(n, m)) / (1 + phi(m) * phi_inv(m, n))\n    return int(a)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate over each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist using the built-in sort() method\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # use the sorted() function to sort the sublist\n        sublist.sort()\n    # return the modified input list\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_list + tuple(test_tup)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.append(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # If the given list is a list, we just need to append it to the tuple\n    if isinstance(test_list, list):\n        test_tup = test_tup + (test_list,)\n\n    # If the given list is a tuple, we need to convert it to a list and append each element to the tuple\n    elif isinstance(test_list, tuple):\n        test_list = list(test_list)\n        for element in test_list:\n            test_tup = test_tup + (element,)\n\n    else:\n        raise ValueError(\"The given list is neither a list nor a tuple.\")\n\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Using list comprehension to convert the tuples to lists\n    test_list_list = [list(tup) for tup in test_tup]\n    \n    # Using list comprehension to append the list to the tuples\n    test_list_list = [tup + test_list for tup in test_list_list]\n    \n    # Using list comprehension to convert the lists back to tuples\n    test_tup_list = tuple([tuple(tup) for tup in test_list_list])\n    \n    return test_tup_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = list(test_list)\n    new_list.extend(test_tup)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Concatenate the two lists\n    combined_list = test_list + test_tup\n    # Convert the combined list to a tuple\n    combined_tuple = tuple(combined_list)\n    return combined_tuple"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Concatenate the two lists and convert it back to tuple\n    new_tup = tuple(test_list + test_tup)\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Append the given list to the given tuples\n    test_list.extend(test_tup)\n    # Return the updated tuples\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three lists as input and merges them into a single sorted list.\n    \"\"\"\n    # Create a list containing all the elements from the input lists\n    merged_list = num1 + num2 + num3\n\n    # Create a min heap of size len(merged_list)\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n\n    # Create a new list to store the sorted elements in ascending order\n    sorted_list = []\n\n    # Pop the smallest element from the min heap and append it to the sorted list\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n        num1 (list): First sorted list.\n        num2 (list): Second sorted list.\n        num3 (list): Third sorted list.\n\n    Returns:\n        list: A single sorted list that contains all elements from num1, num2, and num3.\n    \"\"\"\n    # Use merge sort algorithm to sort the three input lists\n    sorted_list = merge_sort(num1 + num2 + num3)\n\n    # Remove duplicates and return sorted list\n    return sorted(list(set(sorted_list)))\n\n\ndef merge_sort(arr):\n    \"\"\"\n    Merge sort algorithm for sorting a list.\n\n    Args:\n        arr (list): List to be sorted.\n\n    Returns:\n        list: A sorted list.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    else:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        # Recursively sort the left and right halves\n        left_half = merge_sort(left_half)\n        right_half = merge_sort(right_half)\n\n        # Merge the sorted halves\n        return merge(left_half, right_half)\n\n\ndef merge(left_half, right_half):\n    \"\"\"\n    Merge two sorted lists into a single sorted list.\n\n    Args:\n        left_half (list): First sorted list.\n        right_half (list): Second sorted list.\n\n    Returns:\n        list: A sorted list that contains all elements from left_half and right_half.\n    \"\"\"\n    merged_list = []\n    i = j = 0\n    while i < len(left_half) and j < len(right_half):\n        if left_half[i] < right_half[j]:\n            merged_list.append(left_half[i])\n            i += 1\n        else:\n            merged_list.append(right_half[j])\n            j += 1\n\n    merged_list += left_half[i:]\n    merged_list += right_half[j:]\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge first two lists into one\n    merged_list = num1 + num2\n    \n    # Merge sorted lists from third list\n    for i in range(len(num3)):\n        if num3[i] < merged_list[i]:\n            heapq.heappush(merged_list, num3[i])\n        else:\n            heapq.heappop(merged_list)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single sorted list\n    merged_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    # Append any remaining elements in the lists\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    heap1 = []\n    heap2 = []\n    heap3 = []\n    \n    # Add each element of the three lists to the appropriate heap\n    for num in num1:\n        heapq.heappush(heap1, num)\n    for num in num2:\n        heapq.heappush(heap2, num)\n    for num in num3:\n        heapq.heappush(heap3, num)\n    \n    # Merge the heaps into a single sorted list\n    merged_list = []\n    while heap1 and heap2 and heap3:\n        if heap1[0] <= heap2[0] and heap1[0] <= heap3[0]:\n            merged_list.append(heap1[0])\n            heapq.heappop(heap1)\n        elif heap2[0] <= heap1[0] and heap2[0] <= heap3[0]:\n            merged_list.append(heap2[0])\n            heapq.heappop(heap2)\n        else:\n            merged_list.append(heap3[0])\n            heapq.heappop(heap3)\n    \n    # Add any remaining elements from the heaps to the merged list\n    while heap1:\n        merged_list.append(heap1[0])\n        heapq.heappop(heap1)\n    while heap2:\n        merged_list.append(heap2[0])\n        heapq.heappop(heap2)\n    while heap3:\n        merged_list.append(heap3[0])\n        heapq.heappop(heap3)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge num1 and num2 into a single list\n    merged_list = num1 + num2\n    # Sort the merged list\n    sorted_list = heapq.nsmallest(len(merged_list), merged_list)\n    # Merge num3 and sorted_list into a single list\n    merged_list = num3 + sorted_list\n    # Return the merged_list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    heapq.heapify(num1)\n    heapq.heappush(sorted_list, -heapq.heappop(num1))\n    heapq.heappush(sorted_list, -heapq.heappop(num1))\n    heapq.heappush(sorted_list, -heapq.heappop(num1))\n    heapq.heappush(sorted_list, -heapq.heappop(num2))\n    heapq.heappush(sorted_list, -heapq.heappop(num2))\n    heapq.heappush(sorted_list, -heapq.heappop(num2))\n    heapq.heappush(sorted_list, -heapq.heappop(num3))\n    heapq.heappush(sorted_list, -heapq.heappop(num3))\n    heapq.heappush(sorted_list, -heapq.heappop(num3))\n    return [heapq.heappop(sorted_list) for _ in range(len(sorted_list)//2)] + [heapq.heappop(sorted_list) for _ in range(len(sorted_list)//2)]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.merge(heapq.merge(num1, num2), num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    # Use a min heap to keep track of the smallest elements in each list\n    min_heap1 = []\n    min_heap2 = []\n    min_heap3 = []\n    for num in num1:\n        heapq.heappush(min_heap1, num)\n    for num in num2:\n        heapq.heappush(min_heap2, num)\n    for num in num3:\n        heapq.heappush(min_heap3, num)\n    \n    while len(min_heap1) > 0 and len(min_heap2) > 0 and len(min_heap3) > 0:\n        if heapq.heappop(min_heap1) < heapq.heappop(min_heap2) < heapq.heappop(min_heap3):\n            merged_list.append(heapq.heappop(min_heap1))\n        elif heapq.heappop(min_heap1) < heapq.heappop(min_heap3):\n            merged_list.append(heapq.heappop(min_heap1))\n        elif heapq.heappop(min_heap2) < heapq.heappop(min_heap3):\n            merged_list.append(heapq.heappop(min_heap2))\n    \n    while len(min_heap1) > 0 and len(min_heap2) > 0:\n        if heapq.heappop(min_heap1) < heapq.heappop(min_heap2):\n            merged_list.append(heapq.heappop(min_heap1))\n        elif heapq.heappop(min_heap2) < heapq.heappop(min_heap3):\n            merged_list.append(heapq.heappop(min_heap2))\n    \n    while len(min_heap1) > 0 and len(min_heap3) > 0:\n        if heapq.heappop(min_heap1) < heapq.heappop(min_heap3):\n            merged_list.append(heapq.heappop(min_heap1))\n        elif heapq.heappop(min_heap3) < heapq.heappop(min_heap2):\n            merged_list.append(heapq.heappop(min_heap3))\n    \n    while len(min_heap2) > 0 and len(min_heap3) > 0:\n        if heapq.heappop(min_heap2) < heapq.heappop(min_heap3):\n            merged_list.append(heapq.heappop(min_heap2))\n        elif heapq.heappop(min_heap3) < heapq.heappop(min_heap1):\n            merged_list.append(heapq.heappop(min_heap3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three sorted lists into one\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        # Compare the first elements of each list\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n            \n    # Add any remaining elements from the non-empty lists\n    while num1:\n        heapq.heappush(merged_list, heapq.heappop(num1))\n    while num2:\n        heapq.heappush(merged_list, heapq.heappop(num2))\n    while num3:\n        heapq.heappush(merged_list, heapq.heappop(num3))\n        \n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Create a new binary string by rotating the given binary string n times\n    rotated = ''\n    for i in range(n):\n        rotated += s[::-1]\n    # Count the number of odd numbers in the rotated binary string\n    odd_count = 0\n    for i in range(len(rotated)):\n        if rotated[i] == '1':\n            odd_count += 1\n    # Return the number of odd numbers in the rotated binary string\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # create a new binary string with the given number of rotations\n    rotated_string = s.zfill(len(s)) + s\n    # initialize variables to store the number of odd values\n    odd_count = 0\n    # loop through the rotated binary string to count the odd values\n    for i in range(len(rotated_string)):\n        if rotated_string[i] == '1':\n            odd_count += 1\n    # return the number of odd values\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        s = s[::-1] + s\n        for j in range(len(s)):\n            if s[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_str = ''\n    for i in s: \n        binary_str += str(int(i))\n    \n    for i in range(n): \n        binary_str = binary_str[-1] + binary_str[:-1]\n    \n    count = 0\n    for i in binary_str: \n        if int(i) % 2!= 0: \n            count += 1\n            \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        temp = s[1:] + s[0]\n        if int(temp, 2) % 2 == 1:\n            count += 1\n        s = temp\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize count variable to 0\n    count = 0\n    \n    # Convert binary string to a list of digits\n    binary = list(bin(int(s, 2))[2:])\n    \n    # Perform n rotations of the binary string\n    for i in range(n):\n        # Reverse the binary list\n        binary = binary[::-1]\n        \n        # Count the number of odd digits in the reversed binary list\n        for j in range(len(binary)):\n            if int(binary[j]) % 2 == 1:\n                count += 1\n    \n    # Return the count of odd digits in the final binary list\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \n    :param s: a binary string\n    :param n: the number of times to rotate the string\n    :return: the number of odd numbers in the rotated string\n    \"\"\"\n    # Calculate the number of bits in the binary string\n    n_bits = len(s)\n    \n    # Initialize an array to store the rotated binary string\n    rotated_s = [0] * n_bits\n    \n    # Iterate over the string n times, rotating it each time\n    for i in range(n):\n        # Rotate the string by adding the last bit to the beginning\n        rotated_s.append(int(s[0]))\n        \n        # Remove the first bit of the string\n        s = s[1:]\n        \n        # If the last bit is odd, increment the number of odd numbers in the rotated string\n        if s[-1] % 2 == 1:\n            rotated_s[-1] += 1\n    \n    # Count the number of odd numbers in the rotated string\n    num_odd = 0\n    for bit in rotated_s:\n        if bit % 2 == 1:\n            num_odd += 1\n    \n    return num_odd"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    # converting the binary string to an integer value\n    bin_val = int(s, 2)\n    # finding the number of rotations\n    rot = n % 4\n    # rotating the binary string the given number of times\n    if rot == 0:\n        bin_val = bin_val >> 1\n    elif rot == 1:\n        bin_val = ((bin_val >> 1) << 1) | 1\n    elif rot == 2:\n        bin_val = ((bin_val << 1) >> 1) | 1\n    else:\n        bin_val = (bin_val << 1) & 1\n    # converting the rotated binary string back to a binary string\n    s = bin(bin_val)[2:]\n    # counting the number of odd numbers in the rotated binary string\n    count = sum(int(c) for c in s if c == '1')\n    # returning the count of odd numbers in the rotated binary string\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Convert binary string to integer\n    s = int(s, 2)\n\n    # Initialize variables\n    count = 0\n    temp = 0\n\n    # Loop n times\n    for i in range(n):\n\n        # Right rotate binary string by 1 bit\n        temp = s & 1\n        s = (s >> 1) | (temp << 31)\n\n        # Increment count if odd number is found\n        if s & 1:\n            count += 1\n\n    # Return count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Calculate the number of odd digits at the end of the original string\n    odd_count = sum(1 for digit in s if int(digit) % 2 == 1)\n\n    # Calculate the number of rotations to perform\n    rotations = n // odd_count + 1\n\n    # Initialize a list to store the rotated binary strings\n    rotated_strings = []\n\n    # Rotate the binary string n times and append it to the list\n    for _ in range(rotations):\n        rotated_strings.append(rotate(s))\n\n    # Count the number of odd digits in each rotated string\n    result = [sum(1 for digit in rotated_string if int(digit) % 2 == 1) for rotated_string in rotated_strings]\n\n    return result\n\ndef rotate(binary_string):\n    # Convert the binary string to a list of digits\n    digits = [int(digit) for digit in binary_string]\n\n    # Reverse the list of digits\n    digits.reverse()\n\n    # Convert the reversed list of digits back to a binary string\n    rotated_binary_string = ''.join(map(str, digits))\n\n    return rotated_binary_string"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store common elements\n    common_set = set()\n    \n    # loop through each element in the list\n    for element in nestedlist:\n        # if the element is a list, recursively call the function on that list\n        if isinstance(element, list):\n            common_set.update(common_in_nested_lists(element))\n        # if the element is not a list, add it to the common set\n        else:\n            common_set.add(element)\n            \n    return common_set"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    \n    common_elements = []\n    for i in range(len(nestedlist[0])):\n        for j in range(1, len(nestedlist)):\n            if nestedlist[j][i] in common_elements:\n                break\n            else:\n                common_elements.append(nestedlist[j][i])\n                \n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = set()\n\n    for lst in nestedlist:\n        for elem in lst:\n            common_elements.add(elem)\n\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = set()\n    for lst in nestedlist:\n        for element in lst:\n            common_elements.add(element)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_elements.extend([nestedlist[i], nestedlist[j]])\n    return set(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize an empty set to store common elements\n    common_elements = set()\n\n    # Loop through each nested list\n    for lst in nestedlist:\n        # Loop through each element in the list\n        for element in lst:\n            # Add the element to the set of common elements if it is not already in the set\n            if element not in common_elements:\n                common_elements.add(element)\n\n    # Convert the set of common elements to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the unique elements of the first list\n    set1 = set(nestedlist[0])\n\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Loop through each nested list and check for common elements\n    for i in range(1, len(nestedlist)):\n        temp = set(nestedlist[i])\n\n        # Loop through the elements of the current list and find common elements\n        for element in temp:\n            if element in set1 and element not in common:\n                common.add(element)\n\n    # Return the list of common elements\n    return list(common)\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[0])):\n                if nestedlist[i][j] == nestedlist[0][k] and nestedlist[j][k] == nestedlist[0][k]:\n                    if (i, j, k) not in common:\n                        common.append((i, j, k))\n                    break\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if i!= j and nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        if i == 0:\n            common = nestedlist[i]\n        else:\n            common = set(common) & set(nestedlist[i])\n    return list(common)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Define the regular expression pattern for an integer\n    pattern = r'^[-+]?\\d+$'\n\n    # Use the re module to check if the text matches the pattern\n    match = re.match(pattern, text)\n\n    # Return True if the pattern matches, False otherwise\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    # Check if the input string is an integer\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for item in list1:\n        if item:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if not d:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(len(d) == 0 for d in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n\n    Args:\n        nums (tuple): A tuple of positive integers.\n\n    Returns:\n        int: The sum of the tuple elements.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if type(num)!= int or num <= 0:\n            raise ValueError(\"All elements in the tuple must be positive integers.\")\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize the result variable\n    result = 0\n    # Loop through the list of integers\n    for num in nums_list:\n        # Add each integer to the result variable\n        result += num\n    # Return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert the tuple to a list\n    nums_list = list(nums)\n    # initialize a variable to store the sum of the list\n    total = 0\n    # iterate over the list and add each element to the total\n    for num in nums_list:\n        total += num\n    # return the total\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                element = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                element = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    result_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            result_list.append(list_to_float(item))\n        elif isinstance(item, str):\n            try:\n                result_list.append(float(item))\n            except ValueError:\n                pass\n        else:\n            result_list.append(item)\n    return result_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for value in row:\n            try:\n                float(value)\n            except ValueError:\n                value = float(str(value))\n                row[row.index(value)] = value\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) == float:\n                pass\n            elif isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n            elif isinstance(test_list[i][j], list):\n                list_to_float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                element = float(element)"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and convert each element to a string\n    list_of_strings = [str(word) for word in string.split()]\n    return list_of_strings"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Convert string to list\n    string_list = string.split()\n    # Return the list\n    return string_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    words = string.split()\n    return words"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    n = len(arr)\n    for i in range(n):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        count = 1\n        for j in range(i+1, n):\n            if arr[j] == arr[i]:\n                count += 1\n            else:\n                break\n        if count == 1:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return None\n    \n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    \n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            if i < j - 1:\n                i += 1\n            else:\n                j -= 1\n        elif arr[i] < arr[j]:\n            i += 1\n        else:\n            j -= 1\n    return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array must have at least two elements\")\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            raise ValueError(\"Array must have unique elements\")\n        elif arr[i] < unique_element:\n            unique_element = arr[i]\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    # Initialize a hash table to store the frequency of each element in the array\n    freq = {}\n\n    # Traverse through the array and update the frequency of each element in the hash table\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Traverse through the hash table and return the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n\n    # If no such element is found, return -1\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n\n    # iterate through the dictionary and return the key for the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key\n\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize two variables, count and target, to 0\n    count = 0\n    target = arr[0]\n    \n    # Traverse the array from the second element to the last element\n    for i in range(1, len(arr)):\n        # If the current element is equal to the target, increment count\n        if arr[i] == target:\n            count += 1\n        # If the count reaches 1, return the target element\n        elif count == 1:\n            return target\n    \n    # If the loop completes without finding the target element, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return \"No element appears only once in the array.\"\n    for i in range(len(arr)):\n        if arr[i]!= arr[arr.index(arr[i])]:\n            return arr[i]\n    return \"All elements appear only once in the array.\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Traverse the array and keep track of the last occurrence of each element\n    last_occurrence = {}\n\n    # Iterate through the array and update the last occurrence for each element\n    for i in range(len(arr)):\n        if arr[i] in last_occurrence:\n            last_occurrence[arr[i]] = min(last_occurrence[arr[i]], i)\n        else:\n            last_occurrence[arr[i]] = i\n\n    # Traverse the array again and find the element that appears only once\n    for i in range(len(arr)):\n        if arr[i] in last_occurrence and i!= last_occurrence[arr[i]]:\n            return arr[i]\n\n    # If no such element is found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0 or n == 1:\n        return None\n    \n    # Traverse through the array and check for elements that appear only once\n    for i in range(n):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        count = 1\n        for j in range(i+1, n):\n            if arr[j] == arr[i]:\n                count += 1\n                if count == 2:\n                    return arr[i]"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    max_pair = (-1, -1)\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            current_product = max(lst[i][0]*lst[j][1], lst[i][1]*lst[j][0], current_product)\n            if abs(current_product) > abs(max_product):\n                max_product = current_product\n                max_pair = (lst[i][0], lst[j][1])\n\n    return max_product, max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize variables to keep track of maximum product and corresponding tuples\n    max_product = float('-inf')\n    max_tuples = []\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Initialize variables to keep track of current product and corresponding tuples\n        product = 1\n        current_tuples = []\n\n        # Iterate through the list of tuples\n        for j in range(i+1, len(list1)):\n            # Compute the product of the current tuple and the next tuple\n            product *= list1[j]\n            current_tuples.append((list1[i], list1[j]))\n\n            # Check if the current product is greater than the maximum product\n            if abs(product) > max_product:\n                max_product = abs(product)\n                max_tuples = current_tuples\n\n    # Return the maximum product and corresponding tuples\n    return max_product, max_tuples"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = -float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n            max_product = max(max_product, product)\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize maximum product to be -infinity\n    max_product = -float('inf')\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each tuple in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the two numbers in the tuple\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            # Update the maximum product if the current product is greater than the previous maximum\n            if product > max_product:\n                max_product = product\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    This function takes a limit as input and returns the sum of all the amicable numbers from 1 to the limit.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == 1:\n            amicable_numbers.append(i)\n        else:\n            sum_of_divisors = sum(set(range(1, i)) & set(range(1, i-1)))\n            if i == sum_of_divisors:\n                amicable_numbers.append(sum_of_divisors)\n    return sum(amicable_numbers)\n\nlimit = int(input(\"Enter the limit: \"))\nresult = sum_amicable_numbers(limit)\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is\", result)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a given number is amicable or not.\n    \"\"\"\n    if num < 2:\n        return False\n    s = sum(range(1, int(num**0.5)+1))\n    return num == s\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Find the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable = 0\n    for i in range(1, limit):\n        if i!= 1:\n            j = 2\n            while j < i:\n                if i % j == 0:\n                    break\n                j += 1\n            if j == i:\n                sum_of_amicable += i\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Returns True if num is an amicable number and False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n\n    sum_of_divisors = sum(range(1, num))\n    return sum_of_divisors == num\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            amicable_numbers.append(num)\n\n    return sum(amicable_numbers)\n\nprint(amicable_numbers_sum(2000000))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_amicable_numbers(limit):\n    sum = 0\n    for num in range(1, limit + 1):\n        if is_prime(num) and is_prime(sum_of_proper_divisors(num)):\n            sum += num\n    return sum\n\ndef sum_of_proper_divisors(num):\n    total = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            total += i\n    return total\n\nlimit = 10000\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", sum_of_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_amicable(n):\n    \"\"\"\n    Helper function to check if a number is amicable or not.\n    \"\"\"\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by any number between 2 and its square root\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Main function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Initialize sum to zero\n    total = 0\n\n    # Iterate through numbers from 1 to the limit\n    for i in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(i):\n            # If it is, add it to the total\n            total += i\n\n    return total\n\n\nif __name__ == '__main__':\n    limit = int(input(\"Enter a limit: \"))\n    print(\"Sum of amicable numbers from 1 to\", limit, \"is\", sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    This function calculates the sum of all the amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all the numbers from 1 to the specified limit\n    numbers = list(range(1, limit+1))\n    \n    # calculate the sum of the first and last numbers in the list\n    first_sum = numbers[0] + numbers[-1]\n    last_sum = numbers[-1] + numbers[0]\n    \n    # add the two sums together to get the total sum of amicable numbers\n    amicable_sum = first_sum + last_sum\n    \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(n):\n    \"\"\"\n    A function to check if a number is prime or not\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef get_divisors(n):\n    \"\"\"\n    A function to get all divisors of a number\n    \"\"\"\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0 and is_prime(i):\n            divisors.append(i)\n    return divisors\n\n\ndef get_amicable_numbers(limit):\n    \"\"\"\n    A function to get all amicable numbers from 1 to a specified limit\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        divisors = get_divisors(i)\n        if sum(divisors) == i:\n            amicable_numbers.append(i)\n    return amicable_numbers\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    A function to sum all amicable numbers from 1 to a specified number\n    \"\"\"\n    amicable_numbers = get_amicable_numbers(limit)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    # Initialize variables\n    sum_of_amicable = 0\n    count = 0\n\n    # Loop through all numbers from 1 to limit\n    for num in range(1, limit):\n        # Check if number is amicable\n        if is_amicable(num):\n            sum_of_amicable += num\n            count += 1\n\n    # Return the sum of amicable numbers\n    return sum_of_amicable\n\ndef is_amicable(num):\n    # Check if number is divisible by any number from 2 to its square root\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable = []\n    for i in range(1, limit):\n        j = i\n        while j <= limit:\n            if i == j:\n                break\n            if i % j == 0:\n                break\n            j += 1\n        if i == j:\n            amicable.append(i)\n    return sum(amicable)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j) * 180 / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the angle of the complex number\n    angle = cmath.phase(a+b*1j)\n    # Convert the angle from radians to degrees\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the angle using the arccosine function from the cmath module\n    angle = cmath.phase(a+b)\n    # Return the angle as a float in degrees\n    return angle * 180.0 / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the angle of the complex number\n    angle = cmath.phase(a+b*1j)\n    # convert the angle from radians to degrees\n    angle = angle*180/cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    This function takes two complex numbers, a + bi, and returns the angle of the complex number in degrees.\n    \"\"\"\n    angle = cmath.phase(a+b)\n    angle = round(angle*180/cmath.pi, 2)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    print(\"The angle of the complex number\", a, b, \"is\", angle)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the absolute value of the complex number\n    abs_val = cmath.sqrt(a**2 + b**2)\n    \n    # Calculate the angle of the complex number\n    angle = cmath.phase(complex(a,b))\n    \n    # Convert the angle to degrees\n    angle_degrees = angle * 180 / cmath.pi\n    \n    # Return the angle in degrees\n    return angle_degrees"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    max_diff = 0\n    n = len(string)\n    for i in range(n-1):\n        if string[i] == '0' and string[i+1] == '1':\n            diff = 1\n            while i+diff < n and string[i+diff] == '1':\n                diff += 1\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev_zeros = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            prev_zeros += 1\n        else:\n            max_diff = max(max_diff, prev_zeros)\n            prev_zeros = 1\n            \n    max_diff = max(max_diff, prev_zeros)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0s = 0\n    count_1s = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0s += 1\n        else:\n            count_1s += 1\n            \n        if count_0s > 0 and count_1s > 0:\n            diff = abs(count_0s - count_1s)\n            if diff > max_diff:\n                max_diff = diff\n                \n        if count_0s == 0 and count_1s == 0:\n            break\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0s = 0\n        count_1s = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0s += 1\n            else:\n                count_1s += 1\n            diff = abs(count_0s - count_1s)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    # loop through the string\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        elif string[i] == '1':\n            count_1 += 1\n        else:\n            count_0 -= 1\n            count_1 -= 1\n\n        # calculate the maximum difference\n        diff = count_0 - count_1\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    max_len = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = abs(count_0 - count_1)\n\n        if diff > max_diff:\n            max_diff = diff\n            max_len = i - count_0 + 1\n\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n-1):\n        count0 = 0\n        count1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n            else:\n                count1 += 1\n            diff = abs(count0 - count1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    def count_ones(s):\n        count = 0\n        for c in s:\n            if c == '1':\n                count += 1\n        return count\n\n    def count_zeros(s):\n        count = 0\n        for c in s:\n            if c == '0':\n                count += 1\n        return count\n\n    max_diff = 0\n    for i in range(1, len(string)):\n        diff = count_ones(string[i:]) - count_zeros(string[:i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            diff = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    diff += 1\n                else:\n                    diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    n = len(string)\n\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            elif string[j] == '1':\n                count_1 += 1\n\n            if count_0 > count_1:\n                break\n            elif count_0 < count_1:\n                max_diff = max(max_diff, count_0 - count_1)\n\n        if count_0 == count_1:\n            max_diff = max(max_diff, count_0)\n\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def gcd(a, b):\n        \"\"\"\n        Recursive function to find the greatest common divisor of a and b.\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    # find the greatest common divisor of a and b\n    gcd_a = gcd(a, b)\n    gcd_b = gcd(b, a)\n\n    # find the sum of common divisors\n    sum_cd = 0\n    for i in range(1, min(gcd_a, gcd_b) + 1):\n        if gcd_a % i == 0 and gcd_b % i == 0:\n            sum_cd += i\n\n    return sum_cd\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a Python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = [i for i in range(1, a+1) if a % i == 0 and b % i == 0]\n    if common_divisors:\n        return sum(common_divisors[0], common_divisors[1])\n    else:\n        return 0"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of common divisors.\n    \"\"\"\n\n    # Check if the input numbers are positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and a > 0 and b > 0):\n        raise ValueError(\"Both input numbers must be positive integers.\")\n\n    # Find the GCD of the two numbers using the Euclidean algorithm\n    while b!= 0:\n        a, b = b, a % b\n\n    # Return the sum of common divisors of the two numbers\n    return a"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of common divisors\n    sum_cd = 0\n    \n    # Loop through the range of numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # If the smaller number is divisible by the current number, add it to the sum of common divisors\n        if a % i == 0 and b % i == 0:\n            sum_cd += i\n    \n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def common_divisors(num):\n        \"\"\"\n        Calculate the common divisors of a given number.\n        \"\"\"\n        divisors = set()\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.add(i)\n        return divisors\n\n    def sum_of_divisors(divisors_a, divisors_b):\n        \"\"\"\n        Calculate the sum of common divisors of two numbers.\n        \"\"\"\n        return sum(divisors_a.intersection(divisors_b))\n\n    divisors_a = common_divisors(a)\n    divisors_b = common_divisors(b)\n    return sum_of_divisors(divisors_a, divisors_b)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers a and b as input and returns the sum of their common divisors.\n    \"\"\"\n    # iterate over all numbers between 1 and the smaller of the two inputs\n    for i in range(1, min(a, b) + 1):\n        # check if i is a common divisor of a and b\n        if a % i == 0 and b % i == 0:\n            # add i to the sum\n            sum += i\n    # return the sum\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # List of common divisors\n    divisors = []\n\n    # Find common divisors\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Return sum of common divisors\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function returns the sum of common divisors of two given numbers a and b.\n    \"\"\"\n    # Finding the common divisors of a and b\n    common_divisors = []\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    # Calculating the sum of common divisors\n    sum_of_divisors = sum(common_divisors)\n    return sum_of_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    divisors = []\n    for i in range(1, b + 1):\n        if b % i == 0 and a % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Loop through all numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # Check if i is a common divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            # Add i to the sum\n            sum = sum + i\n    # Return the sum of all common divisors\n    return sum"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    # Find the sum of the rows and columns\n    row_sum = sum(row) for row in my_matrix\n    col_sum = sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix[0])))\n\n    # Check if the sum is equal to the product of the matrix elements\n    if row_sum == col_sum == sum(x**2 for x in my_matrix):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix has the same number of rows and columns\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n\n    # Check if all the elements of the matrix are integers\n    for row in my_matrix:\n        for elem in row:\n            if not isinstance(elem, int):\n                return False\n\n    # Check if the matrix is a magic square\n    n = len(my_matrix)\n    for i in range(n):\n        # Check the elements in the upper left triangle\n        for j in range(i + 1):\n            if my_matrix[i][j]!= n - i - 1:\n                return False\n\n        # Check the elements in the lower right triangle\n        for j in range(i, n - 1):\n            if my_matrix[i][j]!= n - j - 1:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix has the same number of rows and columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"The matrix must have the same number of rows and columns.\"\n\n    # Check if all rows and columns have the same number of integers\n    for row in my_matrix:\n        if len(row)!= len(set(row)):\n            return \"All rows and columns must have the same number of integers.\"\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # Check the value at (i, j) against the values in the diagonal and anti-diagonal\n            if my_matrix[i][j]!= sum(my_matrix[k][j] for k in range(len(my_matrix)) if k!= i) or \\\n               my_matrix[j][i]!= sum(my_matrix[i][k] for k in range(len(my_matrix[0])) if k!= j):\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize a variable to store the sum of the diagonal elements\n    diagonal_sum = 0\n    # Loop through each row and column of the matrix\n    for i in range(len(my_matrix)):\n        # Add the sum of each row and column to the diagonal_sum\n        diagonal_sum += my_matrix[i][i] + my_matrix[i][len(my_matrix)-1-i]\n    # Check if the diagonal_sum is equal to the sum of the matrix elements\n    if diagonal_sum == sum(sum(row) for row in my_matrix):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # Check if all rows have the same sum\n    row_sums = [sum(row) for row in my_matrix]\n    if all(row_sums[i] == row_sums[0] for i in range(len(row_sums))):\n        return False\n    # Check if all columns have the same sum\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(len(my_matrix[0]))]\n    if all(col_sums[i] == col_sums[0] for i in range(len(col_sums))):\n        return False\n    # Check if the matrix has the magic sum of 15\n    magic_sum = sum(sum(row) for row in my_matrix)\n    if magic_sum!= 15:\n        return False\n    # All tests passed, so the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize the sum of the diagonals to 0\n    diagonal_sum = 0\n    \n    # Loop through each row\n    for i in range(len(my_matrix)):\n        # Calculate the sum of the current row\n        row_sum = 0\n        for j in range(len(my_matrix[i])):\n            row_sum += my_matrix[i][j]\n            \n            # Check if the sum of the current row is a magic square\n            if row_sum == i+1:\n                diagonal_sum += row_sum\n                break\n            \n            # Check if the sum of the current row is a magic square\n            if row_sum == len(my_matrix)+i-1:\n                diagonal_sum += row_sum\n                break\n            \n    # Check if the sum of the diagonals is a magic square\n    if diagonal_sum == (len(my_matrix)*len(my_matrix)+len(my_matrix)*len(my_matrix))/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is a square matrix\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n\n    # Calculate the sum of each row and column\n    row_sum = [sum(row) for row in my_matrix]\n    col_sum = [sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))]\n\n    # Check if the sum of each row and column is the same as the sum of the matrix\n    if row_sum == col_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the size of the matrix\n    size = len(my_matrix)\n\n    # Calculate the sum of the rows and columns\n    row_sum = sum(my_matrix[i] for i in range(size))\n    col_sum = sum(my_matrix[i] for i in range(size))\n\n    # Check if the sum of the matrix is equal to the sum of the rows and columns\n    if row_sum == col_sum == sum(sum(my_matrix[i]) for i in range(size)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # create a list to store the sums of the rows and columns\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix[0]))]\n\n    # check that the row sums are all the same\n    if row_sums!= col_sums:\n        return False\n\n    # check that the diagonals (from top-left to bottom-right) are all the same\n    diag1_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag2_sum = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n    if diag1_sum!= diag2_sum:\n        return False\n\n    # if all tests pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = sum(sum(row) for row in my_matrix)\n    if magic_sum == n**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_item = None\n    max_freq = 0\n\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_num = None\n    max_freq = 0\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_num = num\n            max_freq = freq[num]\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for num in nums:\n        if freq[num] > max_freq:\n            max_item = num\n            max_freq = freq[num]\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        count[num] += 1\n\n        if count[num] > max_freq:\n            max_freq = count[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = max(counts.values())\n    max_item = None\n    for item, count in counts.items():\n        if count == max_count:\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)  # defaultdict to store frequency of each item\n\n    # count frequency of each item in the list\n    for num in nums:\n        freq_dict[num] += 1\n\n    # find the item with maximum frequency\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency_dict = defaultdict(int)\n    max_frequency = 0\n    max_item = None\n\n    for num in nums:\n        frequency_dict[num] += 1\n\n    for item, frequency in frequency_dict.items():\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] not in vowels:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in str1:\n        if char not in vowels:\n            result += char\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_vowels = []\n    \n    for char in str1:\n        if char not in vowels:\n            reversed_vowels.append(char)\n    \n    return ''.join(reversed_vowels[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    new_string = \"\"\n    for i in range(len(string)-1, -1, -1):\n        if string[i] not in vowels:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            reversed_str += str1[i]\n        else:\n            reversed_str += vowels[vowels.index(str1[i]) + 1]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    reverse_string = ''\n    \n    for i in range(len(string)-1, -1, -1):\n        if string[i] in vowels:\n            reverse_string += string[i]\n    \n    return reverse_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Use join() method to concatenate the elements of the tuple with a separator\n    # (in this case, an empty space)\n    return''.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # concatenate the elements of the tuple\n    string_tup = \",\".join(str(x) for x in tup1)\n    # return the concatenated string\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Initialize an empty string\n    result = ''\n    # Loop through each element of the tuple\n    for i in range(len(tup1)):\n        # Check if the element is a string\n        if isinstance(tup1[i], str):\n            # If it is, add it to the result string\n            result += tup1[i]\n        # If the element is not a string, convert it to a string using str()\n        else:\n            result += str(tup1[i])\n    # Return the result string\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    string_tup = str(tup1)\n    # Return the string\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list of numbers.\n    \"\"\"\n    negatives = [num for num in nums if num < 0]  # filter out positive numbers\n    return sum(negatives)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # convert n to string and reverse the string\n    hex_n = str(n)[::-1]\n    # calculate the sum of the first n hexagonal numbers\n    total = 0\n    for i in range(1, n+1):\n        total += int(hex_n[:i])\n    return total"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n+1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((2*n) - 1) * ((2*n) - 2) * ((2*n) + 1) / 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2\n\nn = int(input(\"Enter a positive integer: \"))\nprint(hexagonal_num(n))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(n):\n        a = a + b\n        b = a - b\n    return a"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n*(2*n-1))//2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if zero_count == 0:\n        return 0\n    else:\n        return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    non_zeros = len(nums) - sum(zeros)\n    return zeros[0] / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    float: The ratio of zeroes to non-zeroes in the array.\n\n    \"\"\"\n    non_zero_count = len(nums) - sum(1 for num in nums if num == 0)\n    return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Use array to store non-zeroes and zeroes\n    arr = array('i')\n    for num in nums:\n        arr.append(1 if num!= 0 else 0)\n    \n    # Calculate the sum of non-zeroes and zeroes\n    sum_zeroes = sum(1 for num in arr if num == 0)\n    sum_non_zeroes = len(arr) - sum_zeroes\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = sum_zeroes / sum_non_zeroes\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = len(nums)\n    for num in nums:\n        if num == 0:\n            non_zero_count -= 1\n    return non_zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i')\n    non_zeroes = array('i')\n    for num in nums:\n        if num == 0:\n            zeroes.append(1)\n        else:\n            non_zeroes.append(1)\n    if len(zeroes) == 0 or len(non_zeroes) == 0:\n        return 0\n    else:\n        return len(zeroes) / len(non_zeroes)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            count[nums.index(num)] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    for i in range(len(nums)):\n        if count[i] == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * (max(nums) + 1))\n\n    for num in nums:\n        count[num] += 1\n\n    non_zeros = sum(1 for i in count if i!= 0)\n    zero_count = sum(1 for i in count if i == 0)\n\n    if non_zeros == 0:\n        return 0\n\n    return float(zero_count) / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Create an empty array to store non-zero integers\n    non_zero_array = array('i', [0] * len(nums))\n\n    # Iterate through the input array and store non-zero integers in the new array\n    for num in nums:\n        if num!= 0:\n            non_zero_array.append(num)\n\n    # Calculate the total number of non-zero integers\n    total_non_zero_count = len(non_zero_array)\n\n    # Calculate the total number of zero integers\n    total_zero_count = len(nums) - total_non_zero_count\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_to_non_zero_ratio = (total_zero_count / total_non_zero_count) * 100\n\n    # Return the ratio as a float\n    return round(zero_to_non_zero_ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize an array to store the count of non-zero and zeroes\n    zero_counts = array('i', [0, 0])\n    # Loop through the array and increment the count for non-zeroes and zeroes\n    for num in nums:\n        if num == 0:\n            zero_counts[0] += 1\n        else:\n            zero_counts[1] += 1\n    # Calculate the ratio of zeroes to non-zeroes and return it\n    non_zero_count = zero_counts[1]\n    zero_count = zero_counts[0]\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Initialize variables\n    power = 0\n    sum_of_powers = 0\n\n    # Iterate through the number of bits in the number n\n    while n > 0:\n        # Check if the current bit is set to 1\n        if n % 2 == 1:\n            # If it is, check if the power of 2 is already in the sum_of_powers variable\n            if power!= 0 and power in sum_of_powers:\n                return False\n            # If not, add the power of 2 to the sum_of_powers variable\n            else:\n                sum_of_powers += power\n        # Increment the power variable\n        power += 1\n        # Divide the number by 2 to remove the rightmost bit\n        n = n >> 1\n\n    # If the while loop completes without returning False, then the number can be represented as a sum of powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        count = 0\n        while n > 1:\n            if n & 1 == 1:\n                count += 1\n            n = n >> 1\n        if count == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to keep track of the number of non-zero powers of 2\n    count = 0\n    \n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # If the number is odd, add it to the count and divide it by 2\n    else:\n        count += 1\n        n //= 2\n        \n    # Check if the number is still odd after dividing by 2\n    while n % 2 == 0:\n        count += 1\n        n //= 2\n        \n    # If the number is now zero, return True\n    if n == 0:\n        return True\n    \n    # If the number is not divisible by 2, then it cannot be represented as a sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # First, check whether the number is a power of 2\n    if n == 1:\n        return True\n    elif n & (n-1) == 0:\n        return False\n    else:\n        return is_Sum_Of_Powers_Of_Two(n-1)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    for i in range(1, 32):\n        power_of_two = 2 ** i\n        if power_of_two <= n and n % power_of_two == 0:\n            if is_Sum_Of_Powers_Of_Two(n - power_of_two):\n                return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if n is a power of 2 or not\n    if n == 1:\n        return True\n    elif n == 0 or n % 2 == 0:\n        return False\n\n    # Check if any of the odd powers of 2 can be added to n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # function to check whether the given number is power of 2 or not\n    def is_power_of_two(num):\n        if num == 1:\n            return True\n        else:\n            return is_power_of_two(num >> 1)\n\n    # function to check whether the given number can be represented as sum of non-zero powers of 2 or not\n    def check_sum_of_powers_of_two(num):\n        # check if the given number is power of 2 or not\n        if not is_power_of_two(num):\n            return False\n\n        # check whether the number is sum of non-zero powers of 2 or not\n        count = 0\n        while num > 0:\n            count += 1\n            num >>= 1\n\n        return count > 1\n\n    # check if the given number can be represented as sum of non-zero powers of 2 or not\n    if check_sum_of_powers_of_two(n):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Helper function to check if the given number is divisible by 2 raised to the power of power\n    def check_power(n, power):\n        if n % (2 ** power) == 0:\n            return True\n        else:\n            return False\n\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers = 0\n\n    # Check all possible powers of 2 from 0 to log2(n)\n    for power in range(0, int(log2(n)) + 1):\n        # Check if the current number is divisible by 2 raised to the power of the current power\n        if check_power(n, power):\n            # If it is, add the current power to the sum of powers of 2\n            sum_of_powers += power\n\n    # Check if the sum of powers of 2 is equal to n\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    def is_power_of_two(num):\n        return num == 1 or (num & (num-1)) == 0\n\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n\n    sum_of_powers = 0\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            if is_power_of_two(i):\n                sum_of_powers += i\n                n //= i\n            elif is_power_of_two(n/i):\n                sum_of_powers += n/i\n                n = i\n\n    return is_power_of_two(n) or sum_of_powers == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # If n is 1, then it is not possible to represent it as sum of non-zero powers of 2\n    if n == 1:\n        return False\n\n    # Initialize variables for power and remainder\n    power = 0\n    remainder = n\n\n    # While the remainder is greater than 0\n    while remainder > 0:\n\n        # If the remainder is greater than or equal to 2\n        if remainder >= 2:\n\n            # Calculate the quotient and the remainder after dividing it by 2\n            quotient = remainder // 2\n            remainder = remainder % 2\n\n            # Add the power of 2 to the current power\n            power += quotient\n\n        # If the remainder is less than 2, then it cannot be represented as sum of non-zero powers of 2\n        else:\n            return False\n\n    # If the loop completes without returning False, then the number is possible to represent as sum of non-zero powers of 2\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # formula to calculate circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Using the formula for the circumference:\n    circumference = 2 * 3.14159 * r\n    \n    # Return the result:\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n\n    Parameters:\n    r (float): radius of the circle\n\n    Returns:\n    float: circumference of the circle\n    \"\"\"\n    pi = 3.14159265359\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n\n    Args:\n    test_list (list): List of lists to flatten.\n\n    Returns:\n    set: A set of all the numbers in the flattened list of lists.\n    \"\"\"\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    def flatten(lst):\n        if isinstance(lst, list):\n            for item in lst:\n                flatten(item)\n        else:\n            yield lst\n\n    result = set()\n    for item in flatten(test_list):\n        if isinstance(item, int):\n            result.add(item)\n\n    return sorted(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result += extract_singly(item)\n        elif type(item) == int or type(item) == float:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sorting algorithm.\n    \"\"\"\n    # Function to swap two elements in the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Function to reverse the order of the elements from i to j\n    def reverse(nums, i, j):\n        while i < j:\n            swap(nums, i, j)\n            i += 1\n            j -= 1\n\n    # Function to perform the pancake sorting algorithm\n    def sort_pancakes(nums):\n        # Find the largest element\n        largest = max(nums)\n        # Initialize the pancake with the largest element\n        pancake = [largest]\n        # Loop through the remaining elements\n        for num in nums:\n            # If the element is smaller than the largest element, swap it with the pancake\n            if num < largest:\n                swap(nums, num, pancake[0])\n                # Reverse the order of the elements from the first element to the current element\n                reverse(nums, 0, num)\n                # Add the current element to the pancake\n                pancake.append(num)\n        # Reverse the order of the elements from the first element to the pancake's last element\n        reverse(nums, 0, pancake[-1])\n        # Return the sorted list\n        return nums\n\n    # Call the function to perform the pancake sorting algorithm\n    return sort_pancakes(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    def sort(nums):\n        n = len(nums)\n        for i in range(n - 1, 0, -1):\n            max_idx = 0\n            for j in range(1, i + 1):\n                if nums[j] > nums[max_idx]:\n                    max_idx = j\n            nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        return nums\n\n    return sort(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Traverse through all elements of the list\n    for i in range(n):\n        # Find the maximum element in the remaining unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element of the unsorted part of the list\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    # Initialize the length of the list\n    length = len(nums)\n\n    # Create a loop to sort the list\n    while length > 1:\n        # Set the current length of the list\n        current_length = length\n\n        # Create a variable to store the position of the element that needs to be sorted\n        min_index = 0\n\n        # Loop through the list to find the minimum element\n        for i in range(1, length):\n            if nums[i] < nums[min_index]:\n                min_index = i\n\n        # Swap the minimum element with the last element in the list\n        nums[min_index], nums[length - 1] = nums[length - 1], nums[min_index]\n\n        # Decrease the length of the list by 1\n        length -= 1\n\n        # Print the sorted list at each iteration\n        print(nums)\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Reverse the sub-array from i+1 to the end\n        reverse_range(nums, i+1, len(nums)-1)\n\ndef reverse_range(nums, start, end):\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # get the length of the list\n    n = len(nums)\n    # loop through the list\n    for i in range(n):\n        # find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # swap the maximum element with the last element in the unsorted part of the list\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    # return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def bubble_sort(arr):\n        n = len(arr)\n        for i in range(n):\n            for j in range(0, n-i-1):\n                if arr[j] > arr[j+1]:\n                    arr[j], arr[j+1] = arr[j+1], arr[j]\n        return arr\n\n    def heapify(arr, n, i):\n        largest = i\n        left = 2*i + 1\n        right = 2*i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def heap_sort(arr):\n        n = len(arr)\n        for i in range(n//2 - 1, -1, -1):\n            heapify(arr, n, i)\n        for i in range(n-1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n        return arr\n\n    sorted_nums = heap_sort(bubble_sort(nums))\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # find the largest element in the unsorted part of the list\n        max_idx = i\n        for j in range(i):\n            if nums[j] < nums[max_idx]:\n                max_idx = j\n        # swap the largest element with the first element of the unsorted part of the list\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Starting from the first element, we swap it with the last element\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the remaining unsorted part of the array\n        j = i\n        max_val = nums[j]\n        for k in range(i-1, -1, -1):\n            if nums[k] > max_val:\n                max_val = nums[k]\n                j = k\n        # Swap the current element with the maximum element found in the remaining unsorted part of the array\n        nums[i], nums[j] = nums[j], nums[i]\n    # We have now sorted the array in ascending order. We return the sorted array.\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n        \n        if left < n and arr[left] > arr[largest]:\n            largest = left\n            \n        if right < n and arr[right] > arr[largest]:\n            largest = right\n            \n        if largest!= i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n            \n    def build_max_heap(arr):\n        n = len(arr)\n        for i in range(n//2, -1, -1):\n            heapify(arr, n, i)\n            \n    def heap_sort(arr):\n        build_max_heap(arr)\n        n = len(arr)\n        for i in range(n-1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n            \n    heap_sort(nums)\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    # Initialize variables to keep track of the count and the index of the same-position item\n    count = 0\n    index = -1\n    \n    # Loop through each item in the three lists\n    for i in range(len(list1)):\n        # Check if the item is the same in all three lists\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            # If it is, increment the count and update the index\n            count += 1\n            index = i\n    \n    # Return the count and the index of the same-position item\n    return count, index"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n\n    # initialize variables\n    count = 0\n\n    # loop through the lists\n    for i in range(len(list1)):\n        # check if the current item in list1 is equal to the corresponding item in list2 and list3\n        if list1[i] == list2[i] == list3[i]:\n            # increment the count if the condition is met\n            count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in it.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists present in it.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for item in Input:\n        if isinstance(item, list):\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    diff = arr[1] - arr[0]\n    max_diff = diff\n    for i in range(2, len(arr)):\n        temp = arr[i] - arr[i-1]\n        if abs(temp) > max_diff:\n            max_diff = abs(temp)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as an input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    \n    # loop through the array\n    for i in range(len(arr)):\n        # loop through the remaining elements in the array\n        for j in range(i+1, len(arr)):\n            # calculate the absolute difference between the current element and the next element\n            diff = abs(arr[i]-arr[j])\n            # update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Initialize two variables to store the minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Loop through each element in the array\n    for num in arr:\n        # If the current number is smaller than the minimum value, update the minimum value\n        if num < min_val:\n            min_val = num\n\n        # If the current number is larger than the maximum value, update the maximum value\n        elif num > max_val:\n            max_val = num\n\n    # Calculate the absolute difference between the maximum and minimum values\n    max_diff = abs(max_val - min_val)\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n    # calculate the absolute difference between each value\n    diff_arr = [abs(max_val - i) for i in arr]\n    # find the maximum difference in the array\n    max_diff = max(diff_arr)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    \n    # Iterate over the array\n    for i in range(len(arr)):\n        # Iterate over the array to find the maximum absolute difference\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Initialize the maximum absolute difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n\n    # Iterate over the array elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the absolute difference between the current and next element\n            curr_diff = abs(arr[i] - arr[j])\n\n            # Update the maximum absolute difference if the current difference is greater\n            if curr_diff > max_diff:\n                max_diff = curr_diff\n\n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    # Initialize the maximum absolute difference variable\n    max_diff = float('-inf')\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Compare the current element with all other elements in the array\n        for j in range(i+1, len(arr)):\n            # Calculate the absolute difference between the two elements and update the maximum difference if necessary\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Given the coefficients a and b and the value n, return a tuple (x, y) such that ax + by = n, or None if no such solution exists.\n    \"\"\"\n    # Check if a and b are nonzero\n    if a == 0 or b == 0:\n        return None\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4 * a * n\n\n    # Check if there is a solution\n    if discriminant < 0:\n        return None\n\n    # Calculate the two solutions\n    x1 = (-b + discriminant**0.5) / (2 * a)\n    x2 = (-b - discriminant**0.5) / (2 * a)\n\n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if a and b are non-zero\n    if a == 0 or b == 0:\n        return None\n\n    # Initialize x and y\n    x = 0\n    y = 0\n\n    # Find the number of iterations needed to reach n\n    i = 0\n    while x**2 + y**2 < n:\n        x += 1\n        y = 0\n        i += 1\n\n    # Check if a and b are negative\n    if a < 0:\n        a = -a\n        b = -b\n\n    # Check if x and y satisfy the equation\n    if a * x**2 + b * y**2 == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are both nonzero\n    if a == 0 or b == 0:\n        return None\n    \n    # Initialize x and y to 0\n    x = 0\n    y = 0\n    \n    # Iterate over all possible values of x and y\n    while y < n:\n        x += 1\n        y = a * x + b\n    \n    # If y == n, then there is a solution\n    if y == n:\n        return (x, y)\n    \n    # If no solution was found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Check if a is zero\n    if a == 0:\n        # If a is zero, check if b is positive or negative\n        if b > 0:\n            # If b is positive, we have a quadratic equation:\n            # x^2 + bx + c = 0\n            # where c = n/a\n            c = n / a\n            # If b is positive and c is an integer, we have a solution:\n            if c.is_integer():\n                x = int(-b / (2 * a))\n                y = int(c)\n                return (x, y)\n            # If b is positive and c is not an integer, there are no solutions\n            else:\n                return None\n        else:\n            # If b is negative, we have a cubic equation:\n            # x^3 + bx^2 + cx + d = 0\n            # where d = -n/a\n            d = -n / a\n            # If b is negative and d is an integer, we have a solution:\n            if d.is_integer():\n                x = int((-b + d**2 ** 0.5) / (3 * a))\n                y = int((-b - d**2 ** 0.5) / (3 * a))\n                return (x, y)\n            # If b is negative and d is not an integer, there are no solutions\n            else:\n                return None\n    else:\n        # If a is not zero, we have a linear equation:\n        # ax + by = n\n        # Therefore, we have x = (n/a) and y = n/a\n        x = int(n / a)\n        y = int(n / a)\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = (-b + (b**2 - 4*a*n) ** 0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*a*n) ** 0.5) / (2*a)\n    if (x1**2 + x2**2 == n) and (x1!= 0) and (x2!= 0):\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if a, b, and n are all integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n    \n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n    \n    # If d is less than 0, there is no solution\n    if d < 0:\n        return None\n    \n    # If d is equal to 0, there is only one solution x\n    elif d == 0:\n        x = -b/2/a\n        return (x, x)\n    \n    # If d is greater than 0, there are two solutions x and y\n    else:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize the count to 0\n    count = 0\n    # initialize the x and y variables\n    x = 0\n    y = 0\n    # loop until the count reaches n\n    while count < n:\n        # increment the x value\n        x += 1\n        # check if the equation is true for the current x value\n        if a*x + b*y == n:\n            # increment the count\n            count += 1\n        # if the equation is not true for the current x value, decrement the x value\n        else:\n            x -= 1\n    # check if the count is equal to n\n    if count == n:\n        # return the tuple of (x, y)\n        return (x, y)\n    # return None if the count is not equal to n\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns integers x and y that satisfy ax + by = n as a tuple, or None if no solution exists.\n    \"\"\"\n    # Check if the equation has the form ax + by = n\n    if not (a == 0 or b == 0 or a * b == n):\n        return None\n    \n    # If a is 0, then there is only one solution x = -n/b\n    if a == 0:\n        return (-n//b,)\n    \n    # If b is 0, then there is only one solution y = -n/a\n    if b == 0:\n        return (-n//a,)\n    \n    # Compute the coefficients of the quadratic equation in the form ax^2 + bx + c = 0\n    c = b**2 - 4*a*n\n    \n    # If c is a square, then there are two solutions\n    if c**2 == b**2:\n        x1 = (-b + c**0.5) / (2*a)\n        x2 = (-b - c**0.5) / (2*a)\n        return (x1, x2)\n    \n    # If c is negative, then there is no solution\n    if c < 0:\n        return None\n    \n    # If c is zero, then there is only one solution x = -b/2a\n    return (-b//2*a,)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize x and y to 0\n    x, y = 0, 0\n    \n    # check if n is divisible by both a and b\n    while a * x ** 2 + b * y ** 2 <= n:\n        # increment x and y by 1\n        x += 1\n        y += 1\n    \n    # check if x and y satisfy ax + by = n\n    if a * x + b * y == n:\n        return x, y\n    \n    # if no solution exists, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are both integers\n    if not (isinstance(a, int) and isinstance(b, int)):\n        return None\n    \n    # Check if a and b are not zero\n    if a == 0 or b == 0:\n        return None\n    \n    # Find the solution\n    x = (-b + (n // a)) // b\n    y = (-b - (n // a)) // b\n    \n    # Check if there exists a solution\n    if a * x + b * y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # convert list1 and list2 to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    # use set operations to get the elements present in both lists and remove them from list1\n    list1 = list(set1.difference(set2))\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Using set() to remove duplicates from list2 and list1\n    list1 = list(set(list1) - set(list2))\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            list1.remove(list2[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = [num for num in list1 if num not in list2]\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n        if n - 2 * i < 0:\n            break\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n - 2*sum_series(n-1) + n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    return total\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of the series is:\", sum_series(n))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        return 0\n    else:\n        x = n\n        sum_ = 0\n        for i in range(n // 2):\n            sum_ += x - 2 * i\n            x = x - i\n        return sum_"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return n - sum_series(n-1)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_value = 0\n    for i in range(n//2):\n        sum_value += n - 2*i\n    return sum_value"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s / l\n    return (s * l) / (2 * pi)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((2 * i + 1) * pi / (2 * l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        angle = (i*360)/l\n        area += s * tan(angle * pi/180)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter and area of each polygon\n    sp = s / (2 * l)\n    area = (sp * (sp - 2 * l + 1)) / 6\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the length of a side of the polygon\n    side = s / l\n\n    # Calculate the area of the polygon using the formula A = (s * (s - 1) * (s - 2) *... * 2) / (3 * pi * n)\n    n = l * 1.0  # Convert l to a floating point number to avoid integer division\n    A = (side * (side - 1) * (side - 2) *... * 2) / (3 * pi * n)\n\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the formula for the area of a regular polygon\n    area = (s * (s - pi) / 2) * tan(pi / l)\n\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n//i == i:\n                return True\n            else:\n                return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Get all the divisors of the given number\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    \n    # Calculate the sum of the divisors and return the result\n    return sum(divisors)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = [] \n    for i in range(1, n+1): \n        if n % i == 0: \n            divisors.append(i) \n    divisor_sum = sum(divisors) \n    if divisor_sum == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n\n    sum_div = sum(i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)\n\n    # Return True if the sum of the divisors of n is equal to n, otherwise return False\n    return sum_div == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            print(f\"{n} is divisible by {i}\")\n            return False\n    print(f\"{n} has no divisors that sum to the same value as the sum of its divisors.\")\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i\n            divisor_sum += n//i\n\n    return divisor_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n\n    sum_divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_divisors += i\n            if n // i!= i:\n                sum_divisors += n // i\n    \n    # Check if the sum of divisors is equal to n\n    if sum_divisors == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i + n // i\n            \n    # Check if the sum of divisors is equal to n\n    if div_sum == n:\n        print(\"The sum of divisors is equal to\", n)\n    else:\n        print(\"The sum of divisors is not equal to\", n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div1 = []\n    div2 = []\n    sum_div1 = 0\n    sum_div2 = 0\n    \n    # generate divisors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div1.append(i)\n            if i!= n // i:\n                div1.append(n // i)\n    div1.append(n)\n    \n    # find the sum of the divisors\n    for i in div1:\n        sum_div1 += i\n    \n    # generate divisors of n+1\n    for i in range(1, int(math.sqrt(n+1))+1):\n        if n+1 % i == 0:\n            div2.append(i)\n            if i!= n+1 // i:\n                div2.append(n+1 // i)\n    div2.append(n+1)\n    \n    # find the sum of the divisors\n    for i in div2:\n        sum_div2 += i\n    \n    # compare the sum of the divisors\n    if sum_div1 == sum_div2:\n        print(\"The sum of the divisors of {} and {} is the same.\".format(n, n+1))\n    else:\n        print(\"The sum of the divisors of {} and {} is different.\".format(n, n+1))"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n and determines whether the sum of the divisors of n and the square of n are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n\n    # Calculate the square of n\n    square = n**2\n\n    # Determine whether the sum of divisors and square are the same\n    if div_sum == square:\n        print(\"The sum of the divisors of\", n, \"and the square of\", n, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and the square of\", n, \"are different.\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # initialize a dictionary to store the count of each character\n    char_count = {}\n\n    # iterate through the string\n    for char in str1:\n        # check if the character is a letter and not already in the dictionary\n        if char.isalpha() and char not in char_count:\n            # if it is, add it to the dictionary and set its count to 1\n            char_count[char] = 1\n        # if the character is already in the dictionary, increment its count\n        elif char.isalpha() and char in char_count:\n            char_count[char] += 1\n\n    # iterate through the string again and count the number of characters at the same position in the English alphabet\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            # if the character is a letter, check if it is the same as the previous character\n            if char == str1[count]:\n                # if it is, increment the count of the previous character\n                count += 1\n            # otherwise, reset the count to 1\n            else:\n                count = 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Initialize an empty dictionary to store the count of characters at the same position in the English alphabet\n    count_dict = {}\n    for i in range(26):\n        count_dict[chr(65 + i)] = 0\n\n    # Iterate through the string and count the characters at the same position in the English alphabet\n    for char in str1:\n        if char in count_dict:\n            count_dict[char] += 1\n\n    # Return the count of characters at the same position in the English alphabet\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in alphabet:\n        if str1.lower().count(char.lower()) == 1:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the counts\n    count_dict = {}\n\n    # Iterate over each character in the English alphabet\n    for i in range(ord('a'), ord('z') + 1):\n        # Get the character's ASCII code\n        char_code = i\n\n        # If the character is in the string, increment its count in the dictionary\n        if char_code in str1:\n            if char_code in count_dict:\n                count_dict[char_code] += 1\n            else:\n                count_dict[char_code] = 1\n\n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(ord('a') + i)) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for char in 'abcdefghijklmnopqrstuvwxyz':\n        char_count[char] = 0\n    for char in str1.lower():\n        if char in char_count:\n            char_count[char] += 1\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes a string as input and counts the number of characters in the string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Create a dictionary to store the character frequencies\n    freq_dict = {}\n\n    # Loop through each character in the string\n    for char in str1:\n\n        # Convert the character to lowercase to make the comparison case insensitive\n        char = char.lower()\n\n        # Check if the character is present in the dictionary\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # Loop through the dictionary and count the number of characters at the same position as in the English alphabet\n    count = 0\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            # Check if the character is in the English alphabet (case insensitive)\n            if char.isalpha():\n                count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    english_alpha = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n\n    for char in str1:\n        if char.lower() in english_alpha:\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    # Convert the input string to lowercase and remove any non-alphabetic characters\n    str1 = str1.lower()\n    str1 = ''.join(filter(str.isalpha, str1))\n\n    # Initialize a dictionary to store the count of characters at the same position as in the English alphabet\n    char_count = {}\n\n    # Iterate through the input string\n    for i in range(len(str1)):\n        # Get the character at the current position\n        char = str1[i]\n\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Return the dictionary containing the count of characters at the same position as in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase to ignore case sensitivity\n    str1 = str1.lower()\n    \n    # create an empty dictionary to store the character counts\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is an English alphabet character, add it to the dictionary with a count of 1\n        if 'a' <= char <= 'z':\n            char_count[char] = char_count.get(char, 0) + 1\n    \n    # return the character counts as a dictionary\n    return char_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    This function counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is less than 2\n    if n < 2:\n        return n\n    \n    # Set x to 1\n    x = 1\n    \n    # While x is less than n\n    while x < n:\n        # Increment x\n        x <<= 1\n    \n    # Return x\n    return x"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Loop through all numbers from 2 to n and check if each number is a power of 2\n    for i in range(2, n+1):\n        if i == 2**j:\n            # Check if the next power of 2 is greater than or equal to n\n            if i >= n:\n                return i\n    # If no power of 2 is found, return n\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # Convert n to binary and count the number of 1s in binary representation\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    \n    # Calculate the smallest power of 2 that is greater than or equal to n\n    power = 1\n    while power < count:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    \n    # Calculate the binary representation of n\n    binary = bin(n)[2:]\n    \n    # Iterate through the binary digits from right to left\n    for i in range(len(binary) - 1, -1, -1):\n        # Check if the i-th binary digit is 1\n        if binary[i] == '1':\n            # If it is, set the i-th binary digit to 0 and break out of the loop\n            binary[i] = '0'\n            break\n    \n    # Convert the binary string back to an integer and add 1\n    return int(binary, 2) + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize a variable to keep track of the next power of 2\n    next_power = 1\n    \n    # Iterate over all numbers from 1 to n\n    for i in range(2, n+1):\n        # If the current number is a power of 2, return it as the next power of 2\n        if i == 2**i:\n            return i\n    \n    # If no such power of 2 exists, return the maximum integer value possible\n    return 2**31 - 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2**(int(log2(n))+1)\n\ndef log2(x):\n    \"\"\"\n    Returns the logarithm of x to the base 2.\n    \"\"\"\n    return math.log(x)/math.log(2)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # loop until we find the smallest power of 2 greater than or equal to n\n    while n & (n-1)!= 0:\n        n = n + 1\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 1 << (n.bit_length() - 1)"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    sum = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum += list1[i]\n\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Initialize variables to store the sum and current index\n    sum = 0\n    index = 0\n\n    # Loop through the list, adding numbers to the sum as we go\n    while index < len(list1):\n        if m <= index < n:\n            sum += list1[index]\n        index += 1\n\n    # Return the final sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_val = 0\n    for i in range(m, n+1):\n        sum_val += list1[i]\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize the sum to 0\n    total = 0\n\n    # iterate through the list from the first index to the second index\n    for i in range(m, n+1):\n        # add the current element to the total\n        total += list1[i-1]\n\n    # return the total\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n\n    Parameters:\n    a (float): Length of one side of the pentagon.\n\n    Returns:\n    float: Perimeter of the pentagon.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula to calculate perimeter of a regular pentagon\n    perimeter = (5*a**2)/4\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the perimeter using the formula:\n    # 5(a^2 + b^2) / 4 = 120\n    return 120 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2 * a\n    return circumference * 5"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a * math.sin(math.pi / 5)\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std ':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    This function counts the number of occurrences of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '')\n        count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a list to store the data types of all the elements in the tuple\n    data_types = []\n\n    # iterate over each element in the tuple\n    for element in test_tuple:\n        # add the data type of the current element to the list\n        data_types.append(type(element).__name__)\n\n    # check if all the data types in the list are the same\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for element in test_tuple:\n        data_types.append(type(element))\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # find the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n\n    # iterate through the rest of the tuple elements and check if they have the same data type as the first element\n    for element in test_tuple[1:]:\n        if type(element)!= data_type:\n            return False\n\n    # if all the elements have the same data type as the first element, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # checking if all elements have same data type\n    if len(set(map(type, test_tuple))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in a tuple have the same data type or not.\n\n    Args:\n        test_tuple: a tuple to be checked\n\n    Returns:\n        A boolean value indicating whether all the elements in the tuple have the same data type.\n    \"\"\"\n    # Use the `type` function to check if the first element has the same data type as the others\n    return all(type(test_tuple[0]) == type(elem) for elem in test_tuple[1:])"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for i in range(len(test_tuple)):\n        type_list.append(type(test_tuple[i]))\n    if len(set(type_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # convert all elements in the tuple to string and concatenate them into a single string\n    data_types_str = ''.join(str(type(elem)) for elem in test_tuple)\n\n    # split the string into a list of data types\n    data_types_list = data_types_str.split(' ')\n\n    # check if all the data types in the list are the same or not\n    if len(set(data_types_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count and candidate variables\n    count = 0\n    candidate = None\n\n    # Iterate through the array and update count and candidate\n    for num in arr:\n        if num == x:\n            count += 1\n        elif num < x and count > 0:\n            count -= 1\n        elif count == 0:\n            candidate = num\n\n    # If the candidate is None, it means the element is not present in the array\n    if candidate is None:\n        return False\n\n    # Check if the candidate is the majority element\n    majority = n // 2\n    if count > majority:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Initialize a counter variable\n    count = 0\n\n    # Loop through the array and count the number of occurrences of x\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # If the count is greater than or equal to n/2, return True\n    if count >= n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count >= n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1\n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        n &= (n-1) # clearing the least significant set bit\n        count += 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] if i % 2 == 0 else '' for i in range(len(str))])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the result\n    result = ''\n    \n    # Loop through each character in the input string\n    for i in range(len(str)):\n        # Check if the index of the character is odd\n        if i % 2!= 0:\n            # If the character is odd, add it to the result string\n            result += str[i]\n    \n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = set()\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_values.add(str[i])\n    return ''.join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty list to store the odd values of the string\n    odd_values = []\n    # Loop through each character of the string\n    for i in range(len(str)):\n        # Check if the current character has an odd index value\n        if i % 2 == 1:\n            # If the current character is odd, append it to the list of odd values\n            odd_values.append(str[i])\n    # Convert the list of odd values to a string\n    result = ''.join(odd_values)\n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # initialize an empty string to store the result\n    result = \"\"\n    # iterate over each character of the input string\n    for char in str:\n        # if the index of the character is odd, add it to the result\n        if (ord(char) - ord('a') + 1) % 2!= 0:\n            result += char\n    # return the result\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and returns a string with odd index values removed.\n    \"\"\"\n    new_string = \"\"\n    for i, char in enumerate(string):\n        if i % 2 == 1:\n            new_string += char\n    return new_string"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    This function takes three arguments, a, b and c, and returns the minimum of those three numbers.\n    '''\n    if a < b and a < c: \n        return a\n    elif b < a and b < c: \n        return b\n    else: \n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Bitwise AND operator to find the set bits in the given range\n    range_bits = n & (2**l-1) & (2**r-1)\n\n    # Check if all the bits are unset in the given range or not\n    if range_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize a variable to store the sum of all bits in the range [l, r]\n    sum_of_bits = 0\n\n    # Loop through all possible bits in the range [l, r]\n    for i in range(l, r+1):\n        # Check if the i-th bit is set or unset\n        if (n & (1 << i)):\n            # If it's set, add the value of the i-th bit to the sum_of_bits\n            sum_of_bits += i\n\n    # If the sum_of_bits is equal to 2^r, it means all bits are set in the given range\n    if (sum_of_bits == (1 << r)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    for i in range(l, r + 1):\n        if n & (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Iterate over all bits in the given range\n    for i in range(l, r + 1):\n        # If any bit is set, return False\n        if (n & (1 << i)):\n            return False\n    # If all bits are unset, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the integers to binary strings\n    n_bin = bin(n)[2:].zfill(n.bit_length())\n    l_bin = bin(l)[2:].zfill(l.bit_length())\n    r_bin = bin(r)[2:].zfill(r.bit_length())\n    \n    # Check if all the bits are unset in the given range\n    unset_bits = r_bin.replace(n_bin, '', 1)\n    if unset_bits == '':\n        print(\"All the bits are set in the given range\")\n    else:\n        print(\"Some bits are unset in the given range\")"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"n should be a positive integer\"\n\n    # Check if l and r are positive integers\n    if type(l)!= int or type(r)!= int or l <= 0 or r <= 0:\n        return \"l and r should be positive integers\"\n\n    # Check if l <= r\n    if l > r:\n        return \"l should be less than or equal to r\"\n\n    # Initialize variables to keep track of count of unset bits in each position\n    unset_bits = [0] * (r - l + 1)\n\n    # Iterate through the binary representation of n and increment the count of unset bits in each position\n    for i in range(len(bin(n)) - 1, -1, -1):\n        if bin(n)[i] == \"0\":\n            pos = l + i\n            if unset_bits[pos - l]:\n                return False\n            unset_bits[pos - l] = 1\n\n    # If all unset bits have been counted, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a boolean variable to store the result\n    result = True\n    \n    # Iterate over all bits in the binary representation of n\n    for i in range(l, r + 1):\n        # Check if the ith bit is set\n        if (n & (1 << i))!= 0:\n            # If it is set, then return False\n            result = False\n            break\n    \n    # Return the result\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check whether all the bits are unset in the given range or not.\n\n    :param n: an integer\n    :param l: the least significant bit to check (inclusive)\n    :param r: the most significant bit to check (inclusive)\n    :return: True if all the bits are unset in the given range, False otherwise.\n    \"\"\"\n    # Compute the number of bits set in the range [l, r]\n    num_bits_set = bin(n & ((1 << (r - l + 1)) - 1))[2:].zfill(r - l + 1)\n    # Compare the number of bits set with the number of bits in the range\n    return num_bits_set == \"1\" * (r - l + 1)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments:\n    n (int): the integer number to check for unset bits\n    l (int): the lower bound of the range to check\n    r (int): the upper bound of the range to check\n    \n    It returns True if all the bits in the range are set, else False.\n    '''\n    for i in range(l, r + 1):\n        if n & (1 << i) == 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    elif (l & (1 << n - 1))!= 0 and (r & (1 << n - 1))!= 0:\n        return all_Bits_Set_In_The_Given_Range(n - 1, l, r)\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two pointers: one for positive elements and another for negative elements\n    positive = 0\n    negative = 0\n    \n    # Move all positive elements to the front of the array\n    while positive < n and negative < len(arr):\n        arr[positive], arr[negative] = arr[negative], arr[positive]\n        positive += 1\n        negative += 1\n    \n    # Move all negative elements to the back of the array\n    while negative < len(arr):\n        arr[positive], arr[negative] = arr[negative], arr[positive]\n        positive += 1\n        negative += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two pointers to keep track of the first negative and first positive elements\n    i = 0\n    j = n-1\n\n    # Loop through the array and swap negative and positive elements until we reach the end of the array\n    while j < len(arr):\n        if arr[j] < 0:\n            # Swap the negative and positive elements\n            arr[i], arr[j] = arr[j], arr[i]\n            # Increment the index of the first negative element\n            i += 1\n        j += 1\n\n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Initialize two empty lists for positive and negative elements\n    pos_list = []\n    neg_list = []\n\n    # Iterate through the array and add the elements to the appropriate list based on their sign\n    for num in arr:\n        if num >= 0:\n            pos_list.append(num)\n        else:\n            neg_list.append(num)\n\n    # Sort the positive and negative lists in ascending order\n    neg_list.sort()\n    pos_list.sort()\n\n    # Merge the sorted lists into a single list\n    result = neg_list + pos_list\n\n    # Return the final result\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Separating the positive and negative elements\n    pos = []\n    neg = []\n    for i in arr[:n]:\n        if i >= 0:\n            pos.append(i)\n        else:\n            neg.append(i)\n\n    # Merging the two lists\n    result = neg + pos\n\n    # Shifting all the negative elements to the beginning of the result list\n    for i in range(len(neg)):\n        result.insert(0, neg[i])\n\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # initialize counters for negative and positive elements\n    neg_count = 0\n    pos_count = 0\n\n    # loop through the array\n    for num in arr:\n        # if the element is negative, decrement the negative counter and increment the positive counter\n        if num < 0:\n            neg_count -= 1\n            pos_count += 1\n        # if the element is positive, decrement the positive counter and increment the negative counter\n        else:\n            pos_count -= 1\n            neg_count += 1\n\n    # initialize the result array\n    result = []\n\n    # loop through the array again and add the elements to the result array\n    for num in arr:\n        # if the element is negative, add it to the result array at the beginning\n        if num < 0:\n            result = [num] + result\n        # if the element is positive, add it to the result array at the end\n        else:\n            result += [num]\n\n    # return the result array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Find the indices of all the positive and negative elements in the array\n    neg_indices = []\n    pos_indices = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_indices.append(i)\n        else:\n            pos_indices.append(i)\n    \n    # Sort the negative indices first and then the positive indices\n    neg_indices.sort(reverse=True)\n    pos_indices.sort()\n    \n    # Move the negative indices to the beginning of the array and the positive indices to the end of the array\n    for i in range(n):\n        if i < len(neg_indices) and i < len(pos_indices):\n            arr[i], arr[neg_indices[i]] = arr[neg_indices[i]], arr[i]\n        elif i < len(neg_indices):\n            arr[i], arr[neg_indices[i]] = arr[neg_indices[i]], arr[i]\n        else:\n            arr[i], arr[pos_indices[i-len(neg_indices)]] = arr[pos_indices[i-len(neg_indices)]], arr[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two separate arrays for negative and positive elements\n    negative_elements = []\n    positive_elements = []\n\n    # Iterate through the array and add negative elements to negative_elements and positive elements to positive_elements\n    for element in arr:\n        if element < 0:\n            negative_elements.append(element)\n        else:\n            positive_elements.append(element)\n\n    # Concatenate the two separate arrays into a single array and sort it in descending order\n    sorted_array = sorted(negative_elements + positive_elements, reverse=True)\n\n    # Slice the array to get the first n elements\n    result = sorted_array[:n]\n\n    # Return the resulting array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize three variables to store the negative, positive, and zero elements\n    neg_count = 0\n    pos_count = 0\n    zero_count = 0\n\n    # Loop through the array and count the number of negative, positive, and zero elements\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        elif arr[i] > 0:\n            pos_count += 1\n        else:\n            zero_count += 1\n\n    # Reverse the array so that positive elements come first\n    arr = arr[::-1]\n\n    # Loop through the array and re-arrange the negative elements\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[neg_count] = arr[neg_count], arr[i]\n            neg_count -= 1\n\n    # Loop through the array and re-arrange the positive elements\n    for i in range(n):\n        if arr[i] > 0:\n            arr[i], arr[pos_count] = arr[pos_count], arr[i]\n            pos_count -= 1\n\n    # Loop through the array and re-arrange the zero elements\n    for i in range(n):\n        if arr[i] == 0:\n            arr[i], arr[zero_count] = arr[zero_count], arr[i]\n            zero_count -= 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = 0\n    neg = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg += 1\n            pos += 1\n            arr[i], arr[neg] = arr[neg], arr[i]\n        else:\n            pos += 1\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg += 1\n            pos += 1\n            arr[i], arr[neg] = arr[neg], arr[i]\n        else:\n            pos += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two lists to hold the negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Iterate through the array and append elements to the appropriate list\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    \n    # Iterate through the original array and append elements to the beginning of the re-arranged array\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg_list.insert(0, arr[i])\n        else:\n            pos_list.insert(0, arr[i])\n    \n    # Combine the negative and positive lists into a single list and return it\n    return neg_list + pos_list"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character as input, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \", char)\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(\" \", char)\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    return str1 + char"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap and add the first n items from the list\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, list1.pop())\n\n    # Add the remaining items from the list to the heap\n    for item in list1:\n        if item > min_heap[0]:\n            heapq.heappushpop(min_heap, item)\n\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    heapq.heapify(max_heap)\n    \n    for num in list1:\n        heapq.heappush(max_heap, num)\n        \n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    \n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap of size n and insert the first n elements of the list into it\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    \n    # Pop and return the smallest n elements from the heap\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use heapq library to create a max heap of size n\n    max_heap = []\n    for item in list1:\n        heapq.heappush(max_heap, item)\n        # Remove the smallest item from the heap when the heap size exceeds n\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Return the largest n items from the heap\n    return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in lst:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # sort the list in descending order using heapq\n    heapq.heapify(list1)\n    # create an empty list to store the n largest items\n    largest = []\n    # add the first n items to the list and return it\n    for i in range(n):\n        largest.append(heapq.heappop(list1))\n    return largest"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, -heapq.heappushpop(min_heap))\n        \n    # Fill the min heap with the remaining elements of the list\n    for item in list1:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, -item)\n        else:\n            if item > -heapq.heappop(min_heap):\n                heapq.heappush(min_heap, -item)\n    \n    # Convert the min heap back to a list of items\n    return [(-x, i) for x, i in min_heap]"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes two arguments, radius of the cylinder and its height, and returns the lateral surface area of the cylinder.\n    \n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    '''\n    # Formula to find the lateral surface area of a cylinder\n    lateral_surface_area = (2 * r * h)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * pi * r * h + 2 * pi * r**2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    #Calculate lateral surface area\n    lateral_surface_area = 2*pi*r*h\n\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2*3.14159*(r**2 + h**2)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * r * h\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*(r**2 + h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder\n    surface_area = 2*pi*r*r*h\n    \n    # Return the surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2 * r * h) - (2 * r * r * h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula to calculate the lateral surface area of a cylinder\n    area = (3 * r ** 2) + (2 * r * h) + (h ** 2)\n    # Return the lateral surface area\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # cube the length and return the result"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # return cube of side length l"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Iterate over each bit position in the binary representation of n\n    for i in range(len(bin(n)[2:])):\n        # Check if the current bit position is even\n        if i % 2 == 0:\n            # If the bit is even, set it to 1\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit in the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set its position in the result to 1\n        if bit == '0':\n            result = result << 1\n        else:\n            result = result | (1 << (int(bit) - 1))\n            \n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to keep track of whether we have set any even bits\n    have_set = False\n    # Initialize a variable to store the new number\n    new_number = 0\n    \n    # Loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it in the new number and set the have_set flag\n        if int(bit) == 0:\n            new_number |= 1\n            have_set = True\n            \n    # If we haven't set any even bits, return the original number\n    if not have_set:\n        return n\n    \n    # Otherwise, return the new number\n    return new_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of the number\n    even_bits = 0\n    \n    # Loop through each bit in the number\n    for bit in str(n):\n        # If the bit is an even number, set it to 1\n        if int(bit) % 2 == 0:\n            even_bits += 1\n        # If the bit is not an even number, leave it as 0\n        else:\n            even_bits += 0\n    \n    # Set all even bits to 1\n    n_even = 0\n    for i in range(len(str(n))):\n        if even_bits == 0:\n            break\n        if str(n)[i] == '0' and even_bits > 0:\n            str(n)[i] = '1'\n            even_bits -= 1\n        else:\n            str(n)[i] = '0'\n    \n    # Return the modified number as an integer\n    return int(''.join(str(n)))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n_binary = bin(n)[2:]  # convert decimal to binary and remove \"0b\" prefix\n    even_bits = [int(b) for b in n_binary if int(b) % 2 == 0]  # find even bits\n    for bit in even_bits:\n        n_binary = n_binary[:bit] + '1' + n_binary[bit+1:]  # set even bit to 1\n    return int(n_binary, 2)  # convert binary back to decimal"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while n > 0:\n        if n & 1 == 0:\n            even_bits |= (1 << (n & 0x1F))\n        n = n >> 1\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate through all bits in the number\n    for i in range(32):\n        # If the i-th bit is even, set its value to 1 and add it to the result\n        if n & (1 << i):\n            result |= (1 << i)\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(1, n+1, 2):\n        n |= i\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the modified numbers\n    modified_numbers = []\n\n    # loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # check if the bit is even\n        if int(bit) % 2 == 0:\n            # set the even bit to 1\n            modified_numbers.append('1')\n        else:\n            # set the even bit to 0\n            modified_numbers.append('0')\n\n    # convert the list of modified bits back to an integer\n    modified_number = int(''.join(modified_numbers), 2)\n\n    # return the modified number\n    return modified_number"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to keep track of the number of even bits set.\n    count = 0\n    \n    # Iterate through each bit of the number, starting from the least significant bit.\n    for i in range(len(bin(n)[2:])):\n        # If the current bit is even, set the corresponding bit in the result to 1.\n        if (n >> i) % 2 == 0:\n            n |= 1 << i\n            count += 1\n    \n    # Return the number of even bits set.\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each unique tuple in the list\n    counter = Counter(test_list)\n    # Create a dictionary to store the results and return it\n    results = {}\n    for item in counter.items():\n        results[item[0]] = item[1]\n    return results"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # convert the set to a dictionary with the tuple as the key and the count as the value\n    count_dict = dict(Counter(unique_tuples))\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the counts of each tuple\n    count_dict = {}\n\n    # Loop through each tuple in the list and update the count in the dictionary\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Use Counter function from the collections module to count the occurrences of each unique tuple in the list\n    counts = Counter(unique_tuples)\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each unique tuple in the list\n    counter = Counter(test_list)\n    # Create a dictionary to store the count of each unique tuple\n    result_dict = {}\n    # Loop through the Counter object and add each tuple to the dictionary with its count\n    for tuple_count in counter.items():\n        result_dict[tuple_count] = tuple_count[1]\n    # Return the dictionary of counts\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary to store the count of each unique tuple\n    counts = {}\n    \n    # iterate through each tuple in the list\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in counts:\n            # if it is, increment the count by 1\n            counts[tup] += 1\n        else:\n            # if not, add the tuple to the dictionary with a count of 1\n            counts[tup] = 1\n            \n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    # Initialize variables\n    count = 0\n    n = len(str)\n    # Loop through each character in the string\n    for i in range(n):\n        # Loop through each character in the string starting from i+1\n        for j in range(i+1, n+1):\n            # Check if the substring is non-empty\n            if j - i > 0:\n                # If it is, increment the count\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j].strip()!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize a count variable to keep track of the number of substrings\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        \n        # Check if the current character is a letter\n        if str[i].isalpha():\n            \n            # Check if the next character is a letter\n            if i+1 < len(str) and str[i+1].isalpha():\n                \n                # Check if the next two characters are a letter\n                if i+2 < len(str) and str[i+2].isalpha():\n                    \n                    # Check if the next three characters are a letter\n                    if i+3 < len(str) and str[i+3].isalpha():\n                        \n                        # If the current character, next character, next two characters, and next three characters are all letters, increment the count variable\n                        count += 1\n    \n    # Return the count variable\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    \n    # Iterate over all possible substrings of the string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = str[i:j]\n            if len(substring) > 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            substring = str[i:j+1]\n            if substring!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += binomial(m, i) * (m+1) * 2**(n-i)\n    return count\n\ndef binomial(n, k):\n    '''\n    Write a function that takes in two positive integers n and k and returns the binomial coefficient.\n    '''\n    if k > n // 2:\n        k = n - k\n    f = 1\n    for i in range(1, k+1):\n        f *= n - i + 1\n        f //= i\n    return f"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n\n    for i in range(1, m + 1):\n        for j in range(i + 2, min(i + n + 1, m + 1) + 1):\n            if i * j <= m * n:\n                count += 1\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid(sequence):\n        for i in range(len(sequence) - 1):\n            if sequence[i] >= sequence[i + 1] * 2 and sequence[i] < m:\n                return True\n        return False\n\n    def generate_sequences(m, n, current_sequence, result):\n        if len(current_sequence) == n:\n            if is_valid(current_sequence):\n                result.append(current_sequence)\n            return\n\n        for i in range(m, m + 2 * n - 1):\n            if i % 2 == 0:\n                generate_sequences(m, n, current_sequence + [i], result)\n\n    result = []\n    generate_sequences(1, n, [], result)\n    return len(result)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n):\n    total = 0\n    for i in range(1, m+1):\n        if i >= 2 * (n - 1) and i <= m:\n            total += 1\n    return total\n\nm = 10\nn = 5\nprint(get_total_number_of_sequences(m, n)) # Output: 12"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_number = 0\n    for i in range(m+1):\n        for j in range(i, m+1):\n            if j % 2 == 1 and j >= 2*i and j <= m:\n                total_number += 1\n    return total_number"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize count and sequence lengths\n    count = 0\n    prev_seq_length = 1\n    \n    # Loop through sequence lengths from n to 1\n    for i in range(n, 1, -1):\n        \n        # Check if current sequence length is valid\n        if m - i >= 2 * i:\n            \n            # Get the current sequence length and add it to the count\n            curr_seq_length = i + 1\n            count += curr_seq_length\n            \n            # If the current sequence length is longer than the previous one, update the previous sequence length\n            if curr_seq_length > prev_seq_length:\n                prev_seq_length = curr_seq_length\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize the count of possible sequences to 0\n    count = 0\n    # Initialize the previous element to 0\n    prev = 0\n\n    # Iterate through the sequence of integers from 2 to m\n    for i in range(2, m+1):\n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to n\n        if i >= 2*prev and i <= n:\n            # Increment the count of possible sequences by 1\n            count += 1\n        # Update the previous element for the next iteration\n        prev = i\n\n    # Return the final count of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m, n+1):\n        if i % 2 == 0:\n            count += get_total_number_of_sequences(i,n)\n        else:\n            count += get_total_number_of_sequences(i//2,n)\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a counter variable to keep track of the total number of sequences\n    total_sequences = 0\n    \n    # Initialize a list to store the numbers in the sequence\n    sequence = [0]\n    \n    # Loop through each element of the sequence\n    for i in range(n):\n        # Check if the current element is within the range of the problem\n        if sequence[i] <= 2 * m and sequence[i] >= m:\n            # If it is, add the number of sequences that can be formed with this element up to the current length of the sequence\n            total_sequences += len(sequence[:i+1])\n        # If the current element is outside the range of the problem, skip it and continue to the next iteration\n        else:\n            continue\n        \n        # Add the current element to the sequence\n        sequence.append(sequence[i] + 1)\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Iterate through all possible sequences of length n\n    for i in range(n+1): \n        # Check if the sequence satisfies the given condition\n        if m % 2 == 0 and i > 0 and i % 2 == 0:\n            count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    for element in list2:\n        list1.append(element)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    # Reverse the first list\n    list1.reverse()\n\n    # Replace the last element of the first list with the elements of the second list\n    list1[len(list1)-1] = list2\n\n    # Reverse the second list again\n    list2.reverse()\n\n    # Return the two lists\n    return list1, list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        return \"The two lists must have the same length.\"\n    else:\n        list1[-1] = list2\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n    # Get the last element of the first list\n    last_elem = list1[length-1]\n    # Use the extend() method to concatenate the two lists\n    list1.extend(list2)\n    # Remove the last element of the first list\n    list1.pop()\n    # Return the modified list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the second list\n    length = len(list2)\n    \n    # Check if the second list is shorter than the first list\n    if length > len(list1):\n        raise ValueError(\"Second list is shorter than the first list\")\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-length:] = list2[-length:]\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        a = int(input(\"Enter the number: \"))\n        if a <= 0:\n            print(\"Invalid input. Please enter a positive integer.\")\n            continue\n        else:\n            break\n    while True:\n        b = int(input(\"Enter the exponent: \"))\n        if b <= 0:\n            print(\"Invalid input. Please enter a positive integer.\")\n            continue\n        else:\n            break\n    while True:\n        c = int(input(\"Enter the base: \"))\n        if c <= 0:\n            print(\"Invalid input. Please enter a positive integer.\")\n            continue\n        else:\n            break\n    base = c ** b\n    a = a - 1\n    a = a ** b\n    a = a + 1\n    while True:\n        if a < 0:\n            a = 0\n        elif a == 0:\n            break\n        a = a ** b\n        if a <= 0:\n            a = 0\n        elif a == 0:\n            break\n    next_base = a ** b\n    next_N = (next_base - 1) // 2\n    next_N = next_N + 1\n    return next_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_perfect_square(n):\n    return int(math.sqrt(n)) ** 2 == n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # check if the given number is perfect\n    if isPerfectSquare(N):\n        # check if the given number is a square number\n        if isSquare(N):\n            # find the largest perfect square less than or equal to the given number\n            for i in range(N, int(math.sqrt(N))-1, -1):\n                if isPerfectSquare(i):\n                    return i\n        # if the given number is not a square number, find the largest perfect square less than or equal to the given number\n        else:\n            for i in range(N, int(math.sqrt(N*N))+1):\n                if isPerfectSquare(i):\n                    return i\n    # if the given number is not perfect, return the next perfect square greater than the given number\n    else:\n        for i in range(N+1, int(math.sqrt(N))+1):\n            if isPerfectSquare(i):\n                return i\n\ndef isPerfectSquare(num):\n    '''\n    A function to check if a given number is a perfect square.\n    '''\n    return int(math.sqrt(num))**2 == num\n\ndef isSquare(num):\n    '''\n    A function to check if a given number is a square number.\n    '''\n    return int(math.sqrt(num))**2 == num*num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes in a number N and returns the next perfect square greater than N.\n    \"\"\"\n    # check if the given number is a perfect square\n    if math.sqrt(N) == int(math.sqrt(N)):\n        # find the next perfect square greater than N\n        i = int(math.sqrt(N))\n        while True:\n            i += 1\n            if i*i > N:\n                return i*i\n            if i*i == N:\n                return i*i - 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(num):\n        '''\n        Helper function to check if a number is a perfect square.\n        '''\n        return int(math.sqrt(num)) ** 2 == num\n\n    def next_square_greater_than(num):\n        '''\n        Helper function to find the next perfect square greater than a given number.\n        '''\n        i = num\n        while not is_perfect_square(i):\n            i += 1\n        return i\n\n    # Call the helper function to find the next perfect square greater than N\n    next_square = next_square_greater_than(N)\n\n    # Print the next perfect square\n    print(next_square)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Using a while loop to find the next perfect square greater than N\n    i = N + 1\n    while True:\n        i = math.ceil(math.sqrt(i))\n        if i**2 > N:\n            break\n    return i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Helper function to check if a number is a perfect square\n    def is_perfect_square(num):\n        root = math.sqrt(num)\n        return root == int(root)\n\n    # Helper function to get the square root of a number\n    def get_square_root(num):\n        root = math.sqrt(num)\n        return int(root)\n\n    # Helper function to find the square of a number\n    def square(num):\n        return num * num\n\n    # Helper function to find the difference between two numbers\n    def difference(num1, num2):\n        return square(num1) - square(num2)\n\n    # Helper function to find the next perfect square greater than a given number\n    def next_square(N):\n        i = 1\n        square = N + 1\n        while not is_perfect_square(square):\n            square += i\n            i += 1\n        return square\n\n    # Find the next perfect square greater than N\n    next_square = next_square(N)\n\n    # Return the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    x = int(sqrt_N) + 1\n\n    while True:\n        x_plus_one = x**2\n\n        if x_plus_one > N:\n            return x_plus_one\n\n        x += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        if math.isqrt(N) * math.isqrt(N) < N:\n            N += 1\n            return N\n        else:\n            N -= 1\n            return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        if N % 4 == 0:\n            N += 1\n        elif N % 2 == 0:\n            N -= 1\n        else:\n            N += 2\n        if N**2 > N:\n            return N\n        else:\n            N += 1\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # Check if the array is bitonic\n    for i in range(n - 1):\n        if arr[i] >= arr[i + 1]:\n            return arr[i] + arr[i + 1]\n\n    # If the array is not bitonic, find the maximum subarray sum\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            subarray_sum = sum(arr[i:j + 1])\n            if subarray_sum > max_sum:\n                max_sum = subarray_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Find the sum of the first subarray (increasing)\n    if arr[1] > arr[0]:\n        first_sum = arr[1]\n    else:\n        first_sum = arr[0]\n    \n    # Find the sum of the last subarray (decreasing)\n    if arr[n-2] > arr[n-1]:\n        last_sum = arr[n-2]\n    else:\n        last_sum = arr[n-1]\n    \n    # Initialize the maximum sum\n    max_sum = first_sum + last_sum\n    \n    # Iterate through the remaining subarrays\n    for i in range(2, n-1):\n        # Check if the current subarray is increasing\n        if arr[i] > arr[i-1]:\n            # If yes, update the sum\n            current_sum = current_sum + arr[i]\n        else:\n            # If not, update the sum\n            current_sum = arr[i]\n        \n        # If the current subarray is bitonic, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Convert the array to a set to remove duplicates\n    arr = set(arr)\n\n    # Initialize variables for the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the array and find the maximum sum of a bitonic subsequence\n    for i in range(len(arr)):\n        current_sum += arr.pop()\n        if current_sum > max_sum:\n            max_sum = current_sum\n        current_sum -= arr.pop()\n\n    # Convert the array back to a list and return the maximum sum\n    return list(arr)[0]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # initialize variables\n    current_sum = max_sum_left = max_sum_right = float('-inf')\n\n    # iterate through the array\n    for i in range(n):\n        # check if the current element is increasing or decreasing\n        if arr[i] > arr[i+1]:\n            current_sum += arr[i]\n            if current_sum > max_sum_left:\n                max_sum_left = current_sum\n        else:\n            current_sum -= arr[i+1]\n            if current_sum > max_sum_right:\n                max_sum_right = current_sum\n\n    return max(max_sum_left, max_sum_right)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return arr[0]\n\n    # We assume that the array is bitonic and that the first element is the maximum sum.\n    max_sum_ending_here = arr[0]\n    max_sum_so_far = arr[0]\n\n    # For each element in the array, we calculate the maximum sum ending at that element.\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_sum_ending_here = arr[i] + max_sum_ending_here\n        else:\n            max_sum_ending_here = arr[i]\n        if max_sum_ending_here > max_sum_so_far:\n            max_sum_so_far = max_sum_ending_here\n\n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    # Initialize variables to keep track of the current maximum subsequence sum and the last index of the maximum subsequence start\n    max_sum_so_far = arr[0]\n    last_index_so_far = 0\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the current element is greater than the previous element, update the maximum subsequence sum and the last index of the start\n        if arr[i] > arr[i-1]:\n            max_sum_so_far = max(max_sum_so_far + arr[i], arr[i])\n            last_index_so_far = i\n            \n        # If the current element is less than the previous element, update the maximum subsequence sum and the last index of the start\n        else:\n            max_sum_so_far = max(max_sum_so_far, arr[i])\n            last_index_so_far = i\n            \n    # Return the maximum subsequence sum\n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    # Find the longest increasing subsequence\n    max_len = 1\n    i = 1\n    while i < len(arr):\n        if arr[i] > arr[i - 1]:\n            i += 1\n        else:\n            max_len += 1\n            i = i + 1\n    \n    # Find the longest decreasing subsequence\n    max_len2 = 1\n    j = len(arr) - 2\n    while j >= 0:\n        if arr[j] < arr[j + 1]:\n            j -= 1\n        else:\n            max_len2 += 1\n            j = j - 1\n    \n    # Find the maximum sum of both subsequences\n    max_sum = max(max_len, max_len2) * arr[0]\n    max_sum2 = max(max_len, max_len2) * arr[len(arr) - 1]\n    \n    return max(max_sum, max_sum2)\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return 0\n\n    max_sum = float('-inf')\n    left_max_sum = float('-inf')\n\n    for i in range(len(arr)):\n        left_max_sum = max(left_max_sum + arr[i], arr[i])\n        max_sum = max(max_sum, left_max_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Find the maximum sum of a bitonic subsequence in the given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum sum of a bitonic subsequence in the array.\n    \"\"\"\n\n    # Initialize variables to store the current maximum sum and the previous maximum sum\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is decreasing, update the maximum ending here\n        if arr[i] > arr[i - 1]:\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n        # If the current element is increasing, update the maximum so far\n        elif arr[i] < arr[i - 1]:\n            max_so_far = max(max_so_far, max_ending_here)\n            max_ending_here = 0\n\n    # If the array ends with an increasing subsequence, include it in the maximum sum\n    if max_ending_here > 0:\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables\n    n = len(arr)\n    max_sum = float('-inf')\n    bitonic_subsequence = []\n\n    # Traverse through the array and find the maximum sum of a bitonic subsequence\n    for i in range(n):\n        if i == 0 or arr[i-1] <= arr[i]:\n            # This is a decreasing subsequence\n            bitonic_subsequence.append(arr[i])\n            if i == n-1:\n                # This is the last element of the array\n                current_sum = sum(bitonic_subsequence)\n                if current_sum > max_sum:\n                    max_sum = current_sum\n        else:\n            # This is an increasing subsequence\n            bitonic_subsequence.append(arr[i])\n            if i == n-1:\n                # This is the last element of the array\n                current_sum = sum(bitonic_subsequence)\n                if current_sum > max_sum:\n                    max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    i = 0\n    x = number\n    dx = 1\n    y = 0\n    y_prev = 0\n    y_diff = 0\n    while abs(y - y_prev) > 1e-10:\n        # compute next iteration\n        y = x - (x**2 + number) / (2 * x)\n        dx = y - y_prev\n        # check for convergence\n        y_diff = abs(y - y_prev)\n        i += 1\n        if i > 1000:\n            print(\"Convergence failed.\")\n            break\n        y_prev = y\n    print(\"i =\", i)\n    print(\"x =\", x)\n    print(\"y =\", y)\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n    \"\"\"\n    x = 1\n    while abs(x**2 - number) > 0.0001:\n        x = (x + number/x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initial guess\n    guess = number / 2\n\n    while True:\n        # calculate next guess\n        next_guess = guess - (guess**2 - number) / (2*guess)\n\n        # check if we've reached convergence\n        if abs(guess - next_guess) < 1e-6:\n            break\n        else:\n            guess = next_guess\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.000001\n    x0 = 1.0\n    x1 = number\n    while abs(x1 - x0) > epsilon:\n        x0 = x1\n        x1 = (x1 + number/x1) / 2.0\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2  # initial guess\n    prev_guess = 0\n    while abs(guess**2 - number) > 0.0001:  # loop while difference between squares is greater than 0.0001\n        prev_guess = guess  # save previous guess\n        guess = (guess + number / guess) / 2  # update guess\n    return guess  # return final guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    x = number / 2\n    y = x + (number / x) / 2\n    while True:\n        if y * y == number:\n            return x\n        if y * y < number:\n            x = y\n            y = (x + (number / x)) / 2\n        else:\n            x = (y + (number / y)) / 2\n            y = x + (number / x) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Use the babylonian method to compute the square root of a number\n    x = number / 2\n    y = (x + number / x) / 2\n    while abs(x - y) > 0.0001:\n        x = y\n        y = (x + number / x) / 2\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = 1.0\n    y = x * (1.0 - (number/x)**2)\n    i = 0\n    \n    # iterate until y is within the desired precision\n    while abs(y - x) > 10e-6:\n        x = y\n        y = x * (1.0 - (number/x)**2)\n        i += 1\n    \n    # return the value of y\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    x = 0\n    while abs(x*x - number) >= 0.0001:\n        x = guess\n        guess = (x + number / x) / 2\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        guess_square = guess * guess\n        if guess_square == number:\n            return guess\n        elif guess_square > number:\n            guess -= (guess_square - number) / (2 * guess)\n        else:\n            guess += (number - guess_square) / (2 * guess)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(s):\n    # Find the length of the longest palindromic subsequence in the string\n    max_length = 1\n    start = 0\n\n    # Iterate over the string and check if the substring is palindromic\n    for i in range(1, len(s)):\n        # Check if the substring at index i is palindromic\n        if s[i] == s[i - 1]:\n            # If it is, update max_length and start indices\n            max_length = max(max_length, i + 1)\n            start = i - 1\n        else:\n            # If it's not, reset the max_length and start indices\n            max_length = 1\n            start = i\n\n    # Return the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize variables\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Base cases\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Fill the DP table using Longest Common Subsequence technique\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    \n    # Return the length of the longest palindromic subsequence\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Initialize two variables to store the lengths of longest palindromic subsequences ending at odd and even positions respectively\n    palindrome_odd = 0\n    palindrome_even = 0\n\n    # Iterate over the string using two pointers one for odd and one for even positions\n    for i in range(n):\n        # Check if the character at odd position is same as the character at even position\n        if str[i] == str[i//2]:\n            # If the characters are same, check if the current character is part of a palindrome\n            if i % 2 == 1:\n                # If the character is odd, update the length of palindrome ending at odd position\n                palindrome_odd += 2\n            else:\n                # If the character is even, update the length of palindrome ending at even position\n                palindrome_even += 2\n\n        # Compare the length of palindrome ending at odd position with the length of palindrome ending at even position\n        if palindrome_odd > palindrome_even:\n            palindrome_even = palindrome_odd\n        else:\n            palindrome_odd = palindrome_even\n\n        # If the length of palindrome ending at odd position becomes greater than the length of palindrome ending at even position,\n        # it means the current character is not part of a palindrome and we need to move the pointer to the right\n        # to check the next character\n        if palindrome_odd > palindrome_even:\n            palindrome_even = 0\n        else:\n            palindrome_odd = 0\n\n    return palindrome_odd + palindrome_even"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    # create a 2D array to store lengths of subsequences for each index in the string\n    dp = [[0 for j in range(len(s))] for i in range(len(s))]\n\n    # base case: if the string is empty or contains only one character, then it is a palindrome\n    if len(s) <= 1:\n        return len(s)\n\n    # compute lengths of subsequences for all possible substrings\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if i == j:\n                dp[i][j] = 1\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # return the maximum length of a palindromic subsequence in the string\n    return dp[0][len(s)-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    # Step 1: Create a table to store the length of the longest palindromic subsequence ending at each position in the string\n    table = [0] * len(s)\n    max_len = 1\n    # Step 2: Iterate through the string and calculate the length of the longest palindromic subsequence ending at each position\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            table[i] = table[i-1] + 2\n        else:\n            table[i] = max(table[i-1], table[i-2])\n        # Update the maximum length if necessary\n        if table[i] > max_len:\n            max_len = table[i]\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string `s`.\n\n    Parameters:\n    s: string\n\n    Returns:\n    int, the length of the longest palindromic subsequence in the string `s`.\n    \"\"\"\n\n    # Initialize a 2D matrix to store the length of the longest palindromic subsequence for all substrings\n    # of length i in the string.\n    # The i-th row and j-th column in the matrix represent the length of the longest palindromic subsequence\n    # ending at the i-th and j-th characters in the original string, respectively.\n    dp = [[0] * (len(s) + 1) for _ in range(len(s) + 1)]\n\n    # Initialize the first row and column of the matrix as 0.\n    for i in range(1, len(s) + 1):\n        dp[i][0] = 0\n        dp[0][i] = 0\n\n    # Fill the matrix in a bottom-up manner.\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(s) + 1):\n            if s[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # The length of the longest palindromic subsequence in the given string `s` is stored in\n    # dp[len(s)][len(s)], which is the base case for the recursion.\n    return dp[len(s)][len(s)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a 2D table to store the length of LPS for all substrings of length n.\n    # Initialize all values to 1 since a substring of length 1 is a palindrome.\n    table = [[1 for j in range(n+1)] for i in range(n+1)]\n\n    # Fill the table in bottom up manner.\n    for i in range(2, n+1):\n        for j in range(1, i+1):\n            if s[j-1] == s[i-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    return table[n][n]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a table to store length of LPS \n    # for substrings of given string \n    table = [[0] * n for i in range(n)] \n  \n    # Fill the table in bottom up fashion. \n    # Note: All entries are initialized as 0. \n    for i in range(1, n): \n        for j in range(i): \n            if (str[i] == str[j]): \n                table[i][j] = table[j][i-1] + 2\n            else: \n                table[i][j] = max(table[i][j-1], table[j][i]) \n  \n    # Print the lengths of all substrings \n    print(\"Length of LPS for each substring:\") \n    for i in range(n): \n        for j in range(n): \n            print(table[i][j], end=\" \") \n    print() \n  \n    # Return the length of LPS \n    return table[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Initialize a 2D array to store the length of LPS for all prefixes of the string\n    lps_matrix = [[0] * n for _ in range(n)]\n    # Initialize the LPS length to 0 for all prefixes\n    for i in range(n):\n        lps_matrix[i][i] = 1\n    # Fill the LPS matrix in bottom-up manner\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                lps_matrix[i][j] = lps_matrix[i+1][j-1] + 2\n            else:\n                lps_matrix[i][j] = max(lps_matrix[i+1][j], lps_matrix[i][j-1])\n    # Return the length of the longest palindromic subsequence in the string\n    return lps_matrix[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    n = len(str)\n    dp = [1] * n  # Initialize the dp list with length 1\n\n    # Find the length of the longest palindromic subsequence ending at i \n    for i in range(1, n): \n        if str[i] == str[i-1]: \n            dp[i] = dp[i-1] + 1  # If characters are same, include one more character in the subsequence \n        else: \n            # If characters are different, reset the length of the subsequence back to 1 \n            dp[i] = 1\n\n        # Find the maximum length of the palindromic subsequence ending at j \n        for j in range(i-dp[i]+1): \n            if str[j] == str[j+i-dp[i]]: \n                dp[i] = max(dp[i], dp[j]+2)  # If characters are same, include one more character in the subsequence \n\n    return dp[n-1]  # Return the length of the longest palindromic subsequence "
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # initialize variables\n    harmonic_sum_n_minus_1 = 0\n    harmonic_sum_n = 0\n    \n    # calculate harmonic sum of n-1\n    for i in range(1, n+1):\n        harmonic_sum_n_minus_1 += 1 / i\n    \n    # calculate harmonic sum of n\n    for i in range(1, n+1):\n        harmonic_sum_n += i / (i+1)\n    \n    # return harmonic sum of n\n    return harmonic_sum_n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1.0/n\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"Harmonic sum of\", n-1, \"is\", harmonic_sum(n))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/2 + 1/3 + 1/4 +... + 1/(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (2*n - 1) / (n-1) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + 1/2*(1/n**2 + 1/n**3 +... + 1/n**(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    harmonic_sum = 0.0\n    \n    for i in range(1, n+1):\n        harmonic_sum += 1.0 / i\n        \n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + (1/(n-1))**2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + 1/n) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n + 1/n**2 +... + 1/n**n)/(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create two dictionaries to store the unique elements of array_nums1 and array_nums2\n    dict1 = {}\n    dict2 = {}\n    for num in array_nums1:\n        if num not in dict1:\n            dict1[num] = True\n    for num in array_nums2:\n        if num not in dict2:\n            dict2[num] = True\n    # Find the intersection of the two dictionaries and return them as a list\n    intersection = [num for num in dict1 if num in dict2]\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create an empty dictionary to store the count of each element in the first array\n    count_dict1 = {}\n    # Create an empty list to store the intersection elements\n    intersection_list = []\n    # Loop through the first array and increment the count of each element in the count_dict1\n    for num in array_nums1:\n        count_dict1[num] = count_dict1.get(num, 0) + 1\n    \n    # Loop through the second array and add any elements that have a count greater than 0 to the intersection_list\n    for num in array_nums2:\n        if count_dict1.get(num, 0) > 0:\n            count_dict1[num] -= 1\n            intersection_list.append(num)\n    \n    # Return the intersection_list\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create two dictionaries to store the elements of the arrays\n    dict_nums1 = {}\n    dict_nums2 = {}\n    \n    # Iterate over the arrays\n    for num in array_nums1:\n        # If the number is not already in the dictionary, add it\n        if num not in dict_nums1:\n            dict_nums1[num] = True\n            \n    for num in array_nums2:\n        # If the number is not already in the dictionary, add it\n        if num not in dict_nums2:\n            dict_nums2[num] = True\n            \n    # Find the intersection by iterating over the keys of both dictionaries\n    intersection = []\n    for num in dict_nums1:\n        if num in dict_nums2:\n            intersection.append(num)\n            \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Parameters:\n    array_nums1 (list): List of integers.\n    array_nums2 (list): List of integers.\n\n    Returns:\n    list: The intersection of the two arrays.\n    \"\"\"\n    # create a set from array_nums1\n    set_nums1 = set(array_nums1)\n\n    # iterate over array_nums2 and check if each element is in set_nums1\n    intersection = []\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.append(num)\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty set to store the intersection of arrays\n    intersection = set()\n\n    # Loop through each element in the first array\n    for num1 in array_nums1:\n        # Loop through each element in the second array\n        for num2 in array_nums2:\n            # Check if the two elements are equal and add them to the intersection set\n            if num1 == num2:\n                intersection.add(num1)\n\n    # Return the intersection set as a list\n    return list(intersection)\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the two arrays.\n    \"\"\"\n\n    # Creating a set for the first array\n    set_nums1 = set(array_nums1)\n\n    # Creating a set for the second array\n    set_nums2 = set(array_nums2)\n\n    # Finding the intersection between the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Converting the set back to a list\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num1 in array_nums1:\n        if num1 in array_nums2 and num1 not in intersection:\n            intersection.append(num1)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty dictionary to store the indices of the elements in array_nums1\n    index_dict = {}\n    \n    # Iterate through array_nums1 and add each element to the dictionary with the index\n    for i, num in enumerate(array_nums1):\n        index_dict[num] = i\n    \n    # Iterate through array_nums2 and check if each element is in the dictionary\n    intersection = []\n    for num in array_nums2:\n        if num in index_dict:\n            intersection.append(array_nums1[index_dict[num]])\n    \n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    count = 0 \n    for item in tup: \n        if item == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element x and counts the number of times x appears in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i, item in enumerate(list):\n        if i == 0:\n            result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    # initialize an empty list to store the modified list\n    modified_lst = []\n    # iterate over each element in the original list\n    for i in range(len(lst)):\n        # add the element before the current element\n        modified_lst.append(element)\n        # add the current element to the modified list\n        modified_lst.append(lst[i])\n    # return the modified list\n    return modified_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.insert(i, element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.insert(0, element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # split the input string into real and imaginary parts\n        real, imaginary = number.split('+')\n        \n        # convert the real and imaginary parts to floats\n        real = float(real)\n        imaginary = float(imaginary)\n        \n        # calculate the magnitude and angle of the complex number\n        magnitude = cmath.sqrt(real**2 + imaginary**2)\n        angle = cmath.phase(complex(real, imaginary))\n        \n        # print the converted polar coordinate\n        print(magnitude.real, magnitude.imaginary, angle)\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(number) # Calculate the absolute value of the complex number\n        theta = cmath.phase(number) # Calculate the phase angle of the complex number\n        \n        # Add the polar coordinates to the list\n        polar_coordinates.append((r, theta))\n        \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        try:\n            complex_num = complex(num)\n            r = abs(complex_num)\n            theta = cmath.phase(complex_num)\n            print(\"{:.2f} + {:.2fi} = {:.2f} rad\".format(r, theta, theta))\n        except ValueError:\n            print(\"Invalid input\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        phase = cmath.phase(number)\n        print(f\"Polar Coordinates: ({magnitude:.2f}, {phase:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Get real and imaginary parts of the number\n        real = number.real\n        imag = number.imag\n        \n        # Calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real ** 2 + imag ** 2)\n        \n        # Calculate the angle of the complex number (in radians)\n        angle = cmath.phase(number)\n        \n        # Convert angle from radians to degrees\n        angle_degrees = angle * 180 / cmath.pi\n        \n        # Print the result in a format that is easy to read\n        print(\"Magnitude of {} + {}j is {:.2f} and angle in degrees is {:.2f}\".format(real, imag, magnitude, angle_degrees))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = abs(num)\n        phi = cmath.phase(num)\n        polar_coords.append((r, phi))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        print(f\"{num} is in the polar coordinate system with magnitude {magnitude:.2f} and angle {angle:.2f}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        print(f\"{real} + {imag}j = {magnitude} * exp({angle} * 1j)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Complex number to polar coordinates conversion\n        polar_number = cmath.polar(number)\n        print(polar_number)"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Counts the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    '''\n    This function returns the count of integer elements in a given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Using itertools.combinations_with_replacement function to generate combinations of length n with repetition\n    comb = list(combinations_with_replacement(l, n))\n\n    # Converting the list of tuples to a list of lists of size n\n    result = [list(combination) for combination in comb]\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all possible combinations of length n\n    combinations = combinations_with_replacement(l, n)\n\n    # Initialize an empty list to store the combinations with colors\n    combinations_colors = []\n\n    # Iterate through the combinations and append the color tuple to the list\n    for combo in combinations:\n        color_tuple = (combo[0], combo[1])\n        combinations_colors.append(color_tuple)\n\n    return combinations_colors"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            for k in range(j+1, len(l)+1):\n                if k == len(l):\n                    color_combinations.append((l[i], l[j], l[k]))\n                elif l[i] == l[j] or l[i] == l[k] or l[j] == l[k]:\n                    color_combinations.append((l[i], l[j], l[k]))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Define a list to hold the combinations\n    comb_list = []\n    # Define the size of the combination we want to find\n    comb_size = n\n    # Define the length of the input list\n    list_length = len(l)\n    # Use combinations_with_replacement to generate all combinations of length n\n    for i in range(list_length-comb_size+1):\n        comb = tuple(l[i:i+comb_size])\n        comb_list.append(comb)\n    # Return the list of combinations\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l) - n + 1):\n        combination = tuple(l[i:i+n])\n        result.append(combination)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[i:i+n])\n        combinations.append(combination)\n    return combinations"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    num = 2\n    while num < n:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n\nprint(count_Primes_nums(20)) # Output: 12"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = []\n    for i in range(len(test_tup1)):\n        max_tup.append(max(test_tup1[i], test_tup2[i]))\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the first tuple has more elements than the second tuple\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_num1 = max(test_tup1)\n    max_num2 = max(test_tup2)\n    if max_num1 > max_num2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if both tuples are the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    # Initialize the result tuple with the maximum element for each tuple\n    max_tup = (max(test_tup1), max(test_tup2))\n    # Return the result tuple\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_num1, max_num2 = test_tup1[0], test_tup1[1]\n    for i in range(2, len(test_tup1)):\n        if test_tup1[i] > max_num1:\n            max_num1 = test_tup1[i]\n    for i in range(2, len(test_tup2)):\n        if test_tup2[i] > max_num2:\n            max_num2 = test_tup2[i]\n    return max_num1, max_num2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = max(test_tup1, test_tup2)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Find the maximum value in the first tuple\n    max1 = max(test_tup1)\n    # Find the minimum value in the second tuple\n    min2 = min(test_tup2)\n    # Calculate the maximum value in the combined tuple\n    max_combined = max(max1, min2)\n    # Create a new tuple with the maximum value in the first tuple and the minimum value in the second tuple\n    max_tuple = (max1, min2)\n    # Return the maximum value in the combined tuple and the new tuple\n    return max_combined, max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple with the elements\n    that are greater than the corresponding elements of the input tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the maximum element in the first tuple\n    max1 = max(test_tup1)\n    \n    # Find the maximum element in the second tuple\n    max2 = max(test_tup2)\n    \n    # Create a new tuple that contains the maximum elements of both tuples\n    new_tuple = (max1, max2)\n    \n    return new_tuple"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return None\n    primes = [2]\n    for i in range(3, 50):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = [2, 3]  # list of prime numbers\n\n    for i in range(5, 200, 6):\n        is_prime = True\n        for j in range(len(primes)):\n            if primes[j] * primes[j] > i:\n                break\n            if i % primes[j] == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables \n    count = 0 \n    prime_count = 0 \n    prime_sum = 0 \n    i = 2 \n\n    # Check if n is odd \n    if n % 2 == 1: \n        n += 1 \n\n    # Main loop \n    while prime_count < n: \n        if i % 10 == 0: \n            print(i, end=\" \") \n        # Check if i is prime \n        is_prime = True \n        for j in range(2, int(i**0.5)+1): \n            if i % j == 0: \n                is_prime = False \n                break \n        if is_prime: \n            prime_count += 1 \n            prime_sum += i \n        i += 1 \n\n    # Calculate the nth newman\u2013shanks\u2013williams prime number \n    nth_prime = prime_sum - n + 1 \n\n    # Print the result \n    print(\"\\nThe nth newman\u2013shanks\u2013williams prime number is:\", nth_prime) "
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables to store the number of primes\n    count = 0\n    # Initialize variable to store the number of factors\n    factors = 0\n    # Set the initial number to test\n    num = 2\n    \n    # Loop until we have counted the nth newman\u2013shanks\u2013williams prime number\n    while count < n:\n        # Check if the current number is a prime number\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        # If the current number is prime, increment the count and update the factors\n        if is_prime:\n            count += 1\n            factors += 1\n        # Update the number to test\n        num += 1\n    \n    # Return the number of factors of the nth newman\u2013shanks\u2013williams prime number\n    return factors"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Base case for nth newman-shanks-williams prime number\n    if n == 0:\n        return 2\n    \n    # Initialize variables\n    i = 1\n    is_prime = True\n    \n    # Iterate until nth newman-shanks-williams prime number is found\n    while is_prime and i <= n:\n        is_prime = True\n        \n        # Iterate from i^2 to sqrt(n)\n        j = 2\n        while i**j <= n:\n            if i**j == n:\n                return i**j\n            elif i**j > n:\n                is_prime = False\n                break\n            \n            j += 1\n        \n        i += 1\n    \n    # If nth newman-shanks-williams prime number is not found, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n    i = 1\n    while True:\n        if i**2 - 4*i + 1 == 0:\n            print(i)\n            i += 1\n            if n == 1:\n                break\n        elif i**2 - 4*i + 1 > 0:\n            i += 1\n        else:\n            i += 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n\n    def is_newman_prime(n):\n        \"\"\"\n        Helper function to check if a number is a newman-shanks-williams prime.\n        \"\"\"\n        if n == 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    count = 0\n    i = 2\n    while count < n:\n        if is_newman_prime(i):\n            count += 1\n        i += 1\n    return i - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list to store the prime numbers\n    prime_list = []\n\n    # Initialize a variable to store the current number\n    current_num = 2\n\n    # Loop through the numbers starting from 2\n    while len(prime_list) < n:\n        # Check if the current number is prime\n        if all(current_num % i!= 0 for i in range(2, int(current_num**0.5) + 1)):\n            # Add the current number to the prime list\n            prime_list.append(current_num)\n        # Increment the current number\n        current_num += 1\n\n    # Return the nth prime number in the prime list\n    return prime_list[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the list of primes to the first 500 primes\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499]\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through the list of primes and check if each number is a newman-shanks-williams prime\n    for prime in primes:\n        if is_newman_shanks_williams(prime, n):\n            count += 1\n            if count == n:\n                return prime\n\n    # If the count is less than n, it means that the nth newman-shanks-williams prime has not been found\n    return \"Not found\"\n\ndef is_newman_shanks_williams(prime, n):\n    '''\n    Check if a given number is a newman-shanks-williams prime.\n    '''\n    # Calculate the nth newman-shanks-williams prime\n    nth_prime = 0\n    for i in range(2, n+1):\n        nth_prime += i**2 - 1\n    nth_prime += 2\n\n    # If the nth newman-shanks-williams prime is greater than the given prime, return True\n    if nth_prime > prime:\n        return True\n    else:\n        return False"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # define the function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # start with the first prime number\n    prime = 2\n\n    # loop until we have found the nth prime number\n    while True:\n        # check if the current number is prime\n        if is_prime(prime):\n            # if it is, check if it is the nth prime number\n            if n == 1:\n                return prime\n            n -= 1\n        # if not, move on to the next prime number\n        prime += 1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x/y if y!= 0 else 0, test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Check if the lengths of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples should be equal.\")\n        return\n    \n    # Perform element-wise division on the tuples\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            print(\"Error: Division by zero is not allowed.\")\n            return\n    \n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Initialize the result list with the same length as the input tuples\n    result_list = [0] * len(test_tup1)\n    # Perform element-wise division operation between the two input tuples and store the result in the result list\n    for i in range(len(test_tup1)):\n        result_list[i] = test_tup1[i] / test_tup2[i]\n    # Return the result list\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must be of equal length.\"\n    else:\n        # Create a new tuple to store the result\n        result_tup = ()\n        # Perform element-wise division operation on the tuples\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        # Return the result tuple\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(elem1 / elem2 for elem1, elem2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            result_tup.append(float('inf'))\n        else:\n            result_tup.append(test_tup1[i] / test_tup2[i])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # Check if the lengths of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples must be equal.\")\n\n    # Perform element-wise division\n    return tuple(num1 / num2 for num1, num2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part is L.\n\n    Parameters:\n    lst (list): the list to be split\n    L (int): the length of the first part of the list\n\n    Returns:\n    tuple: a tuple containing two lists, where the first list has length L and the second list has the remaining elements of the original list\n    \"\"\"\n    # check if the length of the list is greater than L\n    if len(lst) > L:\n        # split the list into two parts\n        first_part = lst[:L]\n        second_part = lst[L:]\n        # return the resulting lists in a tuple\n        return (first_part, second_part)\n    else:\n        # if the length of the list is less than or equal to L, return the original list as both parts\n        return (lst, lst)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    num_elements = len(list1)\n    if L >= num_elements:\n        return (list1[:], [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the first part of the list\n    first_part_length = L\n    \n    # Create two empty lists to hold the first and second parts of the list\n    first_part = []\n    second_part = []\n    \n    # Loop through the original list and add items to the appropriate lists\n    for item in list1:\n        if len(first_part) < first_part_length:\n            first_part.append(item)\n        else:\n            second_part.append(item)\n    \n    # Return the resulting lists as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    \"\"\"\n    # Get the length of the original list\n    n = len(lst)\n    \n    # Calculate the length of the first part of the list\n    L_1 = L\n    \n    # Check if L is greater than or equal to n/2\n    if L_1 >= n/2:\n        # If L is greater than or equal to n/2, then the first part will be all the elements in the original list\n        L_1 = n\n    \n    # Create a new list with L elements from the original list\n    L_lst = lst[:L_1]\n    \n    # Create a new list with the remaining elements from the original list\n    R_lst = lst[L_1:]\n    \n    # Return a tuple containing the two parts of the original list\n    return (L_lst, R_lst)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts where the length of the first part is L and return the resulting lists in a tuple.\n    \"\"\"\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list\")\n    if L <= 0:\n        raise ValueError(\"Length of the first part must be greater than 0\")\n    if L >= len(lst):\n        raise ValueError(\"Length of the first part must be less than or equal to the length of the input list\")\n    if L % 2 == 0:\n        raise ValueError(\"Length of the first part must be odd\")\n\n    mid = L // 2\n    return lst[:mid], lst[mid:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the first part of the list\n    L1 = L\n    # Calculate the length of the second part of the list\n    L2 = len(list1) - L1\n    # Split the original list into two parts\n    L1_list = list1[:L1]\n    L2_list = list1[L1:]\n    # Return the resulting lists in a tuple\n    return (L1_list, L2_list)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # initialize the two parts of the list\n    part1 = []\n    part2 = []\n    \n    # loop through the list and add elements to the appropriate parts of the list\n    for elem in list1:\n        if len(part1) < L:\n            part1.append(elem)\n        else:\n            part2.append(elem)\n    \n    # return the two parts of the list as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the first part of the list\n    first_part_length = len(list1) - L\n    # Check if the first part of the list is smaller than L\n    if first_part_length < 0:\n        # If it is, then the sum of the lengths of the first and second parts will be zero\n        first_part_length = 0\n    # Extract the first part of the list\n    first_part = list1[:first_part_length]\n    # Extract the second part of the list\n    second_part = list1[first_part_length:]\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if the length of the list is greater than L\n    if len(list1) > L:\n        # check if the length of the list is divisible by L\n        if len(list1) % L == 0:\n            # divide the list into two parts\n            mid = len(list1) // 2\n            part1 = list1[:mid]\n            part2 = list1[mid:]\n            # return the two parts as a tuple\n            return (part1, part2)\n        else:\n            # if the length of the list is not divisible by L, return None\n            return None\n    else:\n        # if the length of the list is less than or equal to L, return None\n        return None"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(height):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 7 * height"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in years\n    dog_years = h_age / 7\n    \n    # Return the result\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    years = int(h_age) * 7\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = (7 * h_age) + 5\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_years = 7\n    return h_age * dogs_years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    # initialize an empty list to store the resulting lists\n    result = []\n    \n    # iterate over the list and split it for every nth element\n    for i in range(0, len(S), step):\n        # create a new list containing the elements from the original list\n        new_list = S[i:i+step]\n        # add the new list to the result list\n        result.append(new_list)\n        \n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step > len(S):\n        step = len(S)\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    n = len(S)\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to hold the resulting lists\n    result = []\n    # loop through the input list\n    for i in range(0, len(S), step):\n        # create a slice of the input list with the current index as the start and the next step as the stop\n        sublist = S[i:i+step]\n        # add the sublist to the result list\n        result.append(sublist)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Check if the step is a positive integer\n    if type(step)!= int or step <= 0:\n        return None\n    \n    # Split the list into chunks of size `step`\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    if n % step == 0:\n        return [S[i:i+step] for i in range(0, n, step)]\n    else:\n        last_split = len(S) % step\n        return [S[i:i+step] + S[i+last_split:i+last_split+step] for i in range(0, n, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = (l * l) + (l * l) + (l * l)\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (1/2) * math.sin(30 * math.pi/180) * math.cos(20 * math.pi/180)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = 6 * l**2\n    lateral_surface = surface * (4/3)\n    return lateral_surface"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # Calculate the surface area of the cube using Heron's formula\n    s = (3*l**2 + l**3)/4\n\n    # Return the calculated surface area\n    return s"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    This function calculates the lateral surface area of a cube given its side length `l`.\n    The lateral surface area is given by the formula:\n    \n    lateral surface area = 6 * l^2\n    \n    This function returns the lateral surface area of the cube.\n    '''\n    lateral_surface_area = 6 * l**2\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l ** 2 * 6  # formula for lateral surface area of a cube\n    return area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_squares = 0\n    for i in range(1, n+1, 2):\n        odd_squares += i*i\n    return odd_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count*count\n        count += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # initializing sum variable to 0\n    sum_of_squares = 0\n\n    # iterating from 1 to n\n    for i in range(1, n+1, 2):\n        # adding the square of current odd number to sum_of_squares\n        sum_of_squares += i*i\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    # initialize the sum variable to 0\n    total = 0\n    # loop through the first n odd numbers and add their squares to the sum\n    for i in range(1, n+1, 2):\n        total += i*i\n    # return the total sum of squares\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**2\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_squares = 0\n    for i in range(1, n+1, 2):\n        odd_squares += i**2\n    return odd_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n-1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the variable to store the star number\n    star_num = 0\n\n    # loop from 1 to n\n    for i in range(1, n+1):\n        # for each iteration, multiply the current value of star_num by 2\n        star_num = star_num * 2\n\n    # return the final value of star_num\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Calculate the value of the star number\n    star_num = 5 * n + 1\n    \n    # Return the star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the nth star number.\n    \"\"\"\n    # initialize variables\n    num_rows = 0\n    num_spaces = 0\n    # calculate number of rows\n    while num_rows < n:\n        num_rows += 1\n        num_spaces = n - num_rows\n    # calculate number of spaces\n    while num_spaces > 0:\n        num_spaces -= 1\n        print(\"*\", end=\" \")\n    # print the middle row\n    for i in range(num_rows):\n        print(\"*\", end=\" \")\n    # print the last row\n    for i in range(num_rows):\n        print(\"*\", end=\" \")\n    print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize a counter variable and a variable to store the current star number\n    count = 0\n    current_star_num = 1\n    \n    # Loop through the first n-1 star numbers\n    while count < n-1:\n        # Multiply the current star number by 2 and add 1\n        current_star_num *= 2\n        current_star_num += 1\n        \n        # Increment the counter\n        count += 1\n        \n    # Return then'th star number\n    return current_star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    count = 1\n    num = 1\n    while count <= n:\n        print(\"*\" * num)\n        num += 1\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return '*'\n    elif n % 2 == 0:\n        return find_star_num(n//2) + find_star_num(n//2)\n    else:\n        return '*' + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    This function takes an integer `n` and returns then'th star number.\n    \"\"\"\n    # initialize the string variable to store the star number\n    star_num = \"\"\n    # loop from 1 to n\n    for i in range(1, n+1):\n        # add a star to the star number\n        star_num += \"*\"\n    # return the star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables for the result and current number\n    result = 0\n    num = 1\n\n    # Loop through each iteration of the function\n    for i in range(n):\n        # Add the current number to the result\n        result += num\n\n        # Multiply the current number by 2\n        num *= 2\n\n    # Return the result\n    return result"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k)!= 1:\n        raise ValueError(\"Input should be a single character\")\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value_dict = {\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75,\n        'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87,\n        'X': 88, 'Y': 89, 'Z': 90, '0': 48, '1': 49, '2': 50, '3': 51, '4': 52, '5': 53, '6': 54, '7': 55, '8': 56,\n        '9': 57\n    }\n    if k in ascii_value_dict:\n        return ascii_value_dict[k]\n    else:\n        print(\"Invalid character entered.\")"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # if k is a string, convert it to a character\n    if type(k) == str:\n        k = k[0]\n    # find the ascii value of the character and return it\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = k.lower()\n    if k in ['a', 'b', 'c', 'd', 'e', 'f']:\n        return k\n    else:\n        return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            count += 1\n\n    return even_sum, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            if i % 2 == 0:\n                sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    '''\n    even_sum = 0\n    even_index = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index.append(i)\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n    return even_sum, even_count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and even_index % 2 == 0:\n            sum_even += arr[i]\n        even_index += 1\n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    total = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            total += i**5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_power = 0\n    i = 2\n    while i <= n:\n        sum_even_power += i ** 5\n        i += 2\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += 2**i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even += i ** 5\n    return sum_even"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = [x for x in range(2, 2*n+1, 2)]\n    even_numbers_pow5 = [x**5 for x in even_numbers]\n    return sum(even_numbers_pow5)"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_squares = 0\n    i = 0\n\n    while i <= n:\n        sum_of_squares += (i ** 5) * 2\n        i += 1\n\n    return sum_of_squares\n"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        if tup:  # skip empty tuples\n            result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_ in test_list:\n        rear_list.append(tuple_[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_ in test_list:\n        rear_list.append(tuple_[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for item in test_list:\n        rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # create an empty list to store rear elements\n    rear_list = []\n    \n    # loop through the input list of tuples\n    for tup in test_list:\n        # extract the rear element of the current tuple and append it to the rear_list\n        rear_list.append(tup[-1])\n    \n    # return the rear_list\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the lengths of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n    \n    # Loop through the tuples and subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result_list.append(test_tup1[i] - test_tup2[i])\n        else:\n            result_list.append(test_tup1[i])\n    return tuple(result_list)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: the two tuples have different lengths.'\n    # Initialize an empty list to store the result\n    result_list = []\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the index is within bounds of the second tuple\n        if i < len(test_tup2):\n            # Subtract the element of the first tuple from the element of the second tuple with the same index\n            result_list.append(test_tup1[i] - test_tup2[i])\n        else:\n            # If the index is beyond the bounds of the second tuple, return an error message\n            return 'Error: the index is beyond the bounds of the second tuple.'\n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the length of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same length.')\n    # Create a new tuple to store the results\n    result_tup = ()\n    # Loop through the indices of the two tuples\n    for i in range(len(test_tup1)):\n        # Subtract the elements of the first tuple from the elements of the second tuple with the same index\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    # Return the new tuple of results\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples must have the same length.\"\n    elif len(test_tup1) == 0:\n        return \"Error: The two tuples cannot be empty.\"\n    else:\n        result_list = []\n        for i in range(len(test_tup1)):\n            result_list.append(test_tup1[i] - test_tup2[i])\n        return tuple(result_list)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Tuples must have the same length.'\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # If the elements at the same index are the same, subtract them from the second tuple\n        if test_tup1[i] == test_tup2[i]:\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length\")\n        return\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        for j in range(2, i+1):\n            if i % 2 == 0:\n                sum += math.comb(i, j)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff = [1, 1]\n    total = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            coeff.append(0)\n        else:\n            coeff.append(1)\n        for j in range(2, i+1):\n            coeff[j] = (coeff[j] + coeff[j-1]) % 1000000007\n            total = (total + coeff[j]) % 1000000007\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_of_even_coeff = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if j % 2 == 0:\n                sum_of_even_coeff += math.comb(i, j)\n    return sum_of_even_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to zero\n    coeff_sum = 0\n    \n    # Loop through each integer from 1 to n\n    for i in range(1, n+1):\n        \n        # Calculate the even index binomial coefficient using the formula: C(n, 2i) = n!/(2i-1)!\n        even_coeff = math.factorial(n) // math.factorial(2*i-1)\n        \n        # Add the even index binomial coefficient to the sum\n        coeff_sum += even_coeff\n    \n    # Return the sum of even index binomial coefficients\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(n+1):\n        for j in range(2*i+1):\n            if i == j:\n                coeff_sum += math.comb(n, j)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_binomial_Coeff_Sum(n):\n    # Initialize the sum of even index binomial coefficients\n    even_index_sum = 0\n\n    # Compute the even index binomial coefficients up to n\n    for i in range(n+1):\n        # Compute the even index binomial coefficient\n        even_index_coeff = math.comb(n, i) * math.comb(2*n-2, i-2)\n\n        # If the even index coefficient is even, add it to the sum\n        if even_index_coeff % 2 == 0:\n            even_index_sum += even_index_coeff\n\n    # Return the sum of even index binomial coefficients\n    return even_index_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize a variable to hold the sum of even index binomial coefficients\n    sum_even = 0\n\n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # compute the binomial coefficient of i and n-i\n        coeff = math.comb(n, i)\n\n        # check if the index i is even\n        if i % 2 == 0:\n            # add the even index binomial coefficient to the sum_even\n            sum_even += coeff\n\n    # return the sum_even\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize variables\n    sum_even = 0\n    n_2 = n ** 2\n\n    # Calculate the sum of even index binomial coefficients using formula (n^2)/(2i)\n    for i in range(2, n + 1, 2):\n        sum_even += n_2 / i\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Check if input is valid\n    if n < 1:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Initialize variables for sum and sum of even coefficients\n    sum_even_coefficients = 0\n    even_coefficients_sum = 0\n\n    # Calculate sum of even coefficients using nested loop\n    for i in range(1, n + 1):\n        for j in range(i + 2, n + 1, 2):\n            even_coefficients_sum += math.comb(n, j - 1) * (j - 1) / math.comb(j, 2)\n\n    # Calculate sum of even coefficients using formula\n    sum_even_coefficients = 0.5 * (n * (n + 1)) / 2\n\n    # Return the sum of even coefficients\n    return sum_even_coefficients - even_coefficients_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum and index to 0\n    sum_even = 0\n    index = 0\n\n    # Calculate the sum of even index binomial coefficients using the formula\n    while index < n:\n        sum_even += math.comb(n, index) * 2**index\n        index += 1\n\n    return sum_even"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Using the formula for volume of a sphere\n    V = (4/3) * 3.14 * r**3\n    # Multiplying by the height to get the volume of the cylinder\n    V *= h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3/5)*pi*r**2*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * (r**2) * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    vol = (3.14159 * r ** 2 * h) / 3\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * (r**2) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    \"\"\"\n    return (3.14 * r**2 * h) / 3"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0 or test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i+1] == test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup)-1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function returns True if the input number n is a decagonal number and False otherwise.\n    A decagonal number is a number that can be expressed as the sum of two consecutive squares.\n    \"\"\"\n    # Calculate the square of the input number\n    num_square = n*n\n    \n    # Calculate the sum of the squares of the consecutive numbers up to n-1\n    sum_of_squares = (n*(n+1)*(2*n+1))/6\n    \n    # Check if the sum of squares equals the square of the input number\n    if num_square == sum_of_squares:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    num = 1\n    for i in range(1, n+1):\n        num = (num * 2) + 1\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(1, n+1):\n        decagonal_num = decagonal_num * (2*i-1)\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the first term\n    first_term = 1\n\n    # Initialize the second term\n    second_term = 1\n\n    # Initialize the sum\n    sum_of_terms = 0\n\n    # Initialize the count of even terms\n    count_of_even_terms = 0\n\n    # Loop through each term in the sequence\n    for i in range(1, n+1):\n        # Calculate the next term in the sequence\n        term = first_term + second_term\n\n        # Add the current term to the sum\n        sum_of_terms += term\n\n        # Check if the term is even\n        if term % 2 == 0:\n            count_of_even_terms += 1\n\n        # Update the first term and second term for the next iteration\n        first_term = second_term\n        second_term = term\n\n    # Check if the sum of even terms is divisible by 2\n    if sum_of_terms % 2 == 0:\n        if count_of_even_terms == n:\n            return True\n    else:\n        return False\n\n    # If the sum of even terms is not divisible by 2\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Find the sum of the first n odd squares\n    sum_of_squares = sum([x**2 for x in range(1, n+1, 2)])\n\n    # Return the sum of squares divided by 2\n    return sum_of_squares / 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize variables to keep track of the current number and the number of layers\n    layer_count = 1\n    layer = 1\n\n    # Loop through the number of layers needed to reach the nth decagonal number\n    while layer_count < n:\n        # Increment the layer count and multiply the layer number by 2\n        layer_count += 1\n        layer *= 2\n\n    # Calculate the final decagonal number by adding the current layer to the number of layers\n    decagonal = layer - 2\n\n    # Return the final decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal = 1\n    count = 1\n    \n    # Loop until the nth decagonal number is reached\n    while count <= n:\n        # Calculate the nth decagonal number\n        decagonal += (count * (count + 1))\n        \n        # Increment the count\n        count += 1\n    \n    # Return the nth decagonal number\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a, b = 1, 10\n    for i in range(n):\n        if i % 2 == 0:\n            print(a, end=' ')\n        else:\n            print(b, end=' ')\n        a, b = a + b, a + b\n    return a"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0: \n        return False\n    \n    # Initialize variables\n    decagonal_count = 0\n    num = 1\n    \n    # Loop through numbers until we reach the nth decagonal number\n    while decagonal_count < n: \n        # Check if the current number is a decagonal number\n        if num % 5 == 0: \n            return num\n        \n        # Increment the number and count the decagonal number\n        num += 1\n        decagonal_count += 1\n    \n    # If we reach this point, it means the number is not a decagonal number\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Base cases\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 10\n\n    # Calculate the nth decagonal number\n    decagonal = 10 * (n - 1) + n\n\n    # Check if it is a valid decagonal number\n    if decagonal % 10 == 0:\n        return decagonal\n    else:\n        return -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Initialize the index variable and a flag variable to False\n    index = 0\n    found = False\n\n    # Loop through the array until the flag is True or the index is equal to the length of the array\n    while index < len(dlist) and not found:\n        # Check if the current element is equal to the item being searched for\n        if dlist[index] == item:\n            # Set the flag to True and return a tuple containing the True value and the index position of the element\n            found = True\n            return True, index\n        # Increment the index variable\n        index += 1\n\n    # If the element is not found, return a tuple containing the False value and -1\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # check if the list is empty or not\n    if len(test_list) == 0:\n        return True\n    \n    # create a set to store unique elements\n    unique_set = set()\n    \n    # add all elements of the list to the set\n    for element in test_list:\n        unique_set.add(element)\n    \n    # check if the length of the set is equal to the length of the list\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # create a set to store the unique elements of the list\n    unique_set = set(test_list)\n\n    # check if the length of the unique set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        # if true, return True\n        return True\n    else:\n        # if false, return False\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must be of the same length.')\n    \n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i] - nums2[i])\n    \n    return sub"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n\n    Args:\n        nums1 (list): The first list of numbers.\n        nums2 (list): The second list of numbers.\n\n    Returns:\n        list: A list containing the subtraction of the two input lists.\n\n    \"\"\"\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # subtract each element of the lists element-wise\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i] - nums2[i])\n\n    return sub_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a list of their subtraction of element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print('Lists do not have the same length.')\n        return\n\n    # create an empty list to store the result\n    result = []\n\n    # iterate through each element in the lists\n    for i in range(len(nums1)):\n        # subtract the corresponding elements and append the result to the result list\n        result.append(nums1[i] - nums2[i])\n\n    # return the result list\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Iterate through each digit in the number\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n    \n    # Iterate through each digit in the dictionary and check if its frequency is less than or equal to its value\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n    \n    # If all digits pass the validation, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    for digit in str(n):\n        digits.append(int(digit))\n    \n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    \n    for d in freq:\n        if freq[d] > d:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n            \n    for d in freq:\n        if freq[d] > d:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq_dict = {}\n    for i in range(10):\n        freq_dict[i] = 0\n    \n    while n > 0:\n        digit = n % 10\n        freq_dict[digit] += 1\n        n = n // 10\n    \n    for i in range(10):\n        if freq_dict[i] > i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # create a dictionary to store the frequency of digits\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # check the frequency of each digit\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    count = {}\n    for digit in str(n):\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n    for digit in count:\n        if count[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    count = [0] * 10  # count of digits\n    for i in str(n):\n        count[int(i)] += 1  # count the frequency of each digit\n\n    for i in count:\n        if i > n:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert the integer to a list of digits\n    digits = [int(d) for d in str(n)]\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for d in freq:\n        if freq[d] > d:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return list[0] == element\n    for i in range(1, len(list)):\n        if list[i]!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element,\n    and False otherwise.\n    '''\n    if len(list) == 0:\n        return False\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 0:\n        for i in range(len(list)):\n            if list[i]!= element:\n                return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\b[bB]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?i)\\ba(?:b{2,3})*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b{2,3}'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.{2,3}b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(?=(b{2,3})*)b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a{1}b[2-3]{1,}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize variables for the sum of the original array and the sum of the modified array\n    original_sum = sum(a)\n    modified_sum = sum([x for _ in range(k) for x in a])\n    \n    # Initialize variables for the maximum sum of the original array and the maximum sum of the modified array\n    original_max_sum = original_sum\n    modified_max_sum = modified_sum\n    \n    # Iterate through the array and update the sum and the max sum\n    for i in range(1, n):\n        modified_sum += a[i] - a[i-1]\n        modified_max_sum = max(modified_sum, modified_max_sum)\n        \n        # Update the sum and the max sum for the original array\n        original_sum = original_sum - a[i-1] + a[i]\n        original_max_sum = max(original_sum, original_max_sum)\n    \n    # Return the maximum sum of the modified array\n    return modified_max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(k):\n        current_sum += a[i]\n    max_sum = current_sum\n    for i in range(n - k):\n        current_sum = current_sum - a[i] + a[i + k]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # create the modified array by repeating the original array k times\n    modified_array = a * k\n\n    # initialize the maximum sum to be negative infinity\n    max_sum = float('-inf')\n\n    # loop through the modified array\n    for i in range(n):\n        # compute the sum of the current window of the modified array\n        window_sum = modified_array[i:i+n]\n\n        # update the maximum sum if the current window has a larger sum than the previous maximum sum\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # repeat the array k times\n    repeated_array = a * k\n    # find the maximum sum of a contiguous subarray\n    max_sum = max(a)\n    # loop through the array and update the maximum sum as required\n    for i in range(k):\n        # find the maximum sum of a contiguous subarray formed by the current element and all previous elements in the original array\n        current_sum = a[i]\n        for j in range(i):\n            current_sum += a[j]\n        # update the maximum sum if the current subarray sum is greater\n        max_sum = max(max_sum, current_sum)\n    # return the maximum sum of a contiguous subarray formed by the last element of the original array and all previous elements in the original array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the maximum sum of a contiguous array\n    max_sum = max(a)\n    # Initialize the maximum sum of a contiguous array formed by repeating the given array k times\n    max_sum_repeated = max_sum * k\n    \n    # Calculate the sum of a contiguous array formed by repeating the given array k times\n    for i in range(k):\n        new_array = a * k + a[:i] + a[i+1:]\n        new_max_sum = max(new_array)\n        if new_max_sum > max_sum_repeated:\n            max_sum_repeated = new_max_sum\n    \n    return max_sum_repeated"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize max_sum and current_sum to the first element of the array\n    max_sum = a[0]\n    current_sum = a[0]\n\n    # Iterate through the array from the second element\n    for i in range(1, n):\n        # Add the next element to current_sum\n        current_sum += a[i]\n\n        # If the current_sum exceeds max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current_sum becomes negative, reset it to 0\n        elif current_sum < 0:\n            current_sum = 0\n\n        # If the current_sum becomes greater than the value of the next element, add it to the current_sum\n        elif current_sum > a[i+1]:\n            current_sum += a[i+1]\n\n        # If the current_sum is greater than max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # If the max_sum is still negative, it means there is no valid subarray, so return 0\n    if max_sum < 0:\n        return 0\n\n    # Iterate through the array again from the second element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the current subarray's end\n        diff = a[i] - a[i-1]\n\n        # If the difference is greater than max_sum, update max_sum\n        if diff > max_sum:\n            max_sum = diff\n\n    # If the max_sum is still negative, it means there is no valid subarray, so return 0\n    if max_sum < 0:\n        return 0\n\n    # If the max_sum is greater than 0, divide it by 2 to get the actual maximum subarray sum\n    max_sum = max_sum // 2\n\n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(k):\n        a = a + a\n    max_sum = float('-inf')\n    start = 0\n    for i in range(n):\n        sum_array = a[:i+1]\n        sum_array.extend(a)\n        max_sum = max(max_sum, sum(sum_array))\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        for j in range(n):\n            a.append(a[j])\n    a.append(a[0])\n    for i in range(k):\n        a.append(a[i])\n    a.append(a[0])\n    a.sort()\n    for i in range(n-k):\n        max_sum = max(max_sum, a[i+k] - a[i])\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    This function finds the maximum sum of a contiguous array in the modified array \n    which is formed by repeating the given array k times.\n    '''\n    mod_arr = [a[i] for i in range(n)]\n    mod_arr.extend([a[0]]*k)\n    mod_arr.extend([a[-1]]*k)\n    \n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(k):\n        current_sum = sum(mod_arr[i:i+n])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # Modify the array by repeating it k times\n    modified_array = [0] * n\n    for i in range(n):\n        for j in range(k):\n            modified_array[i] += a[j]\n\n    # Find the maximum subarray sum in the modified array\n    max_sum_modified = max_subarray_sum(modified_array)\n\n    # Find the sum of the original array and the maximum subarray sum in the modified array\n    sum_original = sum(a)\n    sum_modified = sum(modified_array)\n\n    # Return the larger sum\n    if sum_modified > sum_original:\n        return sum_modified\n    else:\n        return sum_original\n\ndef max_subarray_sum(arr):\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_squares = 0\n    for i in range(1,n+1,2):\n        even_squares += i*i\n    return even_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_sum += i**2\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        sum_of_squares += count**2\n        count += 2\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the square of the current even natural number\n        square = i**2\n        \n        # Add the square to the sum of squares\n        sum_of_squares += square\n    \n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    count = 0\n    sum = 0\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum += count**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # Initialize variables to store the maximum length and the index of that length\n    max_length = 0\n    max_index = None\n\n    # Loop through each list in the input list\n    for i, sublist in enumerate(list1):\n        # Check if the length of the current list is greater than the maximum length found so far\n        if len(sublist) > max_length:\n            # Update the maximum length and its index\n            max_length = len(sublist)\n            max_index = i\n\n    # Return the index of the maximum length\n    return max_index"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list containing the maximum length of each list.\n    '''\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and sublist > max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for item in list1:\n        if len(item) > len(max_list):\n            max_list = item\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in list1:\n        if len(i) > max(max_lengths, default=0):\n            max_lengths = [len(i)]\n        elif len(i) == max(max_lengths, default=0):\n            max_lengths.append(len(i))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D list to store the number of ways of painting the fence\n    num_ways = [[0 for j in range(k + 1)] for i in range(n + 1)]\n\n    # Initialize the first row and column of the 2D list\n    for i in range(k + 1):\n        num_ways[0][i] = 1\n\n    for i in range(1, n + 1):\n        num_ways[i][0] = 1\n\n    # Fill the rest of the 2D list\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if num_ways[i - 1][j] > 0:\n                num_ways[i][j] = num_ways[i - 1][j]\n            else:\n                num_ways[i][j] = 0\n\n            if num_ways[i][j - 1] > 0:\n                num_ways[i][j] += num_ways[i][j - 1]\n            else:\n                num_ways[i][j] += 0\n\n    return num_ways[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # create a dictionary to store the number of ways for each number of colors\n    ways_dict = {}\n    \n    # initialize the first key in the dictionary with 1\n    ways_dict[0] = 1\n    \n    # iterate over all the numbers of colors from 1 to k\n    for num_colors in range(1, k+1):\n        # iterate over all the numbers of ways of painting the fence for each number of colors\n        for i in range(1, n+1):\n            # check if the number of colors is equal to the number of ways of painting the fence for the remaining number of colors\n            if num_colors == ways_dict[i-1]:\n                # if so, add the number of ways of painting the fence for the current number of colors to the dictionary\n                ways_dict[num_colors] = ways_dict[num_colors] + ways_dict[i-1]\n    \n    # return the value for the last key in the dictionary, which represents the number of ways of painting the fence with n posts and k colors\n    return ways_dict[k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    dp = [[0]*(k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j == i-1:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a dictionary to store the count of ways\n    count = {0:1, 1:n}\n\n    # Loop through all values from 2 to n-1\n    for i in range(2, n):\n        # Initialize a list to store the count of ways for each value of i\n        ways = [1] * (k+1)\n\n        # Loop through all values from 1 to k-1 and add them to the count for each value of i\n        for j in range(1, k+1):\n            ways[j] = ways[j] + ways[j-1]\n\n        # Update the count dictionary with the new count for i\n        count[i] = ways[k]\n\n    # Return the final count of ways\n    return count[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Initialize a dictionary to store the count of ways of painting the fence\n    ways = {}\n    \n    # Base case: If n=1, there is only one way of painting the fence with 1 post and 1 color\n    if n == 1:\n        ways[1] = 1\n    \n    # Base case: If n=2, there are only two ways of painting the fence with 2 posts and 2 colors\n    elif n == 2:\n        ways[2] = 2\n    \n    # If n>2, then we need to consider all possible ways of painting the fence\n    else:\n        # Iterate over all possible fence sizes (2, 3, 4,..., n-1)\n        for i in range(3, n+1):\n            # Iterate over all possible colors (1, 2, 3,..., k)\n            for j in range(1, k+1):\n                # If the current color and previous color are the same, then there is only 1 way to paint the fence\n                if j == i:\n                    ways[i] = 1\n                    break\n                # If the current color and previous color are different, then we need to consider the number of ways for the current size and previous color, and for the current size and current color\n                else:\n                    ways[i] = ways[i-1] + ways[i]\n    \n    # Return the number of ways of painting the fence\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # initializing the number of ways to 0\n    ways = 0\n    \n    # initializing the list to store the colors of the fence\n    colors = []\n    \n    # loop to add colors to the list of colors of the fence\n    for i in range(n):\n        colors.append(i%k)\n        \n    # loop to iterate through all possible colors of the fence\n    for i in range(k):\n        # initializing a counter for the number of colors with the same value\n        count = 0\n        \n        # loop to iterate through all possible positions of the colors of the fence\n        for j in range(n):\n            # checking if the colors at the current positions have the same value\n            if colors[j] == i:\n                # incrementing the counter for the number of colors with the same value\n                count += 1\n                \n        # checking if the counter is less than or equal to 2\n        if count <= 2:\n            # updating the number of ways to the value of the product of the number of ways and the count\n            ways *= count\n    \n    # returning the value of the product of the number of ways and the count\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Check if the number of colors is less than or equal to 2\n    if k <= 2:\n        # If the number of colors is less than or equal to 2, we have only one way of painting the fence\n        return 1\n    \n    # Initialize the memoization table\n    memo = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    \n    # Initialize the number of ways to 0\n    memo[0][0] = 1\n    \n    # Iterate through the memoization table\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # If the color at the current post is the same as the color at the previous post\n            if j == memo[i-1][j-1]:\n                # Add the count of painting the fence to the count of ways to paint the fence\n                memo[i][j] = memo[i-1][j]\n            # If the color at the current post is different from the color at the previous post\n            else:\n                # Add the count of painting the fence + the count of painting the fence with one color less to the count of ways to paint the fence\n                memo[i][j] = memo[i-1][j] + memo[i-1][j-1]\n    \n    # Return the count of ways to paint the fence\n    return memo[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Create a 2D list to store the possible colors for the fence.\n    color_count = [[0] * k for _ in range(n)]\n    \n    # Fill the 2D list with 0s.\n    for i in range(n):\n        for j in range(k):\n            color_count[i][j] = 0\n    \n    # Fill the 2D list with the number of ways to paint the fence for each color.\n    for i in range(n-1):\n        for j in range(k):\n            if color_count[i][j] == 0:\n                color_count[i+1][j] += color_count[i][j]\n            else:\n                color_count[i+1][j] += (color_count[i][j]*(color_count[i][j]-1)) // 2\n    \n    # Return the number of ways to paint the fence.\n    return color_count[n-1][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    def backtrack(n, k, i, j, count):\n        if i == n or j == n or count >= k:\n            return\n        if (i > 0 and colors[i-1] == colors[i] or i < n-1 and colors[i+1] == colors[i]) and (j > 0 and colors[j-1] == colors[j] or j < n-1 and colors[j+1] == colors[j]):\n            count += 1\n        backtrack(n, k, i+1, j, count)\n        backtrack(n, k, i, j+1, count)\n\n    colors = [0] * n\n    count = 0\n    backtrack(n, k, 0, 0, count)\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D list to store the count of ways for each color\n    ways = [[0 for j in range(k)] for i in range(n+1)]\n\n    # Base case: If the fence has only one post, there is only one way\n    ways[1][0] = 1\n\n    # Iterate through each post in the fence\n    for i in range(2, n+1):\n        # Iterate through each color\n        for j in range(k):\n            # If the current color is the same as the previous color,\n            # then there is only one way to paint the fence\n            if j == 0:\n                ways[i][j] = ways[i-1][0]\n            # If the current color is different from the previous color,\n            # then there are two ways to paint the fence:\n            # 1. With the current color, and without the previous color\n            # 2. Without the current color, and with the previous color\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n\n    # Return the total count of ways\n    return ways[n][0]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integer numbers as input and returns the quotient of the two numbers rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m # divide n by m and round down to the nearest integer\n    return quotient # return the quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the length of the third side of the triangle\n    t = math.sqrt(s**2 - w**2 - h**2)\n\n    # Return the third side of the triangle\n    return t"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w*h + w*w + h*h)\n    print(\"The third side of the right angled triangle is:\",c)\n\nWe can test this function with different values of w and h:\n\notherside_rightangle(3,4)\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = w/2\n    b = h/2\n    c = math.sqrt(a**2 + b**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n    \n    # Calculate the third side\n    a = math.sqrt(w**2 + h**2)\n    return a * math.sin(math.degrees(math.acos((w**2 + h**2 - s**2) / (2 * w * h))))"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Find the length of the third side of the right angled triangle\n    third_side = math.sqrt(w**2 + h**2)\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the third side\n    side = math.sqrt(w**2 + h**2)\n    # return the third side\n    return side\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using Heron's formula to find the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # Using math.sqrt() function to calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(s * (s - w) * (s - h) * (s - w + h))\n    # Using math.tan() function to find the angle of the triangle\n    angle = math.tan(math.pi / 3)\n    # Using math.acos() function to find the cosine of the angle\n    cos_angle = math.acos(angle)\n    # Using math.asin() function to find the sine of the angle\n    sin_angle = math.asin(angle)\n    # Using the cosine formula to calculate the third side of the triangle\n    third_side = hypotenuse * cos_angle\n    # Returning the third side of the triangle\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h + math.sqrt(w*w + h*h))/2\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n\n    # Use Heron's formula to find the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Use the Pythagorean theorem to find the square of the hypotenuse\n    hypotenuse = math.sqrt(s * (s - w) * (s - h))\n\n    # Return the third side of the triangle\n    return hypotenuse"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Use Heron's formula to calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    area = math.sqrt(s * (s - w) * (s - h))\n\n    # Calculate the length of the third side\n    third_side = area / math.sin(math.acos(w / (2 * area)))\n\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max value as the first element of the list\n    max_value = listval[0]\n    \n    # loop through the list and compare each element to max_value\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    \n    # return max_value as the maximum value in the list\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    max_val = listval[0]\n    for item in listval[1:]:\n        if item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise TypeError('Input must be a list')\n    max_value = None\n    for val in listval:\n        if max_value is None:\n            max_value = val\n        else:\n            if val > max_value:\n                max_value = val\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize a variable to store the maximum value\n    max_val = None\n    \n    # Iterate through each element in the list\n    for element in listval:\n        # Check if the current element is greater than the stored maximum value\n        if element > max_val:\n            max_val = element\n    \n    # Return the maximum value found\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    divisor = 1\n    \n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n        \n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 1\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n\n    # Counting inversions using three pointers\n    inv_count = 0\n    left = 0\n    right = n-1\n\n    while left < right:\n        # If the left and right pointers meet in the middle, it means we have found an inversion.\n        if arr[left] > arr[right]:\n            inv_count += right - left\n            # Move the left pointer to the next element and count the inversions from the left pointer to the right pointer.\n            left += 1\n        else:\n            # Move the right pointer to the next element and count the inversions from the left pointer to the right pointer.\n            right -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # Counting inversions using merge sort \n    inv_count = 0 \n    def merge_sort(arr, l, r): \n        if l < r: \n            mid = (l+r)//2 \n            merge_sort(arr, l, mid) \n            merge_sort(arr, mid+1, r) \n            i = l \n            j = mid+1 \n            inv_count = 0 \n            k = l \n            while i<=mid and j<=r: \n                if arr[i] <= arr[j]: \n                    arr[k] = arr[i] \n                    i += 1 \n                else: \n                    arr[k] = arr[j] \n                    j += 1 \n                    inv_count += (mid-i+1) \n                k += 1 \n            while i<=mid: \n                arr[k] = arr[i] \n                i += 1 \n                k += 1 \n            while j<=r: \n                arr[k] = arr[j] \n                j += 1 \n                k += 1 \n    merge_sort(arr, 0, n-1) \n    return inv_count \n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversion count is the number of pairs of elements that are in the wrong order.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] > arr[i]:\n                count += i - j\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if arr[j] > arr[max_idx]:\n                max_idx = j\n        \n        # Swap the maximum element with the i-th element\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        \n        # Count the number of inversions by comparing the elements before and after swapping\n        for j in range(i+1, n):\n            if arr[j] < arr[i]:\n                inv_count += (n-j)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize variables to keep track of inversions and unsorted elements\n    inv_count = 0\n    unsorted = len(arr)\n\n    # Loop through the sorted array\n    for i in range(len(arr)):\n        # If the element at i is greater than the unsorted elements, increment inversion count\n        if arr[i] > unsorted:\n            inv_count += 1\n            unsorted -= 1\n            # If the unsorted elements becomes 0, exit the loop\n            if unsorted == 0:\n                break\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inversions = 0\n\n    # Divide the array into two halves and count inversions in each half\n    for i in range(n//2):\n        left = i\n        right = n - i - 1\n\n        # Count inversions in the left half\n        left_inv_count = merge_sort(arr, left, right, [])\n        inversions += left_inv_count\n\n        # Count inversions in the right half\n        right_inv_count = merge_sort(arr, left, right, [])\n        inversions += right_inv_count\n\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n\n    for i in range(n): \n        inv_count += merge_sort(arr, i, n-1)\n\n    return inv_count\n\n\ndef merge_sort(arr, low, high): \n    if low < high: \n        mid = (low + high) // 2\n\n        merge_sort(arr, low, mid)\n        merge_sort(arr, mid+1, high)\n\n        merge(arr, low, mid, high)\n\n    return 0\n\n\ndef merge(arr, low, mid, high): \n    n1 = mid - low + 1\n    n2 = high - mid\n\n    L = [0] * n1\n    R = [0] * n2\n\n    for i in range(n1): \n        L[i] = arr[low + i]\n    for j in range(n2): \n        R[j] = arr[mid + 1 + j]\n\n    i = 0\n    j = 0\n    k = low\n\n    while i < n1 and j < n2: \n        if L[i] <= R[j]: \n            arr[k] = L[i] \n            i += 1\n        else: \n            arr[k] = R[j] \n            inv_count += n1 - i \n            j += 1\n        k += 1\n\n    while i < n1: \n        arr[k] = L[i] \n        i += 1\n        k += 1\n\n    while j < n2: \n        arr[k] = R[j] \n        j += 1\n        k += 1\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    inv_count = 0\n\n    # Divide the array into two halves\n    mid = n // 2\n\n    # Sort the left half\n    left_arr = sorted(arr[:mid])\n\n    # Sort the right half\n    right_arr = sorted(arr[mid:])\n\n    # Merge the sorted halves and count the inversions\n    i = j = k = 0\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] <= right_arr[j]:\n            arr[k] = left_arr[i]\n            i += 1\n        else:\n            arr[k] = right_arr[j]\n            j += 1\n            inv_count += len(left_arr) - i\n\n    # Copy the remaining elements from the left half\n    while i < len(left_arr):\n        arr[k] = left_arr[i]\n        i += 1\n        k += 1\n\n    # Copy the remaining elements from the right half\n    while j < len(right_arr):\n        arr[k] = right_arr[j]\n        j += 1\n        k += 1\n\n    # Print the final sorted array and the number of inversions\n    print(arr)\n    print(\"Number of inversions:\", inv_count)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Helper function to merge two sub-arrays of arr[] \n    # and count the number of inversions \n    def merge_count(left, mid, right, inv_count): \n        # Calculate the sizes of two sub-arrays \n        l_size = mid - left + 1\n        r_size = right - mid\n        \n        # Create temp arrays for left and right sub-arrays \n        L = [0] * l_size \n        R = [0] * r_size\n        \n        # Copy data to temp arrays L[] and R[] \n        for i in range(l_size): \n            L[i] = arr[left + i] \n        for j in range(r_size): \n            R[j] = arr[mid + 1 + j] \n        \n        # Merge the temp arrays back into arr[left..right] \n        i = j = k = 0\n        \n        while i < l_size and j < r_size: \n            if L[i] <= R[j]: \n                arr[left + k] = L[i] \n                i += 1 \n            else: \n                arr[left + k] = R[j] \n                inv_count += l_size - i \n                j += 1 \n            k += 1\n        \n        # Copy the remaining elements of L[] if any \n        while i < l_size: \n            arr[left + k] = L[i] \n            i += 1 \n            k += 1\n        \n        # Copy the remaining elements of R[] if any \n        while j < r_size: \n            arr[left + k] = R[j] \n            j += 1 \n            k += 1\n        \n        return inv_count\n    \n    # Main function to count the inversions in arr[] \n    def inv_count(arr, n): \n        inv_count = 0\n        \n        # Divide the array into two halves \n        mid = n // 2\n        \n        # Recursively count the inversions in each half \n        inv_count = inv_count + inv_count(arr, mid)\n        inv_count = inv_count + inv_count(arr, n - mid)\n        \n        # Merge the two halves back into arr[] \n        merge_count(0, mid, n - 1, inv_count)\n        \n        return inv_count\n    \n    # Driver function to test the above function \n    arr = [12, 11, 13, 5, 6, 7] \n    n = len(arr) \n    print(\"Inversion Count: \", inv_count(arr, n)) "
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # initialize an empty list to store the flattened list\n    flattened_list = []\n\n    # loop through each element in the original list\n    for element in list1:\n        # if the element is a list, recursively call the flatten_list() function on it\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        # otherwise, append the element to the flattened list\n        else:\n            flattened_list.append(element)\n\n    # return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a nested list structure into a single list.\n    \"\"\"\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure by converting it into a flat list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n\n    # Initialize an empty list to store the flattened list\n    flattened_list = []\n\n    # Loop through each element in the input list\n    for element in list1:\n\n        # If the element is a list, recursively call the flatten_list function on it\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            # Otherwise, append the element to the flattened list\n            flattened_list.append(element)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the frequency of each item in the set\n    freq = defaultdict(int)\n    for item, freq in stdata:\n        freq[item] += 1\n    # create a dictionary to store the maximum frequency of each item\n    max_freq = defaultdict(int)\n    for item, freq in freq.items():\n        max_freq[item] = max(freq.values())\n    # find the maximum aggregate by multiplying the maximum frequency of each item by its frequency\n    max_agg = max(max_freq.values()) * sum(max_freq.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Use defaultdict to keep track of the sum of the purchases for each customer\n    customer_sum = defaultdict(int)\n\n    # Iterate through the list of tuples and add up the purchases for each customer\n    for item, price in stdata:\n        customer_sum[item] += price\n\n    # Find the maximum aggregate by taking the maximum value of the sum for each customer\n    max_aggregate = max(customer_sum.values())\n\n    # Return the maximum aggregate\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the sum and count of each product\n    counts = defaultdict(int)\n    # loop through the list of tuples\n    for i in stdata:\n        # update the sum and count for the current product\n        counts[i[0]] += i[1]\n    # find the maximum aggregate by iterating through the dictionary and comparing the count\n    max_count = 0\n    max_sum = 0\n    for count in counts.values():\n        if count > max_count:\n            max_count = count\n            max_sum = sum(i[1] for i in stdata)\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_sum = 0\n\n    for t in stdata:\n        for i in range(len(t)):\n            max_dict[i] = max(max_dict[i], t[i])\n\n    for i in range(len(stdata[0])):\n        max_sum = max(max_sum, max_dict[i])\n\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    '''\n    # initialize a dictionary to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n    # loop through the list of tuples\n    for customer, amount in stdata:\n        # add the amount to the maximum aggregate for the customer\n        max_aggr[customer] += amount\n    # find the maximum aggregate for each customer and return it\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_agg = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item in stdata:\n        # Extract the customer id and the aggregate amount\n        customer_id = item[0]\n        aggregate = item[1]\n\n        # Update the maximum aggregate for the customer\n        max_agg[customer_id] = max(max_agg[customer_id], aggregate)\n\n    # Return the maximum aggregate for each customer\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the aggregate count for each transaction\n    agg_count = defaultdict(int)\n    # Iterate over each tuple in the list\n    for trans in stdata:\n        # Calculate the total aggregate for the transaction\n        total_agg = sum([trans[1], trans[2]])\n        # Update the aggregate count for the transaction\n        agg_count[total_agg] += 1\n    # Find the maximum aggregate count and return it\n    return max(agg_count, key=agg_count.get)"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for item in stdata:\n        customer, amount = item\n        max_agg[customer] = max(max_agg[customer], amount)\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the aggregate of each day\n    day_aggr = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for day, amount in stdata:\n        # Add the amount to the aggregate for the current day\n        day_aggr[day] += amount\n\n    # Calculate the maximum aggregate for each day\n    max_aggr = {day: max(aggr) for day, aggr in day_aggr.items()}\n\n    # Return the maximum aggregate for each day\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for customer, amount in stdata:\n        # Calculate the new maximum aggregate for the customer\n        new_max_aggr = max_aggr[customer] + amount\n        # Update the maximum aggregate for the customer in the defaultdict\n        max_aggr[customer] = new_max_aggr\n        \n    # Find the maximum aggregate from the defaultdict\n    max_agg = max(max_aggr.values())\n    \n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n-1, -1, -1):\n        first_n = bin(i)[2:].zfill(n)\n        last_n = bin(i + 2**n-1)[2:].zfill(n)\n        if first_n == last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if i + j == 2**n - 1:\n                first_n_sum = sum([int(digit) for digit in bin(i)[2:].zfill(n)])\n                last_n_sum = sum([int(digit) for digit in bin(j)[2:].zfill(n)])\n                if first_n_sum == last_n_sum:\n                    count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**2*n):\n        first = bin(i)[2:].zfill(n)\n        last = bin(i)[-2:].zfill(n)\n        if int(first) == int(last):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initializing the count variable to 0\n    count = 0\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extracting the first n bits and the last n bits of the current sequence\n        first_bits = bin(i)[2:n+2]\n        last_bits = bin(i)[-n-2:-2]\n        # Comparing the sum of the first n bits and the sum of the last n bits\n        if int(first_bits, 2) == int(last_bits, 2):\n            # Incrementing the count variable\n            count += 1\n    # Returning the count variable\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        bin_str = bin(i)[2:]\n        sum_first_n = sum(int(x) for x in bin_str[:n])\n        sum_last_n = sum(int(x) for x in bin_str[-n:])\n        if sum_first_n == sum_last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    count = 0 \n    for i in range(2**n): \n        binary_str = bin(i)[2:].zfill(n) \n        if int(binary_str[:n]) == int(binary_str[-n:]): \n            count += 1 \n    return count "
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sum1 = 0\n        sum2 = 0\n        for j in range(n):\n            if i & (1 << j):\n                sum1 += 1\n        for j in range(n, 2*n):\n            if i & (1 << j):\n                sum2 += 1\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        first = i\n        second = (i >> n) + (i & ((1<<n)-1))\n        if sum(first) == sum(second):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first = i >> n\n        last = i & ((1 << n) - 1)\n        if first == last:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = format(i, '0' + str(2*n) + 'b')\n        if binary[n] == binary[-n]:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d.keys():\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a counter for the depth of the dictionary\n    depth = 0\n    \n    # Iterate through the dictionary\n    for key, value in d.items():\n        # Check if the value is a dictionary\n        if isinstance(value, dict):\n            # Recursively call the function on the sub-dictionary\n            depth = max(depth, dict_depth(value))\n        else:\n            # Increment the depth counter for this level\n            depth += 1\n    \n    # Return the final depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a counter variable\n    depth = 0\n    \n    # Loop through the dictionary and recursively check its values\n    for key, value in d.items():\n        if isinstance(value, dict):\n            # Increase the depth counter by 1 for each nested dictionary\n            depth += dict_depth(value)\n        elif isinstance(value, (list, tuple)):\n            # Increase the depth counter by 1 for each nested list or tuple\n            depth += 1\n    \n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for i in d:\n        if isinstance(d[i], dict):\n            count += 1\n            count += dict_depth(d[i])\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n            max_depth = max(max_depth, dict_depth(value))\n            current_depth -= 1\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    current_depth += 1\n                    max_depth = max(max_depth, dict_depth(item))\n                    current_depth -= 1\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value) + 1)\n        else:\n            max_depth = max(max_depth, 1)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        depth = 0\n        for v in d.values():\n            depth = max(depth, dict_depth(v))\n        return depth + 1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function finds the element at a given index after a number of rotations.\n    It takes in three arguments: arr, which is the input array, ranges, which is a list containing the starting and ending indexes of each range, and rotations, which is the number of rotations required.\n    The function returns the element at the given index after the rotations.\n    '''\n\n    # find the index of the first element of the first range\n    first_start_index = arr[ranges[0][0]][0]\n\n    # find the index of the first element of the second range\n    second_start_index = arr[ranges[1][0]][0]\n\n    # calculate the distance between the two start indexes\n    distance = second_start_index - first_start_index\n\n    # find the element at the given index after rotations\n    rotated_index = (index + distance) % len(arr)\n\n    # return the element at the rotated index\n    return arr[rotated_index][1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # reverse the array\n    arr = arr[::-1]\n    # calculate the number of rotations required\n    n = len(arr)\n    k = 1\n    while k <= n:\n        k *= 2\n    rotations %= k\n    # perform rotations\n    for _ in range(rotations):\n        # reverse the first k elements\n        arr[:k] = arr[:k][::-1]\n        # reverse the remaining elements\n        arr[k:] = arr[k:][::-1]\n    # return the element at the index given in the original array\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations == 0:\n        return arr[index]\n    else:\n        for i in range(rotations):\n            temp = arr[0]\n            for j in range(len(arr) - 1):\n                arr[j] = arr[j + 1]\n            arr[len(arr) - 1] = temp\n        return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, range of rotations, and index as input, and returns the element at the given index after rotations.\n    \"\"\"\n    # Initialize a variable to keep track of the element at the given index\n    result = arr[index]\n\n    # Iterate through the ranges of rotations\n    for rotation in rotations:\n        # Calculate the current index after the rotation\n        new_index = (index + rotation) % len(arr)\n\n        # Update the element at the new index\n        result = arr[new_index]\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # check if index is within range of array\n    if index >= len(arr) : \n        return None\n    \n    # find element at current index\n    element = arr[index]\n    \n    # find the number of rotations needed to get element back\n    rotation_count = 0\n    for range_start,range_end in ranges :\n        if element >= range_start and element <= range_end : \n            rotation_count += 1\n        if rotation_count >= rotations : \n            break\n    \n    # find the element after the required number of rotations\n    element_after_rotations = element\n    for i in range(rotation_count) :\n        rotation_range = arr[index - i - 1] - arr[index - i]\n        if rotation_range > 0 : \n            element_after_rotations = element_after_rotations - rotation_range\n        else : \n            element_after_rotations = element_after_rotations + rotation_range\n            \n    # return the element after the required number of rotations\n    return element_after_rotations"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after a given number of rotations.\n\n    :param arr: List of integers.\n    :param ranges: List of tuples, each containing the range of rotations for a specific element.\n    :param rotations: List of integers, each representing the number of rotations required for a specific element.\n    :param index: Integer, representing the index of the element whose element to find.\n\n    :return: Integer, representing the element at the given index after the given number of rotations.\n    \"\"\"\n    for i in range(len(ranges)):\n        if ranges[i][0] <= rotations[i] <= ranges[i][1]:\n            return arr[index + rotations[i] % (len(arr) - i)]\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after number of rotations.\n\n    Parameters:\n    arr (list): List of elements to be rotated.\n    ranges (list): List of pairs representing the range of rotations.\n    rotations (int): Number of rotations to perform.\n    index (int): Index of the element to be found.\n\n    Returns:\n    The element at the given index after the specified number of rotations.\n\n    Raises:\n    TypeError: If any of the parameters are not of the required types.\n    ValueError: If any of the parameters are invalid.\n    \"\"\"\n    if not all(isinstance(x, (list, tuple)) for x in (arr, ranges)):\n        raise TypeError(\"Both arr and ranges must be lists or tuples.\")\n    if not all(isinstance(x, int) for x in (rotations, index)):\n        raise TypeError(\"rotations and index must be integers.\")\n    if not all(isinstance(x, tuple) and len(x) == 2 for x in ranges):\n        raise TypeError(\"Each range must be a tuple of two integers.\")\n    if not all(isinstance(x, list) for x in arr):\n        raise TypeError(\"arr must be a list of lists.\")\n\n    max_rotations = 0\n    max_element = None\n\n    for r in ranges:\n        if r[0] > r[1]:\n            raise ValueError(\"Invalid range: start must be less than or equal to end.\")\n        if r[0] > max_rotations:\n            max_rotations = r[0]\n        if r[1] < max_rotations:\n            max_rotations = r[1]\n\n    for r in ranges:\n        start = r[0]\n        end = r[1]\n        if start <= index <= end:\n            continue\n        rotations_needed = end - start + 1\n        if rotations_needed > rotations:\n            continue\n        rotated_arr = arr[:]\n        for _ in range(rotations_needed - rotations):\n            rotated_arr.append(rotated_arr.pop(0))\n        if index < len(rotated_arr):\n            max_element = rotated_arr[index]\n            break\n\n    if max_element is None:\n        raise ValueError(\"No element found at the given index after the specified rotations.\")\n    return max_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes three lists: arr, ranges, and rotations, where arr is the array to search in, \n    ranges is a list of ranges representing the possible rotations of the array, and rotations is a list of integers representing the rotations to apply to the array.\n    It returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    arr = arr.copy()\n    for i in range(rotations):\n        if len(ranges) > 1:\n            arr = find_min_range(arr, ranges)\n        else:\n            arr = ranges[0]\n        arr = rotate(arr)\n    return arr[index]\n\n\ndef find_min_range(arr, ranges):\n    \"\"\"\n    This function takes an array and a list of ranges, and returns the smallest range that includes the array.\n    \"\"\"\n    min_range = ranges[0]\n    for range in ranges:\n        if range[0] < min_range[0]:\n            min_range = range\n    return min_range\n\n\ndef rotate(arr):\n    \"\"\"\n    This function takes an array and returns a new array that is the rotation of the original array.\n    \"\"\"\n    return arr[::-1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    This function takes an array, a list of ranges, and the number of rotations required to find the element at a given index.\n    It returns the element at the given index after the specified number of rotations.\n    '''\n    element = None\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index < ranges[i][1]:\n            element = arr[(index - ranges[i][0]) % len(arr)]\n            break\n    if element == None:\n        raise ValueError(\"Index out of range.\")\n    \n    # Perform rotations on the element until the desired index is reached.\n    for j in range(rotations):\n        element = element[ranges[index - ranges[i][0]][0] % len(element)]\n        index = element.index(arr[index])\n        if index == len(element) - 1:\n            break\n            \n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, list of ranges and rotations and an index as input.\n    The function returns the element at the given index after the rotations are applied.\n    '''\n    # Calculate the new index after rotations\n    new_index = index + rotations\n    # Calculate the element at the new index\n    new_element = arr[new_index]\n    # Calculate the element at the given index\n    old_element = arr[index]\n    # Loop through the list of ranges and find the corresponding element\n    for range_start, range_end in ranges:\n        if range_start <= new_index <= range_end:\n            # Calculate the range size\n            range_size = range_end - range_start + 1\n            # Calculate the new index of the element in the range\n            new_range_index = new_index - range_start\n            # Calculate the element at the new index of the range\n            new_range_element = arr[new_range_index]\n            # Calculate the distance between the old and new element\n            distance = abs(new_range_element - old_element)\n            # Return the minimum distance\n            return min(distance, range_size - distance)\n    # If the element is not found in the list of ranges, return the old element\n    return old_element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.search(r'^p', word):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    words = [word for word in words if re.search(pattern, word)]\n    return words[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    pattern = r'^p'\n    result = re.findall(pattern, words)\n\n    if len(result) == 2:\n        return result\n    else:\n        return 'No two words starting with letter \"p\" found.'"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\bp\\w+', words)\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) == 0:\n        return \"There are no words starting with 'p'.\"\n    elif len(p_words) == 1:\n        return f\"There is only one word starting with 'p': {p_words[0]}\"\n    else:\n        return f\"There are {len(p_words)} words starting with 'p': {', '.join(p_words)}\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p[a-z]+')\n    result = re.findall(pattern, words)\n\n    if result:\n        return result\n    else:\n        return 'No words starting with p found'"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return 'No two words starting with \"p\" found.'"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p.*p$')  # pattern to match words starting with 'p'\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            return words[i:i+2]  # return two words starting with 'p'\n    return None  # if no words starting with 'p' found"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Find all words in the list that start with 'p'\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n\n    # If there are two matches, return them\n    if len(matches) == 2:\n        return matches\n\n    # If there are not exactly two matches, return None\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a list to store the maximum sum of increasing subsequence for each prefix\n    max_sum = [0] * n\n\n    # Initialize the maximum sum of increasing subsequence for the prefix of the first element\n    max_sum[0] = a[0]\n\n    # Loop through the remaining elements of the array\n    for i in range(1, n):\n        # If the current element is greater than or equal to k, update max_sum[i]\n        if a[i] >= k:\n            # Find the index of the maximum sum of increasing subsequence starting from index 0\n            for j in range(i):\n                # If the maximum sum of increasing subsequence ending at j is greater than or equal to the current element, update max_sum[i]\n                if max_sum[j] + a[i] > max_sum[i]:\n                    max_sum[i] = max_sum[j] + a[i]\n                    break\n            else:\n                # If max_sum[i] is not updated in the inner loop, it means that the current element is not increasing and the maximum sum of increasing subsequence starting from index 0 is not changing. Therefore, update max_sum[i] to 0.\n                max_sum[i] = 0\n\n        # Update the maximum sum of increasing subsequence for the prefix of the current element\n        if i > index:\n            max_sum[i] = max(max_sum[i], max_sum[i - index] + a[i])\n\n    return max_sum[n - 1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Initialize a list to store the maximum sum of increasing subsequence for each prefix\n    max_sum_list = [0] * n\n\n    # Initialize a list to store the end index of each prefix\n    end_index_list = [0] * n\n\n    # Initialize the maximum sum of increasing subsequence\n    max_sum = 0\n\n    # Loop through the array and calculate the maximum sum of increasing subsequence for each prefix\n    for i in range(1, n):\n        # If the current element is greater than or equal to the kth element, add the current element to the maximum sum of increasing subsequence and update the end index\n        if a[i] >= a[k]:\n            max_sum_list[i] = max_sum_list[i - 1] + a[i]\n            end_index_list[i] = i\n        else:\n            # If the current element is less than the kth element, find the last index j such that a[j] < a[i] and update the maximum sum of increasing subsequence and end index\n            j = end_index_list[i - 1]\n            while j < i - 1 and a[j] >= a[i]:\n                j = end_index_list[j]\n            max_sum_list[i] = max_sum_list[j] + a[i]\n            end_index_list[i] = j\n\n    # Calculate the maximum sum of increasing subsequence for the prefix from index to n\n    max_sum = max_sum_list[n - 1]\n\n    # Calculate the maximum sum of increasing subsequence from index to k\n    max_sum_k = max_sum_list[k]\n\n    # Find the maximum sum of increasing subsequence from index to k, excluding the kth element\n    max_sum_k_excluding_k = max_sum_list[k - 1]\n\n    # Return the maximum sum of increasing subsequence from index to k, excluding the kth element\n    return max_sum_k_excluding_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function will return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    max_so_far = float('-inf')\n    current_sum = 0\n\n    for i in range(index, n):\n        if i >= k:\n            current_sum -= a[i - k]\n        current_sum += a[i]\n        if current_sum > max_so_far:\n            max_so_far = current_sum\n\n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # find the maximum sum of increasing subsequence starting from prefix until index\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(index, n):\n        if a[i] > a[i-1]:\n            max_ending_here += a[i]\n        else:\n            max_ending_here = max_ending_here + a[i] - a[i-1]\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    # include the maximum ending here in the sum of increasing subsequence\n    max_so_far += max_ending_here\n    \n    # find the maximum sum of increasing subsequence starting from prefix until index and including kth element\n    max_ending_here = max_ending_here = 0\n    for i in range(index, n):\n        if a[i] > a[i-1]:\n            max_ending_here += a[i]\n        else:\n            max_ending_here = max_ending_here + a[i] - a[i-1]\n        max_so_far = max(max_so_far, max_ending_here)\n        if i == k-1:\n            break\n    \n    # include the maximum ending here in the sum of increasing subsequence\n    max_so_far += max_ending_here\n    \n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k <= index:\n        return 0\n    \n    if index == 0:\n        return a[k-1]\n    \n    if index == 1:\n        return max(a[0], a[1], a[k-1])\n    \n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[1][0] = a[0]\n    dp[1][1] = max(a[0], a[1])\n    dp[1][2] = max(a[0], a[1], a[2])\n    \n    for i in range(2, n+1):\n        for j in range(min(i, k)+1):\n            if j == 1:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + a[i-1]\n            elif j == i-1:\n                dp[i][j] = dp[i-1][j-1] + a[i-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + a[i-1]\n                \n    return dp[n][k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0, []\n    if index == k:\n        return a[k], [k]\n    if index == n-1:\n        return a[n-1], [n-1]\n    \n    max_sum, prefix_sum = float('-inf'), 0\n    for i in range(index, n):\n        if a[i] > a[index] and a[i] < a[k]:\n            prefix_sum += a[i]\n            if prefix_sum > max_sum:\n                max_sum = prefix_sum\n                max_sum_index = i\n        else:\n            prefix_sum = 0\n            \n    return max_sum, [i for i in range(index, max_sum_index+1)]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return 0\n    \n    max_sum = 0\n    for i in range(index + 1, n + 1):\n        if a[i] > a[k] and i <= k:\n            max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[i])\n    \n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize an array to store the prefix sum of increasing subsequence\n    prefix_sum = [0] * (k + 1)\n\n    # Initialize the maximum sum to be equal to the first element\n    max_sum = a[0]\n\n    # Traverse through the array from the first element and the given kth element (if present)\n    for i in range(1, min(n, k + 1)):\n        # If the current element is less than the kth element, add its value to the prefix sum of increasing subsequence\n        if i < k:\n            prefix_sum[i] = a[i] + prefix_sum[i - 1]\n        else:\n            prefix_sum[i] = prefix_sum[k]\n\n        # Update the maximum sum if the current element is greater than the maximum sum found so far\n        if prefix_sum[i] > max_sum:\n            max_sum = prefix_sum[i]\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum and length of the subsequence\n    max_sum = float('-inf')\n    max_length = 0\n\n    # Initialize the current subsequence with the given index\n    current_subseq = [index]\n\n    # Loop through the array from the given index to the end\n    for i in range(index + 1, n):\n        # If the current element is greater than the kth element, add it to the current subsequence\n        if a[i] > a[k]:\n            current_subseq.append(i)\n            # If the length of the current subsequence is greater than the maximum length found so far, update the maximum length and the maximum sum\n            if len(current_subseq) > max_length:\n                max_length = len(current_subseq)\n                max_sum = max(a[current_subseq[i]] for i in range(len(current_subseq)))\n\n    # Return the maximum sum of increasing subsequence from prefix until the given index and also including the kth element\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    max_sum_end = -1\n    max_sum_start = -1\n    max_sum_end_ind = -1\n    max_sum_start_ind = -1\n    max_sum_end_prefix = []\n    max_sum_start_prefix = []\n\n    # Calculate the maximum sum of increasing subsequence until index\n    for i in range(index):\n        curr_sum = max_sum_end_prefix[i] + a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_sum_end = i\n            max_sum_start = i - 1\n            max_sum_end_ind = i\n            max_sum_start_ind = i - 1\n\n    # Calculate the maximum sum of increasing subsequence from index to k\n    for i in range(index, k):\n        curr_sum = max_sum_start_prefix[i] + a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_sum_end = i - 1\n            max_sum_start = i\n            max_sum_end_ind = i - 1\n            max_sum_start_ind = i\n\n    # Calculate the maximum sum of increasing subsequence including k\n    curr_sum = max_sum_start_prefix[k] + a[k]\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n        max_sum_end = k - 1\n        max_sum_start = k\n        max_sum_end_ind = k - 1\n        max_sum_start_ind = k\n\n    # Calculate the maximum sum of increasing subsequence excluding k\n    for i in range(k + 1, n):\n        curr_sum = max_sum_start_prefix[i] + a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_sum_end = i - 1\n            max_sum_start = i\n            max_sum_end_ind = i - 1\n            max_sum_start_ind = i\n\n    return max_sum, max_sum_end, max_sum_start, max_sum_end_ind, max_sum_start_ind, max_sum_end_prefix, max_sum_start_prefix"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    col = []\n    for i in range(m):\n        col.append(deepcopy(tuplex[i]))\n    for i in range(m, n):\n        col.append(deepcopy(tuplex[i]))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the given tuple is valid\n    if len(tuplex)!= n:\n        raise ValueError(\"Invalid length of the tuple.\")\n    \n    # Create a new tuple with the desired number of columns\n    new_tuplex = ()\n    for i in range(m):\n        for j in range(n):\n            new_tuplex += (tuplex[j],)\n            \n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex[i][j] = new_tuplex[i][j] + 1\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple, tuplex, and returns a colon of size (m, n)\n    by copying the tuple and adding a new element of size (m, n) filled with zeros.\n    '''\n    # Make a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Add a new element of size (m, n) filled with zeros\n    tuplex_copy.append([0]*n for i in range(m-len(tuplex_copy)))\n\n    # Return the colon of size (m, n)\n    return tuplex_copy[:m]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    This function takes a tuplex (a tuple with elements as strings) and returns a colon of m columns and n rows.\n    '''\n    # Get the number of elements in the tuplex\n    size = len(tuplex)\n\n    # Get the number of rows and columns in the colon\n    rows = n\n    cols = m\n\n    # Check if the tuplex is a valid size for the colon\n    if size!= (rows * cols):\n        raise ValueError('Invalid tuplex size for the colon.')\n\n    # Create a new list to hold the colon\n    colon = []\n\n    # Loop through each row\n    for i in range(rows):\n        # Create a new list to hold the elements in this row\n        row = []\n\n        # Loop through each column\n        for j in range(cols):\n            # Add the j'th element from the tuplex to the current row\n            row.append(tuplex[i*cols + j])\n\n        # Add the current row to the colon\n        colon.append(row)\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function will create a new tuple with the same elements as the original tuple, except for the elements that are equal to the value of m and n.\n    The resulting colon will have m elements on the left side and n elements on the right side.\n\n    Input:\n    - tuplex: The original tuple.\n    - m: The number of elements on the left side of the colon.\n    - n: The number of elements on the right side of the colon.\n\n    Output:\n    - The new colon tuple.\n\n    Example:\n    Original tuple: (1, 2, 3, 4, 5)\n    Colon tuple: (2, 3, 4, 5, 1)\n    '''\n\n    # Get a copy of the original tuple.\n    tuplex_new = deepcopy(tuplex)\n\n    # Create a list of the indices of the elements that are equal to m and n.\n    indices = [i for i in range(len(tuplex_new)) if tuplex_new[i] == m or tuplex_new[i] == n]\n\n    # Move the elements at the indices to the beginning of the list.\n    tuplex_new = list(tuplex_new)\n    tuplex_new.remove(m)\n    tuplex_new.remove(n)\n    tuplex_new = tuplex_new[:m] + indices + tuplex_new[m:n] + tuplex_new[n:]\n\n    # Create a new colon tuple.\n    colon_tuple = tuple(tuplex_new)\n\n    return colon_tuple"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex = new_tuplex[i] + (new_tuplex[i + 1][j],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return ()\n    elif m == 1:\n        return (tuplex[0][n],)\n    else:\n        new_tuplex = deepcopy(tuplex)\n        for i in range(len(new_tuplex)):\n            new_tuplex[i] = colon_tuplex(new_tuplex[i], m-1, n)\n        return new_tuplex[n]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex + (new_tuplex[i],)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the input tuple to avoid modifying original tuple\n    tuplex = deepcopy(tuplex)\n    # Slice the tuple from the starting index to the mth index, and concatenate with the n-th index\n    colon = tuple(tuplex[:m]) + (tuplex[m],) + tuple(tuplex[m+1:n])\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize a list to store the largest products\n    largest_products = []\n\n    # Iterate through each element in the lists\n    for i in range(N):\n        # Calculate the product of the i-th element from each list\n        product1 = max(nums1[0], nums1[i]) * max(nums2[0], nums2[i])\n        product2 = max(nums1[N-1], nums1[N-i-1]) * max(nums2[N-1], nums2[N-i-1])\n\n        # Add the product to the list of largest products\n        largest_products.append(product1 * product2)\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize the largest_products list with zeros\n    largest_products = [0] * N\n\n    # Loop through the two lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n\n            # Compute the product of the i-th element in nums1 and the j-th element in nums2\n            product = nums1[i] * nums2[j]\n\n            # If the product is larger than the largest product seen so far, update the largest_product list\n            for k in range(N):\n                if product > largest_products[k]:\n                    largest_products[k] = product\n\n    # Return the largest_products list\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to keep track of largest products found so far\n    max_prod1 = max_prod2 = float('-inf')\n    \n    # Loop through all possible combinations of factors\n    for i in range(N):\n        for j in range(N):\n            # Calculate the product of the two lists with the selected factors\n            prod = nums1[i] * nums2[j]\n            \n            # Update the largest products found so far\n            max_prod1 = max(max_prod1, prod)\n            max_prod2 = max(max_prod2, nums1[i] * nums2[N - j - 1])\n    \n    # Return the list of largest products found\n    return [max_prod1, max_prod2]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize two variables to store the largest and second largest products\n    largest_product = float('-inf')\n    second_largest_product = float('-inf')\n    # Iterate through the first N elements of each list\n    for i in range(N):\n        # Calculate the current product of the i-th element of each list\n        product = nums1[i] * nums2[i]\n        # If the product is greater than the current largest product, update the variables\n        if product > largest_product:\n            second_largest_product = largest_product\n            largest_product = product\n        # If the product is between the current largest and second largest products, update the second largest variable\n        elif product > second_largest_product and product!= largest_product:\n            second_largest_product = product\n    # Return the largest and second largest products\n    return largest_product, second_largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    if N > len(nums1) or N > len(nums2):\n        raise ValueError(\"N must be less than or equal to the length of the longer list.\")\n\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    largest_products = []\n    for _ in range(N):\n        largest_products.append(nums1[0] * nums2[0])\n        nums1.pop(0)\n        nums2.pop(0)\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize variables to store the maximum and minimum products\n    max_product = nums1[0] * nums2[0]\n    min_product = nums1[0] * nums2[0]\n\n    # Loop through the first N elements of the lists\n    for i in range(N):\n        # Calculate the product of the next two largest elements from each list\n        product = nums1[i] * nums2[i]\n\n        # If the product is greater than the current maximum, update the maximum\n        if product > max_product:\n            max_product = product\n\n        # If the product is less than the current minimum, update the minimum\n        elif product < min_product:\n            min_product = product\n\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Find the maximum value in the two lists\n    max_val1 = max(nums1)\n    max_val2 = max(nums2)\n    \n    # Find the minimum value in the two lists\n    min_val1 = min(nums1)\n    min_val2 = min(nums2)\n    \n    # Calculate the product of the maximum value in the first list and minimum value in the second list\n    product1 = max_val1 * min_val2\n    \n    # Calculate the product of the minimum value in the first list and maximum value in the second list\n    product2 = min_val1 * max_val2\n    \n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Calculate the largest N products using the two sorted lists\n    largest_products = []\n    for i in range(N):\n        largest_products.append(nums1[i] * nums2[i])\n    \n    # Return the largest N products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the maximum value to be returned\n    max_product = float('-inf')\n\n    # Loop through each pair of numbers in the lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the i-th number from nums1 and the j-th number from nums2\n            product = nums1[i] * nums2[j]\n\n            # If the product is greater than the current maximum product, update the maximum product\n            if product > max_product:\n                max_product = product\n\n            # If we have found the desired number of products, return the maximum product\n            if i + j + 1 == N:\n                return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize the maximum product variables\n    max_product1 = 0\n    max_product2 = 0\n    \n    # Loop through the specified number of times\n    for i in range(N):\n        # Calculate the product of the current factor from each list\n        product1 = nums1[i] * nums1[i]\n        product2 = nums2[i] * nums2[i]\n        \n        # Update the maximum product variables if the current product is greater\n        if product1 > max_product1:\n            max_product1 = product1\n        if product2 > max_product2:\n            max_product2 = product2\n    \n    # Return the maximum product variables\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return \"Error: N is too large\"\n\n    largest_product = [0] * N\n    largest_nums = [0] * N\n\n    for i in range(N):\n        largest_product[i] = nums1[i] * nums2[i]\n        largest_nums[i] = nums1[i]\n\n    for i in range(1, len(nums1)):\n        for j in range(i, len(nums1)):\n            for k in range(j, len(nums1)):\n                for l in range(k, len(nums1)):\n                    for m in range(l, len(nums1)):\n                        product = nums1[i] * nums1[j] * nums1[k] * nums1[l] * nums1[m]\n                        if product > largest_product[i - j]:\n                            largest_product[i - j] = product\n                            largest_nums[i - j] = [nums1[i], nums1[j], nums1[k], nums1[l], nums1[m]]\n\n    result = []\n    for i in range(N):\n        result.append(largest_nums[i][-N:])\n\n    return result"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function finds the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns their maximum.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and converts it to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given integer.\n    \"\"\"\n\n    # convert the given integer to binary and split it into its bits\n    binary_str = bin(n)[2:]\n\n    # iterate through the binary string from right to left\n    for i in range(len(binary_str)):\n\n        # if the current bit is set, skip it\n        if binary_str[i] == '1':\n            continue\n\n        # if the current bit is not set, set it to 1 and break out of the loop\n        else:\n            binary_str = binary_str[:i] + '1' + binary_str[i:]\n            break\n\n    # convert the binary string back to an integer and return it\n    return int(binary_str, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the leftmost unset bit position\n    left_most_unset_bit = None\n    \n    # iterate over the bits in reverse order\n    for i in range(31, -1, -1):\n        # check if the ith bit is set\n        if (n & (1 << i)) == 0:\n            # set the leftmost unset bit position\n            left_most_unset_bit = i\n            break\n    \n    # set the leftmost unset bit\n    if left_most_unset_bit is not None:\n        n |= 1 << left_most_unset_bit\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n\n    # Set the leftmost unset bit to 1\n    for i in range(n.bit_length()):\n        if n & (1 << i) == 0:\n            result = result | (1 << i)\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    n |= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return 1 << count"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function takes an integer n and sets the leftmost unset bit in it.\n    '''\n    # Initialize a variable to store the unset bits\n    unset_bits = 0\n    \n    # Iterate through each bit in the binary representation of n\n    for i in range(31, -1, -1):\n        # Check if the i-th bit is 1\n        if n & (1 << i):\n            # If the i-th bit is 1, set unset_bits to 1\n            unset_bits = 1\n            break\n    \n    # Shift the unset bits to the leftmost position\n    unset_bits <<= 32 - i\n    \n    # Return the updated value of n with the unset bits shifted to the leftmost position\n    return n ^ unset_bits"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n\n    # Use binary representation to find the first unset bit\n    binary = bin(n)[2:]\n\n    # Use bitwise XOR to set the left most unset bit\n    n = n ^ (1 << int(binary))\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # initialize the number of unset bits to be set to 1\n    num_unset_bits = 1\n    # check if the number is a power of 2\n    if n & (n-1) == 0:\n        # get the number of unset bits in the binary representation of n\n        while n & 1 == 0:\n            num_unset_bits += 1\n            n >>= 1\n        # set the leftmost unset bit to 1\n        return n | (1 << num_unset_bits)\n    else:\n        # return n unchanged\n        return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n\n    :param n: An integer value.\n    :return: An integer value with the left most unset bit set to 1.\n    \"\"\"\n    # Initialize variables to keep track of the left most unset bit and its position\n    left_most_unset_bit = 0\n    left_most_unset_bit_position = 0\n\n    # Iterate through the bits of the input integer in reverse order\n    for i in range(31, -1, -1):\n        # If the current bit is 1, then the left most unset bit has been found\n        if (n >> i) & 1 == 1:\n            # Set the left most unset bit to 1\n            left_most_unset_bit = 1 << i\n            # Set its position\n            left_most_unset_bit_position = i\n            break\n\n    # Add the left most unset bit to the input integer\n    return n | left_most_unset_bit\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    '''\n    volume = math.pi * (r ** 2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function finds the volume of a cone using the formula: V = pi*r^2*h\n    '''\n    pi = math.pi\n    V = pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi/3 * r**2 * h"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2 found\n    highest = 0\n    \n    # Loop through all possible powers of 2\n    for i in range(1, n+1): \n        # Check if the current power of 2 is less than or equal to n\n        if i <= n: \n            # If it is, update the highest power of 2 found\n            highest = i\n    \n    # Return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize the highest power of 2 as 1\n    max_power_of_2 = 1\n    # loop through all possible powers of 2 less than or equal to n\n    for power in range(2, n+1):\n        # check if the current power is a power of 2\n        if power == 1:\n            # if it is, check if n is divisible by it\n            if n % 2 == 0:\n                # if n is divisible by 2, update max_power_of_2 to be the current power\n                max_power_of_2 = power\n            else:\n                # if n is not divisible by 2, check if the previous power is a power of 2\n                if power > 1:\n                    if power % 2 == 0:\n                        # if the previous power is a power of 2 and it is divisible by 2, update max_power_of_2 to be the current power\n                        max_power_of_2 = power\n        else:\n            # if the current power is not 1, check if it is a power of 2\n            if power % 2 == 0:\n                # if it is, update max_power_of_2 to be the current power\n                max_power_of_2 = power\n    # return the highest power of 2 less than or equal to n\n    return max_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer `n` as input and returns the highest power of 2 that is less than or equal to `n`.\n    \"\"\"\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n\n    # Initialize variables\n    power = 1\n    max_power = 0\n\n    # Keep dividing n by 2 until n becomes 1\n    while n > 1: \n        power *= 2\n        n //= 2\n        max_power = power\n\n    # If n is still greater than 1, it means n must be a power of 2, so add 1 to max_power\n    if n > 0: \n        max_power += 1\n\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Loop through all numbers starting from 1 and check if they are less than or equal to n\n    for i in range(1, n+1):\n        # If the number is less than or equal to 2^i, return i\n        if i == 1:\n            return i\n        elif i == 2:\n            return i\n        elif i == 3:\n            return i\n        elif i == 4:\n            return i\n        elif i == 5:\n            return i\n        elif i == 6:\n            return i\n        elif i == 7:\n            return i\n        elif i == 8:\n            return i\n        elif i == 9:\n            return i\n        elif i == 10:\n            return i\n        elif i == 11:\n            return i\n        elif i == 12:\n            return i\n        elif i == 13:\n            return i\n        elif i == 14:\n            return i\n        elif i == 15:\n            return i\n        elif i == 16:\n            return i\n        elif i == 17:\n            return i\n        elif i == 18:\n            return i\n        elif i == 19:\n            return i\n        elif i == 20:\n            return i\n        elif i == 21:\n            return i\n        elif i == 22:\n            return i\n        elif i == 23:\n            return i\n        elif i == 24:\n            return i\n        elif i == 25:\n            return i\n        elif i == 26:\n            return i\n        elif i == 27:\n            return i\n        elif i == 28:\n            return i\n        elif i == 29:\n            return i\n        elif i == 30:\n            return i\n        elif i == 31:\n            return i\n        elif i == 32:\n            return i\n        elif i == 33:\n            return i\n        elif i == 34:\n            return i\n        elif i == 35:\n            return i\n        elif i == 36:\n            return i\n        elif i == 37:\n            return i\n        elif i == 38:\n            return i\n        elif i == 39:\n            return i\n        elif i == 40:\n            return i\n        elif i == 41:\n            return i\n        elif i == 42:\n            return i\n        elif i == 43:\n            return i\n        elif i == 44:\n            return i\n        elif i == 45:\n            return i\n        elif i == 46:\n            return i\n        elif i == 47:\n            return i\n        elif i == 48:\n            return i\n        elif i == 49:\n            return i\n        elif i == 50:\n            return i\n        elif i == 51:\n            return i\n        elif i == 52:\n            return i\n        elif i == 53:\n            return i\n        elif i == 54:\n            return i\n        elif i == 55:\n            return i\n        elif i == 56:\n            return i\n        elif i == 57:\n            return i\n        elif i == 58:\n            return i\n        elif i == 59:\n            return i\n        elif i == 60:\n            return i\n        elif i == 61:\n            return i\n        elif i == 62:\n            return i\n        elif i == 63:\n            return i\n        elif i == 64:\n            return i\n        elif i == 65:\n            return i\n        elif i == 66:\n            return i\n        elif i == 67:\n            return i\n        elif i == 68:\n            return i\n        elif i == 69:\n            return i\n        elif i == 70:\n            return i\n        elif i == 71:\n            return i\n        "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes a number as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest <= n: \n        highest <<= 1\n    return highest >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1 << (n - 1).bit_length()"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(1, n+1):\n        if i & (i-1) == 0:\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 1:\n        return 1\n    \n    highest_power_of_2 = 1\n    while highest_power_of_2 * highest_power_of_2 <= n:\n        highest_power_of_2 *= 2\n        \n    return highest_power_of_2 - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n and returns the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        power += 1\n        n = n >> 1\n    return power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2 \n    elif n == 1: \n        return 1 \n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th lucas number is\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 1\n    else: \n        lucas = find_lucas(n-1) + find_lucas(n-2)\n        return lucas\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th Lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # base case: if n is 0 or 1, return 2\n    if n == 0 or n == 1:\n        return 2\n\n    # initialize the first two lucas numbers\n    lucas1 = 2\n    lucas2 = 1\n\n    # compute the next lucas number until n is reached\n    for i in range(2, n+1):\n        # compute the next lucas number\n        lucas3 = lucas1 + lucas2\n\n        # update the values for the next iteration\n        lucas1 = lucas2\n        lucas2 = lucas3\n\n    return lucas2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = [string.format(x) for x in list_]\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(lst, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in lst]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Parameters:\n    list_ (list): A list of items to format.\n    string (str): A format string that will be applied to each element in the list.\n\n    Returns:\n    A formatted list with each element replaced with the result of applying the string format to that element.\n    \"\"\"\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        for j in range(len(l2)):\n            d[l1[i]][l2[j]] = l3[i][j]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Define the dictionary to store the nested data\n    nested_dict = {}\n    # Loop through each list\n    for i in range(len(l1)):\n        # Append each list element as a new key in the dictionary\n        nested_dict[l1[i]] = l2[i]\n        # If the list has three elements, append it as a new key in the dictionary\n        if len(l3) > 0 and len(l3) == len(l2):\n            nested_dict[l1[i]][l3[i]] = l3[i]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i, lst in enumerate(lists):\n        for j, item in enumerate(lst):\n            if j not in result:\n                result[j] = {}\n            result[j][i] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the final result\n    result_dict = {}\n    \n    # Loop through each list and add its items to the dictionary\n    for i in range(len(l1)):\n        result_dict[l1[i]] = l2[i]\n        result_dict[l1[i]][l3[i]] = l3[i]\n        \n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n\n    # Create a nested dictionary to store the converted data\n    data = {}\n\n    # Loop through each list and append its elements to the nested dictionary\n    for i in range(len(l1)):\n        data[l1[i]] = {}\n        data[l1[i]][l2[i]] = l3[i]\n\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the final result\n    result = {}\n    \n    # Loop through each list and add its items to the result dictionary\n    for item in l1:\n        result[item] = l2[l1.index(item)]\n    \n    # Loop through each list and add its items to the result dictionary\n    for item in l3:\n        result[item] = l2[l3.index(item)]\n        \n    # Return the final result\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the final result\n    result = {}\n    \n    # Loop through each list and add the items to the dictionary\n    for item in l1:\n        result[item] = l2.pop()\n    for item in l2:\n        result[item] = l3.pop()\n    for item in l3:\n        result[item] = l1.pop()\n    \n    # Return the final dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        temp = {}\n        temp[l1[i]] = l2[i]\n        temp[l3[i]] = l2[i]\n        result[l1[i]] = temp\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*lists):\n    result = {}\n    for lst in lists:\n        for item in lst:\n            if isinstance(item, list):\n                # nested list\n                if item[0] in result:\n                    # item is a key in the result\n                    result[item[0]].append(item[1])\n                else:\n                    # create new sub-dict\n                    result[item[0]] = [item[1]]\n            else:\n                # non-nested item\n                if item in result:\n                    # item is a key in the result\n                    result[item] = result[item] + 1\n                else:\n                    # create new sub-dict\n                    result[item] = 1\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the final result\n    result = {}\n\n    # Iterate over each list and add its elements as keys to the result dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n\n    if n == 5:\n        return 15\n\n    if n == 6:\n        return 21\n\n    if n == 7:\n        return 28\n\n    if n == 8:\n        return 36\n\n    if n == 9:\n        return 45\n\n    if n == 10:\n        return 55\n\n    if n == 11:\n        return 66\n\n    if n == 12:\n        return 78\n\n    if n == 13:\n        return 91\n\n    if n == 14:\n        return 105\n\n    if n == 15:\n        return 120\n\n    if n == 16:\n        return 136\n\n    if n == 17:\n        return 153\n\n    if n == 18:\n        return 171\n\n    if n == 19:\n        return 190\n\n    if n == 20:\n        return 210\n\n    if n == 21:\n        return 231\n\n    if n == 22:\n        return 253\n\n    if n == 23:\n        return 276\n\n    if n == 24:\n        return 300\n\n    if n == 25:\n        return 325\n\n    if n == 26:\n        return 351\n\n    if n == 27:\n        return 378\n\n    if n == 28:\n        return 406\n\n    if n == 29:\n        return 435\n\n    if n == 30:\n        return 465\n\n    if n == 31:\n        return 496\n\n    if n == 32:\n        return 528\n\n    if n == 33:\n        return 561\n\n    if n == 34:\n        return 595\n\n    if n == 35:\n        return 630\n\n    if n == 36:\n        return 666\n\n    if n == 37:\n        return 703\n\n    if n == 38:\n        return 741\n\n    if n == 39:\n        return 780\n\n    if n == 40:\n        return 820\n\n    if n == 41:\n        return 861\n\n    if n == 42:\n        return 903\n\n    if n == 43:\n        return 946\n\n    if n == 44:\n        return 990\n\n    if n == 45:\n        return 1035\n\n    if n == 46:\n        return 1081\n\n    if n == 47:\n        return 1128\n\n    if n == 48:\n        return 1176\n\n    if n == 49:\n        return 1225\n\n    if n == 50:\n        return 1275\n\n    if n == 51:\n        return 1326\n\n    if n == 52:\n        return 1378\n\n    if n == 53:\n        return 1431\n\n    if n == 54:\n        return 1485\n\n    if n == 55:\n        return 1540\n\n    if n == 56:\n        return 1596\n\n    if n == 57:\n        return 1653\n\n    if n == 58:\n        return 1711\n\n    if n == 59:\n        return 1770\n\n    if n == 60:\n        return 1830\n\n    if n == 61:\n        return 1891\n\n    if n == 62:\n        return 1953\n\n    if n == 63:\n        return 2016\n\n    if n == 64:\n        return 2080\n\n    if n == 65:\n        return 2145\n\n    if n == 66:\n        return 2211\n\n    if n == 67:\n        return 2278\n\n    if n == 68:\n        return 2346\n\n    if n == 69:\n        return 2415\n\n    if n == 70:\n        return 248"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n    elif n == 2:\n        return n * 2\n    elif n == 3:\n        return n * 3\n    elif n == 4:\n        return n * 4\n    elif n == 5:\n        return n * 5\n    else:\n        return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return n\n    elif n == 2:\n        return n*2\n    elif n % 2 == 0:\n        return get_max_sum(n//2) + n\n    else:\n        return max(get_max_sum(n//2) + n, get_max_sum(n//3) + n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    def get_sum(n, i):\n        if i == 1:\n            return n\n        return get_sum(n, i - 1) + i\n\n    def get_f(n):\n        return get_sum(n, 5) - get_sum(n, 4) - get_sum(n, 3) - get_sum(n, 2) - get_sum(n, 1)\n\n    return max(get_f(n) + n, get_max_sum(n // 2))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    def f(n):\n        return max(f(n // 2) + f(n // 3) + f(n // 4) + f(n // 5), n)\n\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    max_sum = 0\n    \n    for i in range(1, int(n/2)+1):\n        max_sum += i\n    \n    for i in range(2, int(n/3)+1):\n        max_sum += i\n        \n    for i in range(3, int(n/4)+1):\n        max_sum += i\n        \n    for i in range(4, int(n/5)+1):\n        max_sum += i\n        \n    max_sum += n\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 1:\n            return 1\n        else:\n            return f(n//2) + f(n//3) + f(n//4) + f(n//5) + n\n    \n    if n < 1:\n        return None\n    \n    max_sum = f(n)\n    \n    for i in range(n, 1, -1):\n        if f(i) > max_sum:\n            max_sum = f(i)\n    \n    return max_sum"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]\n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            max_list.append(element)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for num in input_list:\n        if len(num) > max_length:\n            max_length = len(num)\n            max_list = [num]\n        elif len(num) == max_length:\n            max_list.append(num)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    result_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result_list = []\n        elif len(item) == max_length:\n            result_list.append(item)\n\n    return result_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes in a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_set = set(test_tup)\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store unique values of the tuple\n    unique_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        # If the length is equal, then all values are distinct\n        return True\n    else:\n        # If the length is not equal, then there are duplicates\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set from the tuple to check for duplicates\n    set_from_tup = set(test_tup)\n    # Check if the set has any elements\n    if len(set_from_tup) == len(test_tup):\n        # If set is empty, then all elements are distinct\n        return True\n    else:\n        # If set is not empty, then all elements are duplicates\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # initialize an empty set to store unique elements\n    unique_set = set()\n\n    # iterate over the tuple elements\n    for element in test_tup:\n        # if the element is not already in the set, add it to the set\n        if element not in unique_set:\n            unique_set.add(element)\n\n    # if the size of the set is equal to the length of the tuple,\n    # the tuple contains no duplicates\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Use a set to keep track of unique values\n    unique_set = set(test_tup)\n    \n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_set = set(test_tup)\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Loop through the dictionary and return the first character that appears only once\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    # If no character appears only once, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Returns the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}  # Dictionary to store character count\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n            \n    return None  # If no non-repeating character is found, return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(string):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    char_frequency = {}\n    for char in string:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n    \n    # find the first non-repeating character\n    for char in string:\n        if char_frequency[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store unique characters and their frequency\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # find the first non-repeating character\n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    first_non_repeating_char = None\n    \n    # Iterate through the string and add each character to the set\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n            if first_non_repeating_char is None:\n                first_non_repeating_char = char\n                \n    return first_non_repeating_char"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is None:\n        return False\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    This function checks whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # sort the three numbers\n    sorted_numbers = sorted([a,b,c])\n    \n    # calculate the median\n    middle = len(sorted_numbers)//2\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[middle-1] + sorted_numbers[middle]) / 2\n    else:\n        median = sorted_numbers[middle]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    # sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # calculate the length of the sorted list\n    length = len(sorted_list)\n\n    # find the middle index of the sorted list\n    middle = length // 2\n\n    # check if the length of the sorted list is odd\n    if length % 2 == 1:\n        # return the middle element of the sorted list\n        return sorted_list[middle]\n    else:\n        # return the average of the middle two elements of the sorted list\n        return (sorted_list[middle-1] + sorted_list[middle]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2-1] + sorted_numbers[n//2]) / 2\n    else:\n        median = sorted_numbers[n//2]\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    mid = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    else:\n        median = sorted_numbers[mid]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    # Sorting the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # If the list has an odd number of elements, the median is the middle element\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[len(sorted_list)//2 - 1] + sorted_list[len(sorted_list)//2])/2\n    else:\n        median = sorted_list[len(sorted_list)//2]\n\n    # Returning the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    length = len(sorted_numbers)\n    if length % 2 == 0:\n        # Find the average of the two middle numbers\n        middle = length // 2\n        median = (sorted_numbers[middle - 1] + sorted_numbers[middle]) / 2\n    else:\n        # Find the middle number\n        middle = length // 2\n        median = sorted_numbers[middle]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the median\n    n = len(numbers)\n    if n % 2 == 0:\n        median = (numbers[n // 2 - 1] + numbers[n // 2]) / 2\n    else:\n        median = numbers[n // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the median\n    mid = len(sorted_list) // 2\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        median = sorted_list[mid]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Calculates the median of three numbers using the Quickselect algorithm.\n    \"\"\"\n    pivot = min(a, b, c)\n    left = [num for num in [a, b, c] if num < pivot]\n    middle = [num for num in [a, b, c] if num == pivot]\n    right = [num for num in [a, b, c] if num > pivot]\n\n    if len(left) == len(middle) == len(right) == 0:\n        raise ValueError(\"There are no elements in the list that are smaller than or equal to the pivot.\")\n    elif len(left) == len(middle) == len(right) == 1:\n        return middle[0]\n    else:\n        return median_numbers(left[0], middle[0], right[0])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        sum_list.append(sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits\n    sum_of_digits_list = []\n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and convert each character to an integer\n        digits = [int(digit) for digit in str(num)]\n        # Compute the sum of the digits and append it to the list\n        sum_of_digits_list.append(sum(digits))\n    # Return the list of sums of digits\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            digit = num % 10\n            temp += digit\n            num //= 10\n        digit_sum += temp\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_list.append(sum(int(d) for d in str(num)))\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        total_sum += digits_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        temp_sum = 0\n        while num > 0:\n            temp_sum += num % 10\n            num //= 10\n        digit_sum += temp_sum\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(d) for d in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(d) for d in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        # convert the number to a string and split it into its digits\n        digits = [int(d) for d in str(num)]\n        # sum up the digits\n        digit_sum += sum(digits)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        # convert the number to string and split it into individual digits\n        digits = [int(digit) for digit in str(num)]\n        # add up the digits and add it to the running sum\n        sum_of_digits += sum(digits)\n    return sum_of_digits"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    for i in range(len(test_tup1), len(test_tup2)):\n        result.append(test_tup2[i])\n    for i in range(len(test_tup2), len(test_tup1)):\n        result.append(test_tup1[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples must be of the same length.\")\n        return None\n\n    # Perform the bitwise xor operation across the tuples\n    xor_result = []\n    for i in range(len(test_tup1)):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n\n    # Return the result as a tuple\n    return tuple(xor_result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Initialize a variable to hold the result of the bitwise xor operation\n    result = 0\n    # Iterate over the tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation for the current tuple and the result\n        result = result ^ test_tup1[i] ^ test_tup2[i]\n    # Return the result of the bitwise xor operation\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] ^ test_tup2[i]),)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple with a length equal to the longest tuple\n    result_tup = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1], test_tup1[2] ^ test_tup2[2])\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Initialize the result tuple with zeros\n    result = tuple(0 for _ in range(len(test_tup1)))\n    \n    # Perform the bitwise xor operation across each pair of elements\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] ^ test_tup2[i]\n        \n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for i in test_list:\n        for j in i:\n            unique_tuples.add((i, j))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if tuple(item) not in freq:\n            freq[tuple(item)] = 1\n        else:\n            freq[tuple(item)] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list as input and returns the number of unique tuples in the list.\n    \"\"\"\n    # Create a set to store unique tuples\n    unique_tuples = set()\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Add the tuple to the set if it's not already there\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n\n    # Return the length of the set (which is the number of unique tuples)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Convert the list to set to get unique tuples\n    unique_set = set(test_list)\n    # Get the length of the set to get the frequency of tuples\n    freq = len(unique_set)\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    from collections import Counter\n\n    # Convert the list to a set to remove duplicates\n    unique_tuples = set(test_list)\n\n    # Count the frequency of each unique tuple\n    count = Counter(unique_tuples)\n\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Create a set to store unique tuples\n    unique_tuples = set()\n\n    # Iterate through the list and add each unique tuple to the set\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n\n    # Return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    # Create a set of all tuples in the list\n    all_tuples = set(tuple(i) for i in test_list)\n    # Count the number of unique tuples\n    unique_tuples = len(all_tuples)\n    return unique_tuples"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_list.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result_list.append(test_tup1[i] + test_tup2[i])\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # initialize an empty result tuple\n    result_tup = ()\n\n    # iterate through both tuples\n    for i in range(len(test_tup1)):\n        # append the sum of the corresponding elements to the result tuple\n        result_tup += (test_tup1[i] + test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The number of elements in the first tuple is not equal to the number of elements in the second tuple.\")\n        return None\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples do not have the same number of elements.\")\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] + test_tup2[i])\n        return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i], )\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # loop through each element of the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the corresponding elements of the two tuples\n            test_tup1[i][j] += test_tup2[i][j]\n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initializing result list\n    result = []\n\n    # iterating over both tuples and adding corresponding elements\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            result.append(test_tup1[i] + test_tup2[i])\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(row)\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of those numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function takes in two numbers as input and returns their minimum.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two parameters, tuplex and tuple1.\n    tuplex is a tuple containing elements to be searched for in tuple1.\n    tuple1 is a tuple containing elements that are being searched for in tuplex.\n    The function returns a boolean value indicating whether any of the elements in tuplex exist in tuple1.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            print(f\"{element} found in the tuple\")\n        else:\n            print(f\"{element} not found in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if the parity of the number is odd and False if the parity is even.\n    '''\n    if x%2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer x as input and returns True if x is odd, and False if it is even.\n    '''\n    if x%2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    for i in range(1,x):\n        if(x%i==0):\n            parity = 1\n            break\n    if(parity == 0):\n        print(\"The given number is odd.\")\n    else:\n        print(\"The given number is even.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0: \n        print(x, \"is even\")\n    else: \n        print(x, \"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Convert the number to a string and count the number of '1' characters\n    count = sum(c=='1' for c in str(x))\n    # Return 'True' if count is odd, else 'False'\n    return count % 2 == 1"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False \n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x%2==0:\n        print(x,\"is even\")\n    else:\n        print(x,\"is odd\")"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Reverse the string\n    reversed_num_str = num_str[::-1]\n    # Find the length of the reversed string\n    length = len(reversed_num_str)\n    # Check if the number is already the biggest number\n    if int(reversed_num_str) < 10**length:\n        return n\n    # Find the index of the first digit that needs to be swapped with the next digit\n    for i in range(length-1):\n        if reversed_num_str[i] < reversed_num_str[i+1]:\n            break\n    # Swap the first digit with the next digit\n    next_bigger = int(reversed_num_str[i])\n    next_bigger_str = str(next_bigger)\n    for i in range(len(num_str)):\n        if num_str[i] == reversed_num_str[i]:\n            num_str[i] = next_bigger_str[i]\n    # Convert the swapped string back to an integer\n    next_bigger = int(''.join(num_str))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string and reverse it\n    reverse_num = n[::-1]\n    # Initialize the next bigger number with zeros\n    next_bigger = '0' * len(reverse_num)\n    # Check if the reversed number is a palindrome\n    is_palindrome = reverse_num == reverse_num[::-1]\n    # Iterate through the digits of the reversed number and find the next bigger number\n    for i in range(len(reverse_num)):\n        # If the current digit is odd, add 1 to the next bigger number\n        if reverse_num[i] % 2 == 1:\n            next_bigger = str(int(next_bigger) + 1)\n        # If the current digit is even, add 10 to the next bigger number\n        else:\n            next_bigger = str(int(next_bigger) + 10)\n        # If the next bigger number becomes greater than the reversed number, exit the loop\n        if int(next_bigger) > int(reverse_num):\n            break\n    # Convert the next bigger number to an integer and return it\n    return int(next_bigger)\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    digits.sort(reverse=True)\n    result = [0] * len(digits)\n    for i, digit in enumerate(digits):\n        if digit + 1 < 10:\n            result[i] = digit + 1\n            break\n        else:\n            result[i] = 0\n    return int(''.join(map(str, result)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a list of digits\n    digits = list(str(n))\n    # Find the maximum digit in the list\n    max_digit = max(digits)\n    # Find the index of the maximum digit\n    max_digit_index = digits.index(max_digit)\n    # Swap the digits with the maximum digit to the left and right of it\n    digits[max_digit_index], digits[-1] = digits[-1], digits[max_digit_index]\n    # Convert the list of digits back to a number and return it\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Reverse the string\n    rev_num_str = num_str[::-1]\n\n    # Split the string into two parts, the first part will have the digits of the original number,\n    # and the second part will have the digits of the next bigger number\n    num_parts = [rev_num_str[i] for i in range(len(rev_num_str))]\n    next_bigger_parts = [rev_num_str[i] for i in range(len(rev_num_str)-1, -1, -1)]\n\n    # Combine the two parts into a new string\n    result_str = ''.join(num_parts + next_bigger_parts)\n\n    # Convert the result string back to an integer and return it\n    return int(result_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    digits.sort()\n    digits.reverse()\n\n    for i in range(len(digits)):\n        if digits[i] < 9:\n            digits[i] += 1\n            break\n\n    bigger = int(''.join(str(d) for d in digits))\n\n    return bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    new_digits = [digits.pop(i) for i in range(len(digits))]\n    return int(''.join(new_digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number into a string\n    num_str = str(n)\n    # get the length of the number\n    num_len = len(num_str)\n    # create a list of digits in the number\n    num_list = list(num_str)\n    # sort the digits in decreasing order\n    num_list.sort(reverse=True)\n    # create a new number with the digits in the sorted order\n    new_num = int(''.join(num_list))\n    # return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # create a set of digits for the given number\n    digits = set(str(n))\n\n    # initialize a variable to keep track of the digits in the next bigger number\n    bigger_digits = []\n\n    # initialize a variable to keep track of the digits in the current number\n    current_digits = list(digits)\n\n    # loop through the digits of the given number in reverse order\n    for digit in reversed(digits):\n        # if the digit has already appeared in the current number, skip it\n        if digit in current_digits:\n            continue\n\n        # add the digit to the bigger digits\n        bigger_digits.append(digit)\n\n        # add the remaining digits to the current digits\n        current_digits.extend(digits.difference(set(bigger_digits)))\n\n        # break out of the loop if the current number is already the maximum possible number\n        if current_digits == ['0'] * len(current_digits):\n            break\n\n    # concatenate the digits in the current number in reverse order\n    result = ''.join(reversed(current_digits))\n\n    # return the next bigger number as a string\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    max_digit = max(digits)\n    for i in range(max_digit, 10):\n        if digits.count(i) == len(digits):\n            digits[digits.index(max_digit)] = i\n            new_n = int(\"\".join(str(d) for d in digits))\n            if new_n > n:\n                return new_n\n    return None"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the lists to sets to remove duplicates\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n    \n    # Create a heap of pairs (distance, (index1, index2))\n    min_heap = []\n    for index1 in range(len(nums1)):\n        for index2 in range(len(nums2)):\n            distance = abs(index1 - index2)\n            pair = (distance, (index1, index2))\n            heapq.heappush(min_heap, pair)\n    \n    # Initialize the result list\n    result = []\n    \n    # Keep track of the number of pairs found so far\n    count = 0\n    \n    # Return the result list\n    while count < k and min_heap:\n        # Pop the minimum distance pair from the heap\n        distance, pair = heapq.heappop(min_heap)\n        \n        # Check if the count is less than k\n        if count < k:\n            # Add the pair to the result list\n            result.append(pair)\n            count += 1\n            \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the first array and find the length of the smallest subarray\n    nums1.sort()\n    n = len(nums1)\n    smallest_subarray_length = nums1[n-1] - nums1[0]\n\n    # Initialize a min heap of size k for the second array\n    heap = []\n    for num in nums2:\n        heapq.heappush(heap, num)\n\n    # Initialize a list to store the result\n    result = []\n\n    # Iterate through the first array\n    for i in range(n-k+1):\n        # Find the smallest element from the second array which is greater than or equal to the current element of the first array\n        smallest_element_from_second_array = heapq.heappop(heap)\n        # If the length of the current smallest subarray is equal to the length of the smallest subarray, we have found k pairs\n        if i + smallest_subarray_length == smallest_element_from_second_array:\n            result.append([nums1[i], smallest_element_from_second_array])\n            if len(result) == k:\n                break\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n\n    # create a min heap with all the elements from both arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (min(num1, num2), (num1, num2)))\n\n    # find k smallest pairs\n    result = []\n    while k > 0:\n        _, (num1, num2) = heapq.heappop(min_heap)\n        result.append((num1, num2))\n        k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the input arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize the min-heap\n    min_heap = []\n\n    # Initialize the result list\n    result = []\n\n    # Loop through the first array\n    for i in range(len(nums1)):\n        # Find the maximum value in the second array that is less than or equal to the current element from the first array\n        j = bisect_left(nums2, nums1[i])\n\n        # If the current element from the first array is greater than or equal to the maximum value in the second array, then there is no pair of elements with the given value in the second array\n        if j == len(nums2):\n            continue\n\n        # If the result list is not full and the current element from the first array is less than the smallest element in the min-heap or if the current element from the first array is equal to the smallest element in the min-heap, then add the pair to the result list\n        if len(result) < k or nums1[i] < min_heap[0][0]:\n            heapq.heappush(min_heap, (nums1[i], j))\n\n        # If the result list is not full and the current element from the first array is greater than or equal to the smallest element in the min-heap, then pop the minimum element from the min-heap and add the pair to the result list\n        elif nums1[i] == min_heap[0][0]:\n            heapq.heappushpop(min_heap, (nums1[i], j))\n\n        # If the result list is full and the current element from the first array is greater than or equal to the smallest element in the min-heap, then pop the minimum element from the min-heap and add the pair to the result list\n        elif nums1[i] > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (nums1[i], j))\n\n    # Return the result list\n    return result\n\ndef bisect_left(arr, x):\n    '''\n    Binary search for the leftmost element that is greater than or equal to x in arr.\n    '''\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min-heap to store the pairs of elements from the first and second arrays\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (nums1[i], nums2[j]))\n            elif nums1[i] > min_heap[0][0] or nums2[j] > min_heap[0][1]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (nums1[i], nums2[j]))\n\n    # Extract the k smallest pairs from the min-heap and return them as a list of tuples\n    return [heapq.heappop(min_heap) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a list of tuples (nums1[i], nums2[j])\n    pairs = [(nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2)) if i!= j]\n\n    # Sort the list in ascending order of the first element of each tuple\n    pairs.sort()\n\n    # Initialize a min heap with the first k elements of the sorted pairs\n    min_heap = []\n    for i in range(k):\n        heapq.heappush(min_heap, pairs[i])\n\n    # Initialize two variables to store the pairs of smallest elements\n    result = []\n    i, j = 0, 0\n\n    # Traverse the sorted pairs and find the k smallest pairs\n    while len(min_heap) > 0:\n        # Find the pair of smallest elements in the min heap\n        smallest = heapq.heappop(min_heap)\n        result.append(smallest)\n\n        # Update the min heap if the number of elements in the min heap is less than k\n        if len(min_heap) < k:\n            # Find the pair of smallest elements which are greater than the smallest element in the min heap\n            for i in range(len(pairs)):\n                if pairs[i][0] > smallest[0]:\n                    # Add the pair to the min heap\n                    heapq.heappush(min_heap, pairs[i])\n                    break\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    pairs = []\n    heap1 = []\n    heap2 = []\n    for num in nums1:\n        heappush(heap1, -num)\n    for num in nums2:\n        heappush(heap2, -num)\n    while k > 0 and heap1 and heap2:\n        diff1 = -heap1[0]\n        diff2 = -heap2[0]\n        if diff1 <= diff2:\n            pairs.append((diff1, -heap1[0]))\n            if len(pairs) == k:\n                break\n            heappush(heap1, -heap1[0])\n        else:\n            pairs.append((diff2, -heap2[0]))\n            if len(pairs) == k:\n                break\n            heappush(heap2, -heap2[0])\n        k -= 1\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    for num in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num, num2))\n            elif (num, num2) < heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (num, num2))\n    return [heapq.heappop(heap) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            if pair not in min_heap:\n                heapq.heappush(min_heap, pair)\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # sort the two arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    # initialize a list to store the pairs\n    pairs = []\n\n    # initialize two pointers to start searching for the pairs\n    i = 0\n    j = 0\n\n    # loop till we have found k pairs\n    while len(pairs) < k:\n\n        # calculate the sum of the current pair\n        current_sum = nums1[i] + nums2[j]\n\n        # if the sum is greater than or equal to the target, update the pointers and add the pair to the list\n        if current_sum >= k:\n            j -= 1\n        else:\n            pairs.append((nums1[i], nums2[j]))\n            i += 1\n\n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to keep track of the minimum product and the index of the minimum product\n    min_product = float('inf')\n    min_product_index = 0\n    \n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each other tuple in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and compare it to the current minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                # If the product is smaller than the current minimum product, update the minimum product and its index\n                min_product = product\n                min_product_index = (i, j)\n    \n    # Return the minimum product and its index\n    return min_product, min_product_index"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # initialize a variable to store the minimum product\n    min_product = float('inf')\n    \n    # iterate through the list of tuples\n    for tup1, tup2 in zip(list1, list1[1:]):\n        # calculate the product of the tuples\n        product = tup1[0] * tup2[1]\n        # update the minimum product if the current product is smaller than the current minimum product\n        if product < min_product:\n            min_product = product\n    \n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_value = float('inf')\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_value = min(list1[i], list1[j])\n    \n    return min_value, min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples and finds the minimum product of the pairs of tuples in the list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if (list1[i][1] * list1[j][1]) < min_product:\n                min_product = (list1[i][1] * list1[j][1])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables for minimum and maximum values\n    min_val = float('inf')\n    max_val = float('-inf')\n    \n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        # Get the current tuple\n        curr_tuple = list1[i]\n        \n        # Iterate through each element in the tuple\n        for j in range(len(curr_tuple)):\n            # Get the current element\n            curr_elem = curr_tuple[j]\n            \n            # Update the minimum and maximum values\n            min_val = min(min_val, curr_elem)\n            max_val = max(max_val, curr_elem)\n    \n    # Calculate the minimum and maximum values\n    min_sum = min_val * max_val\n    \n    # Iterate through the list again to find the minimum product\n    min_product = float('inf')\n    for i in range(len(list1)):\n        curr_tuple = list1[i]\n        for j in range(len(curr_tuple)):\n            curr_elem = curr_tuple[j]\n            curr_product = curr_elem * min_sum\n            min_product = min(min_product, curr_product)\n    \n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a list of values as input and returns the minimum value.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize min_val to the first element in the list\n    min_val = listval[0]\n\n    # Iterate through the remaining elements in the list\n    for i in range(1, len(listval)):\n        # Check if the current element is smaller than the current minimum value\n        if listval[i] < min_val:\n            # Update min_val to the current element\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(lst):\n    '''\n    This function takes in a heterogeneous list and returns the minimum value in the list.\n    '''\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        minval = listval[0]\n        for i in range(1,len(listval)):\n            if listval[i] < minval:\n                minval = listval[i]\n        return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize the minimum value to the first value in the list\n    min_val = listval[0]\n    # Loop through the rest of the list, checking each value against the minimum\n    for val in listval[1:]:\n        if val < min_val:\n            # If the current value is less than the minimum, update the minimum\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(lst):\n    '''\n    This function takes a list as input and returns the minimum value in the list.\n    '''\n    min_val = lst[0]\n    for i in lst:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:  # If the list is empty\n        return None\n    elif type(listval[0]) == int:  # If the first element is an integer\n        return min(listval)\n    elif type(listval[0]) == str:  # If the first element is a string\n        return min(listval, key=len)  # Use the key parameter to sort by length of the string\n    else:\n        raise TypeError(\"Invalid input type\")"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        minval = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < minval:\n                minval = listval[i]\n        return minval"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # Convert all words to lowercase\n    word = word.lower()\n    # Split the string by underscore\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Capitalize the first letter of each word\n    camel_word = words[0]\n    for i in range(1, len(words)):\n        camel_word += words[i][0].upper() + words[i][1:]\n    # Convert the camel case string to upper case\n    return camel_word.upper()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n\n    Parameters:\n    word (str): snake case string to convert\n\n    Returns:\n    str: camel case string\n    '''\n\n    # convert snake case to camel case\n    camel_case = re.sub('_(.)', lambda match: match.group(1).upper(), word)\n\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    # Split the word into words\n    words = re.findall(r'\\w+', word)\n\n    # Convert the first word to capital letter\n    first_word = words[0].capitalize()\n\n    # Convert the rest of the words to camel case\n    camel_case = ''.join(w.capitalize() for w in words[1:])\n\n    # Combine the first word and camel case words to form the final string\n    final_string = first_word + camel_case\n\n    return final_string\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words based on underscores\n    words = re.findall(r'(?<=_)([A-Za-z]+)', word)\n    # Capitalize the first word and join the words with camel case\n    camel_word = words[0]\n    for word in words[1:]:\n        camel_word += word.capitalize()\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by underscore\n    words = word.split('_')\n    # Capitalize the first word and append it to the list\n    camel_case_words = [words[0].capitalize()]\n    # Loop through the rest of the words and capitalize each word and append it to the list\n    for word in words[1:]:\n        camel_case_words.append(word.capitalize())\n    # Join the camel case words back into a string\n    camel_case_word = ''.join(camel_case_words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to snake case\n    snake_word = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    # Capitalize the first letter of the camel case string\n    camel_word = snake_word[0].upper() + snake_word[1:]\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Capitalize the first letter of each word except the first one\n    result = [word.capitalize() if i > 0 else word for i, word in enumerate(words)]\n    return ''.join(result)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Split the snake case string into words\n    words = re.findall(r'\\b\\w+\\b', word)\n    \n    # Convert the first word to uppercase and rest to lowercase\n    camel_word = words[0].capitalize() + words[1:]\n    \n    # Join the camel case words back into a string\n    camel_string = ''.join(camel_word)\n    \n    return camel_string"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # convert the word to camel case\n    camel_case = re.sub('_(.?)', lambda m: m.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    camel_case = \"\"\n\n    for char in word:\n        if char.isupper():\n            camel_case += char\n        else:\n            camel_case += char.upper()\n\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i % 2 == 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for num in l:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples as input and returns the nth element from the list.\n\n    Args:\n    list1 (list): A list of tuples.\n    n (int): An integer that represents the position of the nth element from the list.\n\n    Returns:\n    The nth element from the list.\n    '''\n\n    # Convert the list of tuples into a list of lists\n    list2 = []\n    for item in list1:\n        list2.append([item])\n\n    # Convert the list of lists into a list of tuples\n    list3 = []\n    for item in list2:\n        list3.append(tuple(item))\n\n    # Return the nth element from the list of tuples\n    return list3[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n\n    Args:\n        list1 (list): list of tuples\n        n (int): index of the element to be extracted\n\n    Returns:\n        The nth element of the given list.\n    \"\"\"\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1][1]\n    except IndexError:\n        return \"Index out of range\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, list) and isinstance(n, int) and n > 0:\n        if len(list1) > n:\n            return list1[n-1]\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError(\"Input should be a list of tuples.\")\n    if not isinstance(n, int):\n        raise TypeError(\"Second argument should be an integer.\")\n    if n < 0:\n        raise ValueError(\"Second argument should be a non-negative integer.\")\n    if n >= len(list1):\n        raise ValueError(\"Second argument should be less than the length of the list.\")\n    return list1[n][1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check if there is any overlapping value between two lists.\n\n    :param list1: list of integers or strings\n    :param list2: list of integers or strings\n    :return: True if there is any overlapping value, False otherwise\n    \"\"\"\n\n    # Create a set of all values from both lists\n    all_values = set(list1 + list2)\n\n    # Check if there are any overlapping values\n    return any(len(list(set(list1) & set(list2))) > 0 for _ in all_values)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    # Create a set of the first sequence to remove duplicates\n    set1 = set(list1)\n    # Loop through the second sequence and check if each value is in the set of first sequence\n    for item in list2:\n        if item in set1:\n            return True\n    # If no value is found in the set, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and returns True if there is any value in the first sequence that is also present in the second sequence.\n    It returns False otherwise.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # initialize a set for storing the values in list1\n    set1 = set(list1)\n    # iterate over list2 and check if any value exists in set1\n    for item in list2:\n        if item in set1:\n            return True\n    # if we reach here, no value in list2 exists in list1\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n            \n        if i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n            \n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    # Initialize two variables to store the maximum and minimum values \n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # Iterate through the array and calculate the maximum and minimum values \n    for num in arr: \n        if num > max_product: \n            max_product = num \n        elif num < min_product: \n            min_product = num \n\n    # Return the pair with the highest product \n    return max_product, min_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max(max1 * max2, max2 * max1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_product_pair = []\n    \n    # iterate through the array and find the max product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = [arr[i], arr[j]]\n\n    # return the max product pair\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple of two integers\n    representing the two highest numbers in the array.\n    \"\"\"\n    # Initialize two variables to store the two highest numbers\n    max1, max2 = float('-inf'), float('-inf')\n    # Loop through the array and update max1 and max2 as needed\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    # Return a tuple containing the two highest numbers\n    return max1, max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple of the indices of the two elements in the array\n    that have the highest product when multiplied together. If there are multiple pairs with the same highest product,\n    it returns the pair with the smaller index in the array.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    max_product = max(max1*max2, min1*min2)\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] > min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] > min2:\n            min2 = arr[i]\n        current_product = max1*max2\n        if current_product > max_product:\n            max_product = current_product\n    return (arr.index(max1), arr.index(max2))\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_pair = (0, 0)\n    min_pair = (float('inf'), float('inf'))\n    \n    for num in arr:\n        if num > max_pair[0]:\n            max_pair = (num, max_pair[0])\n            \n        if num < min_pair[1]:\n            min_pair = (min_pair[1], num)\n            \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize two variables to store the maximum and minimum value of the array\n    max_val = arr[0]\n    min_val = arr[0]\n\n    # Iterate over the array to find the maximum and minimum value\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n\n    # Find the product of the maximum and minimum value\n    max_product = max_val * min_val\n\n    # Initialize the maximum and minimum product variables\n    max_product_pair = max_product\n\n    # Iterate over the array again to find the pair with the highest product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = (arr[i], arr[j])\n\n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple containing the two maximum\n    products found in the array. If there are multiple pairs with the same maximum product, the function\n    returns all of them in a list. If there are no pairs with the same maximum product, the function\n    returns None.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = None\n    min_product = float('inf')\n    min_pair = None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n            elif product == max_product and arr[i] > max_pair[0]:\n                max_pair = (arr[i], arr[j])\n            elif product == max_product and arr[j] > max_pair[1]:\n                max_pair = (arr[j], arr[i])\n\n            if product < min_product:\n                min_product = product\n                min_pair = (arr[i], arr[j])\n            elif product == min_product and arr[i] < min_pair[0]:\n                min_pair = (arr[i], arr[j])\n            elif product == min_product and arr[j] < min_pair[1]:\n                min_pair = (arr[j], arr[i])\n\n    if max_pair is None:\n        return None\n    else:\n        return (max_pair[0], max_pair[1], min_pair[0], min_pair[1])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    product1 = max1 * max2\n    product2 = min1 * min2\n\n    if product1 > product2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for tup in Input:\n        if len(common_first_element) == 0:\n            common_first_element.append(tup[0])\n        elif tup[0] in common_first_element:\n            pass\n        else:\n            common_first_element.append(tup[0])\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples where each tuple contains all the common elements of the tuples in the input list.\n    '''\n\n    # Create a set of first elements from the input list of tuples\n    first_elements = set()\n    for item in Input:\n        first_elements.add(item[0])\n\n    # Create a new list to store the common first elements\n    common_elements = []\n\n    # Iterate through the first elements set and find common elements among all the tuples in the input list\n    for item in first_elements:\n        common_elements.append((item, first_elements.intersection(item)))\n\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # To keep track of common first elements\n    common_elements = []\n\n    # Iterate through the input list\n    for tup in Input: \n        # Get the first element of the tuple\n        first_element = tup[0]\n\n        # Check if this element is already in the common elements list\n        if first_element in common_elements: \n            # If yes, then it is a duplicate, so skip it\n            continue\n\n        # If this is the first occurrence of the element, add it to the list\n        else: \n            common_elements.append(first_element)\n\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        if len(common_elements) == 0:\n            common_elements.append(i[0])\n        elif i[0] == common_elements[0]:\n            common_elements.append(i[1])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        else:\n            if tup[0] == common_element:\n                return common_element\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n\n    for tuple_ in Input:\n        if tuple_[0] not in common_elements:\n            common_elements.append(tuple_[0])\n\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_element = None\n    for tup in Input:\n        first_element = tup[0]\n        if common_first_element is None or common_first_element == first_element:\n            common_first_element = first_element\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    # create an empty dictionary to store the tuples and their first element\n    group_dict = {}\n    # loop through the list of tuples and add each tuple to the dictionary with its first element as the key\n    for tup in Input:\n        if tup[0] in group_dict:\n            group_dict[tup[0]].append(tup)\n        else:\n            group_dict[tup[0]] = [tup]\n    # loop through the dictionary and find the first element that appears multiple times\n    for key, value in group_dict.items():\n        if len(value) > 1:\n            return key\n    # if no common element is found, return None\n    return None"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    common_elements = []\n    for tup in Input:\n        if tup[0] not in common_elements:\n            common_elements.append(tup[0])\n    return common_elements\n\nInput = [(1,2), (3,4), (2,3), (5,6), (1,6)]\nprint(group_tuples(Input))"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    \n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an input and returns the element with maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as an argument and returns the element of the list \n    having the maximum length.\n    '''\n\n    # initialize variables to keep track of maximum length and maximum element\n    max_len = 0\n    max_elem = None\n\n    # iterate over the list and update max_len and max_elem\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n\n    # return the maximum element\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an input and returns the element of the list with maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for ele in lst:\n        if len(ele) > max_len:\n            max_len = len(ele)\n            max_ele = ele\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_element = None \n    for i in lst: \n        if len(i) > max_len: \n            max_len = len(i) \n            max_element = i \n    return max_element "
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(lst):\n    \"\"\"\n    This function takes a list of numbers as input and rounds every number and then calculates the sum of the rounded numbers.\n    Finally, it prints the result multiplied by the length of the list.\n    \"\"\"\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total*len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round the numbers in the list\n    rounded_list = [round(num) for num in list1]\n\n    # Calculate the total sum\n    total_sum = sum(rounded_list)\n\n    # Multiply the total sum by the length of the list\n    total_sum_multiplied = total_sum * len(list1)\n\n    # Print the total sum and the length of the list\n    print(total_sum_multiplied)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(lst):\n    '''\n    This function takes a list of numbers as input and rounds every number in the list using the built-in round() function.\n    Then, it prints the total sum of the rounded numbers multiplied by the length of the list.\n    '''\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(x) for x in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    i = 1\n    while i <= n:\n        cube_sum += i ** 3\n        i += 2\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize a variable to store the cube sum\n    cube_sum = 0\n    \n    # Iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of the current number\n        cube = i**3\n        \n        # Add the cube to the cube sum variable\n        cube_sum += cube\n        \n    # Return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1, n+1, 2):\n        sum_cube += i**3\n    return sum_cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    cube_sum = 0 \n\n    for i in range(2, n+1, 2): \n        cube_sum += i*i*i \n\n    return cube_sum "
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i ** 3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return \"\".join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Concatenate each element of the tuple by the delimiter.\n\n    Args:\n    test_tup (tuple): The tuple to concatenate.\n    delimiter (str): The delimiter to use.\n\n    Returns:\n    str: The concatenated string.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    result = result[:-len(delimiter)]\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    # Define a delimiter character\n    delimiter = \",\"\n\n    # Initialize an empty string to hold the concatenated string\n    concatenated_string = \"\"\n\n    # Loop through each element of the tuple\n    for element in test_tup:\n        # Append the element to the concatenated string\n        concatenated_string += str(element) + delimiter\n\n    # Remove the last delimiter character from the concatenated string\n    concatenated_string = concatenated_string[:-1]\n\n    # Return the concatenated string\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the given delimiter.\n    \"\"\"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '_'.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    concatenated_string = delimiter.join(test_tup)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # iterate through the first n natural numbers\n    for i in range(n):\n        # calculate the cube of i and add it to the sum\n        sum += i ** 3\n        # increment the count\n        count += 1\n\n    # calculate the average of cubes\n    average_of_cubes = sum / count\n\n    # print the result\n    print(\"The average of cubes of first {} natural numbers is: {}\".format(n, average_of_cubes))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        count += 1\n    \n    average = sum_of_cubes / count\n    \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cubes.append(i**3)\n    average = sum(cubes)/len(cubes)\n    print(\"The average of the cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize sum and count to zero\n    sum = 0\n    count = 0\n    \n    # iterate over first n natural numbers\n    for i in range(1, n+1):\n        # calculate the cube of i and add it to sum\n        sum += i**3\n        # increment count by 1\n        count += 1\n        \n    # calculate the average of cubes of first n natural numbers\n    average = sum/count\n    \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_cubes = sum_cubes/n\n    return average_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        if string[0] == \"r\":\n            rear_list.append(string[1:])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, s in enumerate(test_tuple):\n        rear_indices.append(len(s)-1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for index, element in enumerate(test_tuple):\n        if isinstance(element, str):\n            rear_indices.append(len(element)-1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [rear_elem for string in test_tuple for rear_elem in string]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear = string[-1]\n        rear_list.append(rear)\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for i in lst:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    groups = pattern.search(dt).groups()\n    new_dt = f\"{groups[2]}-{groups[1]}-{groups[0]}\"\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    yyyy_mm_dd_pattern = re.compile(r'^(\\d{4})-(\\d{2})-(\\d{2})$')\n    match = yyyy_mm_dd_pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # search the date string for the pattern\n    match = re.search(pattern, dt)\n    # check if the pattern was found\n    if match:\n        # extract the groups of values from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # convert the year, month, and day to the desired format\n        formatted_date = day + '-' + month + '-' + year\n        # return the formatted date\n        return formatted_date\n    else:\n        # if the pattern was not found, return None\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(regex, dt)\n    if match:\n        return '-'.join(match.groups()[::-1])\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert date format\n    new_date = re.sub(r\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\3-\\2-\\1\", dt)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    if re.match(date_pattern, dt):\n        return dt[6:4]+'-'+dt[4:2]+'-'+dt[2:0]\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    # Function to convert date format\n    def convert_date(date_str):\n        date_str = re.sub('-', '/', date_str) # Replace hyphen with forward slash\n        year, month, day = map(int, date_str.split('/')) # Split the date into year, month, day\n        new_date = '{:02d}-{:02d}-{:04d}'.format(day, month, year) # Format the new date in dd-mm-yyyy format\n        return new_date\n\n    # Return the converted date\n    return convert_date(dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Match the pattern in the input string and extract the groups\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        \n        # Format the date in the new format\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        # If the input does not match the pattern, return the original input\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    dt_match = dt_pattern.match(dt)\n    if dt_match:\n        year = int(dt_match.group(1))\n        month = int(dt_match.group(2))\n        day = int(dt_match.group(3))\n        new_date = f'{day:02d}-{month:02d}-{year:04d}'\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    new_dt = re.sub(pattern, r'\\g<2>-\\g<1>-\\g<0>', dt)\n    return new_dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = h*3 + 1\n    while h >= 1:\n        for i in range(h, n):\n            for j in range(i-h, -1, -h):\n                if my_list[j] > my_list[j+h]:\n                    my_list[j], my_list[j+h] = my_list[j+h], my_list[j]\n        h = h//3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Calculate the gap\n    gap = len(my_list) // 2\n\n    # Iterate over the gap values and sort the array\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n\n            # Move elements of the array to fill the gap\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        # Reduce the gap value\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n\n    # Do gaps of size 10 (adjust as per the requirements)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # Insertion sort within a gap of size 'gap'\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the maximum value in the array\n    max_val = my_list[-1]\n\n    # Starting gap, it is the length of the array divided by 2\n    gap = len(my_list) // 2\n\n    # Start the outer loop to sort the array\n    while gap > 0:\n        # Start the inner loop to sort the array using shell sort\n        for i in range(gap, len(my_list)):\n            # Find the correct position for the element\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                # Swap the elements if they are in the wrong order\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n\n        # Reduce the gap by half\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    This function sorts a given array using the Shell Sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            # Insertion sort with in-place gap\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Step 1: Find the largest gap\n    n = len(my_list)\n    max_gap = n // 2\n\n    while max_gap > 0:\n        # Step 2: Perform insertion sort on the array\n        for i in range(max_gap, n):\n            key = my_list[i]\n            j = i\n            while j >= max_gap and my_list[j - max_gap] > key:\n                my_list[j] = my_list[j - max_gap]\n                j -= max_gap\n            my_list[j] = key\n\n        # Step 3: Decrease the gap size\n        max_gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap = gap//2"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the given tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same number of elements.\")\n    \n    # create an empty list to store the elementwise and tuples\n    and_list = []\n    \n    # iterate over the elements of each tuple\n    for i in range(len(test_tup1)):\n        # extract the elements of the tuples\n        x1, x2 = test_tup1[i], test_tup2[i]\n        \n        # perform the elementwise and operation and add the result to the list\n        and_list.append(x1 & x2)\n    \n    # return the list of elementwise and tuples\n    return and_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length.\")\n        return None\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append((test_tup1[i] & test_tup2[i]))\n        return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple([a and b for a, b in zip(test_tup1, test_tup2)])\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    \n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length!\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(elem1 & elem2 for elem1, elem2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Calculate the two solutions\n    x1 = (-b + math.sqrt(discriminant)) / (2*a)\n    x2 = (-b - math.sqrt(discriminant)) / (2*a)\n    \n    # Sort the solutions in ascending order\n    x1_sort = sorted([x1])\n    x2_sort = sorted([x2])\n    \n    # Return the directrix\n    if len(x1_sort) == 1:\n        return x1_sort[0]\n    elif len(x2_sort) == 1:\n        return x2_sort[0]\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        print(\"The directrix does not exist.\")\n    else:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        print(\"The directrix is:\", root1, \"or\", root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a**2 + b**2 == 0:\n        return \"The parabola has no directrix.\"\n    else:\n        return -b/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"The parabola has no real roots\"\n    elif discriminant == 0:\n        return \"The directrix is equal to the real axis\"\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return \"The directrix is x = {:.2f} and x = {:.2f}\".format(x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the quadratic equation\n    discriminant = b**2 - 4*a*c\n\n    # If the discriminant is non-negative, then there is a real root\n    if discriminant > 0:\n        # Calculate the two real roots\n        root1 = (-b + (discriminant)**0.5)/(2*a)\n        root2 = (-b - (discriminant)**0.5)/(2*a)\n\n        # Calculate the directrix\n        directrix = root1 - root2\n\n        # Return the directrix\n        return directrix\n\n    # If the discriminant is negative, then there are two complex roots\n    elif discriminant < 0:\n        # Calculate the two complex roots\n        root1 = (-b + (discriminant)**0.5)/(2*a)\n        root2 = (-b - (discriminant)**0.5)/(2*a)\n\n        # Return the directrix\n        return (root1 + root2) / 2\n\n    # If the discriminant is zero, then there is a complex root\n    else:\n        # Calculate the complex root\n        root = -b/(2*a)\n\n        # Return the directrix\n        return root"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    discriminant = (b**2) - (4*a*c)\n    \n    # check if the discriminant is negative\n    if discriminant < 0:\n        print(\"The given equation does not have a real root.\")\n    # check if the discriminant is zero\n    elif discriminant == 0:\n        print(\"The directrix of the parabola is equal to\", (-b)/(2*a))\n    # check if the discriminant is positive\n    else:\n        # calculate the root\n        root = (-b + (discriminant**0.5)) / (2*a)\n        print(\"The directrix of the parabola is equal to\", root)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the determinant of the matrix\n    det = b**2 - 4*a*c\n    \n    # Calculate the two solutions to the quadratic equation\n    if det > 0:\n        x1 = (-b + det**0.5)/(2*a)\n        x2 = (-b - det**0.5)/(2*a)\n    elif det == 0:\n        x1 = x2 = -b/(2*a)\n    else:\n        print(\"The equation has no real solutions.\")\n    \n    # Calculate the directrix using the formula for a parabola\n    if a!= 0:\n        directrix = 2*(-b/(2*a))\n    else:\n        directrix = c\n    \n    # Print the results\n    print(\"The directrix of the parabola is\", directrix)\n    print(\"The first solution to the equation is\", x1)\n    print(\"The second solution to the equation is\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b**2 - 4*a*c\n\n    if delta > 0: \n        x = (-b + delta**0.5) / (2*a)\n        y = (-b - delta**0.5) / (2*a)\n        return \"The directrix is:\", x, y\n\n    elif delta == 0: \n        x = -b / (2*a)\n        return \"The directrix is:\", x, x\n\n    else: \n        return \"The equation has no real roots.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function takes the coefficients of a parabola as input and returns the directrix.\n    The directrix is the point where the parabola crosses the y-axis.\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"The parabola does not have a real root.\"\n    elif discriminant == 0:\n        return \"The parabola has a single real root.\"\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return \"The directrix is at x = %.2f and x = %.2f.\" % (x1, x2)\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n    elif delta == 0:\n        x1 = -b/(2*a)\n        x2 = -b/(2*a)\n    else:\n        x1 = None\n        x2 = None\n    return x1, x2"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Check if either list is empty\n    if not list1 or not list2:\n        return False\n\n    # Create a set of elements from both lists\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Check if the intersection is empty\n    return len(intersection) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for num in list1:\n        if num in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists and returns True if they have at least one common element.\n    \"\"\"\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Use a set to remove duplicates from the lists and then compare them\n    list1 = set(list1)\n    list2 = set(list2)\n    return len(list1.intersection(list2)) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the perimeter of the trapezium\n    perimeter = 2 * (base1 + base2 + height)\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 * height + base2 * height + height * height)\n\n    # Calculate the number of trapeziums in the height\n    trapeziums = int(perimeter / (2 * height))\n\n    # Calculate the area of each trapezium\n    area_per_trapezium = area / trapeziums\n\n    # Find the median of the area of each trapezium\n    area_median = sorted(area_per_trapezium)[trapeziums // 2]\n\n    # Calculate the median length of the trapezium\n    median_length = 2 * area_median\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = (base1 + base2) / 2 * height\n    length1 = area / base1\n    length2 = area / base2\n    median = (length1 + length2) / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the trapezium's base and height\n    base = base1 + base2\n    height = height * 2\n    \n    # Calculate the areas of the trapezium's base and height\n    area1 = 0.5 * base * height\n    area2 = 0.5 * base * (height - 2)\n    \n    # Calculate the areas of the trapezium's base and top\n    area3 = 0.5 * base2 * height\n    area4 = 0.5 * base2 * (height - 2)\n    \n    # Find the perimeter of the trapezium's base and height\n    perimeter = base1 + base2 + height + height\n    \n    # Calculate the areas of the trapezium's base and sides\n    area5 = 0.5 * perimeter * height\n    area6 = 0.5 * perimeter * (height - 2)\n    \n    # Calculate the areas of the trapezium's sides and height\n    area7 = 0.5 * (base1 + base2 + height) * (height - 2)\n    area8 = 0.5 * (base1 + base2 + height) * height\n    \n    # Calculate the sum of the areas\n    sum_areas = area1 + area2 + area3 + area4 + area5 + area6 + area7 + area8\n    \n    # Calculate the median area\n    median_area = sum_areas / 8\n    \n    # Calculate the median length\n    median_length = 0.5 * (area1 + area4 + area7 + area8) / median_area\n    \n    # Calculate the difference between the areas of the trapezium's sides\n    diff_area = abs(area2 - area3)\n    \n    # Calculate the difference between the areas of the trapezium's base and sides\n    diff_area_base = abs(area1 - area5)\n    \n    # Calculate the difference between the perimeters of the trapezium's base and sides\n    diff_perimeter_base = abs(perimeter - (base1 + base2 + height + height))\n    \n    # Calculate the difference between the perimeters of the trapezium's sides and height\n    diff_perimeter_side = abs(perimeter - (base1 + base2 + height))\n    \n    # Calculate the difference between the areas of the trapezium's base and height and the median area\n    diff_area_base_height = abs(area1 - median_area)\n    \n    # Calculate the difference between the areas of the trapezium's sides and the median area\n    diff_area_side_height = abs(area5 - median_area)\n    \n    # Calculate the ratio of the differences between the areas of the trapezium's base, sides, and height to the median area\n    ratio_diff_area = diff_area_base_height / median_area\n    \n    # Calculate the ratio of the differences between the areas of the trapezium's sides and height to the median area\n    ratio_diff_area_side = diff_area_side_height / median_area\n    \n    # Calculate the ratio of the differences between the perimeters of the trapezium's base and sides and the median perimeter\n    ratio_diff_perimeter = diff_perimeter_base / median_length\n    \n    # Calculate the ratio of the differences between the perimeters of the trapezium's sides and the median perimeter\n    ratio_diff_perimeter_side = diff_perimeter_side / median_length\n    \n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Find the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Find the semi-perimeter of the trapezium\n    semi_perimeter = 0.5 * (base1 + base2)\n\n    # Find the area of the rectangles formed by the bases and height\n    rect_area1 = 0.5 * base1 * 0.5 * height\n    rect_area2 = 0.5 * base2 * 0.5 * height\n    \n    # Find the area of the smallest rectangle\n    smallest_area = min(rect_area1, rect_area2)\n    \n    # Find the area of the largest rectangle\n    largest_area = max(rect_area1, rect_area2)\n    \n    # Find the length of the smallest rectangle\n    smallest_length = math.sqrt(2 * smallest_area / math.pi)\n    \n    # Find the length of the largest rectangle\n    largest_length = math.sqrt(2 * largest_area / math.pi)\n    \n    # Find the lengths of the two rectangles that form the trapezium\n    rect1_length = 0.5 * semi_perimeter - smallest_length\n    rect2_length = 0.5 * semi_perimeter + largest_length\n    \n    # Sort the two lengths and find the median\n    sorted_lengths = sorted([rect1_length, rect2_length])\n    median = sorted_lengths[1]\n    \n    # Calculate the distance between the two rectangles and the median\n    distance = math.sqrt(2 * rect1_length * rect2_length) - median\n    \n    # Return the median length of the trapezium\n    return median, distance"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n\n    # Calculate the length of the shorter base\n    short_base = min(base1, base2)\n\n    # Calculate the length of the longer base\n    long_base = max(base1, base2)\n\n    # Calculate the length of the smaller base\n    shorter_base_length = area / (long_base * height)\n\n    # Calculate the length of the longer base\n    longer_base_length = area / (short_base * height)\n\n    # Calculate the length of the trapezium\n    trapezium_length = 2 * longer_base_length\n\n    # Find the median length of the trapezium\n    median_length = (trapezium_length + shorter_base_length) / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5 * base1 * height\n    # calculate the lengths of the base and height\n    base = 0.5 * area\n    height = area - base\n    # calculate the lengths of the two halves of the trapezium\n    half_height = height / 2\n    half_base1 = base1 / 2\n    half_base2 = base2 / 2\n    # find the lengths of the two ends of the two halves\n    left_end1 = half_height + half_base1\n    left_end2 = half_height + half_base2\n    right_end1 = half_height - half_base1\n    right_end2 = half_height - half_base2\n    # find the length of the midpoint\n    midpoint = 0.5 * (left_end1 + right_end1)\n    # find the length of the median\n    if left_end1 < midpoint < right_end1 or left_end2 < midpoint < right_end2:\n        median = (left_end1 + midpoint + right_end1) / 3\n    elif left_end1 > midpoint > right_end1 or left_end2 > midpoint > right_end2:\n        median = (left_end2 + midpoint + right_end2) / 3\n    else:\n        median = midpoint\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # calculate the length of each half of the trapezium\n    half1 = base1 + height / 2\n    half2 = base2 + height / 2\n\n    # calculate the lengths of the two trapezia\n    trapezia1 = height + half1 + half2\n    trapezia2 = height - half1 - half2\n\n    # find the median length of the two trapezia\n    median1 = trapezia1 / 2\n    median2 = trapezia2 / 2\n\n    # compare the two medians and return the larger one\n    if median1 > median2:\n        return median1\n    else:\n        return median2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    area_sum = area1 + area2\n    if area_sum > height:\n        area_sum = height\n    median_area = area_sum / 2\n    area_trapezium = area1 + area2 + 0.5 * (area1 * base2) + 0.5 * (area2 * base1)\n    area_trapezium_sum = area_trapezium / 2\n    median_trapezium = area_trapezium_sum / 2\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculate the base of the trapezium\n    base = (base1 + base2) / 2\n\n    # calculate the height of the trapezium\n    area = 0.5 * base * height\n\n    # calculate the area of the trapezium\n    trapezium_area = 2 * area\n\n    # calculate the height of the base\n    base_height = trapezium_area / base\n\n    # calculate the length of the trapezium\n    trapezium_length = 2 * base_height\n\n    # calculate the median length of the trapezium\n    median_trapezium = trapezium_length\n\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    if height > area:\n        return height - area\n    else:\n        return area - height"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n\n    Parameters:\n    arr (list): a list of integers to be checked\n    number (int): an integer to be checked\n\n    Returns:\n    bool: True if number is greater than all elements in arr, else False.\n\n    Example:\n    >>> arr = [1, 2, 3, 4, 5]\n    >>> number = 3\n    >>> check_greater(arr, number)\n    False\n    >>> number = 6\n    >>> check_greater(arr, number)\n    True\n    \"\"\"\n\n    # loop through each element in arr and check if it's greater than the number\n    for num in arr:\n        if num > number:\n            return True\n\n    # if no element in arr is greater than the number, then the number is less than all elements in arr\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            print(num)\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(True)\n            break\n        else:\n            print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    # define the pattern to match\n    pattern = r'a\\w+b'\n\n    # use re.search() function to search for pattern in text\n    result = re.search(pattern, text)\n\n    # return the result if found or None if not found\n    return result.group() if result else None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return 'Found a match!'\n    else:\n        return 'No match found.'"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.+b')\n    return pattern.match(text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'\\ba\\w*b\\b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]*'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the number to a string\n    num = str(n)\n    # Find the last character of the string\n    last_char = num[-1]\n    # Convert the last character to a number\n    last_num = int(last_char)\n    # Return the last digit of the number\n    return last_num"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to a string\n    str_n = str(n)\n    # find the length of the string\n    length = len(str_n)\n    # find the last character of the string\n    last_char = str_n[length-1]\n    # convert the last character to an integer\n    last_int = int(last_char)\n    # return the last integer\n    return last_int"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(lst):\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list with the negative numbers in the input list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from a given list\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Loop through each element in the list\n    for i in range(len(list1)):\n        # Check if the element is negative\n        if list1[i] < 0:\n            # If it is, add it to a new list\n            new_list.append(list1[i])\n    # Return the new list\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if ord(char) % 2!= 0:\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and returns a string with all odd characters removed.\n    \"\"\"\n    # Convert the string to a list of characters\n    chars = list(string)\n    # Loop through the list of characters\n    for i in range(len(chars)):\n        # If the character is odd, remove it\n        if chars[i] % 2!= 0:\n            chars.pop(i)\n    # Convert the list of characters back to a string\n    result = \"\".join(chars)\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters in a string.\n    \"\"\"\n    return ''.join(filter(str.isalpha, str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Create a new string to store the new string with odd characters removed\n    new_str = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, add it to the new string\n        if char % 2!= 0:\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i.isalpha() and i.isalnum():\n            if i.isupper():\n                new_str += i.lower()\n            elif i.islower():\n                new_str += i.upper()\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) or (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    bidirectional_count = {}\n    for pair in test_list:\n        pair = pair[::-1]\n        if pair not in bidirectional_count:\n            bidirectional_count[pair] = 1\n        else:\n            bidirectional_count[pair] += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Count bidirectional tuple pairs in a list of tuples.\n\n    Parameters:\n    test_list (list of tuples): A list of tuples to count bidirectional tuple pairs from.\n\n    Returns:\n    int: The number of bidirectional tuple pairs in the list.\n\n    Raises:\n    TypeError: If the input is not a list of tuples.\n    \"\"\"\n    if not isinstance(test_list, list) or not all(isinstance(tup, tuple) for tup in test_list):\n        raise TypeError(\"Input must be a list of tuples.\")\n    \n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] or test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        if num % 2 == 0:\n            result += num // 2\n        else:\n            result += (num // 2) + 1\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_num = 0\n    for num in L:\n        single_num *= num\n    return single_num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the result variable to 0\n    result = 0\n\n    # loop through the list of integers\n    for num in L:\n        # if the current integer is multiple of 3, add it to the result\n        if num % 3 == 0:\n            result += num\n        # if the current integer is not multiple of 3, add 3 to the result\n        else:\n            result += 3\n    \n    # return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Loop through each element in the list\n    for num in L:\n        # If the element is a multiple of 3, multiply it by 3\n        if num % 3 == 0:\n            result += num\n        # If the element is not a multiple of 3, add it to the result variable\n        else:\n            result += num\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    single_num = 1\n    for i in L:\n        single_num *= i\n    return single_num"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # regular expression pattern to match adverbs\n    pattern = r'\\b\\w*[a-z]*[A-Z][a-z]*\\b'\n    \n    # use the re.findall() function to find all the matches in the text\n    matches = re.findall(pattern, text)\n    \n    # initialize the dictionary to store the adverb positions\n    adverb_positions = {}\n    \n    # iterate through all the matches and extract the positions of the adverbs\n    for match in matches:\n        # use the find() function to find the index of the first character of the adverb\n        adverb_position = text.find(match)\n        \n        # check if the adverb is already present in the dictionary\n        if match in adverb_positions:\n            # update the value of the position for the adverb in the dictionary\n            adverb_positions[match].append(adverb_position)\n        else:\n            # add the adverb and its position to the dictionary\n            adverb_positions[match] = [adverb_position]\n    \n    # return the dictionary with the adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define the regular expression pattern for adverbs\n    pattern = r'\\b\\w*[a-z]+\\w*|\\\\w*[a-z]+\\\\w*'\n    \n    # find all matches of the regular expression pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # print the positions and words of the adverbs found\n    for i, match in enumerate(matches):\n        print(i+1, match.strip())"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b(a|an|the|any|every|each|all|most|mostly|some|mostly|few|several|several|mostly|somewhat|some|a|an)\\b', text.lower())\n    adverb_positions = []\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append(text.lower().index(adverb))\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(?:a(nnot)?|also|as|at|before|behind|below|beside|between|but|by|during|except|for|from|in|into|near|of|off|on|onto|out|over|past|s(a|ome)?|since|than|through|to|toward|under|underneath|until|up|upon|versus|via|with)\\b'\n    # Use re.findall to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Sort matches by their position in the text\n    matches.sort(key=lambda x: text.find(x))\n    # Return a list of tuples containing the adverbs and their positions\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    adverbs = re.findall(r'\\b([a-z]+)er\\b', text, re.IGNORECASE)\n    adverb_positions = []\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append((i, adverb))\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    This function takes a sentence as input and returns a list of tuples, where each tuple contains the first adverb and its position in the sentence.\n\n    Example:\n    >>> find_adverb_position(\"The quick brown fox jumps over the lazy dog\")\n    [('jumps', 14), ('over', 24)]\n    \"\"\"\n\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b\\w*adv\\b\\w*'\n\n    # Use the re.findall() function to find all the adverbs in the sentence\n    adverbs = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb position tuples\n    adverb_positions = []\n\n    # Iterate through the adverbs and their positions in the sentence\n    for i, adverb in enumerate(adverbs):\n        # Append each adverb position tuple to the list\n        adverb_positions.append((adverb, i))\n\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    adverbs = re.findall(r'\\b\\w*[Cc]an\\w*\\b|\\b\\w*[Cc]annot\\w*\\b|\\b\\w*[Cc]ould\\w*\\b|\\b\\w*[Cc]ouldn\\w*\\b|\\b\\w*[Cc]ouldn\\'t\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]ould\\w*\\'ve\\w*\\b|\\b\\w*[Cc]an\\'t\\w*\\b|\\b\\w*[Cc]an\\'t\\w*\\'ve\\w*\\b|\\b\\w*[Cc]an\\'t\\'ve\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\w*\\b|\\b\\w*[Cc]o\\'ll\\w*\\b|\\b\\w*[Cc]o\\'re\\w*\\b|\\b\\w*[Cc]o\\'ve\\"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regex pattern to match adverb\n    pattern = r'\\b(completely|incredibly|very|extremely|indescribably|well|most|essentially|quite|actually|certainly|actually|clearly|just|also|further|seriously|incredibly|really|rather|basically|sort of|sorta|probably|kind of|kinda|well|just|oh|such|very|extremely|definitely|definitely|definitely|quite|actually|actually|clearly|just|also|further|seriously|incredibly|really|rather|basically|sort of|sorta|probably|kind of|kinda|well|just|oh|such|very|extremely|definitely|definitely|definitely|quite|actually|actually|clearly|just|also|further|seriously|incredibly|really|rather|basically|sort of|sorta|probably|kind of|kinda|well|just|oh|such|very|extremely|definitely|definitely|definitely|quite|actually|actually|clearly|just|also|further|seriously|incredibly|really|rather|basically|sort of|sorta|probably|kind of|kinda|well|just|oh|such|very|extremely|definitely|definitely|definitely|quite|actually|actually|clearly|just|also|further|seriously|incredibly|really|rather|basically|sort of|sorta|probably|kind of|kinda|well|just|oh|such|very|extremely|definitely|definitely|definitely|quite|actually|actually|clearly|just|also|further|seriously|incredibly|really|rather|basically|sort of|sorta|probably|kind of|kinda|well|just|oh|such|very|extremely|definitely|definitely|definitely|quite|actually|actually|clearly|just|also|further|seriously|incredibly|really|rather|basically|sort of|sorta|probably|kind of|kinda|well|just|oh|such|very|extremely|definitely|definitely|definitely|quite|actually|actually|clearly|just|also|further|seriously|incredibly|really|rather|basically|sort of|sorta|probably|kind of|kinda|well|just|oh|such|very|extremely|definitely|definitely|definitely|quite|actually|actually|clearly|just|also|further|seriously|incredibly|really|rather|basically|sort of|sorta|probably|kind of|kinda|well|just|oh|such|very|extremely|definitely|definitely|definitely|quite|actually|actually|clearly|just|also|further|seriously|incredibly|really|rather|basically|sort of|sorta|probably|kind of|kinda|well|just|oh|such|very|extremely|definitely|definitely|definitely|quite|actually|actually|clearly|just|also|further|seriously|incredibly|really|rather|basically|sort of|sorta|probably|kind of|kinda|well|just|oh|such|very|extremely|definitely|definitely|definitely|quite|actually|actually|clearly|just|also|further|seriously|incredibly|really|rather|basically|sort of|sorta|probably|kind of|kinda|well|just|oh|such|very|extremely|definitely|definitely|definitely|quite|actually|actually|clearly|just|also|further|seriously|incredibly|really|rather|basically|sort of|sorta|probably|kind of|kinda|well|just|oh|such"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression to find adverbs\n    adverb_pattern = r'\\b(also|more|most|mostly|mostly|least|leastly|leastly|leastly|less|lessly|mostly|leastly|mostly|leastly|more|more|mostly|more|leastly|more|leastly|less|less|most|most|least|least|less|least|most|most|least|least|less|least|most|most|least|least|less|least|most|most|least|least|less|least|most|most|least|least|less|least|most|most|least|least|less|least|most|most|least|least|less|least|most|most|least|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less|least|most|most|least|less"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define the pattern to match adverbs\n    pattern = r'\\b\\w*adv\\w*\\b'\n    # use re.finditer() to find all occurrences of the pattern\n    adverbs = re.finditer(pattern, text)\n    # initialize an empty list to store the adverbs and their positions\n    result = []\n    # iterate over the adverbs found using re.finditer()\n    for match in adverbs:\n        # extract the text of the adverb\n        adverb = match.group(0)\n        # extract the position of the adverb in the sentence\n        position = text.index(adverb)\n        # add the adverb and its position to the result list\n        result.append((adverb, position))\n    # return the result list\n    return result"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of a cube by multiplying the length by its square\n    surface_area = 6*l*l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    print(\"The surface area of the cube is:\", surface_area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    total_count = len(nums)\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    \n    return float(pos_count) / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # convert the array to an array of integers\n    nums = array('i', nums)\n\n    # initialize two variables to store the sum of positive and negative numbers\n    pos_sum = 0\n    neg_sum = 0\n\n    # iterate through the array and add the positive and negative numbers to the sums\n    for num in nums:\n        if num > 0:\n            pos_sum += num\n        else:\n            neg_sum += num\n\n    # find the ratio of positive to negative numbers and return it as a float\n    return pos_sum / neg_sum"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to an array of type 'float'\n    nums = array('f', nums)\n\n    # Initialize variables to keep track of the count and sum of positive numbers\n    positive_count = 0\n    positive_sum = 0\n\n    # Iterate over the array and count the positive numbers\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n            positive_sum += num\n\n    # Calculate and return the ration of positive numbers\n    return positive_count / len(nums) if len(nums)!= 0 else 0"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            positives += 1\n    return positives / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            count.append(1)\n        else:\n            count.append(0)\n    if count[0] == 0:\n        return 0.0\n    else:\n        return count[1] / count[0]"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums) * 100"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', 0)\n    for num in nums:\n        if num > 0:\n            count.append(1)\n        else:\n            count.append(0)\n    pos_count = sum(count)\n    neg_count = len(nums) - pos_count\n    return pos_count / neg_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list for easier manipulation\n    nums_list = list(nums)\n    # Initialize variables for positive and negative counts\n    positive_count = 0\n    negative_count = 0\n    # Iterate through the list and count positive and negative numbers\n    for num in nums_list:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n    # Calculate the ratio of positive and negative numbers\n    ratio = positive_count / (positive_count + negative_count)\n    # Return the ratio as a float rounded to two decimal places\n    return round(ratio, 2)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    \n    return positive_count / total"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')  # Initialize largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -float('inf')\n    for num in list1: \n        if num < 0 and num > largest_num: \n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    neg_num = list1[0]\n    for num in list1:\n        if num < 0 and num > neg_num:\n            neg_num = num\n    return neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0] # initialize max_num with the first element of the list\n    \n    for num in list1:\n        if num < 0 and num > max_num: # check if current num is negative and greater than max_num\n            max_num = num # update max_num\n    \n    return max_num # return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')  # initialize largest as negative infinity\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i, tup in enumerate(test_list):\n        test_list[i] = tup[:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            if j < len(test_list[i])-1:\n                test_list[i] = test_list[i][:j] + (test_list[i][j+1:],)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tuple in test_list:\n        trimmed_tuple = tuple[:K]\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tup[K:])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) <= K:\n            test_list.pop(i)\n        else:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    return [tuple(t[:K]) for t in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    # loop through each tuple in the list\n    for tup in test_list:\n        # remove the first k elements from the tuple\n        tup = tup[K:]\n        # add the modified tuple to the list\n        test_list.append(tup)\n\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            result.append(tuple(test_list[i][:K]))\n        else:\n            result.append(tuple(test_list[i]))\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    # Initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n    \n    # Loop through the tuples in the given list\n    for tuple_ in test_list:\n        # Initialize a variable to keep track of how many elements to trim from the tuple\n        k = K\n        \n        # Loop through the elements of the tuple and remove the first k elements\n        while k > 0 and tuple_:\n            tuple_.pop(0)\n            k -= 1\n        \n        # If the tuple is not empty after trimming, add it to the trimmed list\n        if tuple_:\n            trimmed_list.append(tuple_)\n    \n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(map(lambda x: x if x >= K else None, test_list[i]))\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Check if the two tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuple lengths do not match.\")\n        return\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through each index of the two tuples and multiply their elements\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n        \n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuple length mismatch\"\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] * test_tup2[i])\n        return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Define a new tuple to store the result\n    result_tup = ()\n    # Check if the length of both tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have the same length')\n    # Iterate over each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Append the multiplication result of each element of the two tuples\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    # Return the new tuple with the multiplication result\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize result tuple with zeros\n    result_tup = (0, 0, 0, 0)\n\n    # Loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] * test_tup2[i],)\n    else:\n        for i in range(len(test_tup2)):\n            result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of the tuple and the values are the corresponding counts in the list. \n    '''\n    count_dict = {}\n    for elem in tup:\n        count_dict[elem] = lst.count(elem)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # convert the list to set to remove duplicates\n    lst = list(set(lst))\n\n    # count the occurrence of each element in the tuple\n    count_dict = Counter(tup)\n\n    # count the occurrence of each element in the list\n    for elem in lst:\n        count_dict[elem] += lst.count(elem)\n\n    # return the count dictionary\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_dict = dict(count_dict)\n    count = {}\n    for i in tup:\n        if i in count_dict:\n            count[i] = count_dict[i]\n        else:\n            count[i] = 0\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Count the occurrences of each element in the list in the tuple\n    count_dict = Counter(lst)\n    # Count the number of occurrences of each element in the tuple\n    count_tup = Counter(tup)\n    # Find the maximum count of each element\n    max_count_dict = {k:max(count_dict[k], count_tup[k]) for k in count_dict if k in count_tup}\n    # Return the maximum count of each element in the tuple\n    return max_count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst)\n    count = 0\n    for i in c:\n        count += c[i]\n    print(\"The count of all elements in the list is:\", count)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert tuple to set to remove duplicates\n    tup_set = set(tup)\n    # create a dictionary to store the count for each element in the tuple\n    count_dict = {}\n    # iterate over the list and count the occurence of each element in the tuple\n    for elem in lst:\n        if elem in tup_set:\n            count_dict[elem] = count_dict.get(elem, 0) + 1\n    # return the dictionary with the count of each element in the tuple\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to store the count of each element of lst\n    count_dict = {}\n    # Loop through each element of tup\n    for elem in tup:\n        # If the element is in lst, increment its count in the dictionary\n        if elem in lst:\n            count_dict[elem] = count_dict.get(elem, 0) + 1\n\n    # Return the dictionary as a tuple of tuples\n    return tuple(zip(lst, [count_dict[elem] for elem in lst]))"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    result = {}\n\n    for key, value in c.items():\n        if key in lst:\n            if key in result:\n                result[key] += value\n            else:\n                result[key] = value\n\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of lst and the values are the number of times that element appears in tup.\n    '''\n    counter = Counter(tup)\n    result = {}\n    for key, value in counter.items():\n        if key in lst:\n            result[key] = value\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += perrin_numbers(i)\n    return sum\n\ndef perrin_numbers(n):\n    '''\n    Write a function to calculate the nth Perrin number.\n    '''\n    return ((n**3 + n - 1)**2) / (n * (n + 1))\n\nn = int(input(\"Enter the number of Perrin numbers to be calculated: \"))\nprint(\"The sum of the first\", n, \"Perrin numbers is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += pow(i, 3)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += perrin_numbers[i-1]\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perrin(n):\n    \"\"\"\n    Function to check if a given number is a perrin number or not.\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef cal_sum(n):\n    \"\"\"\n    Function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if is_perrin(i):\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 3\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # initialize sum to 0\n    total = 0\n    \n    # loop through perrin numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the perrin number and add to total\n        total += 1/i\n    \n    # return total sum\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n\n    # initialize sum variable to zero\n    sum_val = 0\n    \n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # calculate the sum of the perrin numbers\n        if i % 3 == 0 or i % 5 == 0:\n            sum_val += i\n    \n    # return the sum of the perrin numbers\n    return sum_val"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 0\n    for i in range(n):\n        p += i**2\n    return p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        if i%3 == 0:\n            s += i\n    return s"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n\n    Args:\n    str (str): A string variable to be extracted from the list.\n    l (list): A list of string values.\n    size (int): The desired size of the extracted string.\n\n    Returns:\n    str: The extracted string value.\n    '''\n\n    extracted_str = []\n    for i in range(len(l)):\n        if len(l[i]) == size:\n            extracted_str.append(l[i])\n    \n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    This function extracts specified size of strings from a given list of string values.\n\n    Parameters:\n    str_list (list of strings): list of string values.\n    l (integer): size of the strings to be extracted.\n\n    Returns:\n    list of strings: list of strings of size l extracted from the input list.\n    \"\"\"\n\n    extracted_strings = []\n\n    for s in str_list:\n        if len(s) == l:\n            extracted_strings.append(s)\n\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[i][l[i].find(str)] and len(l[i]) <= l[i][l[i].find(str) + len(str)]:\n            extracted_strings.append(l[i][l[i].find(str):l[i].find(str) + len(str)])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str)//l):\n        result.append(str[i*l:i*l+l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and the size of the string to be extracted.\n    It returns a list of extracted strings.\n    \"\"\"\n    extracted_list = []\n    for i in range(len(str_list)):\n        extracted_list.append(str_list[i][:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts a specified size of strings from a given list of strings.\n    '''\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            new_list.append(str_list[i][:size])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a specified size and returns a list of\n    strings of the specified size.\n    '''\n    # initialize an empty list to store the extracted strings\n    extracted_str = []\n    # iterate over the input list of strings\n    for i in range(0, len(str_list), size):\n        # extract the specified size of string from the input list\n        extracted_str.append(''.join(str_list[i:i+size]))\n    # return the extracted list of strings\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and the size of strings to be extracted\n    as arguments. It returns a new list with the extracted strings.\n    '''\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    string_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            string_list.append(str_list[i])\n    return string_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # remove all whitespaces and tabs using regex\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Define regular expression pattern for matching whitespace characters\n    whitespace_pattern = re.compile(r'\\s+')\n    # Use pattern to replace all whitespace characters with a single space\n    text2 = whitespace_pattern.sub(' ', text1)\n    # Return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regex\n    text1 = re.sub(r'\\s+','', text1)\n    # Remove leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces from the string using regular expressions\n    pattern = r'\\s+'\n    text2 = re.sub(pattern, '', text1)\n    # return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces\n    text1 = re.sub('\\s+','', text1)\n    # Removing leading and trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expression\n    text2 = re.sub(r'\\s+','', text1)\n    # return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function takes a string as input and removes all whitespaces from it.\n    \"\"\"\n    # Remove all occurrences of whitespace from the string\n    text = re.sub(r'\\s+','', text)\n    # Remove all single spaces from the string\n    text = re.sub(r'\\s+','', text)\n    # Remove all consecutive spaces from the string\n    text = re.sub(r'\\s+','', text)\n    \n    return text"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = 10 #loss percentage\n    if actual_cost <= sale_amount: \n        return 0 \n    elif actual_cost > sale_amount: \n        loss_amount = (actual_cost - sale_amount) * loss_percent / 100 \n        return loss_amount "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        return sale_amount - actual_cost\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sumofFactors(n):\n    \"\"\"\n    This function calculates the sum of even factors of a number.\n    \n    Args:\n    n (int): The number to find the sum of even factors for\n    \n    Returns:\n    (int): The sum of even factors of n.\n    \"\"\"\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors += i\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of even factors of n.\n    '''\n    sum_of_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_factors += i\n    return sum_of_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize variables\n    sum = 0\n    i = 2\n    \n    # Loop while i is less than or equal to the square root of n\n    while i <= int(math.sqrt(n)):\n        # Check if i is even and a factor of n\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n        # Increment i\n        i += 1\n        \n    # Return the sum of even factors of n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Find all the odd prime factors of n\n    odd_prime_factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            odd_prime_factors.append(i)\n\n    # Compute the sum of even prime factors\n    even_prime_factors = [i for i in odd_prime_factors if i % 2 == 0]\n    return sum(even_prime_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Check if the input is a positive integer\n    if n <= 0:\n        raise ValueError('Input must be a positive integer')\n\n    # Initialize variables\n    evenFactors = 0\n    sum = 0\n\n    # Iterate through the number and check if each factor is even\n    for i in range(2, int(math.sqrt(n))+1):\n        while n % i == 0:\n            evenFactors += 1\n            sum += i\n            n //= i\n\n    # Add the remaining factor if it's even\n    if n > 1:\n        evenFactors += 1\n        sum += n\n\n    return sum, evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    #initialize sum to 0\n    sum = 0\n\n    #loop through each even factor of n from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        #check if i is a factor of n\n        if n % i == 0 and i % 2 == 0:\n            #add i to the sum\n            sum += i\n\n    #return the sum of even factors of n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # calculate the sum of even factors\n    sumOfEvenFactors = 0\n    for i in range(1, n+1):\n        if i % 2 == 0 and i in range(1, int(math.sqrt(n))+1):\n            sumOfEvenFactors += i\n    \n    # return the sum of even factors\n    return sumOfEvenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumOfFactors(n):\n    \"\"\"\n    This function calculates the sum of even factors of a given number n.\n    \"\"\"\n    # Initialize the sum of even factors to zero\n    sum = 0\n    \n    # Loop through all the factors of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # Check if i is even\n        if n % i == 0 and i % 2 == 0:\n            # If it is, add it to the sum\n            sum += i\n            \n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    words = re.findall(pattern, text)\n    for word in words:\n        if 'z' in word:\n            print(word)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+z\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r'\\b\\w+z\\b'\n    matches = re.findall(word_pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # define the regular expression pattern to match word containing 'z'\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n\n    # use the re.findall() function to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # print the matches\n    for match in matches:\n        print(match)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\w+\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(word_pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes in a string of text and returns a list of words containing 'z'.\n    '''\n    # Regular expression to match words containing 'z'\n    pattern = r'\\b(z)\\w*\\b'\n    # Use re.findall() to find all non-overlapping matches of pattern in text\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-z]*z\\b')\n    return pattern.findall(text)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 and leapyear(year):\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 % 2 == 0 and monthnum2 % 100!= 0 or monthnum2 % 400 == 0:\n        return True\n    else:\n        return False\n\ndef leapyear(year):\n    '''\n    Check if the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum == 2 or monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    elif monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 % 4 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number!\"\n    elif monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return \"Invalid month number!\"\n    else:\n        if monthnum2 in [4, 6, 9, 11]:\n            return \"30 days\"\n        else:\n            return \"31 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            days = 29\n        else:\n            days = 28\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        days = 30\n    else:\n        days = 31\n    return days"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    elif monthnum2 in ['04', '06', '09', '11']:\n        return False\n    else:\n        return None"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    This function will take a list as input and will return the sublist having the minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    min_length = 1000000 # set initial value to a large number\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i+1 < min_len:\n                min_len = j-i+1\n                min_sublist = lst[i:j]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') #initialize the minimum length to infinity\n    min_lst = [] #initialize the minimum sublist to an empty list\n    \n    for sublist in lst: #iterate through each sublist in the list\n        if len(sublist) < min_len: #if the length of the sublist is smaller than the current minimum length\n            min_len = len(sublist) #update the minimum length\n            min_lst = sublist #update the minimum sublist to the current sublist\n    \n    return min_lst #return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    # sort the list in ascending order\n    lst = sorted(lst)\n    # initialize minimum length to the length of the first sublist\n    min_len = len(lst[0])\n    # initialize minimum sublist to be the first sublist\n    min_sublist = lst[0]\n    # loop through the list and find the sublist with minimum length\n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            temp_sublist = lst[i:j+1]\n            if len(temp_sublist) < min_length:\n                min_sublist = temp_sublist\n                min_length = len(temp_sublist)\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf')\n    min_list = None\n    \n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n            min_list = sublist\n    \n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = None\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Use the pattern to find all the uppercase substrings in the string\n    matches = pattern.findall(str1)\n\n    # Loop through all the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]\\w+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regular expression to match uppercase substrings\n    regex = r'(?i)\\b[A-Z][a-z]+\\b'\n\n    # use the re.sub() function to replace uppercase substrings with an empty string\n    result = re.sub(regex, '', str1)\n\n    # return the result\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    uppercase_substrings = re.findall(r'([a-z]+)', str1)\n    for uppercase in uppercase_substrings:\n        str1 = re.sub(r'\\b' + uppercase + r'\\b', '', str1, flags=re.IGNORECASE)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function takes a string as input and removes all uppercase substrings from it.\n    \"\"\"\n    # Compile a regular expression pattern for uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    \n    # Find all occurrences of uppercase substrings in the string\n    matches = pattern.findall(string)\n    \n    # Loop through the matches and remove them from the string\n    for match in matches:\n        string = string.replace(match, '')\n    \n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]+', '', str1) # Remove all uppercase substrings using regex\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define the regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n\n    # Find all uppercase substrings in the given string\n    matches = re.findall(pattern, str1)\n\n    # Remove all uppercase substrings from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[^A-Za-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'(?i)[A-Z].*?[A-Z]', '', str1)\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as an argument and returns a new list that contains the first element of each sublist.\n    '''\n    new_list = []\n    for item in lst:\n        new_list.append(item[0])\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns the first element of each sublist.\n    '''\n\n    new_lst = []\n    for i in lst:\n        new_lst.append(i[0])\n    return new_lst\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and extracts the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            result.extend(Extract(sublist))\n        elif sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # initialize an empty list to store the extracted elements\n    extracted_list = []\n    # loop through each sublist in the main list\n    for sublist in lst:\n        # append the first element of each sublist to the extracted_list\n        extracted_list.append(sublist[0])\n    return extracted_list"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function takes a string as input and returns the number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            print(list1[i], list1[j], end=' ')"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # initialize an empty list to hold the combinations\n    combinations = []\n\n    # loop over the elements of the list\n    for i in range(1, len(list1)+1):\n        # loop over the indices of the sublist of size i\n        for j in range(len(list1) - i + 1):\n            # create the combination of the sublist\n            combination = list1[j:j+i]\n            # add the combination to the list of combinations\n            combinations.append(combination)\n\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    if len(lst) == 1:\n        return [lst]\n    else:\n        return [lst[0]] + combinations_list(lst[1:])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize a list to store all combinations\n    combinations = []\n\n    # Loop through each element in the list\n    for i in range(len(list1)):\n        # Initialize a list to store the current combination\n        current_combination = [list1[i]]\n\n        # Loop through the remaining elements of the list\n        for j in range(i+1, len(list1)):\n            # Add the next element to the current combination\n            current_combination.append(list1[j])\n\n            # Add the current combination to the list of combinations\n            combinations.append(current_combination)\n\n            # Remove the current combination from the list of combinations\n            del current_combination[-1]\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    \n    # Use itertools to create all possible combinations of list1\n    combinations = list(itertools.combinations(list1, len(list1)))\n    \n    # Print the combinations\n    for comb in combinations:\n        print(comb)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1, current_combination=[]):\n    \"\"\"\n    This function takes a list of integers and returns a list of all possible combinations of integers in the list.\n    \"\"\"\n    if not list1: # base case: if there are no more elements in the list, return the current combination as a list\n        return [current_combination]\n    else:\n        # add the first element to the current combination\n        current_combination.append(list1[0])\n        # recurse on the remaining elements in the list\n        remaining_combinations = combinations_list(list1[1:], current_combination)\n        # remove the first element from the current combination to backtrack\n        current_combination.pop()\n        return remaining_combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n        elif current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_ending_here *= arr[i]\n            min_ending_here = 1\n        else:\n            min_ending_here *= arr[i]\n            max_ending_here = 1\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    if not arr:  # if the array is empty, return 0\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], arr[i])\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Args:\n    arr: a list of integers\n\n    Returns:\n    max_product: the maximum product subarray\n    \"\"\"\n\n    # Initialize max_product to negative infinity\n    max_product = float('-inf')\n\n    # Initialize left and right pointers\n    left = 0\n    right = 0\n\n    # Initialize current_product to 1\n    current_product = 1\n\n    while right < len(arr):\n        # If current_product is negative, reset current_product to 1\n        if current_product < 0:\n            current_product = 1\n\n        # Update current_product\n        current_product *= arr[right]\n\n        # If current_product is greater than max_product, update max_product\n        if current_product > max_product:\n            max_product = current_product\n\n        # Move the right pointer to the right\n        right += 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Given an array of integers, find the maximum product subarray.\n\n    :param arr: List of integers representing the array\n    :return: Maximum product subarray of the array\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n\n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n            start = i\n        current_product *= arr[i]\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            first_value = value\n        if value!= first_value:\n            return False\n        count += 1\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # convert the dictionary to a set to remove duplicates\n    dict_set = set(dict.values())\n    # check if the length of the set is equal to 1, if yes, all values are same\n    if len(dict_set) == 1:\n        return True\n    # check if the length of the set is equal to n, if yes, all values are same\n    elif len(dict_set) == n:\n        return True\n    # if the length of the set is not equal to either of the above, return False\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.values():\n        if i!= dict.values()[0]:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # Get a list of all values in the dictionary\n    values = list(dict.values())\n    # Check if all values are same\n    if values.count(values[0]) == len(values):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = list(dict.values())\n    return all_values.count(all_values[0]) == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for value in dict.values():\n        values.append(value)\n    for value in values:\n        if values.count(value)!= 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if all values are of the same type\n    types = set(type(x) for x in dict.values())\n    if len(types) > 1:\n        return False\n    # Check if all values are same\n    values = dict.values()\n    for i in range(len(values)):\n        if values[i]!= values[0]:\n            return False\n    # If all values are same and same type, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            first_value = value\n        else:\n            if first_value!= value:\n                return False\n        count += 1\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if len(dict.values())!= 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict.values():\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Use list comprehension to iterate through dictionary and drop empty items\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v is not None and v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and dp[j] * arr[i] > dp[i]:\n                dp[i] = dp[j] * arr[i]\n\n    max_product = max(dp)\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Initialize variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Update max_ending_here\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        # Update max_so_far\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n\n    for i in range(1, n):\n        for j in range(i, n):\n            product = 1\n            for k in range(i, j):\n                product *= arr[k]\n            max_product = max(max_product, product)\n\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    dp = [[0] * n for _ in range(n)]\n    max_product = float('-inf')\n    max_end = float('-inf')\n    \n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                dp[i][j] = arr[i] * arr[j]\n                if dp[i][j] > max_product:\n                    max_product = dp[i][j]\n                    max_end = arr[i]\n                elif dp[i][j] == max_product and arr[i] > max_end:\n                    max_end = arr[i]\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Initialize variables to store the maximum product and the current product\n    max_product = arr[0]\n    current_product = arr[0]\n\n    # Loop through the array and calculate the maximum product formed by multiplying numbers of an increasing subsequence\n    for i in range(1, n):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_so_far = max_ending_here\n            max_ending_here = arr[i]\n        elif arr[i] > min_ending_here:\n            max_so_far = max(max_so_far, arr[i])\n            min_ending_here = arr[i]\n        else:\n            min_ending_here = arr[i]\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # Initialize variables\n    max_product = arr[0]\n    min_product = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Calculate the maximum and minimum products of the current subsequence\n        current_max = max(arr[i], arr[i] * max_product)\n        current_min = min(arr[i], arr[i] * min_product)\n        \n        # Update the maximum and minimum products\n        max_product = current_max\n        min_product = current_min\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    \n    max_so_far = max_ending_here = arr[0]\n    min_so_far = min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    n = len(arr)\n    max_product = float('-inf')\n\n    # Create a boolean array to mark visited elements in the subsequence\n    visited = [False] * n\n\n    # Traverse through the array and multiply all the increasing subsequences\n    for i in range(n):\n        if visited[i]:\n            continue\n        left, right = i, i\n        while left >= 0 and right < n and not visited[right]:\n            visited[right] = True\n            left -= 1\n            right += 1\n        if right - i > 1:\n            subsequence = arr[i:right]\n            max_product = max(max_product, max(subsequence) * min(subsequence))\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the tuple\n    length = len(test_tup)\n    \n    # Initialize the result tuple with the first element of the tuple\n    result_tup = (test_tup[0],)\n    \n    # Loop through the tuple and add the pairwise elements to the result tuple\n    for i in range(1, length):\n        result_tup += (test_tup[i] + test_tup[i-1],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    count = 0\n    total = 0\n    \n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n        count += 1\n        \n    return total / count"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum = 0\n    for i in range(len(test_tup)-1):\n        sum += test_tup[i] + test_tup[i+1]\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    add_sum = 0\n    for i in range(1, len(test_tup)-1):\n        add_sum += test_tup[i] + test_tup[i+1]\n    return add_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = 0\n    n = len(test_tup)\n    for i in range(n-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    result = []\n    for i in range(len(test_tup)):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    pairwise_sum = 0\n\n    for i in range(n-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) == 1:\n        return 0\n    else:\n        first = test_tup[0]\n        second = test_tup[1]\n        return first + second + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[1:]) - sum(test_tup[:-1])"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array `arr` and an integer `n` as input and returns the remainder of the product of the array modulo `n`.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)): \n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in two arguments: `arr`, which is a list of integers representing the array, and `n`, which is an integer representing the modulus value. The function then multiplies the array elements together and returns the result modulo `n`.\n    \n    For example:\n    >>> arr = [1, 2, 3]\n    >>> n = 10\n    >>> find_remainder(arr, n)\n    1\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    if len(l) == 0: \n        return False\n    elif len(l) == 1: \n        return True\n    else:\n        if l[0] + 1 == l[1]:\n            return check_Consecutive(l[1:])\n        else:\n            return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # Initialize the variable to store the consecutive numbers count\n    consecutive_count = 0\n\n    # Check if the first element of the list is a consecutive number\n    if l[0] == l[1] - 1:\n        consecutive_count += 1\n        # Check if the rest of the list contains consecutive numbers\n        for i in range(1, len(l)):\n            if l[i] == l[i-1] + 1:\n                consecutive_count += 1\n            else:\n                break\n\n    # Check if the last element of the list is a consecutive number\n    if l[-1] == l[-2] + 1:\n        consecutive_count += 1\n\n    # Check if the length of the list is greater than 1\n    if len(l) > 1:\n        # Check if the consecutive numbers count is greater than or equal to 2\n        if consecutive_count >= 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]!= l[i] + 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    # initialize two variables to store the first and last numbers in the list\n    first = l[0]\n    last = l[0]\n    \n    # loop through the list starting from the second element\n    for num in l[1:]:\n        # check if the current number is consecutive by comparing it with the previous number\n        if num == last + 1:\n            # if it is consecutive, update the last number\n            last = num\n        else:\n            # if not consecutive, return False\n            return False\n    \n    # if the loop completes without returning False, it means all numbers are consecutive, so return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set from the second list to avoid duplicates\n    unique_elements2 = set(test_list2)\n    # initialize an empty list to store the intersection\n    intersection = []\n    # iterate over each element in the first list\n    for element1 in test_list1:\n        # check if the element is in the set of unique elements in the second list\n        if element1 in unique_elements2:\n            # if it is, add it to the intersection list\n            intersection.append(element1)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                result.append(tuple1)\n                break\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of elements using set intersection\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list\n    result = list(intersection)\n    \n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert both lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a set of elements from the first list\n    set1 = set(test_list1)\n    # create a set of elements from the second list\n    set2 = set(test_list2)\n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # convert the intersection to a list\n    result_list = list(intersection)\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set to store the elements of the first list\n    set1 = set(test_list1)\n    \n    # Create an empty set to store the common elements\n    common_elements = set()\n    \n    # Iterate through the second list and check if each element is in the set\n    for element in test_list2:\n        if element in set1:\n            # If an element is in both lists, add it to the common_elements set\n            common_elements.add(element)\n    \n    # Convert the common_elements set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Using set() to remove duplicates from both lists\n    test_list1 = list(set(test_list1))\n    test_list2 = list(set(test_list2))\n\n    # Sorting the lists based on the length of the tuples to find the intersection\n    test_list1.sort(key=len)\n    test_list2.sort(key=len)\n\n    # Finding the intersection of the sorted lists\n    intersection = []\n    i = j = 0\n    while i < len(test_list1) and j < len(test_list2):\n        if test_list1[i] == test_list2[j]:\n            intersection.append(test_list1[i])\n            i += 1\n            j += 1\n        elif len(test_list1[i]) < len(test_list2[j]):\n            i += 1\n        else:\n            j += 1\n\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1 == t2:\n                intersection.append(t1)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    result = set()\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1 == tup2:\n                result.add(tup1)\n    return tuple(result)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of unique elements from both lists\n    unique_elements = set(test_list1) & set(test_list2)\n    # Convert the set to a list and return it\n    return list(unique_elements)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces a character with another character in a string.\n    \n    Parameters:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the old character.\n    \n    Returns:\n    str: The modified string.\n    \"\"\"\n    \n    # Loop through each character in the string\n    for i in range(len(str1)):\n        \n        # If the current character is the target character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n            \n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string with the character replaced\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Splitting the string into a list of characters\n    chars = list(str1)\n    # Looping through the characters and replacing the matching characters with the new character\n    for i in range(len(chars)):\n        if chars[i] == ch:\n            chars[i] = newch\n    # Joining the list of characters back into a string\n    new_str = ''.join(chars)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function takes a string, a character to be replaced and a new character to replace it with.\n    It returns a new string with the replaced characters.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n    \"\"\"\n    newstr = \"\"\n    for char in str1:\n        if char == ch:\n            newstr += newch\n        else:\n            newstr += char\n    return newstr"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # sort the Counter object by value (in descending order)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # convert the sorted Counter object back to a dictionary\n    sorted_dict = {k:v for k,v in sorted_counter}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary into a Counter object\n    counter = Counter(dict1)\n    # Sort the Counter object by value in descending order\n    sorted_dict = dict(sorted(counter.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value in descending order.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object from the given dictionary\n    counter = Counter(dict1)\n    # Sort the Counter object based on values\n    sorted_counter = counter.most_common()\n    # Create a new dictionary from the sorted Counter object\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Sort a dictionary by value.\n    \"\"\"\n    # Create a Counter object from the dictionary\n    counter = Counter(dict1)\n    \n    # Sort the counter by values in descending order\n    sorted_counter = counter.most_common()\n    \n    # Sort the key-value pairs in descending order\n    sorted_dict = {k: v for k, v in sorted_counter}\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function sorts a dictionary by value in descending order.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = nums[0]\n    min_num = nums[0]\n    \n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n        \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum value in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    # Add the maximum and minimum value to find the sum of the largest and smallest value\n    return max_num + min_num\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n\n    # Find the maximum and minimum value in the array\n    max_value = nums[0]\n    min_value = nums[0]\n    for num in nums:\n        if num > max_value:\n            max_value = num\n        elif num < min_value:\n            min_value = num\n\n    # Calculate the sum of the maximum and minimum value\n    return max_value + min_value\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # loop through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Sort the array in ascending order\n    nums.sort()\n    # Get the largest and smallest values\n    max_val = nums[len(nums) - 1]\n    min_val = nums[0]\n    # Return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest value in the array\n    largest = max(nums)\n    smallest = min(nums)\n    # find the difference between the largest and smallest value\n    diff = largest - smallest\n    # find the sum of the largest and smallest value and the difference\n    result = largest + smallest + diff\n    # return the result\n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum value in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    # Sum of the maximum and minimum value\n    big_sum = max_num + min_num\n    return big_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    else:\n        # Find the largest value\n        largest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n        # Find the smallest value\n        smallest = nums[0]\n        for num in nums:\n            if num < smallest:\n                smallest = num\n        # Return the sum of the largest and smallest values\n        return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is all lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lowercase.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Using regular expression to match lowercase substrings\n    lower_pattern = re.compile(r'[a-z]+')\n    # Matching lowercase substrings in the string\n    matches = lower_pattern.findall(str1)\n    # Removing the matched substrings from the string\n    str1 = ''.join([char for char in str1 if char not in matches])\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[a-z]', '', str1) # remove all lowercase substrings using regular expression\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z][a-z]+\\b'\n\n    # Use the re.sub() method to remove all lowercase substrings from the string\n    str1 = re.sub(pattern, '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    lowercase_pattern = re.compile(r'[a-z]+')\n    lowercase_substrings = lowercase_pattern.findall(str1)\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    # Define the regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n\n    # Use the pattern to find all lowercase substrings in the input string\n    matches = pattern.findall(string)\n\n    # Loop through all matches and remove them from the input string\n    for match in matches:\n        string = string.replace(match, '')\n\n    # Return the modified string\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return re.sub(lowercase_pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function will remove all lowercase substrings from a given string.\n    '''\n    # create a pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # find all matches of the pattern in the string\n    matches = re.findall(pattern, str1)\n    # replace all matches with empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b\\w*([a-z])\\w*\\b'\n    \n    # Use the re.sub() method to replace all lowercase substrings with empty strings\n    str1 = re.sub(pattern, '', str1)\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Regular expression to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Use regular expression to find all lowercase substrings\n    matches = re.findall(pattern, str1)\n    # Remove all lowercase substrings from the string\n    str1 = re.sub(pattern, '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'([a-z]+)')\n    result = lowercase_pattern.sub('', str1)\n    return result"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    n = str(n)\n    # Return the first character of the string\n    return n[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns its first digit.\n    \"\"\"\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as an input and returns the first digit of the number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 10:\n        return first_Digit(n/10)\n    else:\n        return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    str_n = str(n)\n    # get the first digit of the string\n    first_digit = str_n[0]\n    # convert the first digit to an integer and return it\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = n % 10\n    return first"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n // 10**len(str(n))\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # creating an empty list to store the odd numbers\n    odd_list = []\n    # looping through the given list\n    for num in list:\n        # if the number is odd, appending it to the odd_list\n        if num % 2 == 1:\n            odd_list.append(num)\n    # returning the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    result = []\n\n    for num in list: \n        if num % 2!= 0: \n            result.append(num)\n\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for i in list:\n        if i % 2!= 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(x**3 for x in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_nums = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_nums += i\n    difference = sum_cubes - sum_nums\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Function to calculate the sum of cubes of first n natural numbers\n    def sum_cubes(n):\n        return sum(x**3 for x in range(1, n+1))\n\n    # Function to calculate the sum of first n natural numbers\n    def sum_natural(n):\n        return sum(range(1, n+1))\n\n    # Find the difference between sum of cubes and sum of natural numbers\n    return sum_cubes(n) - sum_natural(n)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Function to calculate the sum of cubes of a list of numbers\n    def cube_sum(numbers):\n        return sum([num**3 for num in numbers])\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    cubes = [i**3 for i in range(1, n+1)]\n    cube_sum_n = cube_sum(cubes)\n    \n    # Calculate the sum of the first n natural numbers\n    sum_n = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return cube_sum_n - sum_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of the first n natural numbers\n    cubes = [x**3 for x in range(1, n+1)]\n    sum_cubes = sum(cubes)\n\n    # Find the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_natural\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    # Calculate the sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        \n    # Calculate the sum of first n natural numbers\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n    \n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_sum = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return cubes_sum - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # sum of cubes of the first n natural numbers\n    sum_of_cubes = n*(n+1)*(2*n+1)/6\n\n    # sum of the first n natural numbers\n    sum_of_natural = n*(n+1)/2\n\n    # difference between the two sums\n    difference = sum_of_cubes - sum_of_natural\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = sum([x**3 for x in range(1, n+1)])\n    \n    # Find the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_sum = sum([i**3 for i in range(1, n+1)])\n    natural_sum = sum(range(1, n+1))\n    return cubes_sum - natural_sum"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    xor_sum = 0\n    count = 0\n    for i in range(N):\n        xor_sum ^= A[i]\n        if xor_sum & 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0 and xor_value <= N:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                xor = A[i] ^ A[j]\n                if xor % 2!= 0:\n                    count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize the count of odd pairs to zero\n    count = 0\n    # Iterate over all the elements in the array A\n    for i in range(N):\n        # Iterate over all the elements in the array A again\n        for j in range(N):\n            # If the XOR of the two elements is odd, increment the count\n            if A[i] ^ A[j] & 1:\n                count += 1\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes two lists A and N as input, where A is a list of integers and N is an integer. \n    It returns the number of pairs whose xor value is odd in the given list A.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    # Initialize count variable\n    count = 0\n    # Loop through all pairs of elements in array A\n    for i in range(N):\n        for j in range(i+1,N):\n            # Calculate xor value of A[i] and A[j]\n            xor_value = A[i] ^ A[j]\n            # If xor value is odd, increment count variable\n            if xor_value % 2 == 1:\n                count += 1\n    # Return count variable\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Loop through all pairs of elements in the array A\n    for i in range(N):\n        for j in range(i+1, N):\n            # Calculate the xor value of the pair of elements\n            xor = A[i] ^ A[j]\n\n            # Check if the xor value is odd\n            if xor % 2!= 0:\n                # Increment the count variable\n                count += 1\n\n    # Return the final count value\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the toggled string\n    toggled_string = \"\"\n    \n    # Loop through each character in the input string\n    for char in string:\n        # Check if the character is lowercase\n        if char.islower():\n            # Convert the character to uppercase\n            toggled_string += char.upper()\n        else:\n            # Convert the character to lowercase\n            toggled_string += char.lower()\n    \n    # Return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # create a list of characters from the string\n    chars = list(string)\n    # iterate over the characters and toggle the case\n    for i in range(len(chars)):\n        if chars[i].islower():\n            chars[i] = chars[i].upper()\n        else:\n            chars[i] = chars[i].lower()\n    # join the characters back into a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # convert the string to lowercase and join the characters\n    lowercase_string = string.lower()\n    # join the characters with a single space\n    toggled_string = ''.join(lowercase_string)\n    # return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the input numbers to strings and remove any leading zeros\n    n1 = str(n1)[1:]\n    n2 = str(n2)[1:]\n\n    # Create lists of digits for each number\n    n1_digits = [int(digit) for digit in n1]\n    n2_digits = [int(digit) for digit in n2]\n\n    # Create lists of per-digit differences\n    digit_diff = [abs(n1_digit - n2_digit) for n1_digit, n2_digit in zip(n1_digits, n2_digits)]\n\n    # Calculate the sum of the per-digit differences\n    digit_distance = sum(digit_diff)\n\n    return digit_distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to lists of digits\n    digit_n1 = [int(digit) for digit in str(n1)]\n    digit_n2 = [int(digit) for digit in str(n2)]\n    \n    # Calculate the absolute difference between the lists of digits\n    diff = [abs(digit1 - digit2) for digit1, digit2 in zip(digit_n1, digit_n2)]\n    \n    # Calculate the sum of the per-digit differences\n    sum_diff = sum(diff)\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings\n    num1 = str(n1)\n    num2 = str(n2)\n\n    # Initialize the sum of the differences\n    digit_diff_sum = 0\n\n    # Loop through each digit in the numbers\n    for i in range(len(num1)):\n        # Get the digit values in the numbers\n        digit1 = int(num1[i])\n        digit2 = int(num2[i])\n\n        # Calculate the absolute difference between the digits\n        digit_diff = abs(digit1 - digit2)\n\n        # Add the absolute difference to the sum of the differences\n        digit_diff_sum += digit_diff\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of their digits\n    digits_1 = [int(digit) for digit in str(n1)]\n    digits_2 = [int(digit) for digit in str(n2)]\n    \n    # Initialize the sum to 0\n    sum_diff = 0\n    \n    # Calculate the per-digit difference between the two integers and add it to the sum\n    for i in range(len(digits_1)):\n        if digits_1[i] > digits_2[i]:\n            sum_diff += digits_1[i] - digits_2[i]\n        elif digits_1[i] < digits_2[i]:\n            sum_diff += digits_2[i] - digits_1[i]\n    \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    '''\n    # convert the integers to lists of digits\n    digits1 = list(str(n1))\n    digits2 = list(str(n2))\n\n    # initialize the sum of differences as 0\n    diff_sum = 0\n\n    # iterate through each digit of each integer\n    for i in range(max(len(digits1), len(digits2))):\n        # calculate the per-digit difference\n        diff = abs(int(digits1[i]) - int(digits2[i]))\n\n        # add the difference to the sum of differences\n        diff_sum += diff\n\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to strings and split them into lists\n    str1 = str(n1)\n    str2 = str(n2)\n    digit_lists = [list(str1), list(str2)]\n\n    # Initialize variables to store the sum of differences and the number of differences\n    total_diff = 0\n    num_diff = 0\n\n    # Loop through the digits of each integer and compare them\n    for digit_list in digit_lists:\n        for i in range(len(digit_list)):\n            if digit_list[i]!= digit_list[i+1]:\n                # If there is a difference, add it to the total and increment the number of differences\n                total_diff += abs(int(digit_list[i]) - int(digit_list[i+1]))\n                num_diff += 1\n\n    # Return the sum of differences and the number of differences\n    return total_diff, num_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    diff = 0\n    for i in range(max(len(n1), len(n2))):\n        diff += abs(int(n1[i]) - int(n2[i]))\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n\n    # Calculate the length of the longest string\n    max_length = max(len(num1_str), len(num2_str))\n\n    # Initialize the sum variable\n    sum_of_diff = 0\n\n    # Loop through each digit in the strings\n    for i in range(max_length):\n        # Extract the digit at the current index\n        digit1 = num1_str[i] if i < len(num1_str) else 0\n        digit2 = num2_str[i] if i < len(num2_str) else 0\n\n        # Calculate the per-digit difference\n        diff = abs(int(digit1) - int(digit2))\n\n        # Add the difference to the sum variable\n        sum_of_diff += diff\n\n    # Return the sum of the per-digit differences\n    return sum_of_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both numbers to strings and split them into lists\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # initialize the sum to zero\n    total_sum = 0\n    # iterate over each character in the strings\n    for i in range(len(n1_str)):\n        # get the difference between the characters\n        digit_diff = abs(ord(n1_str[i]) - ord(n2_str[i]))\n        # add the digit difference to the total sum\n        total_sum += digit_diff\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to strings and split them into lists of digits\n    s1 = list(str(n1))\n    s2 = list(str(n2))\n\n    # initialize the sum of differences\n    digit_sum = 0\n\n    # iterate through the digits of both numbers\n    for i in range(len(s1)):\n        # calculate the difference between the corresponding digits and add it to the sum\n        digit_sum += abs(int(s1[i]) - int(s2[i]))\n\n    # return the sum of differences\n    return digit_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    elif size == 2:\n        return max(a[0], a[1])\n\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if i >= size - 1:\n            break\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    \n    dp = [0] * size\n    max_sum = a[0]\n    for i in range(1, size):\n        dp[i] = max(a[i], a[i] + dp[i-1])\n        max_sum = max(max_sum, dp[i])\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(len(a)):\n        current_sum += a[i]\n\n        if i >= size - 1:\n            max_sum = max(max_sum, current_sum)\n            current_sum -= a[i-size+1]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n\n    max_sum = max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_sum = max(max_sum, max_ending_here)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - 1:\n            break\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf') # initialize max_sum to negative infinity\n    window_sum = 0 # initialize window_sum to 0\n    for i in range(size):\n        window_sum += a[i]\n        if window_sum > max_sum:\n            max_sum = window_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        return 0\n\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n    end = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i - size + 1\n            end = i\n        elif curr_sum < 0:\n            curr_sum = 0\n            start = i\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for end in range(size, len(a)):\n        current_sum += a[end]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = end - size + 1\n\n        elif current_sum < 0:\n            current_sum = 0\n\n    return max_sum, start"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n\n    # Convert the union to a list and sort it\n    sorted_union = sorted(union)\n\n    # Output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert both tuples to lists and concatenate them\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    list3 = list1 + list2\n    # remove duplicates from the list\n    list3 = list(set(list3))\n    # sort the list and convert it back to a tuple\n    list3 = tuple(sorted(list3))\n    # return the sorted tuple\n    return list3"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Combine the two input tuples into one\n    union_tup = test_tup1 + test_tup2\n\n    # Sort the union tuple in ascending order\n    union_tup = sorted(union_tup)\n\n    # Output the sorted union tuple\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = sorted(set(test_tup1 + test_tup2))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tuple = test_tup1 + test_tup2\n    \n    # Use set() to remove duplicates from the combined tuple\n    unique_tuple = set(combined_tuple)\n    \n    # Convert the set back to a tuple and sort it in ascending order\n    sorted_tuple = sorted(unique_tuple)\n    \n    # Output the sorted tuple\n    print(sorted_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of the two lists\n    union = sorted(set(test_tup1) | set(test_tup2))\n    # Print the union\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # find the union of the two tuples using set operation\n    union = set(test_tup1) | set(test_tup2)\n    # convert the set to a list and sort the elements in ascending order\n    union_list = sorted(list(union))\n    # return the sorted union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Merge the two tuples and store them in a set\n    merged_set = set(test_tup1 + test_tup2)\n    \n    # Convert the set back to a tuple and sort it in ascending order\n    union_tup = sorted(tuple(merged_set))\n    \n    # Print the sorted union tuple\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate the two tuples\n    union_list = test_tup1 + test_tup2\n    # Remove duplicates from the union list\n    union_list = list(set(union_list))\n    # Sort the union list\n    union_list.sort()\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # Merge two tuples using set() and sorted()\n    merged_tup = sorted(set(test_tup1) | set(test_tup2))\n\n    # Output the merged tuple\n    print(\"The union of the elements of the two tuples is:\", merged_tup)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # Find the length of the longest sublist\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize variables\n    max_len = 0\n    curr_len = 0\n\n    # loop through each sublist in the list\n    for i in range(len(lst)):\n        curr_len += 1\n\n        # check if the current sublist is longer than the maximum sublist\n        if curr_len > max_len:\n            max_len = curr_len\n\n    # return the maximum sublist length\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize the length of the longest sublist as 1\n    max_length = 1\n\n    # Iterate over each sublist of the list\n    for i in range(len(lst)):\n        # Calculate the length of the sublist using the formula:\n        # length = i + 1 since we start with 0 and increment i at each step\n        length = i + 1\n        # Check if the current sublist is longer than the current maximum length\n        if length > max_length:\n            # Update the maximum length\n            max_length = length\n\n    # Return the maximum length of the sublists\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and finds the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if max_length < len(lst[i:j+1]):\n                max_length = len(lst[i:j+1])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        max_length = max(max_length, len(lst[i]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0  \n    for i in range(len(lst)):  \n        sub_lst = lst[i:]  \n        max_length = max(max_length, len(sub_lst))  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = []\n    for i in range(len(lst)):\n        if i == 0:\n            longest_sublist.append(1)\n        else:\n            if lst[i] > lst[i-1]:\n                longest_sublist.append(longest_sublist[-1]+1)\n            else:\n                longest_sublist.append(1)\n    return max(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if max_len < len(sublist):\n                max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    # Initialize variables to keep track of the length of the longest sublist seen so far\n    longest_length = 1\n\n    # Loop through the list of sublists\n    for sublist in lst:\n        # Calculate the length of the current sublist and update the longest sublist seen so far\n        current_length = max(sublist)\n        longest_length = max(longest_length, current_length)\n\n    # Return the length of the longest sublist seen so far\n    return longest_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'  # matches any opening and closing double quotes followed by anything between them\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Using regular expressions to extract values between quotation marks\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\')[^\\']*(?=\\')'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"[^\"]*\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(\\w+?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input, finds all values between quotation marks, and returns a list of those values.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Creating a dictionary to store the frequency of each element in the list\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Counting the number of possible pairs\n    count = 0\n    for i in freq:\n        if i < n:\n            continue\n        for j in freq:\n            if j <= i:\n                continue\n            if freq[i] > 0 and freq[j] > 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    # Calculate the number of pairs in the array\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += freq[arr[i]] - 1\n                \n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    # sort the list\n    arr.sort()\n    # initialize variables\n    count = 0\n    i = 0\n    j = n-1\n\n    while i < j:\n        # check if the current elements are equal\n        if arr[i] == arr[j]:\n            count += (j-i)\n            # move the pointers to next elements\n            i += 1\n            j -= 1\n        elif arr[i] < arr[j]:\n            # move the left pointer to the right\n            i += 1\n        else:\n            # move the right pointer to the left\n            j -= 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n        arr (list): List of integers.\n        n (int): Size of the list.\n\n    Returns:\n        int: The number of possible unordered pairs.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    # initialize variables for counting\n    count = 0\n    pair_count = 0\n    \n    # loop through the array and check for pairs\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                pair_count += 1\n    \n    # return the final count\n    return pair_count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    result = []\n    for char in word:\n        result.append(char)\n    return result"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into individual characters\n    digits = [int(digit) for digit in str(n)]\n    # Initialize a variable to store the sum of the digits\n    total = 0\n    # Iterate over the list of digits and add each digit to the sum\n    for digit in digits:\n        total += digit\n    # Return the sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a string\n    num_str = str(n)\n    \n    # initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # iterate over each digit in the string\n    for digit in num_str:\n        # convert each digit to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    \n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum = 0\n\n    # Loop through each digit of the integer\n    while n > 0:\n        # Extract the last digit of the integer\n        digit = n % 10\n\n        # Add the digit to the sum\n        sum += digit\n\n        # Remove the last digit from the integer\n        n //= 10\n\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    n_str = str(n)\n    # Initialize a variable to store the sum\n    sum_digits = 0\n    # Loop through each digit in the string\n    for digit in n_str:\n        # Convert the digit to an integer and add it to the sum\n        sum_digits += int(digit)\n    # Return the sum of the digits\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum_of_digits = 0\n    while n > 0:\n        sum_of_digits += n % 10\n        n //= 10\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the number to a string so we can iterate over its digits\n    num_str = str(n)\n    \n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate over each digit of the number\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum\n        total += int(digit)\n        \n    # Return the sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): a non-negative integer\n\n    Returns:\n    int: the sum of the digits of n\n    \"\"\"\n    # Convert n to a string to extract its digits\n    digits = list(str(n))\n    # Initialize the sum to 0\n    sum_digits = 0\n    # Loop through the digits and add them to the sum\n    for digit in digits:\n        sum_digits += int(digit)\n    # Return the sum of the digits\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    else:\n        sum = 0\n        while n > 0:\n            digit = n % 10\n            sum += digit\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    while n > 0:\n        sum_of_digits += n % 10\n        n //= 10\n    return sum_of_digits"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(lst):\n    '''\n    Check whether a specified list is sorted or not.\n    '''\n    if len(lst) < 2:\n        return True\n    \n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted and False otherwise.\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # Check if the list is empty\n    if not list1:\n        return True\n\n    # Initialize the first element as the current element\n    current = list1[0]\n\n    # Iterate through the list\n    for i in range(1, len(list1)):\n        # If the current element is greater than the next element, return False\n        if list1[i] > current:\n            return False\n\n        # Update the current element\n        current = list1[i]\n\n    # If all the elements are less than or equal to the current element, return True\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted in ascending order, and False otherwise.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is empty\n    if not list1:\n        return False\n\n    # Check if the list is sorted\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n\n    Args:\n        length (int): The length of the list to be created.\n\n    Returns:\n        list: A list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of the list\n    for sublist in list1:\n        # Sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create a list to store the sorted sublists\n    sorted_sublists = []\n    \n    # Iterate over each sublist in the given list of lists\n    for sublist in list1:\n        # Sort the sublist using the built-in sort function\n        sublist.sort()\n        \n        # Add the sorted sublist to the sorted_sublists list\n        sorted_sublists.append(sublist)\n    \n    # Return the sorted_sublists list\n    return sorted_sublists"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Convert the sublist to a string and split it into individual characters\n        sorted_sublist = sorted(sublist)\n        # Convert the sorted sublist back to a list\n        list1[list1.index(sublist)] = sorted_sublist"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a new list to store unique numbers\n    unique_nums = []\n    \n    # loop through each list in the input list\n    for num_list in nums:\n        # loop through each number in the current list\n        for num in num_list:\n            # if the number is not in the unique_nums list, add it\n            if num not in unique_nums:\n                unique_nums.append(num)\n    \n    # return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Initialize an empty dictionary to store the unique numbers\n    unique_nums = {}\n    for num in nums:\n        # Check if the number is already in the dictionary\n        if num not in unique_nums:\n            # Add the number to the dictionary with its count set to 1\n            unique_nums[num] = 1\n        else:\n            # Increment the count of the number in the dictionary\n            unique_nums[num] += 1\n\n    # Initialize an empty list to store the unique numbers\n    result = []\n    # Loop through the dictionary to extract the unique numbers\n    for num, count in unique_nums.items():\n        if count == 1:\n            result.append(num)\n\n    # Return the unique numbers in a list\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of numbers and returns a list of the unique numbers\n    without any duplicates.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Given a list of lists of numbers, return a new list where the duplicates have been removed.\n    \"\"\"\n    seen = set()\n    result = []\n    for sublist in nums:\n        for num in sublist:\n            if num not in seen:\n                result.append(num)\n                seen.add(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert the list of lists to a set to remove duplicates\n    unique_nums = set(sum(nums, []))\n    # Convert the set back to a list\n    final_list = list(unique_nums)\n    return final_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of numbers.\n\n    Parameters:\n    nums: A list of numbers\n\n    Returns:\n    A new list with only the unique numbers in the original list.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = sorted(list(set(list_data)))\n    unique_product = 1\n    for num in unique_list:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = sorted(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_set = set(list_data)\n    unique_list = sorted(list(unique_set))\n\n    product = 1\n    for num in unique_list:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data) # create a set of unique numbers in the list\n    product = 1 # initialize the product to 1\n    \n    for num in unique_numbers:\n        product *= num # multiply the product by each unique number in the set\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # create a set from the given list to get only the unique numbers\n    unique_numbers = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Creating a set to store the unique elements in the list\n    unique_set = set(list_data)\n    # Converting the set to a list and multiplying all its elements\n    result = 1\n    for element in unique_set:\n        result *= element\n    return result"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and calculates the product of the unique numbers in the list.\n    \"\"\"\n    unique_list = list(set(list_data))  # Create a set of unique numbers from the input list\n    unique_product = 1\n    for number in unique_list:\n        unique_product *= number\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Create a set to store unique numbers\n    unique_set = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    # Return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # create a set to store unique numbers\n    unique_nums = set(list_data)\n\n    # calculate the product of unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of a cylinder\n    surface_area = 2 * pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = 2 * (3.14 * r ** 2 + h)\n    print(\"The surface area of the cylinder is\", area, \"square units.\")"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    surface_area = 2 * pi * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = math.pi * r ** 2  # Finding the area using Pythagorean theorem\n    volume = area * h  # Finding the volume using the formula for volume of a cylinder\n    surface_area = 2 * area  # Multiplying the area by 2 to get the surface area\n\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder using Heron's formula.\n\n    Args:\n        r (float): radius of the cylinder\n        h (float): height of the cylinder\n\n    Returns:\n        float: surface area of the cylinder\n    \"\"\"\n    return 2 * (r ** 2 + h ** 2) * math.pi"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    return 2 * r * h + 2 * r * r + 2 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Calculate the surface area of the cylinder\n    surface_area = math.pi * (r ** 2 + h ** 2)\n    \n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) >= len(B):\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n    else:\n        for i in range(len(B)-len(A)+1):\n            if B[i:i+len(A)] == A:\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B): # if length of A is greater than B, then it's not a subarray\n        return False\n\n    for i in range(len(A)):\n        if A[i] not in B: # if A[i] is not present in B, then A is not a subarray\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if B[i:]:\n            if B[i:].count(A[i]) == len(A[i]):\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)): \n        if A[i] in B: \n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    if len(B) > len(A):\n        return False\n\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            j += 1\n            i += 1\n        else:\n            i = i - j + 1\n            j = i + 1\n\n        if j == len(B):\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if B[i] in A:\n            if i+len(B[i:]) in A:\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists A and B as input and returns True if B is a sublist of A.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    if len(B) > len(A):\n        return False\n    i = 0\n    j = 0\n    while j < len(A):\n        if A[j] == B[0]:\n            i = j\n            j += 1\n            while j < len(A) and A[j] == B[i - j]:\n                j += 1\n            if j == len(A):\n                return True\n        else:\n            i = j\n            j += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # Check if B is a sublist of A\n    if len(B) > len(A):\n        return False\n    elif len(B) == len(A):\n        return B == A\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the given number to string\n    num_str = str(n)\n    # split the string to get individual digits\n    digits = [int(i) for i in num_str]\n    # find the last digit in the factorial of the number\n    last_digit = digits[-1]\n    # multiply the last digit by factorial of all other digits\n    factorial = 1\n    for i in range(len(digits)-1):\n        factorial *= digits[i]\n    return last_digit * factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = int(factorial/n)\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # initialize the result variable to 0\n    result = 0\n    # loop through each digit in the number\n    for digit in str(n):\n        # convert the digit to an integer and add it to the result variable\n        result += int(digit)\n    # return the result\n    return result % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    # converting the number to a string\n    str_n = str(n)\n    # finding the last digit in the string\n    last_digit = str_n[-1]\n    # converting the last digit to an integer\n    last_digit = int(last_digit)\n    # finding the factorial of the number\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n    # returning the last digit in the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    # loop through each digit of the factorial, starting from the last one\n    for i in range(len(str(n))):\n        # compute the factorial of the current digit\n        factorial = 1\n        for j in range(1, i+1):\n            factorial *= j\n        # extract the last digit of the factorial\n        last_digit = factorial % 10\n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num = str(n)\n    \n    # Find the last character of the number\n    last_digit = num[-1]\n    \n    # Convert the last character to an integer and return it\n    return int(last_digit)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find the last digit of factorial\n    last_digit = factorial % 10\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # create a variable to store the last digit in the factorial\n    last_digit = 0\n    \n    # initialize a variable to keep track of the number of digits in the factorial\n    num_digits = 0\n    \n    # loop through each digit in the factorial\n    while n > 0:\n        # get the last digit in the factorial\n        digit = n % 10\n        # add the last digit to the last_digit variable\n        last_digit = last_digit + digit\n        \n        # increment the number of digits in the factorial\n        num_digits += 1\n        \n        # remove the last digit from the factorial\n        n = n // 10\n        \n    # return the last digit in the factorial\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n\n    # Iterate through each list in turn and add each element to the interleaved list\n    for list_ in [list1, list2, list3]:\n        for element in list_:\n            interleaved_list.append(element)\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    # Initialize an empty list to store the final result\n    result = []\n    # Check if all lists have the same length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    # Iterate through each element of the lists\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    # Return the final result\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Combine the lists in order\n    combined_list = list1 + list2 + list3\n    # Flatten the list\n    return [i for sublist in combined_list for i in sublist]"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    :param list1: a list of integers\n    :param list2: a list of integers\n    :param list3: a list of integers\n    :return: a single list of interleaved integers\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n\n    # Initialize an empty list to store the interleaved integers\n    interleaved_list = []\n\n    # Loop through the lists and add each integer to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create a list to store the interleaved list\n    interleaved_list = []\n    # Iterate through each list and append its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # Check if the element exists in the second tuple\n        if element not in test_tup2:\n            # If it doesn't, add it to the dissimilar list\n            dissimilar.append(element)\n    # Return the dissimilar list\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list containing all the elements that are in \n    one tuple but not in the other tuple.\n    \"\"\"\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    diff_set = set(test_tup1) - set(test_tup2)\n    return diff_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create a dictionary to store the counts of each element in the first tuple\n    count1 = {}\n    for elem in test_tup1:\n        count1[elem] = count1.get(elem, 0) + 1\n    \n    # Create a dictionary to store the counts of each element in the second tuple\n    count2 = {}\n    for elem in test_tup2:\n        count2[elem] = count2.get(elem, 0) + 1\n    \n    # Calculate the difference between the two dictionaries\n    diff = {}\n    for elem in count1:\n        diff[elem] = count2.get(elem, 0) - count1.get(elem, 0)\n    \n    # Create a list of tuples containing the elements and their differences\n    dissimilar_list = []\n    for elem in diff:\n        if diff[elem]!= 0:\n            dissimilar_list.append((elem, diff[elem]))\n    \n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Check if the elements at the current indices are different\n        if test_tup1[i]!= test_tup2[i]:\n            # If they are different, append them to the list\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples must have the same length.\"\n    \n    # create an empty set to store the dissimilar elements\n    dissimilar_set = set()\n    \n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # if the element is not equal to the corresponding element in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # add the element to the set of dissimilar elements\n            dissimilar_set.add(test_tup1[i])\n    \n    # convert the set to a list and sort it\n    dissimilar_list = sorted(list(dissimilar_set))\n    \n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Using set() to remove duplicates from test_tup1 and test_tup2\n    unique_tup1 = set(test_tup1)\n    unique_tup2 = set(test_tup2)\n\n    # Using set() to find the elements that are only present in one of the tuples\n    dissimilar_tup1 = unique_tup1 - unique_tup2\n    dissimilar_tup2 = unique_tup2 - unique_tup1\n\n    # Finding the intersection of the two sets\n    common_elements = unique_tup1.intersection(unique_tup2)\n\n    # Combining the two sets to get the final list of dissimilar elements\n    dissimilar_list = list(dissimilar_tup1) + list(dissimilar_tup2) + list(common_elements)\n\n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    filtered_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            filtered_tuple.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            filtered_tuple.append(i)\n    return filtered_tuple\n\ndef is_even(num):\n    return num % 2 == 0\n\ntest_tuple = (1, (2, 3, 4, 5, 6), 7, (8, 9, 10, 11), 'ten', 'eleven')\nresult = even_ele(test_tuple, is_even)\nprint(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            if len(element) == 2:\n                if even_fnc(element[0]):\n                    new_list.append(element[0])\n        else:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple, tuple) or not isinstance(even_fnc, callable):\n        return test_tuple\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            result.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            result.append(elem)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # Initialize an empty list to store the even elements\n    even_list = []\n    \n    # Iterate through the tuple elements\n    for i in test_tuple:\n        \n        # Check if the element is even using the provided function\n        if even_fnc(i):\n            \n            # Add the even element to the even list\n            even_list.append(i)\n    \n    # Return the even list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elems = []\n    for item in test_tuple: \n        if isinstance(item, (tuple, list)): \n            even_elems.extend(even_fnc(item)) \n        elif even_fnc(item): \n            even_elems.append(item) \n    return even_elems"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    new_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            new_tuple.append(item)\n\n    return new_tuple\n\ndef is_even(num):\n    '''\n    A helper function to check if a number is even or not.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if isinstance(elem, list):\n            new_tuple.append(even_ele(elem, even_fnc))\n        elif isinstance(elem, tuple):\n            new_tuple.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            new_tuple.append(elem)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for elem in test_tuple:\n        if type(elem) == tuple:\n            new_elem = even_ele(elem, even_fnc)\n        else:\n            new_elem = even_fnc(elem)\n        new_tuple.append(new_elem)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(x):\n        '''\n        Helper function to check if a number is even.\n        '''\n        return x % 2 == 0\n\n    for i, element in enumerate(test_tuple):\n        if isinstance(element, tuple):\n            even_ele(element, even_fnc)\n        elif is_even(even_fnc(element)):\n            even_fnc(element)\n\n    return test_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s**2)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+(b*s)+("
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = (s * b) + (s * b) + (b * s * 2)\n    print(\"The surface area of the pyramid is:\", surface)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s + 2 * b * b + 2 * b * s + 2 * b + 2 * s + 6 * b * b + 6 * b * s + 6 * b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the surface area of the pyramid using the formula area = (b+s)*h/2\n    area = (b + s) * s / 2\n    # Return the surface area of the pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 1/2 * b * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    #calculate the surface area of the pyramid\n    surface_area = (b**2) * s\n\n    #return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b, s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    This function takes in two parameters, b and s, representing the base and height of the square pyramid.\n    It calculates and returns the surface area of the square pyramid.\n    \"\"\"\n    return 2 * b * s + 6 * b * b + 6 * s * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6 * b * s + 2 * b * b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(base_edge, height):\n    '''\n    This function takes two arguments: the base edge of the pyramid and the height of the pyramid.\n    It returns the surface area of the pyramid.\n    '''\n\n    # Calculate the surface area using the Heron's formula\n    surface_area = 0.5 * base_edge * height * base_edge\n\n    return surface_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Computes the nth Catalan number using the formula:\n\n    C(n) = (n+1) C(n-1) - n C(n-2)\n\n    Args:\n        n: integer, the index of the Catalan number to be computed\n\n    Returns:\n        The nth Catalan number\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (n+1) - catalan_number(n-2) * n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns the nth Catalan number.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2) + catalan_number(n-3)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize the Catalan numbers\n    catalan = [1]\n    for i in range(1, n+1):\n        # Calculate the Catalan number using the formula\n        catalan.append(4*i*(i-1)/(i+2) + catalan[i-1])\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_numbers = [1]\n    for i in range(1, num+1):\n        catalan_numbers.append(sum([i*catalan_numbers[j] for j in range(i)]))\n    return catalan_numbers[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize the first term of the series\n    C = 1\n    \n    # Iterate through the series\n    for i in range(1, n+1):\n        # Calculate the Catalan number at each iteration\n        C *= 2*i - 1\n        C //= i\n    return C"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) * (num + 1) // 2"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    a = 1\n    b = 1\n    for i in range(2, n+1):\n        a = (a * i) // 1\n        b = (b * (2*i+1)) // 1\n    return a + b"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns the nth Catalan number.\n    \n    Args:\n    n: int, the index of the Catalan number to be computed.\n    \n    Returns:\n    int, the nth Catalan number.\n    \"\"\"\n    \n    if n == 0 or n == 1:\n        return 1\n    \n    return (2*n-1) * catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize the factorial of n-1 to catalan(n-1)\n    fact = [1]*(n-1)\n    fact[0] = 1\n    for i in range(1, n-1):\n        fact[i] = i*(i+1)\n    # Calculate the catalan number using the factorial\n    catalan = 1\n    for i in range(n-1):\n        catalan += fact[i]*fact[n-1-i]\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    catalan = 1\n    for i in range(1, num + 1):\n        catalan *= (4 * i - 1) // i\n    return catalan"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b(\\w+ly)\\b'\n\n    # Use the re.findall() function to find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of the matches\n    positions = []\n\n    # Loop through each match and append its position to the positions list\n    for match in matches:\n        positions.append(text.index(match))\n\n    # Return a list of tuples containing the adverb and its positions in the text\n    return [(match, pos) for match, pos in zip(matches, positions)]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(ly)\\b'\n\n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Iterate through the matches and print the adverb and its position in the text\n    for i, match in enumerate(matches):\n        print(match, 'at position', i)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b([a-zA-Z]+)ly\\b'\n\n    # Use re.findall() to find all occurrences of the pattern in the text\n    adverbs = re.findall(pattern, text)\n\n    # Return the list of adverbs and their positions in the text\n    return adverbs, [m.start() for m in re.finditer(pattern, text)]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Find all words that start with 'a' and end with 'ly'\n    matches = re.findall(r'\\ba[b-df-hj-np-tv-z]*ly\\b', text)\n\n    # Iterate through the matches and find their positions in the text\n    positions = []\n    for match in matches:\n        start_pos = text.find(match)\n        end_pos = start_pos + len(match)\n        positions.append((start_pos, end_pos))\n\n    # Return a list of the positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define regular expression pattern for adverbs ending with ly\n    pattern = r'\\b[a-z]+ly\\b'\n    # find all non-overlapping matches of pattern in the text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    # initialize empty list to store adverb positions\n    positions = []\n    # iterate through matches and append their positions to positions list\n    for match in matches:\n        positions.append(match.start())\n    # return positions list\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    positions = [m.start() for m in matches]\n    return matches, positions\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(?:er|est|es|ed|ing|ly|re|s|edly|ingly|lying|edly|edlyly|edly|ingly|ingly|inglyly|ingly|edly|ingly|edlyly|edly|ingly|edlylyly|edly|ingly|edlylylyly|edly|ingly|edlylylylyly|edly|ingly|edlylylylylyly|edly|ingly|edlylylylylylyly|edly|ingly|edlylylylylylylyly|edly|ingly|edlylylylylylylylyly|edly|ingly|edlylylylylylylylylyly|edly|ingly|edlylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylylyly|edly|ingly|edlylylylylyly"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of tuples containing the first adverb ending with ly and its positions.\n    '''\n    # Define a regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # Use the re.finditer() function to find all matches of the pattern in the input text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Iterate through the matches and append the adverb and its position to the list\n    for match in matches:\n        # Get the start and end positions of the match\n        start = match.start()\n        end = match.end()\n\n        # Extract the text between the start and end positions and store it in a variable\n        adverb = text[start:end]\n\n        # Append the adverb and its position to the list\n        adverbs.append((adverb, start))\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Use the re.finditer() function to search for all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Create an empty list to store the adverb positions\n    adverb_positions = []\n\n    # Iterate through the matches and append their positions to the adverb_positions list\n    for match in matches:\n        adverb_positions.append(match.start())\n\n    # Return the adverb positions list\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define regular expression pattern to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n    # Use re.finditer() to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # Initialize empty list to store positions of adverbs ending with ly\n    positions = []\n    # Iterate over the matches and append the position of each match to the positions list\n    for match in matches:\n        positions.append(match.start())\n    # Return the list of positions of adverbs ending with ly\n    return positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n as input and returns a list of the n most expensive items in the dataset.\n    '''\n    # initialize a min heap to store the n most expensive items\n    min_heap = []\n    # initialize a variable to store the total value of the items\n    total_value = 0\n\n    # iterate through the items and add each item to the min heap and the total value\n    for item in items:\n        heapq.heappush(min_heap, item)\n        total_value += item\n\n    # return the n most expensive items\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap of size n\n    max_heap = [0] * n\n    \n    # Fill the max heap with the first n items\n    heapq.heapify(max_heap[:len(items)])\n    \n    # Iterate over the remaining items\n    for item in items[len(max_heap):]:\n        # If the item is less than the highest item in the max heap, remove the highest item\n        if item < max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, item)\n        \n        # If the heap is now full, remove the lowest item from the heap\n        elif len(max_heap) == n:\n            heapq.heappop(max_heap)\n    \n    # Return the n most expensive items\n    return max_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap of size n\n    max_heap = []\n    for item in items:\n        heapq.heappush(max_heap, -item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # Return the n most expensive items\n    return [heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Returns the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap with the first n items\n    min_heap = []\n    for item in items[:n]:\n        heapq.heappush(min_heap, -item)\n    # Remove the min item from the heap until there are n items left\n    for _ in range(n):\n        heapq.heappop(min_heap)\n    # The top n items are the n most expensive items\n    return [-item for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a max heap of size n\n    max_heap = []\n    for item in items:\n        heapq.heappush(max_heap, item)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes a list of items and an integer n as input and returns the n most expensive items in the list.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap,item)\n        elif item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,item)\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items.\n\n    The function uses a min-heap to keep track of the n most expensive items. We first create a min-heap of size n and add the first n items to the heap. Then, for each subsequent item in the list, we compare it with the smallest item in the heap. If the item is more expensive, we remove the smallest item from the heap and add the new item to the heap.\n\n    If we find n items that are the same as the n most expensive items, we return them in the same order as they appeared in the input list.\n\n    Complexity Analysis:\n\n    Time Complexity: O(n log n) due to the sorting step in the heapq module.\n    Space Complexity: O(n) as we are storing n items in the heap.\n    '''\n\n    # Create a min-heap of size n and add the first n items to the heap\n    heap = []\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n\n    # For each subsequent item in the list, compare it with the smallest item in the heap\n    for item in items[n:]:\n        if item < heap[0]:\n            # If the item is more expensive, remove the smallest item from the heap and add the new item to the heap\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    # Return the n most expensive items in the same order as they appeared in the input list\n    return sorted(heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items from the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input and returns the n most expensive items in the list.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [-item for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n, where the value of each element is the cost of the item\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item))\n        # If the size of the heap exceeds n, remove the smallest element from it\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    # Return the n most expensive items\n    return [item[1] for _, item in heap]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    # Calculate the length of the first part of the list\n    first_len = l[:n]\n\n    # Calculate the length of the second part of the list\n    second_len = l[n:]\n\n    # Combine the first and second parts of the list\n    new_list = first_len + second_len\n\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        return l[:n] + [l[n]] + split_Arr(l[n+1:], n)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    lst = l[:n] + [l[n]]\n    # Add the first part to the end\n    return lst + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    # Split the list at the nth element\n    l1, l2 = l[:n], l[n:]\n\n    # Concatenate the two parts\n    l = l1 + l2\n\n    # Return the updated list\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n >= len(l):\n        return l\n    else:\n        mid = len(l) // 2\n        first_part = l[:mid]\n        second_part = l[mid:]\n        first_part.extend(second_part)\n        return first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first = l[:n]\n    second = l[n:]\n    return first + second"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    else:\n        return l[n-1:] + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    split_list = l[:n]\n    # Add the first part of the list to the end\n    result_list = [split_list[-1]] + split_list[:-1]\n    return result_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n > len(l):\n        print(\"Invalid index. Please provide an index within the range of the list.\")\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    arr = l[:n]\n    # Add the first part to the end of the list\n    l = l[n:]\n    l.extend(arr)\n    return l"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # convert the list to a tuple\n    tuple_list = tuple(listx)\n    return tuple_list"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    \n    min_num = min(nums)\n    max_num = max(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return abs(max_val - min_val)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty\"\n    \n    # Find the largest and smallest values in the list\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    \n    # Find the difference between the largest and smallest values\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Get the maximum value in the list\n    max_val = max(nums)\n    \n    # Get the minimum value in the list\n    min_val = min(nums)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"Error: Empty list\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return abs(max_num - min_num)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store perfect squares\n    perfect_squares = []\n    \n    # Loop through the range of numbers between a and b, inclusive\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        square = i * i\n        if square == i:\n            # If it is, add it to the list of perfect squares\n            perfect_squares.append(square)\n            \n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == i*i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a:\n            print(i, a)\n        elif i**2 == b:\n            print(i, b)\n        else:\n            print(i, i**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a**0.5)+1, int(b**0.5)+1):\n        square = i**2\n        if square > a and square < b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        print(i**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b + 1):\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Calculate the difference between the two numbers\n    diff = b - a\n\n    # Initialize a variable to hold the list of perfect squares\n    perfect_squares_list = []\n\n    # Iterate from the smallest perfect square to the largest perfect square\n    for i in range(a, b):\n        # Check if the square is a perfect square\n        square = i * i\n        if square == diff:\n            # If it is, append it to the list\n            perfect_squares_list.append(square)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(int(a**0.5), b+1):\n        if num**2 == a:\n            return num\n        elif num**2 == b:\n            return num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a # swap a and b if a is greater than b\n    \n    for i in range(a, b+1):\n        if i*i == a:\n            print(i, end=' ')\n        elif i*i > a:\n            print(i*i, end=' ')"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(int(a ** 0.5), int(b ** 0.5) + 1):\n        if i ** 2 == a:\n            result.append(i)\n        if i ** 2 == b:\n            result.append(i)\n    return result"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    r, theta = x, y\n    # convert polar coordinates to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # convert polar coordinates to rectangular coordinates\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.exp(1j*theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x**2 + y**2)\n    phi = cmath.phase(x + y*1j)\n    return r*cmath.cos(phi), r*cmath.sin(phi)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    This function converts polar coordinates to rectangular coordinates.\n    \n    :param r: radius of the circle\n    :param theta: angle of the line from the origin\n    \n    :return: a tuple of the x and y coordinates of the point in rectangular coordinates\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, x.imag, y.real, y.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return (r * cmath.exp(1j*theta), r)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    theta = cmath.phase(x)\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n    return (rect_x, rect_y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    This function takes in two parameters, r (radius) and theta (angle in radians).\n    It returns a tuple (x,y), where x and y are the corresponding x and y coordinates\n    in rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the list has length greater than 1\n    if length > 1:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the list has only one element\n    if len(newList) == 1:\n        print(\"The list has only one element.\")\n        return\n    \n    # Check if the list has two or more elements\n    elif len(newList) > 1:\n        # Swap the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        \n        # Print the updated list\n        print(\"The updated list is:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length == 0:\n        return newList\n    elif length == 1:\n        newList[0], newList[0] = newList[0], newList[0]\n        return newList\n    else:\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        return swap_List(newList[1:])"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: # if the list has less than 2 elements, return the same list\n        return newList\n    else: # if the list has more than 1 element\n        newList[0], newList[-1] = newList[-1], newList[0] # swap the first and last elements\n        return newList # return the modified list"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # get the length of the list\n    n = len(newList)\n    \n    # if the list has less than 2 elements, return the list as is\n    if n < 2:\n        return newList\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # we will store the first element in a temporary variable\n    temp = newList[0]\n    \n    # we will change the first element to the last element\n    newList[0] = newList[-1]\n    \n    # we will change the last element to the first element\n    newList[-1] = temp\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    # Swapping the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    # check if input is a list\n    if type(newList)!= list:\n        raise TypeError(\"Input must be a list\")\n\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: \n        return 0\n    elif k == 0 or k == n: \n        return 1\n    else: \n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum of the product of consecutive binomial co-efficients\n    sum_binomial_coeff = 0\n\n    # Loop through the range of consecutive numbers k up to n\n    for i in range(k, n+1):\n\n        # Calculate the binomial coefficient\n        binomial_coeff = (n-i+1) * (k-1) / i\n\n        # Add the binomial coefficient to the sum of the product of consecutive binomial co-efficients\n        sum_binomial_coeff += binomial_coeff\n\n    # Return the sum of the product of consecutive binomial co-efficients\n    return sum_binomial_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: \n        return 0\n    elif k == 0: \n        return 1\n    elif k == 1: \n        return n\n    else: \n        return n*binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k>n: \n        return 0\n    if k==1 or k==n: \n        return 1\n    return binomial_Coeff(n-1,k-1)*n//k"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Find the number of zeros to the left of the decimal point\n    zeros = int(n*(math.log10(k))+0.5)\n\n    # Initialize the coefficient values\n    coeff = [1]\n    for i in range(1,k+1):\n        coeff.append(coeff[i-1]*i)\n\n    # Initialize the sum\n    sum_coeff = 0\n\n    # Iterate over all possible values of the kth co-efficient\n    for i in range(1,2**zeros):\n        # Calculate the sum of the kth co-efficient times the corresponding binary number\n        sum_coeff += coeff[k]*(i//(2**i-1))\n\n        # Break out of the loop if we've reached the desired value of k\n        if i == 2**(zeros-1)-1:\n            break\n\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 1 # Initialize the sum to 1\n    for i in range(k):\n        sum *= (n-i)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1, k-1) * (n-k+1) / k + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    # Initialize the sum\n    sum = 0\n\n    # Calculate the product of consecutive binomial co-efficients\n    for i in range(k, n + 1):\n        sum += (n-i+k) * binomial_Coeff(n-1, i-1)\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function takes two integers, n and k, as input and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return None\n\n    # Check if k is greater than n\n    if k > n:\n        return None\n\n    # Initialize sum and product variables\n    sum = 0\n    product = 1\n\n    # Iterate through the values of k\n    for i in range(1, k+1):\n        # Calculate the binomial coefficient of i and n\n        numerator = (n + 1) * i\n        denominator = (i * (i + 1)) / 2\n\n        # Calculate the product of consecutive binomial coefficients\n        product *= numerator / denominator\n\n        # Add the product to the sum\n        sum += product\n\n    return sum"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0+)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+(\\.\\d+){3}$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes from each octet in the ip address\n    ip = re.sub(r'^(0)+', '', ip)\n\n    # Check if the ip address is now valid\n    if re.match(r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', ip):\n        return ip\n    else:\n        return False"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the IP address using regular expression\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'(\\b0\\b|\\b[1-9]\\d*\\.\\d+\\.\\d+\\.\\d+\\.0)\\b', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+(\\d)', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an IP address.\n    '''\n    # Remove leading zeroes from each octet\n    ip_octets = ip.split('.')\n    ip_octets = [re.sub('^0+', '', octet) for octet in ip_octets]\n    # Join the octets into a single string\n    new_ip = '.'.join(ip_octets)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression to match leading zeroes in an IP address\n    pattern = r'^(0{1,2}\\.)+([0-9]+)$'\n    # Use re.sub() to remove leading zeroes from an IP address\n    return re.sub(pattern, r'\\2', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    else:\n        even = lst[0]\n        odd = lst[1]\n        for i in range(2, len(lst)):\n            if lst[i] % 2 == 0:\n                even = lst[i]\n            else:\n                odd = lst[i]\n        return odd - even"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference between the first even and first odd number in a given list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for num in lst:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = next((num for num in list1 if num % 2 == 0), None)\n    first_odd = next((num for num in list1 if num % 2 == 1), None)\n    if first_even and first_odd:\n        return first_even - first_odd\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    # Checking if the list is empty or not\n    if len(list1) == 0:\n        return \"List is empty\"\n    \n    # Finding the first even number in the list\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            first_even = list1[i]\n            break\n    \n    # Finding the first odd number in the list\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            first_odd = list1[i]\n            break\n    \n    # Calculating the difference\n    diff = first_even - first_odd\n    \n    # Returning the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even number in the list\n    i = 0\n    while i < len(list1) and list1[i] % 2!= 0:\n        i += 1\n    if i < len(list1):\n        # Find the first odd number in the list\n        j = 0\n        while j < len(list1) and list1[j] % 2 == 0:\n            j += 1\n        if j < len(list1):\n            # Return the difference of the first even and first odd number\n            return list1[i] - list1[j]\n        else:\n            # If no odd number is found, return None\n            return None\n    else:\n        # If no even number is found, return None\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                diff = even_num - num\n                return diff\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                diff = odd_num - num\n                return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = num - even_num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = num - odd_num\n\n    return even_num - odd_num\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    diff = abs(even_num - odd_num)\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    even_num = [num for num in lst if num % 2 == 0][0]\n    odd_num = [num for num in lst if num % 2!= 0][0]\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    \n    # iterate through the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n    \n    # calculate the difference\n    diff = even_num - odd_num\n    \n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2):\n    # Initialize variables to store the length of each string and the XOR of the two strings\n    str1_len = len(str1)\n    str2_len = len(str2)\n    xor_str = 0\n    \n    # Iterate through each character of the two strings and calculate the XOR of the characters\n    for i in range(str1_len):\n        xor_str ^= ord(str1[i])\n        xor_str ^= ord(str2[i])\n    \n    # Initialize variables to store the count of swaps and the XOR of the characters\n    swaps = 0\n    xor_str = 0\n    \n    # Iterate through each character of the two strings and swap them if the XOR of the characters is even\n    for i in range(str1_len):\n        xor_str ^= ord(str1[i])\n        xor_str ^= ord(str2[i])\n        if xor_str % 2 == 0:\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n            swaps += 1\n    \n    # Check if the swaps required are greater than 0, otherwise return -1\n    if swaps > 0:\n        return swaps\n    else:\n        return -1"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    \n    # Convert the binary strings to lists of integers\n    lst1 = [int(x) for x in str1]\n    lst2 = [int(x) for x in str2]\n\n    # Convert the lists of integers to lists of binary strings\n    lst1 = [bin(x)[2:].zfill(n1) for x in lst1]\n    lst2 = [bin(x)[2:].zfill(n2) for x in lst2]\n\n    # Initialize variables for the minimum number of swaps required and the swaps made so far\n    min_swaps = n1 + n2\n    swaps = 0\n\n    # Iterate through the lists of binary strings\n    for i in range(n1):\n        # If the two binary strings are not equal, swap the characters at the corresponding indices\n        if lst1[i]!= lst2[i]:\n            lst1[i], lst2[i] = lst2[i], lst1[i]\n            swaps += 1\n            # Update the minimum number of swaps required if necessary\n            min_swaps = min(min_swaps, n1 + n2 - swaps)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    # Check if both strings have the same number of bits\n    if len(str1)!= len(str2):\n        return \"Both strings must have the same number of bits.\"\n    \n    # Convert both strings to binary and find their difference\n    binary_diff = bin(int(str1, 2) ^ int(str2, 2))[2:]\n    \n    # Initialize variables for count of swaps and max binary value\n    count = 0\n    max_binary = 1\n    \n    # Loop through each bit in the difference string and swap if necessary\n    for i in range(len(binary_diff)):\n        # Check if the current bit is 1\n        if binary_diff[i] == '1':\n            # Calculate the bitwise XOR of the current bit and the max binary value\n            xor_val = max_binary ^ (1 << (len(binary_diff) - i - 1))\n            \n            # Check if the XORed value is in the binary string\n            if xor_val in str2:\n                # If it is, count the swap\n                count += 1\n                \n            # Update the maximum binary value\n            max_binary = xor_val\n            \n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    swaps = 0\n    i = 0\n    j = 0\n\n    while i < n and j < n:\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        elif str1[i] < str2[j]:\n            i += 1\n            swaps += 1\n        else:\n            j += 1\n            swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n = len(str1)\n    m = len(str2)\n    swap_count = 0\n    i, j = 0, 0\n    while i < n and j < m:\n        if str1[i]!= str2[j]:\n            swap_count += min(n - i, m - j)\n            if str1[i] == '1':\n                str1 = str1[:i] + '0' + str1[i+1:]\n            else:\n                str1 = str1[:i] + '1' + str1[i+1:]\n            if str2[j] == '1':\n                str2 = str2[:j] + '0' + str2[j+1:]\n            else:\n                str2 = str2[:j] + '1' + str2[j+1:]\n            i = 0\n            j = 0\n        else:\n            i += 1\n            j += 1\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings as input and returns the minimum number of swaps required to convert one binary number to another.\n\n    The function converts the binary numbers to integers and uses the fact that the sum of two numbers is the sum of their digits raised to the power of their total number of digits.\n\n    \"\"\"\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Find the number of bits in each number\n    num1_bits = len(bin(num1)[2:])\n    num2_bits = len(bin(num2)[2:])\n\n    # Use the fact that the sum of two numbers is the sum of their digits raised to the power of their total number of digits\n    num1_sum_digits = sum([int(d) ** num1_bits for d in str1])\n    num2_sum_digits = sum([int(d) ** num2_bits for d in str2])\n\n    # Calculate the absolute difference between the two sums\n    abs_diff = abs(num1_sum_digits - num2_sum_digits)\n\n    # Calculate the minimum number of swaps required\n    min_swaps = 0\n    while abs_diff > 0:\n        if abs_diff % 2 == 0:\n            abs_diff //= 2\n            min_swaps += 1\n        else:\n            abs_diff -= 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to binary numbers\n    bin1 = int(str1, 2)\n    bin2 = int(str2, 2)\n\n    # Initialize variables for count and current binary numbers\n    count = 0\n    curr1 = bin1\n    curr2 = bin2\n\n    # Loop through all possible swaps\n    while curr1!= curr2:\n        # If the current binary numbers are not equal, swap them and increment the count\n        if curr1 > curr2:\n            curr1 = (curr1 << 1) ^ 0x343\n        else:\n            curr2 = (curr2 << 1) ^ 0x343\n\n        count += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # converting the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initializing the count of swaps to 0\n    swaps = 0\n\n    # calculating the number of bits in the binary strings\n    n = max(len(str1), len(str2))\n\n    # iterating through each bit in the binary strings\n    for i in range(n):\n        # checking if the i-th bit in both binary strings are equal\n        if (str1[i] == '1')!= (str2[i] == '1'):\n            # incrementing the count of swaps\n            swaps += 1\n            # swapping the i-th bit of both binary strings\n            str1[i], str2[i] = str2[i], str1[i]\n\n    # returning the count of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # convert input strings to lists of binary digits\n    lst1 = list(bin(int(str1, 2))[2:])\n    lst2 = list(bin(int(str2, 2))[2:])\n\n    # calculate the lengths of the two input lists\n    len1 = len(lst1)\n    len2 = len(lst2)\n\n    # loop through the lists and swap the digits if they are different\n    swaps = 0\n    for i in range(max(len1, len2)):\n        if i < len1 and i < len2:\n            if lst1[i]!= lst2[i]:\n                swaps += 1\n                lst1[i], lst2[i] = lst2[i], lst1[i]\n\n    # return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # find the length of the input strings\n    n1, n2 = len(str1), len(str2)\n\n    # create a list of tuples (i, j) where i and j are indices of the characters in str1 and str2, respectively\n    # such that str1[i] = '1' and str2[j] = '1'\n    pairs = [(i, j) for i in range(n1) for j in range(n2) if str1[i] == '1' and str2[j] == '1']\n\n    # sort the list of pairs based on their indices\n    pairs.sort()\n\n    # count the number of swaps required to convert the binary numbers\n    swaps = 0\n    for i in range(n1):\n        for j in range(n2):\n            if str1[i] == '1' and str2[j] == '1':\n                if i > j:\n                    str1[i], str1[j] = str1[j], str1[i]\n                    str2[j], str2[i] = str2[i], str2[j]\n                    swaps += 1\n\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize the size variable to 0\n    size = 0\n    # loop through each element in the tuple\n    for element in tuple_list:\n        # calculate the size of the element in bytes\n        element_size = sys.getsizeof(element)\n        # add the size to the total size\n        size += element_size\n    # return the total size\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        total_size += sys.getsizeof(t)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        if isinstance(item, tuple):\n            # recursively calculate the size of the nested tuple\n            nested_size = tuple_size(item)\n        else:\n            # calculate the size of the item in bytes\n            item_size = sys.getsizeof(item)\n        # add the size of the item to the total size\n        total_size += item_size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of the given tuple\n    size = sys.getsizeof(tuple_list)\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the size variable to 0\n    size = 0\n    # Iterate through the tuple_list and calculate the size of each element\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    # Return the size in bytes\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three parameters:\n    - arr1: The first sorted array.\n    - arr2: The second sorted array.\n    - k: The value of k.\n    \n    This function returns the kth element of the merged array.\n    \"\"\"\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n            \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] == arr2[j]:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    \n    # Traverse both arrays to find the kth element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    \n    # If the kth element is not found in the first array,\n    # it must be in the second array\n    if i == len(arr1):\n        return arr2[j]\n    \n    # If the kth element is not found in the second array,\n    # it must be in the first array\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    # merge the two sorted arrays\n    merged_arr = arr1 + arr2\n    # sort the merged array\n    merged_arr.sort()\n    # return the kth element of the sorted array\n    return merged_arr[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 and len(arr2) == 0:\n        return None\n    elif len(arr1) == 0:\n        return arr2[k-1]\n    elif len(arr2) == 0:\n        return arr1[k-1]\n    elif arr1[0] < arr2[0]:\n        return find_kth(arr1[1:], arr2, k)\n    else:\n        return find_kth(arr1, arr2[1:], k)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Merge two arrays using merge sort\n    merged_arr = merge_sort(arr1 + arr2)\n    \n    # Return kth element of merged array\n    return merged_arr[k-1]\n\ndef merge_sort(arr):\n    '''\n    Merge sort implementation.\n    '''\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_arr = arr[:mid]\n        right_arr = arr[mid:]\n\n        merge_sort(left_arr)\n        merge_sort(right_arr)\n\n        i = j = k = 0\n\n        while i < len(left_arr) and j < len(right_arr):\n            if left_arr[i] < right_arr[j]:\n                arr[k] = left_arr[i]\n                i += 1\n            else:\n                arr[k] = right_arr[j]\n                j += 1\n            k += 1\n\n        while i < len(left_arr):\n            arr[k] = left_arr[i]\n            i += 1\n            k += 1\n\n        while j < len(right_arr):\n            arr[k] = right_arr[j]\n            j += 1\n            k += 1\n    return arr"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the length of the smaller array\n    if n1 < n2:\n        smaller = arr1\n        larger = arr2\n    else:\n        smaller = arr2\n        larger = arr1\n\n    # Find the length of the remaining subarray\n    i = 0\n    j = 0\n    while i < len(smaller) and j < len(larger):\n        if smaller[i] < larger[j]:\n            i += 1\n        else:\n            j += 1\n\n    # If k is less than the length of the remaining subarray\n    if k < i:\n        return find_kth(arr1, arr2[:j], k)\n    elif k < j:\n        return find_kth(arr1[:i], arr2, k)\n    else:\n        return smaller[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three parameters: arr1, arr2, and k.\n    arr1 and arr2 are two sorted arrays.\n    k is the position of the kth element to be found.\n    The function returns the kth element from the given two sorted arrays.\n    \"\"\"\n    # Initialize two pointers, one for each array\n    i, j = 0, 0\n\n    # Initialize a variable to keep track of the kth element\n    kth = None\n\n    # Traverse both arrays until we have found kth element\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if kth is None or arr1[i] < kth:\n                kth = arr1[i]\n            i += 1\n        else:\n            if kth is None or arr2[j] < kth:\n                kth = arr2[j]\n            j += 1\n\n    return kth"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    count = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n            count += i\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            count += i + j\n            i += 1\n            j += 1\n            \n    while i < len(arr1):\n        count += len(arr1) - i\n        i += 1\n        \n    while j < len(arr2):\n        count += len(arr2) - j\n        j += 1\n        \n    if k <= count:\n        return arr1[k-1]\n    else:\n        return arr2[k-1-count]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function takes a number as input and returns True if it is an Armstrong number, otherwise False.\n    \"\"\"\n    # calculate the sum of the cubes of the digits of the number\n    num_str = str(number)\n    num_sum = 0\n    for digit in num_str:\n        digit = int(digit)\n        num_sum += digit ** 3\n\n    # check if the sum of cubes of digits is equal to the original number\n    return num_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    num_str = str(number)\n    total = 0\n    temp = number\n\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n\n    return total == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Function to check whether a given number is Armstrong or not.\n    \"\"\"\n    num_str = str(num)\n    total = 0\n    power = len(num_str)\n\n    for digit in num_str:\n        total += int(digit) ** power\n\n    if total == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(number):\n    num = number\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit ** 3\n        num //= 10\n    return num == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return n == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Function to check whether a given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(num)\n    sum_of_powers = 0\n    \n    for i in range(len(num_str)):\n        power = len(num_str) - i\n        digit = int(num_str[i])\n        sum_of_powers += digit ** power\n        \n    return num == sum_of_powers"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong_number(num):\n    \"\"\"\n    This function takes a number as input and returns True if it is an Armstrong number and False otherwise.\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n    \"\"\"\n    # Check if the number is less than 10\n    if num < 10:\n        return False\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    digits_sum = 0\n    while num > 0:\n        digit = num % 10\n        digits_sum += digit ** len(str(num))\n        num //= 10\n\n    # Check if the sum of the digits is equal to the original number\n    return num == digits_sum\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    Returns True if the given number is an armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string\n    s = str(n)\n    \n    # Calculate the sum of the cubes of the digits of the number\n    sum_cubes = 0\n    for digit in s:\n        sum_cubes += int(digit) ** 3\n    \n    # Check if the sum is equal to the original number\n    return sum_cubes == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n    \n    # Calculate the sum of the digits of the number\n    sum_of_digits = sum(int(digit) ** len(number_str) for digit in number_str)\n    \n    # Return True if the sum of digits is equal to the original number, else return False\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    n = number\n    sum = 0\n    temp = number\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n        \n    if n == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    while count < n:\n        total += count\n        count += 1\n    average = total / n\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns a tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    if n < 1:\n        return \"Error: n must be a positive integer.\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    print(\"Sum:\", sum)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initializing sum and count variables\n    sum = 0\n    count = 0\n\n    # loop for adding up the natural numbers\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n\n    # calculating average\n    average = sum / count\n\n    # returning the sum and average\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables for sum and average\n    sum = 0\n    count = 0\n    total = 0\n    \n    # loop through the first n numbers and add them to the sum and count\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    \n    # calculate the average and print the results\n    average = sum / count\n    print(\"The sum of the first\", number, \"natural numbers is\", sum)\n    print(\"The average of the first\", number, \"natural numbers is\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < number:\n        count += 1\n        sum += count\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    \n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    # initialize variables to store the sum and average\n    sum = 0\n    average = 0\n    \n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # add the current number to the sum\n        sum += i\n        \n        # calculate the average by dividing the sum by n\n        average = sum / n\n    \n    # return the sum and average\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether a given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in freq:\n            freq[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            freq[char] = 1\n    \n    # Loop through the dictionary to find the first repeated character\n    for char, count in freq.items():\n        if count > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    for char in char_freq:\n        if char_freq[char] > 1:\n            return char\n    \n    return \"No repeated character found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return the first repeated character\n        if char in freq and freq[char] > 0:\n            return char\n        \n        # Otherwise, update the frequency of the character in the dictionary\n        else:\n            freq[char] = freq.get(char, 0) + 1\n    \n    # If all characters in the string are unique, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If no character is repeated, it will return None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {} # dictionary to store the count of each character in the string\n    \n    # loop through the string and update the count of each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # loop through the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first repeated character in the dictionary\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Loop through each character in the string\n    for char in str1:\n\n        # If the character is already in the dictionary, increment its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        else:\n            # Otherwise, add the character to the dictionary with a frequency of 1\n            freq[char] = 1\n\n    # Initialize variables to store the first repeated character and its frequency\n    repeated_char = None\n    freq_of_char = 0\n\n    # Loop through each character in the string again\n    for char in str1:\n\n        # If the frequency of the character is greater than the frequency of the first repeated character,\n        # set the first repeated character and its frequency to the current character and its frequency\n        if freq[char] > freq_of_char:\n            repeated_char = char\n            freq_of_char = freq[char]\n\n    # Return the first repeated character\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first repeated character and its frequency\n    for char in freq:\n        if freq[char] > 1:\n            return char, freq[char]"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if sum([int(digit)**i for digit in str(i)]) == i:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            lucid_numbers.append(i)\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers\n\nn = int(input(\"Enter a number: \"))\nprint(\"Lucid numbers less than or equal to\", n, \"are:\", get_ludic(n))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(n+1):\n        if len(str(i)) == len(str(n)):\n            lucids.append(i)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            ludic.append(i)\n    return ludic\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number or not.\n    '''\n    return all(n%i!=0 for i in range(2, int(n**0.5)+1))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while i <= n:\n        if is_lucid(i):\n            ludic.append(i)\n        i += 1\n    return ludic\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a number is a lucid number or not.\n    '''\n    sum_of_digits = sum(int(digit) for digit in str(n))\n    return sum_of_digits == n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        lucid_num = i**2\n        if lucid_num <= n:\n            ludic.append(lucid_num)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(n+1):\n        if i < 10:\n            ludic_numbers.append(i)\n        elif i < 100:\n            ludic_numbers.append(i*2)\n        else:\n            ludic_numbers.append(i*5)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i**2 == 1 or i**3 == 1:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    \n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_words.append(word[::-1])\n    \n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse each word and join them back into a string\n    reversed_words =''.join(reversed(word) for word in words)\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Remove all whitespaces from the string\n    s = s.replace(\" \", \"\")\n    \n    # Reverse the order of the words\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string = \" \".join(reversed_words)\n    \n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the list of words\n    words.reverse()\n    # Join the reversed list of words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string = \" \".join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, False otherwise.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the number is less than 2.\n    if num < 2:\n        return False\n    \n    # Check if the number is equal to 2.\n    if num == 2:\n        return True\n    \n    # Check if the number is divisible by any number between 2 and the square root of the number.\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    \n    # If the loop completes without returning False, the number is prime.\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    Check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Initialize a variable to keep track of whether the number is prime or not\n    is_prime = True\n    \n    # Check if the number is less than 2 (since 0 and 1 are not prime numbers)\n    if num < 2:\n        return is_prime\n    \n    # Loop through all numbers from 2 to the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        # If the number is divisible by i, it's not prime\n        if num % i == 0:\n            is_prime = False\n            break\n    \n    # Return the value of the is_prime variable\n    return is_prime"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree value as input and returns its value in radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start = matches[0].start()\n        end = matches[0].end()\n        return matches[0], start, end\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches for a regex pattern in a given string. It returns a tuple containing the matched substring, the start index, and the end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    # Use re.findall to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if there are any matches\n    if not matches:\n        return None\n    \n    # Iterate over the matches and find the start and end indices of each match\n    start_indices = []\n    end_indices = []\n    for match in matches:\n        start_indices.append(text.find(match))\n        end_indices.append(start_indices[-1] + len(match))\n        \n    # Return the matches, start indices, and end indices in a list of tuples\n    return [(match, start, end) for match, start, end in zip(matches, start_indices, end_indices)]"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    # Use the re.search() function to search for the pattern in the text\n    result = re.search(pattern, text)\n\n    # If the pattern is found, return the matching subtring, a start index and an end index\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    result = []\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        result.append((match, start_index, end_index))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0][0], matches[0][1], matches[0][2]\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    else:\n        return matches[0], 0, len(matches[0])"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the first bell number\n    bell = 1\n    \n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # Calculate the bell number using the formula: bell(n) = (1/2)^(n/2) * sum(1/2^i * (-1)^(n-2i))\n        bell *= 1/2 ** (i/2)\n        bell *= (-1) ** (n-2*i)\n    \n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2**n - 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    This function finds the nth Bell number using the formula: B(n) = \u03a3(i=0 to n) C(n,i) * (n-i)^2\n\n    For example, B(3) = \u03a3(i=0 to 3) C(3,i) * (3-i)^2 = 15\n    \n    where C(n,i) is the binomial coefficient C(n,i) = n!/(i!* (n-i)!)\n    \n    '''\n    import math\n    # Define the binomial coefficient function\n    def C(n,i):\n        return math.factorial(n) // (math.factorial(i) * math.factorial(n-i))\n\n    # Calculate the nth Bell number\n    nth_Bell = sum([(n-i)**2 * C(n,i) for i in range(n+1)])\n\n    return nth_Bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of nth bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        print(\"Invalid input\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + (2*bell_Number(n-2))\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of Bell number\", n, \"is\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth Bell number.\n\n    The Bell number of an integer n is defined as the number of permutations of [0, 1,..., n] that satisfy the condition that no element is repeated.\n\n    For example, the Bell number of 5 is 15, as the permutations of [0, 1, 2, 3, 4] that satisfy the condition are:\n\n    0: 1 1 1 1 1\n    1: 0 1 1 1 1\n    2: 0 0 1 1 1\n    3: 0 0 0 1 1\n    4: 0 0 0 0 1\n\n    There are 15 permutations of [0, 1, 2, 3, 4] that satisfy the condition, and each of these permutations contains at most 5 unique elements. Therefore, the Bell number of 5 is 15.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (n - 1) + 1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1 # Convert the L-th element to k\n    list1.pop(k) # Remove the k-th element\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        print(\"Invalid input\")\n        return None\n    else:\n        list2 = list1[:L-1]\n        list3 = list1[L-1:]\n        return list2 + list3"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1)-1, -1, -1):\n        if i == k:\n            list1.pop(i)\n        elif i < k:\n            list1[i] = list1[i+1]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 0:\n        return list1\n    else:\n        return remove_kth_element(list1[1:], L-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    # find k\n    k = L-1\n    # find the index of the k'th element\n    for i in range(n):\n        if k == 0:\n            break\n        elif k == i:\n            k -= 1\n            list1.pop(i)\n            break\n        else:\n            k -= 1\n    \n    # return the updated list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L-1 # index of the kth element to be removed\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    return [x for i, x in enumerate(list1) if i!= k]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements,\n    but the k'th element removed.\n    '''\n    k = L\n    for i in range(len(list1)):\n        if i == k-1:\n            list1.pop(i)\n        elif i < k-1:\n            list1[i], list1[i+1] = list1[i+1], list1[i]\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    max_val = -float('inf')\n    for i in range(n):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        max_value = max(max_value, row[N-1])\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the length of the first row of the matrix\n    num_cols = len(test_list[0])\n    # initialize the maximum value\n    max_val = 0\n    # loop over the number of columns\n    for i in range(num_cols):\n        # get the value of then'th column\n        col_val = test_list[j][i]\n        # check if it's greater than the current maximum value\n        if col_val > max_val:\n            # update the maximum value\n            max_val = col_val\n    # return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = float('-inf')\n    for i in range(len(test_list)):\n        if i == N:\n            max_value = max(max_value, max(test_list[i]))\n        elif i < N:\n            max_value = max(max_value, max(test_list[i]))\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_col = []\n    for row in test_list:\n        col = row[N-1]\n        max_col.append(col)\n    return max(max_col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    for i in range(len(test_list)):\n        max_val = max(test_list[i])\n        test_list[i].remove(max_val)\n\n    for i in range(len(test_list)):\n        if N-1 == i:\n            return max(test_list[i])"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Check if the input is a list of lists\n    if not all(isinstance(row, list) for row in test_list):\n        raise TypeError('Input must be a list of lists')\n    \n    # Check if N is a positive integer\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError('N must be a positive integer')\n    \n    # Find the length of the first row in the matrix\n    length = len(test_list[0])\n    \n    # Check if N is less than or equal to the length of the matrix\n    if N > length:\n        raise ValueError('N must be less than or equal to the length of the matrix')\n    \n    # Initialize the max value to be the first element of the first row\n    max_value = test_list[0][0]\n    \n    # Loop through the remaining rows and columns\n    for i in range(1, len(test_list)):\n        for j in range(length):\n            # Check if the current element is greater than the max value\n            if test_list[i][j] > max_value:\n                max_value = test_list[i][j]\n    \n    # Return the max value of then'th column\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    max_value = float('-inf')\n\n    for row in test_list:\n        if N-1 < len(row):\n            if row[N-1] > max_value:\n                max_value = row[N-1]\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_col = []\n    for i in range(len(test_list)):\n        col = [row[i] for row in test_list]\n        max_col.append(max(col))\n    return max(max_col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        if i == N - 1:\n            max_num = max(max_num, max(test_list[i]))\n        else:\n            max_num = max(max_num, test_list[i][N - 1])\n    return max_num"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sub_lst in lst:\n        merged_lst.append([sub_lst[0], sub_lst[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        first_element = sublist[0]\n        second_element = sublist[1]\n        merged_list.append([first_element, second_element])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        if len(lst[i]) == 2:\n            merged_lst.append([lst[i][0], lst[i][1]])\n        else:\n            raise ValueError(\"Sublist has to have two elements\")\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(0, len(lst), 2):\n        merged_lst.append([lst[i][0], lst[i+1][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cum_sum = 0\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # add the value of the tuple to the cumulative sum\n        cum_sum += tup\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the sum to zero\n    cum_sum = 0\n    # loop through each element in the list\n    for i in test_list:\n        # add the value to the cumulative sum\n        cum_sum += i\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n\n    # Initialize an empty list to store the cumulative sum\n    cum_sum = []\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n\n        # Initialize a variable to store the sum of the current tuple\n        current_sum = 0\n\n        # Loop through each value in the current tuple\n        for val in tup:\n\n            # Add the value to the current sum\n            current_sum += val\n\n        # Append the current sum to the cum_sum list\n        cum_sum.append(current_sum)\n\n    # Return the cum_sum list\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for item in test_list:\n        for value in item:\n            total += value\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            cum_sum += test_list[j][i]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total = 0\n    for i in test_list:\n        total += i\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][0]\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the averages\n    averages = []\n    \n    # loop through each tuple in the input tuple of tuples\n    for i in nums:\n        # initialize an empty list to store the individual values for the tuple\n        values = []\n        \n        # loop through each value in the current tuple\n        for j in i:\n            # append the value to the values list\n            values.append(j)\n        \n        # calculate the average of the values in the tuple and append it to the averages list\n        averages.append(sum(values)/len(values))\n    \n    # return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        average = sum(num) / len(num)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        average = total / len(nums[i])\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in range(len(nums)):\n        average = sum(nums[i])/len(nums[i])\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        sum_nums = sum(tup)\n        num_nums = len(tup)\n        averages.append(sum_nums/num_nums)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in nums:\n        avg = sum(i) / len(i)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        averages.append(total / count)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        averages.append(sum(tup)/len(tup))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create an empty list to store the averages\n    avg_list = []\n    \n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the sum of all the values in the tuple\n        total = sum(tup)\n        \n        # Divide the sum by the number of values in the tuple to get the average\n        avg = total / len(tup)\n        \n        # Append the average to the avg_list\n        avg_list.append(avg)\n    \n    # Return the avg_list\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Initialize a new tuple of the same length as the input tuples\n    new_tup = ()\n    # Loop through each element in the input tuples\n    for i in range(len(test_tup1)):\n        # Perform the element wise modulo using the '%' operator\n        new_tup = new_tup + (test_tup1[i] % test_tup2[i],)\n    return new_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = (0,) * len(test_tup1)\n    # Loop through each element in the tuple and perform modulo operation\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] % test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples must have the same length.\"\n    # Perform element-wise modulo\n    result_tup = tuple([num % test_tup2[i] for i, num in enumerate(test_tup1)])\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    else:\n        # perform element-wise modulo operation\n        result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n        return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check if (0, d) is reachable from origin\n    if d <= 0:\n        return 0\n\n    # Initialize variables\n    jumps = 0\n    max_d = 0\n\n    # Initialize the 2D array to keep track of visited points\n    visited = [[False for _ in range(steps+1)] for _ in range(steps+1)]\n\n    # Iterate through all possible points from (0, 0) to (steps, 0)\n    for i in range(1, steps+1):\n        for j in range(1, steps+1):\n            # Check if (i, j) is reachable from origin\n            if i == 0 and d == j:\n                return jumps + 1\n\n            # Check if (i, j) is reachable from (0, 0)\n            if i == 0 and d > j:\n                max_d = max(max_d, j)\n\n            # Check if (i, j) is reachable from the last reachable point\n            if i == steps and d > 0:\n                max_d = max(max_d, j)\n\n            # Check if (i, j) is not visited before\n            if not visited[i][j]:\n                visited[i][j] = True\n\n                # Check if (i, j) can be reached from origin\n                if i == 0 and d == j:\n                    return jumps + 1\n\n                # Check if (i, j) can be reached from (0, 0)\n                if i == 0 and d > j:\n                    max_d = max(max_d, j)\n\n                # Check if (i, j) can be reached from the last reachable point\n                if i == steps and d > 0:\n                    max_d = max(max_d, j)\n\n                # Check if (i, j) can be reached from a reachable point\n                if i < steps and j > 0:\n                    max_d = max(max_d, j-d)\n\n                # Check if (i, j) can be reached from a reachable point\n                if i > 0 and j > 0:\n                    max_d = max(max_d, j-d)\n\n                # Check if (i, j) can be reached from a reachable point\n                if i < steps and j < steps and j > 0:\n                    max_d = max(max_d, j-d)\n\n                # Check if (i, j) can be reached from a reachable point\n                if i > 0 and j < steps and j > 0:\n                    max_d = max(max_d, j-d)\n\n                # Check if (i, j) can be reached from a reachable point\n                if i < steps and j < steps and j < steps:\n                    max_d = max(max_d, j-d)\n\n                # Update the number of jumps required\n                jumps += min_Jumps(steps-i, max_d)\n\n                # Reset the max_d variable\n                max_d = 0\n\n    # If the point is not reachable, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= 1: \n        return 0\n    elif steps == 2: \n        return 1\n    elif steps > 2 and steps % 2 == 0: \n        return min_Jumps(steps // 2, d) + 1\n    else: \n        return min_Jumps(steps // 2, d) + 2"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    prev = 0\n    curr = 0\n    \n    # Check if d is equal to 0\n    if d == 0:\n        return prev\n    \n    # Check if steps is greater than 0\n    if steps <= 0:\n        return -1\n    \n    # Start with the first step\n    curr += 1\n    \n    # Loop until the end of the array\n    while curr <= steps:\n        \n        # Check if the current point is (d, 0)\n        if curr == d:\n            return prev\n        \n        # Check if the current point is not (d, 0)\n        else:\n            # Check if the current point is greater than (d, 0)\n            if curr > d:\n                # Calculate the number of jumps required to reach (0, d)\n                prev = 1\n                curr = curr + prev\n            \n            # Check if the current point is less than (d, 0)\n            else:\n                # Calculate the number of jumps required to reach (0, d)\n                prev = curr\n                curr = curr + 1\n                \n    # If the loop ends without finding the required point\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables for row and column\n    row = 0\n    col = 0\n    # Initialize variable for count of jumps\n    jumps = 0\n    # Initialize variable for distance\n    distance = 0\n    \n    # Check if the start point is (0, 0)\n    if row == 0 and col == 0:\n        # If yes, return 0 as there are no jumps needed to reach the point\n        return 0\n    \n    # Check if the start point is (d, 0)\n    if row == d and col == 0:\n        # If yes, return 1 as there is only one jump needed to reach the point\n        return 1\n    \n    # Check if the start point is not (0, 0) and not (d, 0)\n    while distance < steps:\n        # Check if the next step is valid (i.e. not out of bounds)\n        if (row + 1, col) in [(i, 0) for i in range(1, d+1)] and (row - 1, col) in [(i, 0) for i in range(1, d+1)]:\n            # If yes, move to the next step and increment the count of jumps\n            row += 1\n            distance += 1\n            jumps += 1\n        elif (row - 1, col) in [(i, 0) for i in range(1, d+1)] and (row + 1, col) in [(i, 0) for i in range(1, d+1)]:\n            # If yes, move to the next step and increment the count of jumps\n            row -= 1\n            distance += 1\n            jumps += 1\n        else:\n            # If no, break out of the loop and return the count of jumps\n            break\n    \n    # If the point is not reachable, return -1\n    if row == d and col == 0:\n        return jumps\n    else:\n        return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    curr_pos = 0\n    end_pos = (d, 0)\n    visited = {curr_pos}\n\n    while steps > 0 and curr_pos!= end_pos:\n        steps -= 1\n\n        # Check all possible directions for the next move\n        possible_moves = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n        # Find the shortest possible move from the current position\n        shortest_move = min(possible_moves, key=lambda x: abs(x[0] - end_pos[0]) + abs(x[1] - end_pos[1]))\n\n        # Move in the shortest possible direction\n        curr_pos = (curr_pos[0] + shortest_move[0], curr_pos[1] + shortest_move[1])\n\n        # Check if the new position is already visited\n        if curr_pos not in visited:\n            jumps += 1\n            visited.add(curr_pos)\n\n        # Check if we have reached the end position\n        if curr_pos == end_pos:\n            break\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d > steps:\n        return \"Invalid Input\"\n\n    # Convert steps to jumps\n    jumps = steps // d\n\n    # Check if the total number of jumps is less than or equal to steps\n    if jumps <= steps:\n        return jumps\n\n    # Check if the total number of jumps is greater than steps\n    if jumps > steps:\n        return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    jumps = 0\n    i = 0\n    j = steps\n    # Loop until j reaches 0\n    while j > 0:\n        # Check if current point is a target point\n        if i+d == 0:\n            # If target point is reached, increment the jumps count and reset i and j\n            jumps += 1\n            i = 0\n            j = steps\n        # Check if current point is a valid target point\n        elif i+d >= 0 and i+d < steps:\n            # If valid target point is reached, decrement j\n            j -= 1\n        # If current point is not a valid target point, increment i and decrement j\n        else:\n            i += 1\n            j -= 1\n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables to store the number of jumps required for the given steps and distance\n    num_jumps = 0\n    prev_x = 0\n    prev_y = 0\n    \n    # Iterate through the given steps and distance\n    for step in range(steps):\n        # Calculate the current position as x = step + prev_x, y = prev_y - (prev_x + step)\n        x = step + prev_x\n        y = prev_y - (prev_x + step)\n        \n        # Check if the current position satisfies the conditions\n        if x >= 0 and y >= 0 and x <= d and y == 0:\n            # If the position satisfies the conditions, update the number of jumps required and move to the next position\n            num_jumps += 1\n            prev_x = x\n            prev_y = y\n        elif x < 0:\n            # If the position violates the x-coordinate condition, move to the next position\n            prev_x = x\n            prev_y = y\n        elif y < 0:\n            # If the position violates the y-coordinate condition, move to the next position\n            prev_x = x\n            prev_y = y\n        else:\n            # If the position violates the other two conditions, move to the next position\n            prev_x = x\n            prev_y = y\n    \n    # Return the final number of jumps required\n    return num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    steps = abs(steps) # Convert negative steps to positive steps\n    jumps = 0\n    left, right = 0, steps # Initialize left and right pointers\n\n    # Calculate the number of jumps required to reach (0, d) from origin\n    while left <= right:\n        jumps += 1\n        if d < 0:\n            d += abs(left - right) # Update d if left pointer is smaller than right pointer\n        else:\n            d += abs(right - left) # Update d if right pointer is smaller than left pointer\n        if d == 0: # Check if the point (d, 0) has been reached\n            return jumps\n        if left < right:\n            left += 1 # Move left pointer to the next step\n        else:\n            right += 1 # Move right pointer to the next step\n\n    return jumps # If the point is not reached, return the maximum number of jumps that can be made"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    count = 0\n    i = 0\n    j = d\n    \n    # Iterate through steps\n    while i <= steps and j >= 0:\n        if j == 0 and i < steps:\n            # One jump to reach the bottom row\n            count += 1\n            i += 1\n        elif j == d and i < steps:\n            # One jump to reach the right column\n            count += 1\n            i += 1\n        elif j == 0:\n            # Two jumps to reach the bottom row\n            count += 2\n            i += 1\n            j -= 1\n        elif j == d:\n            # Two jumps to reach the right column\n            count += 2\n            i += 1\n            j += 1\n        else:\n            # One jump to move diagonally\n            count += 1\n            i += 1\n            j -= 1\n            j += 1\n    \n    # Return the number of jumps\n    return count"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return None\n    \n    # Divide each element in the lists element wise\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            print(\"Error: Division by zero encountered.\")\n            return None\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length\")\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list containing the element-wise division of the two lists.\n    '''\n    # creating a new list to store the result\n    result = []\n    # iterating through the two lists\n    for i in range(len(nums1)):\n        # taking the element-wise division of the two lists\n        result.append(nums1[i] / nums2[i])\n    # returning the new list containing the element-wise division of the two lists\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the length of the two lists is the same\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The length of the two lists should be same.\")\n    # create an empty list to store the result\n    result = []\n    # iterate over the two lists and calculate the division\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ZeroDivisionError('Cannot divide by zero')\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    \n    new_str = ''\n    for char in test_str:\n        if char.isdigit():\n            new_str += char\n        else:\n            new_str += char\n    \n    for num in num_list:\n        new_str += num\n    \n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # find all the numbers in the string\n    nums = re.findall('\\d+', test_str)\n\n    # sort the numbers in descending order\n    nums_sorted = sorted(nums, reverse=True)\n\n    # join the sorted numbers with spaces to form the new string\n    new_str = ''.join(nums_sorted)\n\n    # return the new string\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    nums = re.findall(r'\\d+', test_str) # find all the numbers in the string\n    nums.sort(reverse=True) # sort the numbers in descending order\n    nums_str = ''.join(nums) # convert the sorted numbers to a string\n    num_len = len(nums_str) # get the length of the sorted numbers string\n    new_str = test_str.replace(nums_str, '') # remove the sorted numbers from the original string\n    return new_str + nums_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    # split the string into a list of characters\n    char_list = list(test_str)\n\n    # initialize two pointers, one at the beginning and one at the end\n    left_ptr = 0\n    right_ptr = len(char_list) - 1\n\n    # loop through the list until the left pointer is greater than or equal to the right pointer\n    while left_ptr < right_ptr:\n        # if the character at the left pointer is a digit, swap it with the character at the right pointer\n        if char_list[left_ptr].isdigit():\n            char_list[left_ptr], char_list[right_ptr] = char_list[right_ptr], char_list[left_ptr]\n\n        # move the left pointer to the right\n        left_ptr += 1\n\n    # join the list of characters back into a string\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the numbers\n    nums = []\n    # Iterate over the words\n    for word in words:\n        # Check if the word is a number\n        if word.isdigit():\n            # If it is, append it to the list of numbers\n            nums.append(word)\n        # If the word is not a number, append it to the original list\n        else:\n            words.append(word)\n    # Join the list of numbers into a string\n    result =''.join(nums)\n    # Join the list of words into a string\n    result +=''.join(words)\n    # Return the final string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    if num_list:\n        num_str = ''.join(num_list)\n        new_str = ''.join([char for char in test_str if not char.isdigit()])\n        return new_str + num_str\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    test_str_num_end = ''.join(num_list)\n    return test_str_num_end"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n\n    Args:\n        test_str (str): A string with numbers.\n\n    Returns:\n        str: A string with all the numbers moved to the end of the original string.\n    \"\"\"\n    numbers = [char for char in test_str if char.isdigit()]\n    return numbers + test_str.replace(numbers[0], \"\")"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty list to store the numbers\n    num_list = []\n    # Iterate through each character in the given string\n    for char in test_str:\n        # If the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # If the character is not a number, append it to the end of the string\n        else:\n            test_str = test_str + char\n    # Return the modified string with all the numbers moved to the end\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    non_num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            non_num_list.append(char)\n    return ''.join(non_num_list) + ''.join(num_list)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # sort the list\n    n = len(a)\n    dp = [0] * n\n    max_size = 0\n    max_end = 0\n    \n    # find the largest subset with every pair being divisible\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n                max_size = max(max_size, dp[i])\n                max_end = i\n                \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list of numbers in descending order\n    a.sort(reverse=True)\n\n    # Initialize variables for the largest subset and the current subset size\n    largest_size = 0\n    current_size = 0\n\n    # Loop through the sorted list of numbers\n    for num in a:\n        # If the current number is divisible by 2, add it to the current subset size and check if it's larger than the largest subset size\n        if num % 2 == 0:\n            current_size += 1\n            if current_size > largest_size:\n                largest_size = current_size\n        # If the current number is not divisible by 2, reset the current subset size to 0\n        else:\n            current_size = 0\n\n    # Return the largest subset size found\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    a.sort()\n    n = len(a)\n    max_size = 0\n    curr_size = 1\n    i = 0\n    while i < n:\n        if a[i] % a[i-curr_size] == 0:\n            curr_size += 1\n        else:\n            if curr_size > max_size:\n                max_size = curr_size\n            curr_size = 1\n        i += 1\n    if curr_size > max_size:\n        max_size = curr_size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    def is_divisible(num):\n        for i in range(len(num)):\n            if num[i] % 2!= 0:\n                return False\n        return True\n\n    def is_subset(subset, nums):\n        for num in nums:\n            if num not in subset:\n                return False\n        return True\n\n    def find_subset(nums):\n        subset = set()\n        for num in nums:\n            if is_divisible(num):\n                subset.add(num)\n        return subset\n\n    def find_largest_subset(nums):\n        subset_size = 0\n        max_subset_size = 0\n        max_subset = set()\n\n        while nums:\n            subset = find_subset(nums)\n            if is_subset(subset, nums):\n                subset_size += len(subset)\n            else:\n                nums.remove(min(nums))\n\n            if subset_size > max_subset_size:\n                max_subset_size = subset_size\n                max_subset = subset\n\n        return max_subset_size\n\n    nums = sorted(a)\n    max_subset_size = find_largest_subset(nums)\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    count = 0\n    start = 0\n    max_count = 0\n    max_size = 0\n    while start < len(a):\n        end = start + 1\n        while end < len(a) and a[end] % a[start]!= 0:\n            end += 1\n        count = end - start\n        max_count = max(max_count, count)\n        max_size = max(max_size, count)\n        start = end\n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in descending order\n    a.sort(reverse=True)\n    \n    # Initialize variables to store the size of the largest subset and the current subset size\n    largest_size = 0\n    current_size = 0\n    \n    # Iterate through the list and add each element to the current subset until it is divisible by every other element\n    for i in range(len(a)):\n        while a[i] % a[current_size]!= 0:\n            current_size -= 1\n        current_size += 1\n        \n        # Update the largest subset size if necessary\n        if current_size > largest_size:\n            largest_size = current_size\n    \n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Define the divisibility function\n    def is_divisible(n, d):\n        return n % d == 0\n\n    # Define the subset function\n    def subset(a, start, end, size):\n        if start == end:\n            return size\n        if is_divisible(a[start], size):\n            return subset(a, start + 1, end, size)\n        return subset(a, start, end - 1, size)\n\n    # Sort the input list\n    a.sort()\n\n    # Find the largest subset that meets the divisibility condition\n    max_size = 0\n    for size in range(1, len(a) + 1):\n        max_size = max(max_size, subset(a, 0, len(a) - 1, size))\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count = {}\n    for i in a:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    \n    # Find the maximum count of each element\n    max_count = {}\n    for i in count:\n        if i in max_count:\n            max_count[i] = max(max_count[i], count[i])\n        else:\n            max_count[i] = count[i]\n    \n    # Find the maximum count of pairs\n    max_count_pairs = 0\n    for i in max_count:\n        for j in max_count:\n            if i!= j and max_count[i] % max_count[j] == 0:\n                max_count_pairs += 1\n    \n    return max_count_pairs"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort() # sort the list\n    subset = [] # initialize an empty list to store the subsets\n    largest = 0 # initialize the largest subset size to 0\n    current = 0 # initialize the current subset size to 0\n\n    for num in a: # iterate through the list\n        current += 1 # increment the current subset size\n\n        if current > largest: # check if the current subset is larger than the largest subset so far\n            largest = current # update the largest subset size\n\n        while current > 0 and num % subset[-1]!= 0: # iterate through the subsets until we find a pair that is divisible\n            current -= 1 # decrement the current subset size\n            subset.pop() # remove the last element from the subset\n\n    return largest # return the largest subset size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the given list in ascending order\n    a = sorted(a)\n\n    # Initialize two pointers, one at the start and one at the end of the list\n    start = 0\n    end = len(a) - 1\n\n    # Initialize the maximum subset size as 1\n    max_size = 1\n\n    # Iterate until the start pointer is greater than or equal to the end pointer\n    while start < end:\n        # Check if the difference between the current and next elements is divisible by 2\n        if a[start] % 2 == 0 and a[end] % 2 == 0:\n            # Increase the maximum subset size if the current element is even and the next element is even\n            max_size += 1\n        # Move the end pointer to the right if the current element is even and the next element is odd\n        elif a[start] % 2 == 0:\n            start += 1\n        # Move the start pointer to the right if the current element is odd and the next element is even\n        else:\n            end -= 1\n\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError('Both lists must have the same size.')\n\n    mid = n // 2\n    arr1_sorted = sorted(arr1)\n    arr2_sorted = sorted(arr2)\n\n    # Check if the length of arr1_sorted is odd or even\n    if n % 2 == 0:\n        # If arr1_sorted has an odd length, the median is the average of the middle elements of both lists\n        median = (arr1_sorted[mid] + arr2_sorted[mid - 1]) / 2\n    else:\n        # If arr1_sorted has an even length, the median is the middle element of arr1_sorted\n        median = arr1_sorted[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # Sort the two input lists\n    arr1.sort()\n    arr2.sort()\n\n    # Calculate the indices of the middle elements\n    mid1 = n // 2\n    mid2 = n - mid1 - 1\n\n    # Check if the number of elements in the list is odd or even\n    if n % 2 == 0:\n        # If the number of elements is even, take the average of the middle two elements\n        median = (arr1[mid1] + arr1[mid2]) / 2\n    else:\n        # If the number of elements is odd, take the middle element\n        median = arr1[mid1]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate both lists\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    # Calculate the median\n    median = sorted_list[n]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        # If n is odd, return the middle element\n        return sorted([arr1[n//2], arr2[n//2]])[1]\n    else:\n        # If n is even, return the average of the middle two elements\n        return (sorted([arr1[n//2], arr2[n//2]])[1] + sorted([arr1[n//2], arr2[n//2]])[0]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        mid = n//2\n        median1 = get_kth_element(arr1, n, n//2 + 1)\n        median2 = get_kth_element(arr2, n, n//2 + 1)\n        return (median1 + median2) / 2\n    else:\n        mid = n//2\n        median1 = get_kth_element(arr1, n, n//2 + 1)\n        median2 = get_kth_element(arr2, n, n//2 + 1)\n        return median1\n\ndef get_kth_element(arr, n, k):\n    '''\n    Helper function to find the kth smallest element in an array.\n    '''\n    if k < 1 or k > n:\n        return None\n    if k == 1:\n        return arr[0]\n    if k == n:\n        return arr[n-1]\n    pivot = partition(arr, 0, n-1)\n    if k == pivot:\n        return arr[k-1]\n    elif k < pivot:\n        return get_kth_element(arr, pivot, k)\n    else:\n        return get_kth_element(arr, pivot+1, k-pivot-1)\n\ndef partition(arr, low, high):\n    '''\n    Helper function to partition an array around a pivot element.\n    '''\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i+1"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr[mid - 1] + arr[mid]) / 2\n    else:\n        return arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError(\"Both input lists should have the same length\")\n    \n    mid = n // 2\n    \n    # merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # find the median\n    if n % 2 == 0:\n        median = (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        median = sorted_list[mid]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sort the two arrays\n    arr1.sort()\n    arr2.sort()\n    \n    # Calculate the median\n    if n % 2 == 0:\n        # If the length of the list is even, return the average of the middle two elements\n        return (arr1[n//2-1] + arr1[n//2]) / 2\n    else:\n        # If the length of the list is odd, return the middle element\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge both arrays into one\n    arr = arr1 + arr2\n\n    # Sort the merged array\n    arr.sort()\n\n    # If n is odd, then the median is the middle element\n    if n % 2 == 1:\n        return arr[n//2]\n\n    # If n is even, then the median is average of middle two elements\n    else:\n        return (arr[n//2-1] + arr[n//2])/2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    median = arr[n]\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the nth power of each number in a list.\n\n    Parameters:\n    nums (list): A list of numbers.\n    n (int): The power to raise each number to.\n\n    Returns:\n    A list of the same length as `nums` containing the nth power of each number in `nums`.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not isinstance(string, str):\n        raise TypeError('Input should be a string')\n    \n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is all uppercase or not.\n    '''\n    return string.isupper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list is empty or has less than 2 elements\n    if len(newList) < 2: \n        print(\"Error: List must have at least 2 elements.\")\n        return\n\n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #interchange the first and last element\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    This function takes a list as input and swaps the first and last elements.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list is empty or has only one element\n    if len(newList) <= 1:\n        return newList\n    \n    # Check if the first and last elements are already swapped\n    if newList[0] == newList[-1]:\n        return newList\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) >= 2:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"Error: List must have at least two elements.\")\n        return None"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    \n    # get the index of the first and last elements\n    firstIndex = 0\n    lastIndex = len(newList) - 1\n    \n    # swap the first and last elements\n    newList[firstIndex], newList[lastIndex] = newList[lastIndex], newList[firstIndex]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has only one element\n    if len(newList) == 1: \n        return newList\n    # check if the list has at least two elements\n    elif len(newList) >= 2:\n        # swap the first and last element in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list must have at least two elements to swap them.\"\n    else:\n        # Interchange the first and last element using slicing\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return 0.5 * r ** 2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    This function takes a radius as input and returns the area of the largest triangle that can be inscribed in the semicircle.\n\n    The area of the largest triangle is defined as the area of the smallest triangle that can be inscribed in the semicircle, which is given by the formula: \n\n    area = (r^2 - r) * (r^2 + r) / 2\n\n    where r is the radius of the semicircle.\n\n    For example, if we want to find the area of the largest triangle that can be inscribed in a semicircle with radius 5, we can use the following code:\n\n    >>> triangle_area(5)\n    18.84955592153876\n\n    This means that the area of the largest triangle that can be inscribed in the semicircle with radius 5 is approximately 18.85 square units (0.1885 square meters).\n    '''\n\n    area = (r**2 - r) * (r**2 + r) / 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-circle's perimeter\n    perimeter = 2 * r * (r + 1)\n\n    # calculate the semi-circle's area\n    area = (perimeter * (perimeter - r * (r + 1))) / 4\n\n    # calculate the largest possible triangle's area\n    triangle_area = (r * r * (r + 1)) / 2\n\n    return triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula to find the area of the largest triangle that can be inscribed in a semicircle\n    # where r is the radius of the semicircle\n    area = math.pi * r * (r ** 2 - 1) / 6\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Radius of the semicircle\n    s = 2 * r\n\n    # Calculate the area of the base and altitude of the triangle\n    base = math.sqrt(s * (s - r) * (s - r))\n    altitude = 2 * r * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    triangle_area = base * altitude / (3 * s * s)\n\n    return triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-circle radius from the given radius\n    semi_r = r / math.sin(math.pi / 3)\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = 0.5 * (math.sqrt(semi_r ** 2 + r ** 2) - semi_r)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-perimeter of the semicircle\n    perimeter = 2*r\n\n    # calculate the area of the triangle with the given sides\n    side_length = perimeter / 3\n\n    # calculate the area of the triangle\n    area = (side_length * (side_length - r) * (side_length - 2*r)) ** 0.5\n\n    # return the area of the largest triangle that can be inscribed in the semicircle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n\n    # Calculate the area of a triangle with sides of length a and b\n    def triangle_area_helper(a, b):\n        s = (a + b + abs(a - b)) / 2\n        return (s * (s - a) * (s - b)) ** 0.5\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle with radius r\n    max_area = 0\n    for a in range(1, r):\n        for b in range(1, r):\n            area = triangle_area_helper(a, b)\n            if area > max_area:\n                max_area = area\n\n    return max_area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # Calculating the area of a triangle using Heron's formula\n    def triangle_area(base, height):\n        s = (base + height + math.sqrt(base**2 + height**2)) / 2\n        area = math.sqrt(s * (s - base) * (s - height) * (s - base - height))\n        return area\n    \n    # Calculating the area of the largest triangle inscribed in the semicircle\n    def semicircle_area(r):\n        return math.pi * r**2\n    \n    # Finding the perimeter of the largest triangle inscribed in the semicircle\n    def largest_triangle_perimeter(r):\n        return 2 * math.pi * r\n    \n    # Finding the largest triangle inscribed in the semicircle using the Pythagorean theorem\n    def largest_triangle(r):\n        base = math.sqrt(r**2 - 1)\n        height = 1 - r**2\n        return triangle_area(base, height)\n    \n    # Finding the area of the largest triangle inscribed in the semicircle using Heron's formula\n    def largest_triangle_area(r):\n        max_triangle_area = 0\n        for i in range(3, 12):\n            triangle_area_value = triangle_area(i, i)\n            if triangle_area_value > max_triangle_area:\n                max_triangle_area = triangle_area_value\n        return max_triangle_area\n    \n    # Main function to find the area of the largest triangle inscribed in the semicircle\n    def largest_triangle_inscribed_area(r):\n        return max(largest_triangle(r), semicircle_area(r) - largest_triangle_area(r))\n    \n    # Testing the function with a radius of 5\n    print(largest_triangle_inscribed_area(5))"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    \n    # Formula for the area of a triangle inscribed in a semicircle\n    # A = pi * r^2 * sin(theta)\n    \n    # Use the law of cosines to find the angle theta\n    # tan(theta) = (r^2 + a^2 - b^2) / (2 * a * b)\n    # where a^2 = r^2 and b^2 = (r^2 - a^2)^2\n    \n    # Using the Law of Cosines:\n    # tan(theta) = (r^2 + a^2 - b^2) / (2 * a * b)\n    # a^2 = r^2\n    # b^2 = (r^2 - a^2)^2\n    # tan(theta) = 2 * r * sin(theta)\n    # tan(theta) = 2 * r * (r^2 + r^2 - r^2 - r^2 - r^2 + r^2 - r^2 + r^2 - r^2 + r^2 - r^2 + r^2 - r^2 + r^2 - r^2 + r^2 - r^2 + r^2 - r^2 + r^2 - r^2)\n    # tan(theta) = 2 * r * (r^2 + 4r^2 - 3r^2 + 2r^2 - r^2 + r^2 - r^2 + r^2 - r^2 + r^2 - r^2 + r^2 - r^2 + r^2 - r^2 + r^2 - r^2 + r^2 - r^2 + r^2 - r^2)\n    # tan(theta) = 2 * r * (3r^2 - 10r^2 + 6r^2)\n    # tan(theta) = 6r * sin(theta)\n    # tan(theta) = 6r * (1 - 4sin^2(theta))\n    # tan(theta) = 6r * (1 - 4(1 - 2sin^2(theta)))\n    # tan(theta) = 6r * (1 - 4(1 - 4sin^2(theta)))\n    # tan(theta) = 6r * (1 - 4(1 - 4(1 - 8sin^2(theta))))\n    # tan(theta) = 6r * (1 - 4(1 - 4(1 - 16sin^2(theta))))\n    # tan(theta) = 6r * (1 - 4(1 - 4(1 - 16(1 - 32sin^2(theta)))))\n    # tan(theta) = 6r * (1 - 4(1 - 4(1 - 16(1 - 32(1 - 64sin^2(theta)))))))\n    # tan(theta) = 6r * (1 - 4(1 - 4(1 - 16(1 - 32(1 - 64(1 - 128sin^2(theta))))))))\n    # tan(theta) = 6r * (1 - 4(1 - 4(1 - 16(1 - 32(1 - 64(1 - 128(1 - 256sin^2(theta)))))))))\n    # tan(theta) = 6r * (1 - 4(1 - 4(1 - 16(1 - 32(1 - 64(1 - 128(1 - 256(1 - 512sin^2(theta))))))))))\n    # tan(theta) = 6r * (1 - 4(1 - 4(1 - 16(1 - 32(1 - 64(1 - 128(1 - 256(1 - 512(1 - 1024sin^2(theta)))))))))))\n    # tan(theta) = 6r * (1 - 4(1 - 4(1 - 16(1 - 32(1 - 64(1 - 128(1 - 256(1 - 512(1 - 1024(1 - 2048sin^2(theta))))))))))"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end=len(array)-1\n\n    for i in range(start,end+1):\n        if array[i]!=i+1:\n            return i+1\n\n    return end+2"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if i!=array[i]:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    # If the end index is not given, set it as the length of the list\n    if end is None:\n        end = len(array)\n\n    # Initialize the first missing number to start index\n    missing = start\n\n    # Loop through the array from start index to end index\n    for i in range(start,end):\n\n        # If the current element is smaller than the missing number, increment it\n        if array[i] < missing:\n            missing += 1\n\n        # If the current element is equal to the missing number, increment it\n        elif array[i] == missing:\n            missing += 1\n\n    # If the loop completes and the missing number is still less than the length of the array, it means all the elements are present in the array\n    if missing < end:\n        return end\n\n    # If the loop completes and the missing number is still equal to the length of the array, it means there is no missing number in the array\n    else:\n        return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    if array[start] > array[end]:\n        return find_First_Missing(array, start + 1, end)\n\n    if start == end:\n        return start + 1\n\n    mid = (start + end) // 2\n\n    if array[start] <= mid and array[mid] <= array[end]:\n        return find_First_Missing(array, start, mid - 1)\n    else:\n        return find_First_Missing(array, mid + 1, end)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    # iterate through the array and find the smallest missing number\n    for i in range(start, end):\n        if array[i]!= i + 1:\n            return i + 1\n\n    # if all numbers are consecutive, return the length of the array plus one\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i + 1 not in array:\n            return i + 1\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start,end+1):\n        if i == array[i]:\n            return i+1\n    return end+1+start"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers in the input list.\n    \"\"\"\n    even_list = []\n    for num in lst:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = [num for num in list if num % 2 == 0]\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers and returns a new list with only even numbers.\n    \"\"\"\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    even_list = []\n    for i in list:\n        if i % 2 == 0:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            result.append(list[i])\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n\n    Args:\n        list (list): A list of numbers.\n\n    Returns:\n        list: A list of even numbers from the input list.\n    \"\"\"\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list of even numbers.\n    '''\n    evens = []\n    for num in lst:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacents = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    sub.extend(adjacents)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # initialize a set to store the adjacent coordinates\n    adj = set()\n    # iterate over the elements in the tuple\n    for i, j in ele:\n        # if the current element is not the last element\n        if i < len(sub)-1 and j < len(sub[i])-1:\n            # add the neighbor coordinates to the set\n            adj.add((i+1, j+1))\n        if i < len(sub)-1 and j > 0:\n            # add the neighbor coordinates to the set\n            adj.add((i+1, j-1))\n        if i > 0 and j < len(sub[i])-1:\n            # add the neighbor coordinates to the set\n            adj.add((i-1, j+1))\n        if i > 0 and j > 0:\n            # add the neighbor coordinates to the set\n            adj.add((i-1, j-1))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if isinstance(ele, tuple): \n        for i in range(len(ele)): \n            if i!= 0: \n                sub.append((ele[i-1], ele[i])) \n            if i!= len(ele)-1: \n                sub.append((ele[i], ele[i+1])) \n    return sub "
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0 and y > 0:\n        adj.append((x - 1, y - 1))\n    if x > 0:\n        adj.append((x - 1, y))\n    if x > 0 and y < 9:\n        adj.append((x - 1, y + 1))\n    if y > 0:\n        adj.append((x, y - 1))\n    if y < 9:\n        adj.append((x, y + 1))\n    if x < 9 and y > 0:\n        adj.append((x + 1, y - 1))\n    if x < 9:\n        adj.append((x + 1, y))\n    if x < 9 and y < 9:\n        adj.append((x + 1, y + 1))\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a coordinate tuple as input and returns all its adjacent coordinates.\n    '''\n    x, y = ele\n    adjacent = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if sub:\n        return [adj for adj in adjacent if adj not in sub]\n    else:\n        return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    # Extract the row and column indices from the tuple\n    i, j = ele\n\n    # Initialize a list to store the adjacent coordinates\n    adj = []\n\n    # Loop over all the rows and columns in the 8-neighborhood around the current position\n    for ri, rj in ((i-1, j), (i+1, j), (i, j-1), (i, j+1), (i-1, j-1), (i-1, j+1), (i+1, j-1), (i+1, j+1)):\n        # Skip if the row or column is out of bounds\n        if 0 <= ri < n and 0 <= rj < m:\n            # Append the adjacent coordinate to the list\n            adj.append((ri, rj))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    # Extract the adjacent coordinates of the current element\n    adjacents = [(ele[0] + i, ele[1] + j) for i in range(-1, 2) for j in range(-1, 2)]\n    # Filter out the adjacent coordinates that are already in the sublist\n    adjacents = [adj for adj in adjacents if (adj[0], adj[1]) not in sub]\n    # Add the current element to the sublist and return the sublist\n    sub.append(ele)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    if sub:\n        adj = [coord for coord in adj if coord in sub]\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0: \n        sub.append(ele) \n    else: \n        for i in range(len(sub)): \n            if sub[i] == ele[0]: \n                sub.insert(i+1, ele[1])\n                break\n            elif sub[i][0] == ele[0]: \n                sub.insert(i+1, ele[1])\n                break\n    return sub "
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = []\n    for char in text:\n        if char =='':\n            result.append('_')\n        elif char == '_':\n            result.append(' ')\n    return ''.join(result)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    # replace whitespaces with underscores\n    new_text = text.replace(\" \", \"_\")\n    # replace underscores with whitespaces\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert all whitespace characters to underscore\n    text = text.replace(\" \", \"_\")\n    # Convert all underscore characters to whitespace\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into a list of words\n    words = text.split()\n    \n    # Iterate over each word in the list\n    for i in range(len(words)):\n        # Check if the word contains a whitespace character\n        if'' in words[i]:\n            # Replace the whitespace with an underscore\n            words[i] = words[i].replace(' ', '_')\n        # Check if the word contains an underscore character\n        elif '_' in words[i]:\n            # Replace the underscore with a whitespace\n            words[i] = words[i].replace('_','')\n    \n    # Join the words back into a string\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces =''\n    underscore = '_'\n    return text.replace(spaces, underscore).replace(underscore, spaces)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    i = 0\n\n    while i < len(num_list):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            if zero_count > 0:\n                for j in range(i, len(num_list) - zero_count):\n                    num_list[j] = num_list[j + 1]\n                i += 1\n                zero_count = 0\n            else:\n                i += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize an empty list to hold the non-zero values\n    new_list = []\n    # Loop through the given list\n    for num in num_list:\n        # If the number is not zero, append it to the new list\n        if num!= 0:\n            new_list.append(num)\n    # Add all zeroes to the end of the new list\n    for i in range(len(new_list), len(num_list)):\n        new_list.append(0)\n    # Return the new list\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers and moves all zeroes to the end of the list.\n    \"\"\"\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[zero_index], num_list[i] = num_list[i], num_list[zero_index]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for index, num in enumerate(num_list):\n        if num == 0:\n            zero_index = index\n            break\n    if zero_index!= -1:\n        num_list.pop(zero_index)\n        num_list.extend([0] * len(num_list))"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    # creating a new list to store the non-zero values\n    non_zero_list = []\n    # iterating over the list and adding non-zero values to the new list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n    # iterating over the list again and adding zeroes to the end of the new list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = non_zero_list.pop(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index == -1:\n        return num_list\n    else:\n        temp = num_list[zero_index]\n        num_list = [num for num in num_list if num!= 0]\n        num_list.append(temp)\n        return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = arr[i] ^ arr[j]\n            sum_xor = sum_xor ^ xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and an integer n as input and returns the sum of the xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize the sum of xor of all pairs as 0\n    xor_sum = 0\n    # Iterate through the array and calculate the xor of all pairs\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    # Return the sum of xor of all pairs\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and an integer n as inputs.\n    The function returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and the length of the list as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    \n    # Initializing a variable to store the sum of xor\n    sum_xor = 0\n    \n    # Iterating over all pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # XORing the two numbers and adding it to the sum\n            sum_xor += arr[i] ^ arr[j]\n    \n    # Returning the sum of xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor ^= arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    This function takes a list of integers and its length as input and returns the sum of xor of all pairs of numbers in the list.\n    \"\"\"\n\n    # calculate xor of all pairs of numbers in the list\n    xor = 0\n    for i in range(n):\n        xor ^= arr[i] ^ arr[i+1]\n\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    return [heapq.heappop(heap) for _ in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a max heap from the given list\n    hq.heapify(iterable)\n    # Remove the root element of the max heap and append it to a new list\n    sorted_list = [hq.heappop(iterable)]\n    # Repeat the process until the max heap is empty\n    while iterable:\n        # Remove the root element of the max heap and append it to a new list\n        sorted_list.append(hq.heappop(iterable))\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max-heap from the iterable\n    max_heap = hq.nlargest(len(iterable), iterable)\n    # create an empty list to store the sorted items\n    sorted_items = []\n    # add the max-heap items to the sorted list and remove them from the max-heap\n    while max_heap:\n        sorted_items.append(max_heap.pop())\n    # return the sorted list\n    return sorted_items"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts a given list using the heap sort algorithm.\n    '''\n    heap = [iterable[0]]\n    for item in iterable[1:]:\n        if item > heap[0]:\n            hq.heappush(heap, item)\n        else:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using the heap sort algorithm.\n\n    The heap sort algorithm sorts the list using a binary heap data structure.\n    The heap is a complete binary tree with the property that the value of each\n    node in the tree is no greater than the values of its children.\n\n    The algorithm works by first building a max-heap from the input list.\n    Then, repeatedly extract the maximum element from the heap and insert it\n    at the end of the sorted list. This process continues until the heap is empty.\n\n    The time complexity of this algorithm is O(n log n), where n is the length of the input list.\n    '''\n    # Build a max-heap from the input list\n    heap = hq.heapify(iterable)\n    sorted_list = []\n\n    # Extract elements from the heap and add them to the sorted list\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n\n    # Convert the list into a min-heap\n    hq.heapify(iterable)\n\n    # Extract elements from the heap in sorted order\n    result = []\n    while iterable:\n        result.append(iterable[0])\n        hq.heappop(iterable)\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a max-heap from the iterable\n    max_heap = hq.heapify(iterable)\n\n    # Extract the maximum element from the heap and insert it at the end of the list\n    sorted_list = []\n    while max_heap:\n        sorted_list.append(hq.heappop(max_heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    hq.heapify(iterable)\n    # extract the elements from the heap in sorted order\n    sorted_list = [hq.heappop(iterable) for _ in range(len(iterable))]\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the iterable to a list\n    lst = list(iterable)\n\n    # build the heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        hq.heapify(lst, i, len(lst))\n\n    # extract elements from the heap one by one and append them to the sorted list\n    for i in range(len(lst) - 1, 0, -1):\n        lst[0], lst[i] = lst[i], lst[0]\n        hq.heapify(lst, 0, i)\n\n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the input list to a heap using heapq\n    hq.heapify(iterable)\n\n    # Extract the maximum element from the heap one by one and append to the sorted list\n    sorted_list = []\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount < 0: # if actual cost is less than the sale amount\n        return False\n    else: # if actual cost is greater than the sale amount\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount: \n        return True\n    else: \n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss.\n\n    :param actual_cost: The actual cost of the sale.\n    :param sale_amount: The amount that was sold.\n    :return: True if the given amount has no profit and no loss, False otherwise.\n    \"\"\"\n    if actual_cost > sale_amount:\n        return False\n    elif sale_amount >= actual_cost:\n        return True\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check whether profit and loss are zero\n    if profit == 0 and loss == 0:\n        print(\"No profit and no loss\")\n        return True\n    else:\n        print(\"Profit:\", profit)\n        print(\"Loss:\", loss)\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Arguments:\n    actual_cost -- the actual cost of the sale\n    sale_amount -- the amount paid for the sale\n    \n    Returns:\n    boolean -- True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n    \n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return \"Profitable\"\n    elif actual_cost < sale_amount:\n        return \"No Profit\"\n    else:\n        return \"No Loss\""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # convert temperature to Kelvin\n    T = t + 273.15\n    \n    # calculate the dew point temperature\n    D = 243.04 * (math.exp((17.625 * (T - 243.04)) / (T - 29.65))) / ((17.625 * (T - 243.04)) + (math.exp((17.625 * (T - 243.04)) / (T - 29.65))))\n    \n    # calculate the wind chill temperature\n    wc = (v / 1000) * math.sqrt(D / T)\n    \n    # calculate the wind chill index\n    wci = 35.74 + 0.6215 * wc - 35.75 * math.exp((17.625 * (wc - 35.75)) / (wc - 32))\n    \n    # round the wind chill index to the nearest integer\n    wci = int(math.ceil(wci))\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215*t - 35.75*math.log(v) + 0.4275*t*math.log(v) - 0.0058*t**2 - 0.075*t*math.log(t)\n    \n    # Round the result to the nearest integer and return it\n    return round(wc)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # Calculate the heat index\n    hi = 0.5 * (v**2 / (t_f + 68)) + 32\n    \n    # Calculate the wind chill index\n    wc = hi - 459.67\n    \n    # Round the wind chill index to the nearest integer\n    wc = round(wc)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert wind speed and temperature to SI units\n    v_si = v * 1.60934  # km/h to m/s\n    t_si = t - 273.15  # K to \u00b0C\n\n    # Calculate the wind chill index\n    wci = 25 - 459.67 * math.log(t_si / 10.0) + 35.75 * math.log(v_si / 1.2) - 0.6215 * (t_si / 10.0)**2 + 10.73 * (v_si / 1.2)**2 - 0.3965 * (t_si / 10.0)**3 + 5.39 * (v_si / 1.2)**3\n\n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n\n    # Return the wind chill index\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n\n    # Convert temperature to fahrenheit\n    t = (t * 1.8) + 32\n\n    # Calculate the wind chill index\n    wc = 35.75 + (0.6215 * v) - (35.75 * (t - 32)) * (1 / (t - 32) + 0.16 * (t - 32))\n\n    # Round the result to the nearest integer\n    wc = math.ceil(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature from celsius to fahrenheit\n    temp_f = (9/5) * t + 32\n    \n    # Calculate wind chill index\n    wci = 0.62197 * v / temp_f - 16.23\n\n    # Convert wind chill index to rounded integer\n    wci_int = round(wci)\n\n    return wci_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = math.ceil(273.15 + (v/1.609344) * (t - 273.15))\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Parameters:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in celsius.\n    \n    Returns:\n    int: Wind chill index rounded to the next integer.\n    \"\"\"\n    # Convert wind velocity and temperature to degrees Celsius\n    tc = (t - 32) * 5/9\n    \n    # Calculate the dew point temperature\n    dp = 243.04 * (1/((1/tc) + ((243.04/tc) * (math.log(1/tc))))))\n    \n    # Calculate the wind chill index\n    wc = 13.12 + 0.6215 * dp - 11.37 * math.log(dp) + 0.3965 * v\n    \n    # Round the wind chill index to the nearest integer\n    return int(wc + 0.5)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    This function calculates the wind chill index (WCI) for a given wind speed in km/h and temperature in celsius.\n    The WCI is calculated as the temperature difference divided by the humidity ratio (RH) times the wind speed in km/h.\n    '''\n\n    # Conversion factors from celsius to fahrenheit and back to celsius\n    fahrenheit = (t * 9/5) + 32\n    celsius = fahrenheit - 459.67\n\n    # Calculate the humidity ratio\n    RH = 100 * t / (237.3 + t)\n\n    # Calculate the WCI\n    WCI = round(celsius - (RH * v) / 10)\n\n    return WCI"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # calculate the wind chill index using the formula provided in the problem statement\n    wci = 35.74 + 0.6215*t - 35.75*math.log(v) + 0.4275*t*math.log(v)\n    \n    # round the wind chill index to the nearest integer\n    wci = math.ceil(wci)\n    \n    return wci"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of lengths of names after removing lowercase names\n    total_length = 0\n    \n    # loop through the list of names\n    for name in sample_names:\n        # remove any lowercase letters from the name\n        name = ''.join(filter(str.isalpha, name))\n        # add the length of the remaining name to the total length\n        total_length += len(name)\n    \n    # return the total length of names after removing the lowercase names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initializing the sum variable to 0\n    sum_length = 0\n    # looping through the sample_names list\n    for name in sample_names:\n        # removing the lowercase letters from the name using a regular expression\n        name = re.sub('[a-z]', '', name)\n        # checking if the name is not empty or contains only spaces\n        if name.strip() == '' or name.isspace():\n            # if it is empty or contains only spaces, skip it\n            continue\n        # adding the length of the name to the sum variable\n        sum_length += len(name)\n    # returning the sum of the lengths of the names\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            length_sum += len(name)\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def remove_lowercase(name):\n        if name[0].islower():\n            return False\n        else:\n            return True\n\n    return sum(len(name) for name in sample_names if remove_lowercase(name))"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of the names\n    length_sum = 0\n    \n    # Loop through the list of names\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If so, skip the name and move on to the next one\n            continue\n        \n        # Add the length of the name to the sum\n        length_sum += len(name)\n    \n    # Return the sum of the lengths of the names after removing the names that start with a lowercase letter\n    return length_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the names with lowercase letters removed\n    names_without_lowercase = []\n    # Loop through each name in the input list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip the name and move on to the next one\n            continue\n        # If the name does not start with a lowercase letter, add it to the names_without_lowercase list\n        names_without_lowercase.append(name)\n    # Sum the length of the names_without_lowercase list\n    total_length = sum([len(name) for name in names_without_lowercase])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if not name.startswith(name[0].lower()))"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of the names\n    total_len = 0\n    \n    # Iterate through the list of names\n    for name in sample_names:\n        # Remove the first character (i.e., the lowercase letter) from the name\n        name = name[1:]\n        # If the name starts with a lowercase letter, skip it and move to the next name\n        if name[0].islower():\n            continue\n        # Add the length of the name to the total sum\n        total_len += len(name)\n    \n    # Return the total sum of the lengths of the names after removing lowercase names\n    return total_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the valid names\n    valid_names = []\n\n    # iterate over each name in the input list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip the name\n            continue\n        # if the name does not start with a lowercase letter, add it to the valid_names list\n        valid_names.append(name)\n\n    # use the sum() function to add up the lengths of the valid names in the list\n    total_length = sum([len(name) for name in valid_names])\n\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Removing the parenthesis\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Removing the whitespace\n    items = items.replace(' ', '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string and removes the parenthesis and the text inside them.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Removes all parentheses and returns the string without them.\n    \"\"\"\n    # Define the pattern for matching parenthesis\n    pattern = r'\\(\\w+\\)'\n    # Use re.findall to find all matches in the string\n    matches = re.findall(pattern, items)\n    # Remove all matches from the string\n    cleaned_items = [item.replace('(', '').replace(')', '') for item in items]\n    # Join the remaining items into a single string\n    result =''.join(cleaned_items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression pattern for matching parenthesis\n    pattern = r'\\([^)]*\\)'\n    # Use the regular expression pattern to find all the parenthesis in the string\n    parenthesis_matches = re.findall(pattern, items)\n    # Loop through the matches and remove the parenthesis and what is inbetween them\n    for match in parenthesis_matches:\n        items = items.replace(match, '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string and removes the parenthesis and what is inbetween them from the string.\n\n    Input:\n    items: A string.\n\n    Output:\n    The string with parenthesis removed.\n\n    Example:\n    items = \"Hello (World)!\"\n    Output: \"Hello World!\"\n    '''\n\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^()]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_parenthesis(items):\n    pattern = re.compile(r\"\\(.*?\\)\")\n    return pattern.sub(\"\", items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^\\)]+\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Initialize the nonagonal number\n    nonagonal = 1\n\n    # Initialize the current row number\n    row_num = 0\n\n    # Loop until we reach the nth row\n    while row_num < n:\n        # Increment the nonagonal number by the number of columns in the previous row\n        nonagonal += row_num\n\n        # Increment the row number\n        row_num += 1\n\n    # Return the nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return n * (n+1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Base case: if n is 1, return 1\n    if n == 1:\n        return 1\n    # Base case: if n is odd, return 0\n    if n % 2!= 0:\n        return 0\n    # Calculate the sum of nonagonal numbers from 1 to n-1\n    nonagonal_sum = 0\n    for i in range(1, n):\n        nonagonal_sum += (i * (i+1)) // 2\n    # Return the sum of nonagonal numbers\n    return nonagonal_sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 2\n    for i in range(2, n+1):\n        temp = a + b\n        a = b\n        b = temp\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Define the starting number as 1\n    num = 1\n    # Initialize a counter for the number of nonagonal numbers\n    count = 0\n    # Loop through each row of the triangle\n    for i in range(1, n+1):\n        # Calculate the number of nonagonal numbers in the current row\n        row_count = (i * (i + 1)) // 2\n        # Add the number of nonagonal numbers to the counter\n        count += row_count\n    # Return the count of nonagonal numbers\n    return count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    # initialize the first two nonagonal numbers\n    a = 1\n    b = 4\n\n    # loop through each number to find the nth nonagonal number\n    for i in range(2, n+1):\n        # update the value of b\n        b += a\n\n        # if the value of b becomes negative, reset it to 1\n        if b < 0:\n            b = 1\n\n        # if b is equal to n, return True\n        if b == n:\n            return True\n\n    # if the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Step 1: calculate the sum of the first n rows\n    sum_rows = (n * (n+1))/2\n    # Step 2: calculate the sum of the first n columns\n    sum_cols = n*(n+1)/2\n    # Step 3: calculate the sum of the first n diagonals\n    sum_diags = (n*(n**2 + 1)/6)\n    # Step 4: add up the first 2 terms\n    nth_nonagonal = sum_rows + sum_cols - sum_diags\n    return nth_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return (2 * n) ** 2 - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def triangular(n):\n        '''\n        Helper function to generate triangular numbers.\n        '''\n        return n * (n + 1) // 2\n\n    # calculate the number of rows in the triangle\n    num_rows = (triangular(n) - 1) // 2\n\n    # calculate the number of nonagonal numbers in each row\n    num_nonagonal = triangular(num_rows) - triangular(num_rows + 1)\n\n    # calculate the nth nonagonal number\n    nth_nonagonal = num_nonagonal * (num_rows - n + 1) // 2 + n\n\n    return nth_nonagonal"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?<!\\w)z(?!\\w)\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z])z(?![a-zA-Z])'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Loop through each word\n    for word in words:\n        # Check if the first and last letters of the word are 'z'\n        if word[0] == 'z' and word[-1] == 'z':\n            # Check if the middle letters are not 'z'\n            if 'z' in word[1:-1]:\n                # If the middle letters are not 'z', return True\n                return True\n\n    # If no 'z' was found in the middle of the word, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'[a-zA-Z0-9]*z[a-zA-Z0-9]*')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!^)(?<!\\w)z(?!\\w)([^\\w\\s]|$)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # remove punctuation and convert to lowercase\n    text = re.sub(r'[^\\w\\s]', '', text).lower()\n\n    # split the text into words and iterate over them\n    words = text.split()\n    for i in range(len(words)):\n        # check if the first and last characters of the word are 'z'\n        if words[i][0] == 'z' and words[i][-1] == 'z':\n            # if so, replace them with a '*'\n            words[i] = '*' * (len(words[i]) - 2)\n\n    # join the words with spaces and remove leading and trailing spaces\n    result =''.join(words).strip()\n\n    return result"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Remove all non-alphanumeric characters and split the string into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Iterate through each word and check if the middle character is 'z'\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            continue\n        else:\n            # If the middle character is not 'z', check if the first and last characters are 'z'\n            if word[1] == 'z' and word[-2] == 'z':\n                continue\n            else:\n                return True\n    # If no matching words are found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r\"^(?!.*\\b\\w*z\\b.*$).*(?!.*\\b\\w*z\\b.*$).*\")\n    return pattern.match(text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return len(matches)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize the start and end index of the array \n    start = 0\n    end = len(input) - 1\n    \n    # Check if the k is less than the start index \n    if k < start: \n        return input\n    \n    # Check if the k is greater than the end index \n    elif k > end: \n        return input\n    \n    # Reverse the array upto the k-1 position \n    while start < k-1: \n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    \n    # Print the reversed array \n    print(input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from position 0 to k-1\n    input = input[::-1][:k]\n    # Reverse the rest of the array\n    input[::-1] = input[:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    for i in range(k - 1, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # check if k is valid\n    if k > len(input) or k < 1:\n        return \"Invalid input. Please enter a positive integer k less than or equal to the length of the input array.\"\n\n    # initialize variables\n    left = 0\n    right = k - 1\n    temp = 0\n\n    # reverse the first k elements of the array\n    while left < right:\n        temp = input[left]\n        input[left] = input[right]\n        input[right] = temp\n        left += 1\n        right -= 1\n\n    # reverse the remaining elements of the array\n    while left < len(input):\n        temp = input[left]\n        input[left] = input[right]\n        input[right] = temp\n        left += 1\n        right -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        k = len(input)\n    input = input[:k]\n    input = input[::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k and returns a new array with the elements in reverse order.\n    '''\n    n = len(input)\n    new_input = []\n    i = 0\n    j = n-1\n    while i < j:\n        if i < k-1:\n            new_input.append(input[i])\n            i += 1\n        else:\n            new_input.append(input[j])\n            j -= 1\n    return new_input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array upto the given position k\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array starting from position k\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    n = len(input)\n    if n < k or k < 1:\n        return input\n    else:\n        return input[:k] + input[k:].reverse()"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, len(input)//2):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array upto the k-th element\n    input[:k] = input[:k][::-1]\n    # Reverse the rest of the array\n    input[k:] = input[k:][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the tuple to a dictionary\n    test_dict = dict(test_dict)\n    \n    # Add the dictionary to the tuple\n    test_tup += (test_dict,)\n    \n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # convert the dictionary to a tuple\n    new_tuple = tuple(test_dict.items())\n    # concatenate the tuple with the original tuple\n    new_tuple = test_tup + new_tuple\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the given key-value pairs\n    new_dict = {**test_dict}\n    # add the new dictionary to the given tuple\n    updated_tup = (test_tup, new_dict)\n    # return the updated tuple\n    return updated_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup += (key, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    new_tuple = tuple(test_tup + [test_dict])\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create an empty dictionary to hold the added dictionary\n    added_dict = {}\n    \n    # Loop through each key-value pair in the test dictionary\n    for key, value in test_dict.items():\n        # If the key already exists in the test tuple, add the value to the existing key's value in the added_dict\n        if key in test_tup:\n            added_dict[key] = added_dict[key] + value\n        # If the key does not exist in the test tuple, add the key-value pair to the added_dict as a new key-value pair\n        else:\n            added_dict[key] = value\n            \n    # Return the tuple with the added dictionary\n    return test_tup + (added_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the dictionary to a list of tuples\n    dict_list = [(key, value) for key, value in test_dict.items()]\n    # concatenate the tuple and the dictionary to get a new tuple\n    new_tup = (test_tup + dict_list)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create an empty dictionary to store the new key-value pairs\n    new_dict = {}\n    # Loop through each key-value pair in the test_dict\n    for key, value in test_dict.items():\n        # Add the key-value pair to the new_dict\n        new_dict[key] = value\n    # Loop through each item in the test_tup\n    for item in test_tup:\n        # Check if the item is a dictionary\n        if isinstance(item, dict):\n            # If it is, merge the new_dict with the item\n            item.update(new_dict)\n        # Otherwise, just append the new_dict to the item\n        else:\n            item.append(new_dict)\n    # Return the modified test_tup\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                avg = cost[i][j] + maxAverageOfPath(cost[:i, j:])\n            elif j == 0:\n                avg = cost[i][j] + maxAverageOfPath(cost[i, :j])\n            else:\n                avg = cost[i][j] + max(maxAverageOfPath(cost[:i, j:]), maxAverageOfPath(cost[i:, :j]))\n            if avg > max_avg:\n                max_avg = avg\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n\n    for i in range(1, N + 1):\n        dp[i][0] = 0\n        dp[0][i] = 0\n\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i-1][j-1]\n\n    max_avg = 0\n    max_path = []\n\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            avg = dp[i][j] / (i * j)\n            if avg > max_avg:\n                max_avg = avg\n                max_path = [f'({i}, {j})']\n            elif avg == max_avg:\n                max_path.append(f'({i}, {j})')\n\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    max_path = []\n\n    # Compute the average of each path\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                avg = sum(cost[0][j+1:n]) / (n-1)\n            elif j == 0:\n                avg = sum(cost[i+1][0:n]) / (n-1)\n            else:\n                avg = (cost[i][j] + cost[i-1][j] + cost[i+1][j] + cost[i][j-1]) / 4\n            if avg > max_avg:\n                max_avg = avg\n                max_path = [[i, j]]\n            elif avg == max_avg:\n                max_path.append([i, j])\n\n    # Compute the maximum average\n    max_avg_path = []\n    for i in range(n):\n        for j in range(n):\n            if [i, j] in max_path:\n                max_avg_path.append(cost[i][j])\n    max_avg_path = sum(max_avg_path) / len(max_avg_path)\n\n    return max_avg_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    n = len(cost)\n    max_avg = 0\n    max_path = []\n    \n    # Loop through all paths\n    for i in range(n):\n        for j in range(n):\n            # Check if the current cell is part of the path\n            if i == 0 and j == 0:\n                continue\n            \n            # Compute the cost of the current path\n            path_cost = 0\n            path_size = 1\n            current_cell = (i, j)\n            while True:\n                # Move down\n                if j < n - 1:\n                    new_cell = (i, j+1)\n                    path_cost += cost[new_cell[0]][new_cell[1]]\n                    path_size += 1\n                # Move right\n                if i < n - 1:\n                    new_cell = (i+1, j)\n                    path_cost += cost[new_cell[0]][new_cell[1]]\n                    path_size += 1\n                # If we have reached the bottom right cell, break the loop\n                if i == n - 1 and j == n - 1:\n                    break\n                # Move up\n                if j > 0:\n                    new_cell = (i, j-1)\n                    path_cost += cost[new_cell[0]][new_cell[1]]\n                    path_size += 1\n                # Move left\n                if i > 0:\n                    new_cell = (i-1, j)\n                    path_cost += cost[new_cell[0]][new_cell[1]]\n                    path_size += 1\n            \n            # Check if the current path is the best so far\n            path_avg = path_cost / path_size\n            if path_avg > max_avg:\n                max_avg = path_avg\n                max_path = [current_cell]\n            elif path_avg == max_avg:\n                max_path.append(current_cell)\n    \n    # Return the maximum average\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # find the maximum path\n    max_path = cost[0]\n    for row in cost:\n        if row > max_path:\n            max_path = row\n    \n    # compute the average of the maximum path\n    max_path_cost = 0\n    max_path_length = 0\n    for i in range(len(max_path)):\n        if i == 0:\n            max_path_cost += max_path[0]\n            max_path_length += 1\n        else:\n            max_path_cost += max_path[i]\n            max_path_length += 1\n    average = max_path_cost / max_path_length\n    \n    # find all paths with the same maximum cost\n    same_max_cost_paths = []\n    for row in cost:\n        if row == max_path:\n            same_max_cost_paths.append(row)\n    \n    # compute the average of all paths with the same maximum cost\n    same_max_cost_cost = 0\n    same_max_cost_length = 0\n    for path in same_max_cost_paths:\n        for i in range(len(path)):\n            if i == 0:\n                same_max_cost_cost += path[0]\n                same_max_cost_length += 1\n            else:\n                same_max_cost_cost += path[i]\n                same_max_cost_length += 1\n    same_max_cost_average = same_max_cost_cost / same_max_cost_length\n    \n    # find the maximum average of all paths\n    if same_max_cost_average > average:\n        return same_max_cost_average\n    else:\n        return average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    max_avg = 0\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]+cost[i][j])\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j]+cost[i][j])\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n    \n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, dp[i][j])\n            elif i == N-1:\n                max_avg = max(max_avg, dp[i][j], dp[i][j-1])\n            elif j == N-1:\n                max_avg = max(max_avg, dp[i][j], dp[i-1][j])\n            else:\n                max_avg = max(max_avg, dp[i][j], dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    \n    return max_avg / (N**2)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = 0\n\n    # Calculate the maximum average for each cell\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]) + cost[i][j]\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average in the last row\n    for j in range(N):\n        max_avg = max(max_avg, dp[N-1][j])\n\n    return max_avg // N"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Define the number of rows and columns in the matrix\n    N = len(cost)\n    \n    # Initialize the variables to store the maximum average and the maximum path\n    max_avg = 0\n    max_path = []\n    \n    # Initialize the variables to store the total cost and the number of cells visited\n    total_cost = 0\n    num_cells = 0\n    \n    # Initialize the variables to store the current cell and the previous cell\n    cur_cell = (0, 0)\n    prev_cell = (0, 0)\n    \n    # Initialize the variables to store the directions to move in the matrix\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    # Loop through the matrix and find the maximum average and maximum path\n    for i in range(1, N-1):\n        for j in range(1, N-1):\n            \n            # If the current cell is already part of a path, skip it\n            if (cur_cell[0] == i) and (cur_cell[1] == j):\n                continue\n            \n            # Find the maximum average in the current cell\n            for dir in directions:\n                new_cell = (cur_cell[0] + dir[0], cur_cell[1] + dir[1])\n                if (0 <= new_cell[0] < N) and (0 <= new_cell[1] < N):\n                    \n                    # Calculate the cost of the new cell\n                    new_cost = cost[new_cell[0]][new_cell[1]]\n                    \n                    # Calculate the new total cost and number of cells visited\n                    total_cost += (new_cost - cost[cur_cell[0]][cur_cell[1]])\n                    num_cells += 1\n                    \n                    # If the new total cost is greater than the current maximum average, update the maximum average and maximum path\n                    if total_cost > max_avg:\n                        max_avg = total_cost\n                        max_path = [cur_cell] + [(new_cell[0], new_cell[1])]\n                        \n                    # If the new total cost is equal to the current maximum average, add the new cell to the path\n                    elif total_cost == max_avg:\n                        max_path.append((new_cell[0], new_cell[1]))\n                        \n                    # Reset the total cost and number of cells visited for the new cell\n                    total_cost = new_cost\n                    num_cells = 1\n            \n            # Update the previous cell to the current cell\n            prev_cell = cur_cell\n            \n            # Update the current cell to the next cell\n            cur_cell = (i, j)\n            \n    # Return the maximum average and maximum path\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n    for i in range(1, N):\n        dp[0][i] = cost[0][i]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = float('-inf')\n    \n    # Base case: initialize the first row\n    for j in range(N):\n        dp[0][j] = cost[0][j]\n    \n    # Initialize the first column\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n    \n    # Fill the rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            # Compute the average of the four neighboring cells\n            dp[i][j] = (dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1] + dp[i][j]) / 4\n    \n    # Find the maximum average\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    \n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the names of students who satisfy the condition\n    result = []\n    # Loop through the dictionary and check if each student has height and weight above the minimum\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            result.append(name)\n    # Return the list of satisfied students\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    \n    for name, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            filtered_students[name] = data\n    \n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # Filter the students based on height and weight\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize a dictionary to store the counts of each element in the lists\n    count_dict = {}\n\n    # Iterate through the first list and count the occurrences of each element\n    for i in range(len(nums1)):\n        if nums1[i] in count_dict:\n            count_dict[nums1[i]] += 1\n        else:\n            count_dict[nums1[i]] = 1\n\n    # Initialize a counter for the number of same pairs found\n    count = 0\n\n    # Iterate through the second list and check if there are any same pairs\n    for i in range(len(nums2)):\n        if nums2[i] in count_dict and count_dict[nums2[i]] > 0:\n            # If there are, increment the counter and decrement the count of the element in the first list\n            count += 1\n            count_dict[nums2[i]] -= 1\n\n    # Return the total count of same pairs found\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[i]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Iterate through both lists\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # calculate the sum of all digits of the base to the specified power\n    result = 0\n    for _ in range(power):\n        result += sum(int(digit) for digit in str(base))\n        base *= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n\n    # Convert the base to a string\n    base_str = str(base)\n\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through each character in the string\n    for char in base_str:\n        # Convert each character to an integer and add it to the sum\n        sum += int(char) ** power\n\n    # Return the sum of all digits to the specified power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(base)]\n    # calculate the sum of all digits raised to the power of the power\n    result = sum([digit**power for digit in digits])\n    # return the result as an integer\n    return int(result)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    result = 0\n    for digit in base_str:\n        digit_int = int(digit)\n        result += digit_int ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum to 0\n    sum_of_digits = 0\n    \n    # Loop through each digit in the base\n    while base > 0:\n        # Calculate the remainder of dividing the base by 10\n        remainder = base % 10\n        \n        # Add the remainder to the sum_of_digits\n        sum_of_digits += remainder\n        \n        # Remove the last digit from the base\n        base //= 10\n    \n    # Calculate the sum of digits raised to the power\n    result = sum_of_digits ** power\n    \n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    elif power % 2 == 0:\n        return power_base_sum(base*base, power//2)\n    else:\n        return base + power_base_sum(base*base, (power-1)//2)"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base < 0:\n        base = -base\n    if power < 0:\n        power = -power\n        \n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n        \n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # initialize the result variable to 0\n    result = 0\n\n    # loop through each digit of the base and calculate the sum of digits raised to the power\n    for digit in str(base):\n        result += int(digit) ** power\n\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n\n    pattern = r'(?<=\\s)\"(.*?)\"(?=\\s)'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Find all the quotation marks \" \" in the string\n    quotation_marks = re.findall(r'\"', text1)\n    \n    # Initialize an empty list to store the extracted values\n    values = []\n    \n    # Iterate over each quotation mark and find the corresponding value\n    for quotation in quotation_marks:\n        # Find the index of the next quotation mark starting from the current one\n        start_index = text1.index(quotation) + len(quotation)\n        # Find the index of the previous quotation mark starting from the current one\n        end_index = text1.rindex(quotation, 0, start_index)\n        # Extract the value between the quotation marks\n        value = text1[start_index:end_index]\n        # Add the extracted value to the values list\n        values.append(value)\n    \n    # Return the values list\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # using regular expression to extract values between quotation marks\n    pattern = r'(?<=^\")(.*?)(?=\"$)'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define regular expression pattern to match quotation marks and text inside them\n    pattern = re.compile(r'\"([^\"]*)\"')\n    \n    # Find all the matches of the pattern in the given text\n    matches = pattern.findall(text)\n    \n    # Create a new string containing all the extracted values between quotation marks\n    result = ''\n    for match in matches:\n        result += match\n    \n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define the regular expression pattern to match quotation marks \" \"\n    pattern = r'\"([^\"]*)\"'\n    # Use the pattern to find all matches in the string\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the extracted values\n    extracted_values = []\n    # Loop through the matches and append each extracted value to the list\n    for match in matches:\n        extracted_values.append(match)\n    # Return the extracted values as a list\n    return extracted_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function will extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expressions to extract values between quotation marks\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expression to extract values between quotation marks \" \"\n    pattern = r'\"([^\"]*)\"'\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result = []\n    for i in range(n):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        if i == N-1:\n            result_tup += (test_tup[i] * test_tup[i+1],)\n        else:\n            result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # get the length of the input tuple\n    N = len(test_tup)\n    # create an empty tuple of length N\n    result_tup = tuple(0 for i in range(N))\n    # iterate through the input tuple\n    for i in range(N-1):\n        # multiply the i-th and (i+1)-th elements of the input tuple\n        result_tup[i] = test_tup[i] * test_tup[i+1]\n    # return the final result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)-1):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    new_tup += (test_tup[-1] * test_tup[0],)\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Convert input tuple to list\n    t_list = list(test_tup)\n    # Calculate the product of all elements in the list\n    product = 1\n    for num in t_list:\n        product *= num\n    # Convert the product to a tuple of the same length\n    result_tup = tuple(product)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # Initialize an empty list to store the sum of the two lists\n    result = []\n    # Loop through the elements of the first list\n    for i in range(len(lst1)):\n        # Add the corresponding element of the first and second lists to the result list\n        result.append(lst1[i] + lst2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # initialize an empty list to store the sum of the lists\n    result = []\n\n    # iterate through each element in the lists\n    for i in range(len(lst1)):\n        # add the two elements and append the result to the result list\n        result.append(lst1[i] + lst2[i])\n\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # check if both lists have the same length\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length.\")\n    # create a new list to store the sum\n    result = []\n    # loop through both lists\n    for i in range(len(lst1)):\n        # add the corresponding elements of the lists\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns their sum.\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return []\n    # convert the list to a set to remove duplicates\n    unique_nums = set(nums)\n    # create a list of consecutive numbers and their counts\n    consecutive_counts = [(num, len(list(group))) for num, group in groupby(unique_nums)]\n    # remove duplicates from the list of consecutive numbers and their counts\n    unique_consecutive_counts = []\n    for num, count in consecutive_counts:\n        if not unique_consecutive_counts or unique_consecutive_counts[-1][0]!= num:\n            unique_consecutive_counts.append((num, count))\n    # create a list of consecutive numbers\n    consecutive_nums = [num for num, count in unique_consecutive_counts]\n    return consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Removes consecutive duplicates from a list of integers.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        list: A new list with consecutive duplicates removed.\n    \"\"\"\n\n    # Convert the list to a set to remove duplicates\n    nums_set = set(nums)\n\n    # Convert the set back to a list to preserve order\n    nums_list = list(nums_set)\n\n    # Group the list by consecutive duplicates\n    consecutive_groups = groupby(nums_list)\n\n    # Use a list comprehension to remove the consecutive duplicates\n    new_list = [x for x in consecutive_groups if not x[1] and len(list(x[0])) > 1]\n\n    return new_list"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped_nums = sorted(list(set(nums)))\n    consecutive_nums = []\n    for item in grouped_nums:\n        if len(list(item)) > 1:\n            consecutive_nums.append(list(item)[0])\n    return consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use itertools.groupby() to group consecutive duplicates\n    grouped = groupby(nums)\n    \n    # Extract the keys (consecutive duplicates) and the values (original values)\n    groups = [list(group) for key, group in grouped]\n    \n    # Remove the keys from the original list\n    for key in groups:\n        nums.remove(key)\n    \n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # convert the list to a set so we can easily check for duplicates\n    set_nums = set(nums)\n    # iterate over the set of unique numbers, and group them by their indices in the list\n    grouped_nums = [list(group) for key, group in groupby(set_nums)]\n    # create an empty list to store the consecutive duplicates\n    consecutive_duplicates = []\n    # iterate over the groups of consecutive duplicates\n    for i in range(len(grouped_nums)):\n        # if the group has only one element, it's not a consecutive duplicate\n        if len(grouped_nums[i]) == 1:\n            continue\n        # if the group has more than one element, check if they are consecutive\n        else:\n            if grouped_nums[i][-1] == grouped_nums[i][-2]:\n                consecutive_duplicates.append(grouped_nums[i][-1])\n    # remove the consecutive duplicates from the original list\n    for num in consecutive_duplicates:\n        nums.remove(num)\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(accumulate(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    # Create a generator that groups consecutive duplicates of the list\n    grouped = groupby(enumerate(nums), lambda x: x[0] - x[1])\n    # Filter out groups with duplicate indices\n    result = [g for _, g in grouped if not any(i == i+1 for i, _ in g)]\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for _, group in groupby(nums) if len(list(group)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group the numbers by their indices\n    grouped_nums = groupby(enumerate(nums), lambda x: x[0] - x[1])\n    # create a list of consecutive duplicates and remove them from the original list\n    consecutive_duplicates = [num for _, group in grouped_nums if len(list(group)) > 1]\n    for duplicate in consecutive_duplicates:\n        nums.remove(duplicate)\n    return nums"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 #formula for lateral surface area of a cone\n    lateral_surface_area = 2 * area #multiply the formula by 2 to get the total lateral surface area\n    return lateral_surface_area #return the total lateral surface area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    #Calculate the lateral surface area\n    lateral_surface_area = 2*math.pi*r*(h/2)\n    \n    #Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r**2 * h / 3 # Convert from radius to lateral area\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone given the radius r and height h.\n    \"\"\"\n    \n    # Calculate the lateral surface area\n    surface_area = math.pi * r * (h/2) + (math.pi * r**2)/3\n    \n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2*math.pi*r*h\n    print(\"The lateral surface area of the cone is:\", s)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*(math.pi*r**2 + math.pi*h)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to match all occurrences of spaces, commas, or dots\n    pattern = r'[\\s,\\.]'\n    # Use re.sub() function to replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to match all the special characters\n    pattern = r'\\s+|[,.]\\s+|[,.]\\s+|[,.]\\s+'\n\n    # Replace all the special characters with a colon\n    text = re.sub(pattern, ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Remove special characters and convert to lowercase\n    text = re.sub(r'\\W+', '', text.lower())\n    # Replace special characters with colon\n    text = re.sub(r'\\s+|,\\s+|\\.+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match spaces, commas, or dots\n    pattern = re.compile(r'[., ]')\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text).replace(' ', ':').replace(',', ':').replace('.', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Define a regular expression to match all special characters\n    special_char_pattern = re.compile(r'[^\\w\\s]')\n    # Replace all occurrences of special characters with a colon\n    text = special_char_pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern for spaces, commas, or dots\n    pattern = r'\\s+|,+|\\.+|:+'\n    # Use re.sub() method to replace all occurrences of the pattern with a colon\n    result = re.sub(pattern, ':', text)\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.compile(r'[\\s,.]')\n    replaced_text = special_chars.sub(':', text)\n    return replaced_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,.]'\n    new_text = re.sub(pattern, ':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces with a colon\n    text = re.sub(r'\\s+', ':', text)\n    # Replace all occurrences of commas with a colon\n    text = re.sub(r'\\,', ':', text)\n    # Replace all occurrences of dots with a colon\n    text = re.sub(r'\\.', ':', text)\n    # Remove all trailing colons\n    text = text.rstrip(':')\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1] < x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A (list): Sorted array.\n        x (int): Number to search for.\n\n    Returns:\n        int: Index of the first occurrence of x in A.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    first_occurrence = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            first_occurrence = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) - 1 and A[i] <= x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    if len(A) == 0:\n        return -1\n    \n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n        \n    if i == len(A) or A[i]!= x:\n        return -1\n        \n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return high if A[high] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the first occurrence index to -1\n    index = -1\n    \n    # Initialize a variable to keep track of the current index\n    current_index = 0\n    \n    # Loop through the sorted array until the current index is greater than or equal to the length of the array\n    while current_index < len(A):\n        # If the element at the current index is equal to the given number, update the index and move on to the next element\n        if A[current_index] == x:\n            index = current_index\n            current_index += 1\n        # If the element at the current index is less than the given number, move on to the next element\n        else:\n            current_index += 1\n    \n    # Return the index of the first occurrence of the given number in the array\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Use binary search to find the first occurrence of x in A\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            # If x is found at mid, check if it is the first occurrence of x\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Initialize a variable to store the sum of products of sublists\n    sublist_sum = 1\n\n    # Initialize a variable to store the sum of the whole array\n    total_sum = sum(arr)\n\n    # Initialize a list to store the products of each sublist\n    sublist_products = []\n\n    # Loop through the array and calculate the products of each sublist\n    for i in range(len(arr)):\n        # Check if the current element is zero, if so, skip it\n        if arr[i] == 0:\n            continue\n        sublist_sum *= arr[i]\n        sublist_products.append(sublist_sum)\n\n    # Calculate the total sum of products of sublists\n    total_sublist_sum = sum(sublist_products)\n\n    # Return the difference between the total sum of products of sublists and the total sum of the whole array\n    return total_sublist_sum - total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n\n    # Initialize the product sum and the power sum of subarrays\n    product_sum = [0] * n\n    power_sum = [0] * (2*n)\n\n    # Calculate the product sum of subarrays\n    for i in range(n):\n        product_sum[i] = (product_sum[i-1] + arr[i]) % mod\n\n    # Calculate the power sum of subarrays\n    power_sum[0] = 1\n    for i in range(1, 2*n):\n        power_sum[i] = (power_sum[i-1] * arr[i-1] % mod) * (i-1) % mod\n\n    # Calculate the sum of products of all possible sublists\n    sum_of_products = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_product = product_sum[j] - product_sum[i-1] + power_sum[j+2*n] - power_sum[i-1]\n            sum_of_products = (sum_of_products + sub_product) % mod\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the variables for sum and product\n    total_sum = 0\n    total_product = 1\n    # Initialize the variables for storing the subarrays and their products\n    subarrays = []\n    subarray_products = []\n    # Iterate through the array from the second element to the last\n    for i in range(1, n):\n        # Initialize the variable for the current subarray\n        subarray = [arr[j] for j in range(i, n)]\n        # Calculate the product of the current subarray\n        subarray_product = 1\n        for num in subarray:\n            subarray_product *= num\n        # Append the current subarray and its product to the respective lists\n        subarrays.append(subarray)\n        subarray_products.append(subarray_product)\n        # Update the total sum and product for the current subarray\n        total_sum += subarray_product\n        total_product *= subarray_product\n    # Calculate the sum of products of all possible subarrays\n    subarray_sum = sum(subarray_products)\n    # Return the sum of products of all possible subarrays\n    return total_sum - subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize sum of products\n    prod_sum = 0\n    # Initialize prefix sum array\n    prefix_sum = [0]*(n+1)\n    # Calculate prefix sum array\n    for i in range(1,n+1):\n        prefix_sum[i] = prefix_sum[i-1]+arr[i-1]\n    # Initialize a 2D array to store sum of products of subarrays\n    subarray_sum = [[0]*n for i in range(n)]\n    # Fill the 2D array\n    for i in range(1,n):\n        for j in range(i,n):\n            subarray_sum[i][j] = prefix_sum[j+1]-prefix_sum[i]\n    # Calculate sum of products of all subarrays\n    for i in range(n):\n        for j in range(i,n):\n            prod_sum += subarray_sum[i][j]*arr[i]*arr[j]*arr[n-1]\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    # Initialize sum and product variables\n    sum = 0\n    product = 1\n\n    # Find the product of first element in the list\n    product *= arr[0]\n\n    # Loop through the list and calculate the product of each sublist\n    for i in range(1, len(arr)):\n        # Calculate the product of current element and previous product\n        product *= arr[i]\n\n        # Calculate the sum of product of sublists and add to sum\n        sum += product\n\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    subarray_product = [0]*(n+1)\n    \n    # Calculate the product of sublists\n    for i in range(n):\n        subarray_product[i+1] = arr[i]*subarray_product[i]\n    \n    # Calculate the sum of products of all sublists\n    result = 0\n    for i in range(n):\n        result += subarray_product[i]*subarray_product[n]\n        \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # base case: if list has only one element, then it is the product of all elements\n    if n == 1:\n        return arr[0]\n    # base case: if list has only two elements, then it is the product of these two elements\n    elif n == 2:\n        return arr[0] * arr[1]\n    \n    # recursive case: for each element in the list, find the sum of products of all sublists\n    sub_sums = []\n    for i in range(1, n):\n        temp_sum = sum_Of_Subarray_Prod(arr[:i]) * arr[i]\n        sub_sums.append(temp_sum)\n    \n    # sum of products of all sublists\n    total_sum = sum(sub_sums)\n    \n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n\n    # Initialize the sum of products and the result list\n    sum_prod = 0\n    result = []\n\n    # Loop through all possible sublists of the given list\n    for i in range(n):\n        for j in range(i, n):\n            # Calculate the product of the sublist\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            # Append the product to the result list\n            result.append(prod)\n            # Add the product to the sum of products\n            sum_prod += prod\n\n    # Return the sum of products\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    max_sum = 0\n    prefix_product = 1\n    \n    for i in range(n):\n        prefix_product *= arr[i]\n        max_sum = max(max_sum, prefix_product)\n        \n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += prefix_product * (prefix_product - 1) * (arr[j] - arr[i])\n            max_sum = max(max_sum, result)\n            \n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    max_len = 2 * n\n    dp = [[0] * max_len for _ in range(n)]\n    prefix_sums = [0] * (2 * n)\n\n    for i in range(n):\n        prefix_sums[i] = prefix_sums[i - 1] + arr[i]\n        for j in range(i, n):\n            for k in range(i, j + 1):\n                dp[i][j] += prefix_sums[j + 1] - prefix_sums[i] * prefix_sums[j]\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            res += dp[i][j] * arr[i] * arr[j]\n    return res"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the last and second last bits\n    last_bit = n & 1\n    second_last_bit = n >> 1 & 1\n    # toggle the last bit\n    n = n ^ (1 << (len(bin(n)) - 2))\n    # toggle the second last bit\n    n = n ^ (1 << (len(bin(n)) - 3))\n    # set the first and second last bits\n    n = n ^ ((last_bit << 1) | (second_last_bit << 2))\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1  # get the first bit\n    last_bit = n & (2 ** (len(bin(n)) - 2))  # get the last bit\n    toggled_bits = n ^ (first_bit | last_bit)  # toggle bits except first and last\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # First and last bits are not affected by toggle bits\n    first_bit = (n & 0x1) ^ 1\n    last_bit = (n >> 31) & 0x1\n    \n    # Toggle middle bits\n    middle_bits = (n >> 1) & 0x7FFFFFFF\n    middle_bits = middle_bits ^ 0x80000000\n    \n    # Combine first and last bits and middle bits\n    result = (first_bit << 31) | (last_bit << 30) | (middle_bits)\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the position of the first and last bits\n    first_bit = 1\n    last_bit = 0\n    while n & 1 == 0:\n        first_bit <<= 1\n        n >>= 1\n    while n & 1 == 1:\n        last_bit <<= 1\n        n <<= 1\n    \n    # Toggle bits except the first and last bits\n    n ^= (1 << first_bit) ^ (1 << last_bit)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n    \n    if first_bit == 0:\n        n = n & (0xffffffff ^ 0x00000001)\n    else:\n        n = n & (0xffffffff ^ 0xffffffff)\n    \n    if last_bit == 0:\n        n = n & (0xffffffff ^ 0x80000000)\n    else:\n        n = n & (0xffffffff ^ 0xffffffff ^ 0x80000000)\n        \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Get the length of the binary representation of the number\n    length = len(bin(n)[2:])\n\n    # Create a list of indices of the bits to be toggled\n    indices = []\n    for i in range(length):\n        if i == 0 or i == length-1:\n            continue\n        indices.append(i)\n\n    # Toggle the bits at the specified indices\n    for i in indices:\n        n = n ^ (1 << i)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # extract first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 31\n    \n    # toggle first and last bits and combine the result with the middle bits\n    n = (n ^ (first_bit ^ last_bit)) ^ ((~first_bit) & last_bit)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    n = n ^ ((1 << 1) - 1)\n    n = n ^ ((1 << 31) - 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Initialize variables\n    first_bit = n & 1\n    last_bit = n & (1 << 31)\n    \n    # Toggle bits except the first and the last bit\n    toggled_bits = (n ^ (first_bit | last_bit))\n    \n    # Combine the toggled bits with the first and last bits\n    result = toggled_bits + first_bit + last_bit\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1  \n    last_bit = n & (2**32-1)  \n    first_bit_mask = ~(2**31)  \n    last_bit_mask = ~(2**32)  \n    n_toggled = (n & first_bit_mask) ^ (n & last_bit_mask)  \n    return (n_toggled | (first_bit << 31) | (last_bit >> 1))  \n  \n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        return 0\n    elif a[index-1] < x:\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n\n    # Locate the leftmost index greater than or equal to x\n    index = bisect.bisect_left(a, x)\n\n    # Return the index of the leftmost element greater than x\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        # If x is not in a, return the index where it would be inserted\n        return index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index == 0:\n        return 0\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect module to find the insertion point\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif i == 0 or a[i-1]!= x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        print(f'{string} starts with a vowel.')\n    else:\n        print(f'{string} does not start with a vowel.')"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return 0\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        sum = a**n * b**(n-1)\n        for i in range(2, n):\n            a, b = b, a**2 + b**2\n            sum += (a**(n-1) * b**n)\n        return sum"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 1 + (1/geometric_sum(n-1))\n\nprint(geometric_sum(5)) # Output: 1.884955592153876"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (n * geometric_sum(n-1)) // (1 - 1/n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    #initialize count variable \n    count = 1 \n\n    #initialize smallest triangular number \n    smallest_triangular_number = 1 \n\n    #loop through each digit in the number \n    for i in range(1, n+1): \n\n        #initialize a counter \n        count_digit = 0 \n\n        #loop through each digit in the number \n        for j in range(1, 10): \n\n            #initialize a temp variable \n            temp = smallest_triangular_number * j \n\n            #if temp is less than the current smallest triangular number, update the smallest triangular number \n            if temp < smallest_triangular_number: \n                smallest_triangular_number = temp \n\n            #if temp is equal to the current smallest triangular number, increment the counter \n            if temp == smallest_triangular_number: \n                count_digit += 1 \n\n        #add the count of digits for the current digit to the count of digits for the current number \n        count += count_digit \n\n    #return the index of the smallest triangular number \n    return count-1 "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    # Function to find the index of smallest triangular number with n digits.\n    # Note: The smallest triangular number with n digits is (10^n-1)/9\n    # This function will return the index of the smallest triangular number with n digits.\n\n    # Check if n is less than or equal to 1\n    if n <= 1:\n        return 0\n    \n    # Calculate the value of the smallest triangular number with n digits\n    triangular = int((10**n-1)/9)\n\n    # Initialize variables to store the value of the triangular number, and the index of the triangular number\n    smallest_triangular = triangular\n    index = 1\n    \n    # Loop through all the values of triangular number until the smallest triangular number with n digits is found\n    while smallest_triangular < triangular:\n        triangular += 1\n        index += 1\n\n    # Return the index of the smallest triangular number with n digits\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    \n    triangular = 0\n    index = 0\n    digit = 1\n    \n    while triangular < n:\n        triangular = triangular + digit\n        index += 1\n        digit = digit * 10\n        \n    return index - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize variables \n    t = 0 \n    count = 1\n    index = 0\n\n    # Check if n is less than 10 \n    if n < 10: \n        return 0 \n\n    # Loop through the digits of n \n    for i in range(1, n+1): \n        \n        # Calculate the sum of digits raised to the power of i \n        digit_sum = sum([int(digit)**i for digit in str(t)]) \n\n        # If the sum of digits raised to the power of i is less than the current triangular number, update t and count \n        if digit_sum < t: \n            t = digit_sum \n            count = i \n\n        # Update the index if the current triangular number is the smallest triangular number with n digits \n        if t == math.factorial(n): \n            index = count \n\n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the smallest triangular number with n digits\n    triangular_num = int(math.pow(10, n - 1) * 0.5) \n    # Initialize a variable to store the index of the smallest triangular number with n digits\n    smallest_index = 0\n    # Loop through all the numbers between 1 and 9 (inclusive)\n    for i in range(1, 10):\n        # If the current number is the smallest triangular number with n digits, increment the index and break out of the loop\n        if i * triangular_num == n:\n            smallest_index = i\n            break\n    return smallest_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    def triangular_number(n):\n        return round(n * (n + 1) / 2)\n\n    def is_valid_triangular_number(n):\n        return str(triangular_number(n)) == str(n)\n\n    def is_triangular_number_greater(n, m):\n        return triangular_number(m) > n\n\n    def find_first_triangular_number(n):\n        start = 1\n        end = triangular_number(n)\n        while True:\n            mid = (start + end) // 2\n            if is_valid_triangular_number(mid) and is_triangular_number_greater(mid, start):\n                end = mid\n            else:\n                start = mid + 1\n        return start\n\n    first_triangular_number = find_first_triangular_number(n)\n    triangular_numbers = [first_triangular_number]\n    next_triangular_number = triangular_number(first_triangular_number)\n\n    while len(str(next_triangular_number)) < n:\n        triangular_numbers.append(next_triangular_number)\n        next_triangular_number = triangular_number(next_triangular_number)\n\n    return triangular_numbers"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular = 0\n    for i in range(1, 2**n):\n        triangular += 1\n        triangular_str = str(triangular)\n        triangular_length = len(triangular_str)\n        if triangular_length == n:\n            return triangular_length\n        elif triangular_length > n:\n            break\n    return triangular"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # check if n is a power of 2 \n    if math.log2(n) == math.floor(math.log2(n)): \n        # initialize index and smallest triangular number \n        index = 0 \n        smallest = 2**(n-1) \n        \n        # loop through the range of n digits \n        for i in range(1,n): \n            # find the next smallest triangular number \n            next_smallest = smallest + i*smallest \n            # update smallest and index \n            if next_smallest < smallest: \n                index += 1 \n                smallest = next_smallest \n            \n        return index\n    \n    else: \n        return None \n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    # function to find the index of smallest triangular number with n digits\n    def find_index(n): \n        # initializing variables \n        sum_of_digits = 0 \n        tri_sum = 0 \n        index = 0 \n\n        # iterating through each digit of n \n        for digit in str(n): \n            # finding the sum of digits of n \n            sum_of_digits += int(digit) \n            # finding the sum of digits of triangular number with current index \n            tri_sum = (index + 1) * int(digit) \n            # checking if the sum of digits of triangular number is less than the current sum of digits \n            if tri_sum < sum_of_digits: \n                index += 1 \n            else: \n                break \n\n        # returning the index \n        return index \n\n    # finding the smallest triangular number with n digits \n    smallest_triangular_number = find_index(n) \n    # returning the index of smallest triangular number with n digits \n    return smallest_triangular_number "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # function to check if a number is triangular or not\n    def is_triangular(num):\n        i = 1\n        triangular_number = num\n        while i <= num:\n            triangular_number = (triangular_number*i)/2\n            i += 1\n        return triangular_number == num\n\n    # find the smallest triangular number with n digits\n    smallest_triangular = 0\n    index = 0\n    while True:\n        if is_triangular(smallest_triangular):\n            index += 1\n            if len(str(smallest_triangular)) == n:\n                return index\n        smallest_triangular += 1"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    new_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    i = 0\n    while i < len(test_tup):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n        i += 2\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    # create an empty dictionary\n    dict_obj = {}\n    # iterate over the tuple\n    for i in range(len(test_tup)-1):\n        # add the key-value pair to the dictionary\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary\n    result = {}\n\n    # Iterate through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Extract the key-value pairs from adjacent elements\n        key = test_tup[i]\n        value = test_tup[i+1]\n        # Add the key-value pair to the result dictionary\n        result[key] = value\n\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Iterate over the tuple using range\n    for i in range(len(test_tup)-1):\n        # Add the key-value pair to the dictionary using adjacent elements\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    # Return the result dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Create an empty dictionary\n    dict_obj = {}\n\n    # Check if the tuple is not empty\n    if len(test_tup) > 0:\n        # Loop through the tuple\n        for i in range(len(test_tup)):\n            # Check if the next element exists\n            if i < len(test_tup) - 1:\n                # Add the adjacent pair to the dictionary\n                dict_obj[test_tup[i]] = test_tup[i+1]\n            # If the next element does not exist, add the last element only\n            else:\n                dict_obj[test_tup[i]] = test_tup[i]\n    # If the tuple is empty, return an empty dictionary\n    else:\n        return {}\n\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # convert the tuple to a list\n    tup_list = list(test_tup)\n    # initialize an empty dictionary\n    dict_obj = {}\n    # loop through the list and add pairs of adjacent elements as keys to the dictionary\n    for i in range(len(tup_list)):\n        dict_obj[tup_list[i]] = tup_list[i+1]\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n\n    # Loop through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Append the key-value pair to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n\n    # Return the dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = {}\n    for c in s:\n        if c not in count:\n            count[c] = 1\n        else:\n            count[c] += 1\n    for char in count:\n        if count[char] > 1:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    # Check if the length of the string is 1\n    if len(s) == 1:\n        return True\n\n    # Convert the string to list of characters\n    s_list = list(s)\n\n    # Check if all the characters in the list are same\n    for i in range(len(s_list)-1):\n        if s_list[i]!= s_list[i+1]:\n            return False\n\n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function checks whether all the characters in a given string are the same or not.\n    '''\n\n    # Initialize a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in s:\n\n        # If the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n\n    # Check if all the values in the dictionary are equal to 1\n    if all(count == 1 for count in char_count.values()):\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Check if the length of the string is 1\n    if len(s) == 1:\n        return True\n\n    # If the length is greater than 1, check if all the characters are same\n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n\n    # If all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are same and False otherwise.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (3 * side ** 2) ** (1/2)\n\n    # calculate the area of the tetrahedron using Heron's formula\n    area = (1/3) * math.sqrt(semi_perimeter ** 3)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6*side*side/12"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    base = side / 2\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2 * math.sin(math.pi/4)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3 * side ** 2) ** 0.5\n    return (s * (s - side) * (s - 2 * side))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 12\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/6 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    s = (side ** 2) / 12\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(m % n):\n        list[i], list[n - 1 - i] = list[n - 1 - i], list[i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(lst, n):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # If the specified number of items to the right is greater than the length of the list,\n    # then rotate the entire list to the left by the required number of items.\n    if m > n:\n        m = m % n\n    # If the specified number of items to the right is less than or equal to zero,\n    # then do nothing.\n    if m <= 0:\n        return list\n    # Perform right rotation of the list using the reverse() method of Python list.\n    list[m:] = list[:m][::-1]\n    # Reverse the entire list.\n    list[:] = list[::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n  # To handle case where m is greater than n\n    \n    # Shifting elements of list by m positions to the right\n    list.extend(list[-m:])\n    list[:-m] = []\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    # If m is greater than n, there is no rotation to be performed.\n    if m > n:\n        return list\n    # If m is less than or equal to 0, we need to reverse the list.\n    elif m <= 0:\n        list.reverse()\n        return list[m:] + list[:m]\n    else:\n        # Find the last element of the list.\n        last_element = list[n-1]\n        # Reverse the list from index 0 to n-1.\n        for i in range(n-1, 0, -1):\n            list[i] = list[i-1]\n        # Insert the last element at index 0.\n        list[0] = last_element\n        # Rotate the list by m items to the right.\n        list[m:] = list[:m]\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[-m:] = list[:-m]\n    list[:m] = list[-n:]\n    list[-n:] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Get the length of the list\n    n = len(list)\n\n    # If m is greater than or equal to n, there is no need to rotate\n    if m >= n:\n        return list\n\n    # Calculate the shift value\n    shift = m % n\n\n    # Reverse the first part of the list\n    list = list[shift:] + list[:shift]\n\n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m %= n\n    list[n-1], list[m-1] = list[m-1], list[n-1]\n    for i in range(m, n):\n        list[i], list[i-m] = list[i-m], list[i]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    # check if the list has more than one item\n    if n == 1:\n        return list\n    # check if the rotation is possible\n    if m >= n:\n        m = m % n\n    # perform the rotation\n    for i in range(m):\n        list.append(list.pop(0))\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_flag = False\n    for i in test_tup:\n        if i is None:\n            none_flag = True\n            break\n    return none_flag"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_value = None\n    for val in test_tup:\n        if val is none_value:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by a given digit\n    is_divisible = lambda num, digit: num % digit == 0\n\n    # Loop through each number in the range\n    for num in range(startnum, endnum+1):\n        # Split the number into digits\n        digits = [int(digit) for digit in str(num)]\n\n        # Check if the number is divisible by every digit\n        if all(is_divisible(num, digit) for digit in digits):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Function to check if a number is divisible by all digits\n    def check_divisible_by_digits(num):\n        digits = list(str(num))\n        for digit in digits:\n            if int(digit) % int(digit)!= 0:\n                return False\n        return True\n    \n    # Function to filter numbers based on the given conditions\n    def filter_numbers(num):\n        return num >= startnum and num <= endnum and check_divisible_by_digits(num)\n    \n    # Apply the filter function to all numbers between startnum and endnum\n    result = list(filter(filter_numbers, range(startnum, endnum + 1)))\n    \n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        digits = [int(digit) for digit in str(num)]\n        return all(digit in digits for digit in digits)\n\n    result = []\n    for num in range(startnum, endnum+1):\n        if is_divisible(num):\n            result.append(num)\n\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(d) % int(x[i]) == 0 for d in str(x)), range(startnum, endnum+1)))\n\nstartnum = int(input(\"Enter the starting number: \"))\nendnum = int(input(\"Enter the ending number: \"))\n\nresult = divisible_by_digits(startnum, endnum)\nprint(\"Numbers divisible by every digit are:\", result)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = [int(d) for d in str(num)]\n        for d in digits:\n            if d == 0:\n                return False\n        for i in range(len(digits)):\n            if digits[i] % digits[i]!= 0:\n                return False\n        return True\n    \n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(n):\n        digits = [int(digit) for digit in str(n)]\n        for digit in digits:\n            if digit == 0:\n                return False\n        return True\n\n    return filter(is_divisible, range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda num: all(int(d) % num == 0 for d in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        digits = [int(digit) for digit in str(num)]\n        return all(d in digits for d in digits)\n    return list(filter(is_divisible_by_digit, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digit(num):\n        for digit in str(num):\n            if int(digit) not in range(10):\n                return False\n        return True\n\n    return list(filter(lambda x: is_divisible_by_digit(x), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r*r*a/360.0"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if the angle is valid\n    if a > 360:\n        print(\"Error: angle must be less than or equal to 360 degrees\")\n        return None\n    \n    # Calculate the area of the sector\n    area = math.pi * r * r * a / 360\n    \n    # Return the area of the sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if the angle is within range\n    if a > 360 or a < 0:\n        return None\n    \n    # Calculate the area of the sector\n    area = math.pi * r**2 * a / 360\n    \n    # Return the area of the sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is valid\n    if a > 360:\n        return None\n    \n    # Calculate area using sine and cosine\n    area = r * r * math.sin(math.radians(a/2)) * 2\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r ** 2) * (a / 360)\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    i, j = n, m\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n  \n    # Create a table to store lengths of longest common subsequence \n    # for all prefixes of X, Y, Z. Initialize all entries as 0 \n    L = [[0] * (p+1) for i in range(m+1)] \n  \n    # Fill in L[i][j] in bottom up manner. Note that L[i][j] contains length of LCS \n    # of X[0..i-1], Y[0..j-1], and Z[0..k-1] \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            for k in range(1, p+1): \n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j][k] + 1 \n                elif X[i-1] == Y[j-1]: \n                    L[i][j][k] = L[i-1][j][k] \n                elif Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i][j-1][k] \n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k]) \n  \n    # Initialize two pointers i and j to point to the last cell of L[m][n][p] \n    i, j, k = m, n, p \n    lcs = \"\" \n  \n    # Build the LCS one character at a time in reverse order \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif X[i-1] == Y[j-1]: \n            i -= 1 \n        elif Y[j-1] == Z[k-1]: \n            j -= 1 \n        else: \n            k -= 1 \n  \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Base case\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return 0\n    \n    # Create a table to store the length of LCS for all prefixes of X, Y and Z\n    L = [[0] * (len(Y) + 1) for i in range(len(X) + 1)]\n    \n    # Fill in the table\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    \n    # Find the LCS length\n    i, j = len(X), len(Y)\n    lcs_len = L[i][j]\n    \n    # Backtrack to find the actual LCS\n    X_lcs = []\n    Y_lcs = []\n    Z_lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            X_lcs.append(X[i-1])\n            Y_lcs.append(Y[j-1])\n            Z_lcs.append(Z[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    # Reverse the LCS\n    X_lcs.reverse()\n    Y_lcs.reverse()\n    Z_lcs.reverse()\n    \n    # Print the result\n    print(\"The length of the longest common subsequence is:\", lcs_len)\n    print(\"The LCS of X, Y and Z is:\", \"\".join(X_lcs + Y_lcs + Z_lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    n, m, p = len(X), len(Y), len(Z)\n    dp = [[0]*(p+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n    \n    lcs = []\n    i, j, k = n, m, p\n    while i!= 0 and j!= 0 and k!= 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i][j-1][k]:\n            i -= 1\n        elif dp[i-1][j][k] == dp[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return ''.join(lcs[::-1])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    n, m, l = len(X), len(Y), len(Z)\n\n    # create a table to store lengths of LCS for all prefixes of X, Y and Z\n    table = [[0] * (l+1) for i in range(3)]\n\n    # compute lengths of LCS for all prefixes of X, Y and Z\n    for i in range(3):\n        for j in range(n+1):\n            for k in range(m+1):\n                if i == 0:\n                    table[i][j+k] = 0\n                elif j == 0:\n                    table[i][j+k] = 0\n                elif k == 0:\n                    table[i][j+k] = 0\n                elif X[j-1] == Y[k-1] == Z[l-1]:\n                    table[i][j+k] = table[i-1][j-1] + 1\n                else:\n                    table[i][j+k] = max(table[i-1][j], table[i][j-1], table[i-1][j-1])\n\n    # extract LCS from table\n    i, j, k = n, m, l\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j] >= table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    p = [[0] * (n+1) for i in range(m+1)] \n  \n    # Step 1 \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1 \n  \n    # Step 2 \n    max_len = 0 \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if p[i][j] > max_len: \n                max_len = p[i][j] \n  \n    # Step 3 \n    lcs = \"\" \n    i = m \n    j = n \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n        elif p[i-1][j] > p[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n, o = len(X), len(Y), len(Z) # lengths of all strings\n    \n    # create a 3D table to store the lengths of LCS for all possible substrings of length i \n    # from X, Y and Z\n    dp = [[[0]*(o+1) for j in range(n+1)] for i in range(m+1)]\n    \n    # fill the table in bottom-up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: # if current characters are same in all strings\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1 # include the character in LCS of all substrings\n                elif X[i-1] == Y[j-1]: # if X[i-1] is same in both X and Z\n                    dp[i][j][k] = dp[i-1][j][k]\n                elif X[i-1] == Z[k-1]: # if X[i-1] is same in both Y and Z\n                    dp[i][j][k] = dp[i][j-1][k]\n                elif Y[j-1] == Z[k-1]: # if Y[j-1] is same in both X and Y\n                    dp[i][j][k] = dp[i][j][k-1]\n                else:\n                    dp[i][j][k] = 0 # if no common characters, LCS of current substring is zero\n    \n    # return the length of LCS of all substrings of length m, n and o\n    return dp[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store lengths of LCS of all prefixes\n    L = [[0] * (o+1) for i in range(m+1)]\n\n    # fill the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    L[i][j][k] = L[i-1][j][k]\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # to store the LCS of all prefixes\n    lcs = ''\n    i = m\n    j = n\n    k = o\n\n    # print the LCS of all prefixes\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n            j -= 1\n        else:\n            if L[i-1][j][k] == L[i-1][j][k-1]:\n                i -= 1\n            elif L[i][j-1][k] == L[i-1][j][k]:\n                j -= 1\n            else:\n                k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m+1) for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    lcs = \"\"\n    i = n\n    j = m\n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    lcs = []\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    lcs.reverse()\n    return ''.join(lcs)\n"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with a space\n    str1 = re.sub(r'[^a-zA-Z0-9]','', str1)\n    # split the string into words and capitalize the first letter of each word\n    words = re.findall(r'\\b\\w', str1)\n    capitalized_words = [word.capitalize() for word in words]\n    # join the capitalized words with spaces\n    capitalized_str =''.join(capitalized_words)\n    return capitalized_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Remove all special characters except spaces and convert to lowercase\n    str1 = re.sub(r'[^a-zA-Z\\s]', '', str1).lower()\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first letter of each word and join them with spaces\n    capitalized_words =''.join([word.capitalize() for word in words])\n    return capitalized_words"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r'\\b\\w+\\b', r' \\1 ', str1)\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<![\\w])[A-Z](?=[\\w])')\n    result = pattern.sub(r' \\1', str1)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\s+','', str1)\n    str1 = re.sub(r'\\b[A-Z][a-z]+\\b', r'\\1 ', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # find all the words in the string\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # iterate over each word\n    for i in range(len(words)):\n        # if the first character of the word is capital letter, add a space before it\n        if words[i][0].isupper() and i > 0 and words[i-1][0].islower():\n            words[i] ='' + words[i]\n    # join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Replace all spaces with a single space\n    str1 = re.sub(r'\\s+','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = r'[A-Z][a-z]*'\n    # Loop through the words and replace the pattern with spaces before adding them to the result list\n    result = []\n    for word in words:\n        if re.match(pattern, word):\n            # Capitalize the first letter of the word\n            new_word = word.capitalize()\n            # Add the new word to the result list\n            result.append(new_word)\n    # Join the result list of words with spaces and return the final string\n    return''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Iterate over the words and replace capital letters with spaces\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # Join the words back into a string\n    result = ''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # convert string to lowercase\n    str1 = str1.lower()\n    # split the string into words\n    words = str1.split()\n    # loop through each word and add a space if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # join the words with spaces\n    output =''.join(words)\n    return output"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert all the words in the string to lowercase\n    str1 = str1.lower()\n    \n    # Split the string into words\n    words = str1.split()\n    \n    # Initialize an empty list to store the modified words\n    modified_words = []\n    \n    # Iterate through each word in the string\n    for word in words:\n        # If the word starts with a capital letter, add a space before it\n        if word[0].isupper():\n            modified_words.append(\" \" + word)\n        else:\n            # If the word does not start with a capital letter, add it to the modified_words list\n            modified_words.append(word)\n    \n    # Join the modified_words list back into a string and return it\n    return \" \".join(modified_words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # create a dictionary to store the numeric values\n    num_dict = {}\n\n    # loop through the list of strings and extract the numeric values\n    for num_str in nums_str:\n        if num_str.isdigit():\n            num_dict[num_str] = 0\n\n    # loop through the list of strings again and sort them numerically\n    nums_str.sort(key=lambda x: num_dict[x])\n\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all the strings in the list to float and sort them numerically\n    nums = sorted([float(num) for num in nums_str])\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all numeric strings to float values\n    nums = [float(num) for num in nums_str if num.isdigit()]\n    \n    # Use the built-in sort function to sort the float values\n    nums.sort()\n    \n    # Convert the sorted float values back to strings\n    result = [str(num) for num in nums]\n    \n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert the list of strings to a list of numbers\n    nums = [int(num) for num in nums_str]\n    # Sort the list of numbers in ascending order\n    nums.sort()\n    # Convert the sorted list of numbers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums]\n    # Return the sorted list of numbers as a string\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert all the strings to integers\n    nums = [int(num) for num in nums_str]\n    \n    # Sort the integers in ascending order\n    nums.sort()\n    \n    # Convert the sorted integers back to strings and return the result\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all the strings to numeric values\n    nums = [float(x) for x in nums_str]\n    # Sort the numeric values in ascending order\n    nums.sort()\n    # Convert the sorted numeric values back to strings and return them as a list\n    return [str(x) for x in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # convert all strings to float\n    nums = [float(x) for x in nums_str]\n    # sort the list in ascending order\n    nums.sort()\n    # convert back to string and return the sorted list\n    return [str(x) for x in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    # Use map() to convert all strings to numbers\n    nums = list(map(int, nums_str))\n    # Sort the list numerically\n    nums.sort()\n    # Convert the sorted list back to strings\n    sorted_nums_str = list(map(str, nums))\n    # Return the sorted list\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # Convert the list of strings to a list of integers\n    nums = [int(i) for i in nums_str]\n\n    # Sort the list of integers in ascending order\n    nums.sort()\n\n    # Convert the sorted list of integers back to a list of strings\n    sorted_nums_str = [str(i) for i in nums]\n\n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    print(f\"The list after adding the tuple: {test_list}\")"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add the tuple to the list\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]\n    # return the modified list\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Check if the element at the given index is greater than or equal to its children\n    if i >= 1:\n        if arr[i] >= arr[i//2]:\n            return False\n\n    # Check if the element at the given index is greater than or equal to its parent\n    if i % 2 == 1:\n        if arr[i] >= arr[(i-1)//2]:\n            return False\n\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Call the helper function recursively for each element in the array\n    for i in range(len(arr)):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # The maximum index of the left and right child of node i\n    left = 2*i + 1\n    right = 2*i + 2\n\n    # Check if the node has a left child and is smaller than its parent\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n\n    # Check if the node has a right child and is smaller than its parent\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n\n    # If both conditions are satisfied, then the current node is a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    # check if the left child is smaller than the current node\n    if i * 2 + 1 < len(arr) and arr[i] > arr[i * 2 + 1]:\n        return False\n\n    # check if the right child is smaller than the current node\n    if i * 2 + 2 < len(arr) and arr[i] > arr[i * 2 + 2]:\n        return False\n\n    # if both children are smaller than the current node, it is a min heap\n    return True\n\n\ndef check_min_heap(arr):\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    for i in range(len(arr) - 1, len(arr) // 2, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    left = 2 * i\n    right = 2 * i + 1\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n        \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n        \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return check_min_heap_helper(arr, smallest)\n    else:\n        return False\n        \n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    This function checks if the parent node (i//2) is smaller than the current node i.\n    '''\n    if i == 0:\n        return True\n    elif arr[i//2] > arr[i]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    This function calls the check_min_heap_helper function recursively on the given array.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)\n\n\narr = [5, 3, 8, 2, 1, 4, 6, 7]\nprint(check_min_heap(arr)) # True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_min_heap(arr):\n    \"\"\"\n    Checks if the given array represents a min heap.\n    Returns True if the array represents a min heap, else False.\n    \"\"\"\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[0]:\n            return False\n    return True\n\n\ndef check_min_heap_helper(arr, i):\n    \"\"\"\n    Checks if the given array represents a min heap.\n    Returns True if the array represents a min heap, else False.\n    \"\"\"\n    if i >= len(arr) // 2:\n        return is_min_heap(arr)\n    else:\n        return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Checks if the given array represents a min heap.\n    Returns True if the array represents a min heap, else False.\n    \"\"\"\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        left = 2 * i\n        right = 2 * i + 1\n        if left < len(arr) and arr[left] < arr[i]:\n            return False\n        elif right < len(arr) and arr[right] < arr[i]:\n            return False\n        else:\n            return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i >= len(arr) // 2:  # if index is greater than half of the length of the array\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n\n    if len(arr) < 2:\n        return True\n\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[0]:\n            return False\n        arr[0], arr[i] = arr[i], arr[0]\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] < arr[2*i+1] and arr[i] < arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2!= 0:\n        return False\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 4*jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    # Initialize the variables\n    a = 1\n    b = 1\n    count = 1\n    \n    # Check if n is less than or equal to 1\n    if n <= 1:\n        return n\n    \n    # Iterate until n reaches the desired value\n    while count < n:\n        \n        # Calculate the next value of a and b\n        a = (a * (2 * count - 1)) // (2 * (count + 1))\n        b = (b * count) // (count + 1)\n        \n        # Increment the count\n        count += 1\n    \n    # Return the value of b\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    j = 1\n    k = 1\n    for i in range(n):\n        j += k\n        k = j + 1\n    return j"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob_num = 1\n        lucas_num = 1\n        for i in range(2, n+1):\n            jacob_num = (lucas_num + jacob_num) % 10\n            lucas_num = (lucas_num ** 2 + 1) % 10\n        return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2)\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob = 2\n        lucas = 1\n        for i in range(2, n+1):\n            jacob = (2*jacob) % 1000\n            lucas = (lucas + jacob) % 1000\n        return lucas"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        jacobsthal_num_n = jacobsthal_num(n-1)\n        if n % 2 == 0:\n            return 2*jacobsthal_num_n - 1\n        else:\n            return 2*jacobsthal_num_n\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Initialize a variable'min_k_list' to store the minimum k records\n    min_k_list = []\n    # Loop through the sorted list and append the tuples with first element less than or equal to k to the'min_k_list'\n    for i in range(K):\n        if sorted_list[i][0] <= K:\n            min_k_list.append(sorted_list[i])\n    # Return the minimum k records from the'min_k_list'\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list of tuples by the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    # initialize a variable to store the minimum k records\n    min_k_records = []\n    # loop through the first K elements of the sorted list\n    for i in range(K):\n        # add the current element to the min_k_records list if it's greater than the previous minimum\n        if i == 0 or test_list[i][0] > min_k_records[-1][0]:\n            min_k_records.append(test_list[i])\n    # return the list of minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    min_list = []\n    for tup in test_list:\n        if len(min_list) < K:\n            min_list.append(tup)\n        elif len(min_list) == K:\n            if tup < min_list[0]:\n                min_list.pop(0)\n                min_list.append(tup)\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a tuple list as input and returns the minimum K records from the list.\n    \"\"\"\n    # sort the list based on the first element of each tuple (i.e., the key)\n    test_list.sort(key=lambda x: x[0])\n\n    # initialize minimum K records to be positive infinity\n    min_records = float('inf')\n\n    # iterate over the sorted list and check if the length of the list is greater than K\n    for i in range(len(test_list)):\n        if i < K:\n            # if it is less than K, append it to the list of minimum K records\n            min_records = min(min_records, len(test_list))\n        else:\n            # if it is greater than or equal to K, remove the first element from the list\n            del test_list[0]\n\n    # return the minimum K records from the list\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list by second element in ascending order\n    test_list.sort(key=lambda x: x[1])\n    \n    # initialize minimum k records with the first K records\n    min_k_records = []\n    for i in range(K):\n        min_k_records.append(test_list[i])\n    \n    # if the length of the list is less than K, add all the remaining records\n    if len(test_list) < K:\n        min_k_records = min_k_records + test_list\n    \n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sorting the list based on second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # finding the minimum k records\n    min_k_records = []\n    for i in range(len(test_list)):\n        if i >= K:\n            break\n        min_k_records.append(test_list[i])\n        \n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list of tuples by the second element in each tuple\n    test_list.sort(key=lambda x: x[1])\n    # Initialize variables to store the minimum k records found so far\n    min_k_records = []\n    # Loop through the sorted list and add the kth smallest records to the min_k_records list\n    for i in range(K):\n        min_k_records.append(test_list[i])\n    # Return the min_k_records list\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K as input and returns\n    the minimum K records from the list.\n\n    test_list = [(5, \"Apple\"), (3, \"Banana\"), (8, \"Cherry\"), (2, \"Date\"), (6, \"Fig\"), (4, \"Grape\")]\n    K = 3\n\n    Output:\n    The function should return \"Banana\", \"Fig\", \"Grape\"\n    \"\"\"\n    test_list.sort()\n    min_records = []\n\n    for i in range(len(test_list)):\n        if len(min_records) == K:\n            break\n        if len(min_records) == 0 or test_list[i][0] < min_records[-1][0]:\n            min_records.append(test_list[i])\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_list = []\n    for tup in test_list:\n        if len(min_list) < K:\n            min_list.append(tup)\n        else:\n            if tup[0] < min_list[0][0]:\n                min_list = [tup]\n            elif tup[0] == min_list[0][0]:\n                min_list.append(tup)\n            elif tup[0] > min_list[0][0]:\n                min_list = min_list[1:]\n                min_list.append(tup)\n    min_list.sort(key=lambda x: x[1])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    heap = []\n    for i in range(len(test_list)):\n        heapq.heappush(heap, test_list[i])\n        if len(heap) > K:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    This function finds the common elements from three lists. The function returns a list.\n    '''\n    # Initialize an empty list to hold the common elements\n    common_elements = []\n    \n    # Loop through each element in l1 and l2\n    for i in range(len(l1)):\n        # Check if the element is in l3\n        if l1[i] in l2 and l1[i] in l3:\n            # If it is, add it to the common_elements list\n            common_elements.append(l1[i])\n    \n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # create an empty list to store the common elements\n    common_elements = []\n\n    # loop through each index in l1\n    for i in range(len(l1)):\n        # if the element at this index is also in l2 and l3, add it to the common_elements list\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty list to store common elements\n    common_elements = []\n\n    # loop through each element in the first list\n    for i in range(len(l1)):\n        # check if the element is present in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            # if it's common, append it to the common_elements list\n            common_elements.append(l1[i])\n\n    # return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l2:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty list to store the common elements\n    common_elements = []\n    # loop through each index of the three lists\n    for i in range(len(l1)):\n        # check if the element at the current index appears in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            # if it does, add it to the common_elements list\n            common_elements.append(l1[i])\n    # return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common = set()\n    \n    # Iterate through the first list\n    for i in range(len(l1)):\n        # Check if the element is in all three lists\n        if l1[i] in l2 and l1[i] in l3:\n            common.add(l1[i])\n    \n    # Iterate through the second list\n    for i in range(len(l2)):\n        # Check if the element is in all three lists\n        if l2[i] in l1 and l2[i] in l3:\n            common.add(l2[i])\n    \n    # Iterate through the third list\n    for i in range(len(l3)):\n        # Check if the element is in all three lists\n        if l3[i] in l1 and l3[i] in l2:\n            common.add(l3[i])\n    \n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Create an empty dictionary to store the common elements\n    common_dict = {}\n\n    # Loop through the first list\n    for i in range(len(l1)):\n\n        # Check if the element is present in the second and third lists\n        if l1[i] in l2 and l1[i] in l3:\n\n            # If the element is common, add it to the dictionary\n            common_dict[l1[i]] = True\n\n    # Convert the dictionary to a list and return it\n    return list(common_dict.keys())"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # If there are less than 2 elements, return None\n    if len(sorted_numbers) < 2:\n        return None\n\n    # Otherwise, return the second smallest element\n    else:\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second element (i.e., the second smallest number)\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"List should have at least two elements\")\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for i in range(2, len(numbers)):\n            if numbers[i] < smallest:\n                second_smallest = smallest\n                smallest = numbers[i]\n            elif numbers[i] < second_smallest and numbers[i]!= smallest:\n                second_smallest = numbers[i]\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = min(numbers)\n    return min(n for n in numbers if n!= smallest)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b+')\n    result = pattern.match(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b*)')\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a\\w+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'(?<=a)b+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b+)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b+'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def text_match_zero_one(text):\n    pattern = r'a[b]*'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n\n    pattern = r'a\\w*b'\n\n    match = re.search(pattern, text)\n\n    if match:\n        print(\"Match found: \", match.group())\n    else:\n        print(\"No match found.\")\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=b*)b*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-i-1):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    This function counts the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                reverse_pairs += 1\n    return reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    # Create a dictionary to store the counts of each string in the list\n    count_dict = {}\n    for string in test_list:\n        # Convert the string to a list of characters and sort it in descending order\n        sorted_char_list = sorted(string, reverse=True)\n        # Add the sorted string as a key and 1 as the value to the dictionary\n        count_dict[\"\".join(sorted_char_list)] = count_dict.get(\"\", 0) + 1\n\n    # Iterate through the dictionary to count the pairs of reverse strings\n    reverse_pair_count = 0\n    for key, value in count_dict.items():\n        # If the key is already in the dictionary with a value greater than 1, it means we have counted a reverse string pair\n        if key in count_dict and count_dict[key] > 1:\n            # Add the count of the pair to the reverse_pair_count\n            reverse_pair_count += value * (count_dict[key] - 1)\n\n    # Return the count of reverse string pairs\n    return reverse_pair_count\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Count the number of unique sublists in a given list\n    \"\"\"\n    sublist_count = {}\n    for item in lst:\n        sublist_tuple = tuple(item)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists_count = {}\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists_count:\n                sublists_count[sublist] = 1\n            else:\n                sublists_count[sublist] += 1\n    \n    return sublists_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Initialize an empty dictionary to store the count of each tuple\n    counts = {}\n\n    # Loop through each element in the original list\n    for element in list1:\n        # Convert the list to a tuple and check if it is already a tuple\n        if type(element) is not tuple:\n            element = (element,)\n\n        # Check if the tuple is already in the dictionary\n        if element in counts:\n            # Increment the count of the tuple\n            counts[element] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            counts[element] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i:i+1])\n        if sublist in count_dict:\n            count_dict[sublist] += 1\n        else:\n            count_dict[sublist] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    count_dict = {}\n    # iterate over each list in the input list\n    for sublist in list1:\n        # convert the list to a tuple and check if the tuple is already in the dictionary\n        if (sublist,) in count_dict:\n            # increment the value associated with the tuple in the dictionary\n            count_dict[sublist] += 1\n        else:\n            # if the tuple is not in the dictionary, add it with a value of 1\n            count_dict[sublist] = 1\n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for i in list1:\n        if isinstance(i, list):\n            sublist_dict[tuple(i)] = sublist_dict.get(tuple(i), 0) + 1\n        else:\n            continue\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list.\n    The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    count = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count:\n            count[sublist_tuple] += 1\n        else:\n            count[sublist_tuple] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        if type(item) == list:\n            item = tuple(item)\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create a dictionary to store the number of occurrences of each sublist in the original list\n    sublist_count = {}\n\n    # Loop through each element in the original list\n    for element in list1:\n        # Convert the element to a tuple and check if it is already in the dictionary\n        if tuple(element) in sublist_count:\n            # Increment the count of the tuple in the dictionary\n            sublist_count[tuple(element)] += 1\n        else:\n            # If the tuple is not in the dictionary, add it with a count of 1\n            sublist_count[tuple(element)] = 1\n\n    # Return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) > 2:\n            return False\n        for digit in decimal_part:\n            if not digit.isdigit() or int(digit) > 9:\n                return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' in num and num.count('.') > 1:\n        return False\n    elif '.' not in num:\n        return False\n    else:\n        num_list = num.split('.')\n        num_int = int(num_list[0])\n        num_dec = int(num_list[1])\n        if num_dec == 0:\n            return True\n        elif num_dec == 2:\n            return True\n        else:\n            return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and num.count('.') == 1:\n        parts = num.split('.')\n        decimal_part = parts[1]\n        if len(decimal_part) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        num = float(num)\n        return round(num, 2) == num"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer():\n            return False\n        elif num % 1!= 0:\n            return False\n        else:\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_digits = set('0123456789.')\n    if not all(c in decimal_digits for c in num):\n        return False\n    if '.' not in num:\n        return False\n    if num.count('.') > 1:\n        return False\n    if num.count('.') == 1:\n        if num.split('.')[1].count('.') == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # remove any non-numeric characters from the string\n    num = ''.join(e for e in num if e.isdigit())\n    # check if the string has at least one digit\n    if not num:\n        return False\n    # check if the string only contains digits and a decimal point\n    if num.count('.') > 1 or '.' not in num:\n        return False\n    # split the string into integer and decimal parts\n    int_part = num.split('.')[0]\n    dec_part = num.split('.')[1]\n    # check if the integer part contains only digits\n    if not int_part.isdigit():\n        return False\n    # check if the decimal part contains only digits with a precision of 2\n    if len(dec_part) > 2 or not dec_part.isdigit():\n        return False\n    # check if the integer part is less than 10\n    if int(int_part) > 10:\n        return False\n    # check if the integer part is equal to the integer part of the square of the decimal part\n    if int(int_part)!= int(int_part) ** int(dec_part):\n        return False\n    # all checks passed, so the string is a valid decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        elif num - int(num) == 0:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.replace(',', '')  # remove comma from the number string\n    num = num.replace('.', '')  # remove dot from the number string\n    num = num.replace('+', '')  # remove plus sign from the number string\n    num = num.replace('-', '')  # remove minus sign from the number string\n    num = num.strip()  # remove leading/trailing spaces\n    decimal_point_index = num.find('.')  # find the index of the decimal point\n    if decimal_point_index == -1:  # if there is no decimal point in the number string\n        return False\n    decimal_part = num[decimal_point_index+1:]  # get the decimal part of the number string\n    if len(decimal_part) > 2:  # if the decimal part is greater than 2 digits\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    for digit in num.split('.')[1]:\n        if not digit.isdigit() or int(digit) > 9:\n            return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    elif arr[0] == arr[1]:\n        return False\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns a boolean value indicating whether\n    the list contains only one distinct element or not.\n    \"\"\"\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # Check if the length of the set is one (i.e. there's only one distinct element)\n    return len(unique_set) == 1"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique_set = set(arr)\n    if len(unique_set) == 1:\n        print(\"The list contains only one unique element.\")\n    else:\n        print(\"The list contains multiple unique elements.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and checks if all the numbers are distinct.\n    If all the numbers are distinct, it will return True, else False.\n    '''\n    if len(set(arr)) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        distinct = False\n        for i in range(n):\n            for j in range(i+1, n):\n                if arr[i] == arr[j]:\n                    distinct = True\n                    break\n        return not distinct"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return \"False\"\n    else:\n        return \"True\""
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return \"The list is empty.\"\n    else:\n        unique_element = True\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    unique_element = False\n                    break\n            if unique_element == False:\n                break\n        if unique_element == True:\n            return \"The list contains only one distinct element.\"\n        else:\n            return \"The list contains multiple distinct elements.\""
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 1 <= monthnum3 <= 12:\n        if monthnum3 % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        if (monthnum3 % 2 == 0):\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # check if month number is in range 1 to 12\n    if not 1 <= monthnum3 <= 12:\n        return \"Invalid month number\"\n    \n    # convert month number to the corresponding name\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    month = months[monthnum3 - 1]\n    \n    # check if month name contains 30 days\n    if \"30\" in month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        if monthnum3 in [4, 6, 9, 11]:\n            return True\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 2:\n        return False\n    else:\n        return (monthnum % 2 == 0 and (monthnum % 100!= 0 or monthnum % 400 == 0)) or (monthnum % 2!= 0 and monthnum % 100 == 0 and monthnum % 400!= 0)"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize minimum difference and two pointers\n    min_diff = float('inf')\n    left = 0\n    right = n - 1\n\n    # Loop through the array to find the minimum difference\n    while left < right:\n        diff = arr[right] - arr[left]\n        if diff < min_diff:\n            min_diff = diff\n        if diff > 0:\n            right -= 1\n        else:\n            left += 1\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sieve_of_eratosthenes(limit):\n    primes = [True] * (limit + 1)\n    primes[0], primes[1] = False, False\n    p = 2\n    while p * p <= limit:\n        if primes[p]:\n            for i in range(p * p, limit + 1, p):\n                primes[i] = False\n        p += 1\n    return primes\n\ndef find_min_diff(arr, n):\n    limit = max(arr)\n    primes = sieve_of_eratosthenes(limit)\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            if primes[arr[i]] and primes[arr[j]]:\n                diff = abs(arr[i] - arr[j])\n                min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize two variables to store the minimum difference and the minimum element\n    min_diff = arr[1] - arr[0]\n    min_element = arr[0]\n\n    # Iterate through the array from the second element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous minimum element\n        diff = arr[i] - min_element\n        # Update the minimum difference if the current difference is smaller than the previous one\n        if diff < min_diff:\n            min_diff = diff\n            min_element = arr[i]\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and a number n as input,\n    and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sorting the array in ascending order\n    diff = float('inf')  # Initializing the minimum difference variable to infinity\n    for i in range(1, n):\n        diff = min(diff, abs(arr[i] - arr[i-1]))  # Updating the minimum difference variable if current element is smaller than the previous element\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Sorting the array in ascending order\n    arr.sort()\n    # Initializing the minimum difference\n    min_diff = float('inf')\n    # Looping through the array\n    for i in range(1, n):\n        # Checking the difference between the current element and the previous element\n        diff = arr[i] - arr[i-1]\n        # Updating the minimum difference if the current difference is less than the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = abs(arr[n-1] - arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    # Find the minimum value in the array \n    min_val = arr[0] \n\n    # Initialize the minimum difference between any two elements in the array \n    min_diff = abs(arr[1] - arr[0]) \n\n    # Iterate through the array to find the minimum difference \n    for i in range(1, n): \n        curr_diff = abs(arr[i] - arr[i-1]) \n\n        # Update the minimum difference if the current difference is smaller \n        if curr_diff < min_diff: \n            min_diff = curr_diff \n\n        # Update the minimum value if the current value is smaller \n        if arr[i] < min_val: \n            min_val = arr[i] \n\n    # Return the minimum difference \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables\n    diff = float('inf')\n    min_diff = float('inf')\n\n    # Calculate the minimum difference\n    for i in range(n):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sort the array in ascending order\n    diff = arr[1] - arr[0]  # Initialize the minimum difference as the difference between the first and second elements in the array\n    for i in range(2, n):\n        curr_diff = arr[i] - arr[i - 1]  # Find the difference between current element and previous element\n        if curr_diff < diff:  # If the current difference is less than the minimum difference, update the minimum difference\n            diff = curr_diff\n    return diff  # Return the minimum difference"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # initialize counter and sum variables\n    counter = 0\n    sum = 0\n\n    # iterate over numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is a polite number\n        if i % 2!= 0 and (i * (i + 1)) % 10 == 0:\n            counter += 1\n            sum += i\n\n    # calculate the nth polite number\n    nth_polite = (counter * (counter - 1)) // 2 + sum\n\n    return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 16\n    elif n == 7:\n        return 22\n    elif n == 8:\n        return 29\n    elif n == 9:\n        return 37\n    elif n == 10:\n        return 46\n    elif n == 11:\n        return 56\n    elif n == 12:\n        return 67\n    elif n == 13:\n        return 79\n    elif n == 14:\n        return 91\n    elif n == 15:\n        return 104\n    elif n == 16:\n        return 118\n    elif n == 17:\n        return 132\n    elif n == 18:\n        return 147\n    elif n == 19:\n        return 162\n    elif n == 20:\n        return 178\n    elif n == 21:\n        return 194\n    elif n == 22:\n        return 211\n    elif n == 23:\n        return 228\n    elif n == 24:\n        return 246\n    elif n == 25:\n        return 264\n    elif n == 26:\n        return 283\n    elif n == 27:\n        return 302\n    elif n == 28:\n        return 321\n    elif n == 29:\n        return 341\n    elif n == 30:\n        return 361\n    elif n == 31:\n        return 382\n    elif n == 32:\n        return 403\n    elif n == 33:\n        return 425\n    elif n == 34:\n        return 447\n    elif n == 35:\n        return 470\n    elif n == 36:\n        return 493\n    elif n == 37:\n        return 517\n    elif n == 38:\n        return 541\n    elif n == 39:\n        return 566\n    elif n == 40:\n        return 591\n    elif n == 41:\n        return 617\n    elif n == 42:\n        return 643\n    elif n == 43:\n        return 670\n    elif n == 44:\n        return 697\n    elif n == 45:\n        return 724\n    elif n == 46:\n        return 752\n    elif n == 47:\n        return 780\n    elif n == 48:\n        return 809\n    elif n == 49:\n        return 838\n    elif n == 50:\n        return 868\n    elif n == 51:\n        return 898\n    elif n == 52:\n        return 929\n    elif n == 53:\n        return 960\n    elif n == 54:\n        return 991\n    elif n == 55:\n        return 1023\n    elif n == 56:\n        return 1055\n    elif n == 57:\n        return 1088\n    elif n == 58:\n        return 1121\n    elif n == 59:\n        return 1155\n    elif n == 60:\n        return 1189\n    elif n == 61:\n        return 1224\n    elif n == 62:\n        return 1259\n    elif n == 63:\n        return 1294\n    elif n == 64:\n        return 1330\n    elif n == 65:\n        return 1366\n    elif n == 66:\n        return 1403\n    elif n == 67:\n        return 1440\n    elif n == 68:\n        return 1477\n    elif n == 69:\n        return 1515\n    elif n == 70:\n        return 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Calculate n! (the factorial of n is the product of all integers from 1 to n)\n    factorial = math.factorial(n)\n    \n    # Calculate the nth term of the series using the formula: (a + b + c +... + n) / (n!)\n    nth_term = (n * (2 * n - 1) // 2) / factorial\n    \n    # Return the nth polite number\n    return nth_term"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    def is_prime(n): \n        if n <= 1: \n            return False \n        for i in range(2, int(math.sqrt(n)) + 1): \n            if n % i == 0: \n                return False \n        return True \n    \n    def nth_prime(n): \n        count = 0 \n        p = 2 \n        while count < n: \n            if is_prime(p): \n                count += 1 \n            p += 1 \n    \n    nth_prime(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [7, 9, 11, 13, 15, 17, 19, 21, 23, 25]\n    return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite(a, b):\n        if is_prime(a) and is_prime(b):\n            return a\n        elif is_prime(a) and not is_prime(b):\n            return a\n        elif not is_prime(a) and is_prime(b):\n            return b\n        else:\n            return a\n\n    # Check if n is a positive integer\n    if n <= 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n\n    # Calculate the nth polite number\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        # Initialize the variables\n        a = 5\n        b = 7\n\n        # Calculate the nth polite number using the formula\n        for i in range(2, n):\n            a, b = b, nth_polite(a, b)\n\n        return b"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Define a list of factors of 5\n    factors_of_5 = [5, 10, 20, 25, 50, 100, 200]\n    # Initialize a variable to store the current count\n    current_count = 0\n    # Loop through the factors of 5 and add up their counts\n    for factor in factors_of_5:\n        current_count += n // factor\n        n %= factor\n    # Return the current count\n    return current_count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    '''\n    def is_prime(num):\n        '''\n        Helper function to check if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_anagram(str1, str2):\n        '''\n        Helper function to check if two strings are anagrams or not.\n        '''\n        if len(str1)!= len(str2):\n            return False\n        char_count = [0] * 26\n        for char in str1:\n            char_count[ord(char)-ord('a')] += 1\n        for char in str2:\n            char_count[ord(char)-ord('a')] -= 1\n            if char_count[ord(char)-ord('a')] < 0:\n                return False\n        return True\n    \n    def is_consonant(char):\n        '''\n        Helper function to check if a character is consonant or not.\n        '''\n        consonant = 'bcdfghjklmnpqrstvwxyz'\n        return char in consonant\n    \n    def is_vowel(char):\n        '''\n        Helper function to check if a character is a vowel or not.\n        '''\n        vowels = 'aeiou'\n        return char in vowels\n    \n    def is_prime_vowel(num):\n        '''\n        Helper function to check if a number is prime and a vowel or not.\n        '''\n        if is_prime(num) and is_vowel(str(num)[-1]):\n            return True\n        return False\n    \n    def is_prime_consonant(num):\n        '''\n        Helper function to check if a number is prime and a consonant or not.\n        '''\n        if is_prime(num) and is_consonant(str(num)[-1]):\n            return True\n        return False\n    \n    def is_prime_consonant_vowel(num):\n        '''\n        Helper function to check if a number is prime, a consonant and a vowel or not.\n        '''\n        if is_prime(num) and is_consonant(str(num)[-1]) and is_vowel(str(num)[-1]):\n            return True\n        return False\n    \n    def is_good_prime(num):\n        '''\n        Helper function to check if a number is a good prime or not.\n        '''\n        if is_prime(num):\n            if is_prime_vowel(num):\n                return True\n            if is_prime_consonant(num):\n                return True\n            if is_prime_consonant_vowel(num):\n                return True\n        return False\n    \n    def is_good_polite(num):\n        '''\n        Helper function to check if a number is a good polite number or not.\n        '''\n        if is_good_prime(num):\n            if is_anagram(str(num), str(num)+str(num)[::-1]):\n                return True\n        return False\n    \n    if is_good_polite(n):\n        return 'The {}th polite number is {}'.format(n, n)\n    else:\n        return 'There is no {}th polite number'.format(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 1:\n        return \"Error: n should be greater than 0\"\n    elif n == 1:\n        return 1\n    else:\n        # Initialize variables\n        nth_polite = 1\n        count = 1\n        # Calculate nth_polite\n        while count < n:\n            nth_polite += 2\n            count += 1\n        return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n < 1:\n        return None\n    \n    # Initialize the first polite number as 1\n    polite_number = 1\n    \n    # Calculate the square root of n\n    root_n = math.sqrt(n)\n    \n    # Loop through each integer from 1 to the square root of n\n    for i in range(1, int(root_n) + 1):\n        if n % i == 0:\n            # Check if the number is a polite number\n            if i >= 2 and i <= 5 and i * i == n:\n                return polite_number\n            \n            # Check if the number is a prime number\n            if is_prime(i):\n                polite_number += 1\n                \n    return None\n\ndef is_prime(n):\n    \"\"\"\n    Check if a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    \n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    \n    return True"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        if i == 0:\n            l2.append((l1[i], l1[i+1]))\n        elif i == len(l1)-1:\n            l2.append((l1[i-1], l1[i]))\n        else:\n            l2.append((l1[i-1], l1[i]))\n            l2.append((l1[i], l1[i+1]))\n    return l2"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    n = len(l1)\n    for i in range(n):\n        for j in range(i+1, n):\n            pairs.append((l1[i], l1[j]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list of items as an input and returns a list of pairs of consecutive items.\n    '''\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    \"\"\"\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to the sum parameter.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns a new list with the elements that are present only in the first list.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns their difference.\n    \"\"\"\n    diff = []\n    for x in li1:\n        if x not in li2:\n            diff.append(x)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # Create an empty list to store the difference between the two lists\n    diff_list = []\n    \n    # Loop through each element in the first list\n    for i in li1:\n        # Check if the element exists in the second list\n        if i in li2:\n            # If it exists, check if it's already in the diff_list\n            if i not in diff_list:\n                # If it's not, add it to the diff_list\n                diff_list.append(i)\n        else:\n            # If the element doesn't exist in the second list, add it to the diff_list\n            diff_list.append(i)\n    \n    # Return the diff_list as the difference between the two lists\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    \n    while i <= n:\n        sum += i ** 4\n        i += 2\n        \n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        num = 2 * (2*i + 1)\n        sum += num**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    sum = 0\n    for i in range(2, n+1, 2) : \n        sum += i ** 4\n    return sum \n\nprint(odd_num_sum(10)) # Output: 6765"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        fourth_power = i**4\n        sum_of_fourth_powers += fourth_power\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        num = i*i*i*i*i\n        if num % 2 == 1:\n            sum += num\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(2, n+1, 2):\n        fourth_power = i ** 4\n        sum_of_fourth_powers += fourth_power\n    return sum_of_fourth_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if i - top > 0:\n                return False\n\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char == ')' and top_char!= '(':\n                return False\n            elif char == ']' and top_char!= '[':\n                return False\n            elif char == '}' and top_char!= '{':\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in ['(', '[', '{']:\n                if char!= top_char:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isspace():\n            continue\n\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {'}', ']', '}'}\n\n    for bracket in exp:\n        if bracket in opening_brackets:\n            stack.append(bracket)\n        elif bracket in closing_brackets:\n            if not stack:\n                return False\n            elif closing_brackets[bracket]!= stack.pop():\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char in ['(', '[', '{']:\n                if char!= top:\n                    return False\n            elif char in [')', ']', '}']:\n                if char!= top:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c in ['(', ')']:\n            stack.append(c)\n        elif c.isalnum():\n            if stack and stack[-1] in ['(', ')', '{', '}']:\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the filtered words\n    filtered_words = []\n    \n    # Iterate over the words in the string\n    for word in words:\n        # If the length of the word is not equal to K, append it to the filtered words list\n        if len(word)!= K:\n            filtered_words.append(word)\n    \n    # Join the filtered words back into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words_to_remove = []\n    \n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words_to_remove.append(i)\n    \n    for i in words_to_remove:\n        del words[i]\n    \n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n\n    # Loop through each word and remove the ones with k length\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n\n    # Join the new words back into a string\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_str = \"\"\n    for word in words:\n        if len(word)!= K:\n            new_str += \" \" + word\n    return new_str.strip()"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        print(\"Match found!\")\n        print(f\"Substring: {result[0]}\")\n        print(f\"Position: {text.find(result[0])}\")\n    else:\n        print(\"No match found!\")\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use regular expression to find the pattern in the text\n    match = re.search(pattern, text)\n    if match:\n        # Return the position and occurrence of the pattern\n        return (match.start(), match.group(), match.end())\n    else:\n        # Return None if there is no match\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        index = text.index(pattern)\n        return (pattern, index)\n    except ValueError:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        return result[0], result.index(result[0])\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([num for num in nums[i::2] if num % 2!= 0]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if sum(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if len(set([x for x in nums if i <= x < (i+1)])) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1 and i % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # iterate through the list and check for odd numbers at odd positions\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n\n    # if no odd numbers were found at odd positions, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i-1].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if (i > 0 and vowels.find(test_str[i-1]) > -1) or (i < len(test_str)-1 and vowels.find(test_str[i+1]) > -1):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr[1:]) # exclude the first element\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all unique elements in the list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_elements = set(arr)\n\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n\n    # Iterate through the unique elements in the list\n    for element in unique_elements:\n        # Add the unique element to the sum_non_repeated variable\n        sum_non_repeated += element\n\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all the non-repeated elements in the list.\n    \"\"\"\n    # Using a dictionary to keep track of the frequency of elements in the list\n    freq = {}\n    for num in arr:\n        # If the element is not already in the dictionary, add it with a frequency of 1\n        if num not in freq:\n            freq[num] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq[num] += 1\n    \n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    \n    # Iterate through the dictionary to find the sum of non-repeated elements\n    for num, freq in freq.items():\n        if freq == 1:\n            sum_non_repeated += num\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Convert the given list to a set to remove duplicates\n    set_arr = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements in the set\n    sum_arr = 0\n    # Loop through the set and add each element to the sum variable\n    for num in set_arr:\n        sum_arr += num\n    # Return the sum of non-repeated elements in the set\n    return sum_arr"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = list(set(arr))\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the elements in the list\n    my_set = set(arr)\n    # Convert the set to a list to make it easier to iterate over it\n    list_set = list(my_set)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n    # Iterate over the list of non-repeated elements and add them to the sum\n    for element in list_set:\n        sum_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    # Create a set to store the elements of the list\n    unique_elements = set(arr) \n    # Convert the set back to a list\n    unique_elements = list(unique_elements) \n    # Initialize a variable to store the sum of non-repeated elements\n    sum_of_non_repeated = 0 \n    # Loop through the list of unique elements and add their value to the sum of non-repeated elements\n    for element in unique_elements: \n        sum_of_non_repeated += element \n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Convert the list to set to remove duplicates\n    unique_set = set(arr)\n\n    # Calculate the sum of the unique set\n    sum_unique = sum(unique_set)\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to store the elements and their frequency\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # calculate the sum of non-repeated elements\n    non_repeated_sum = 0\n    for num in arr:\n        if freq[num] == 1:\n            non_repeated_sum += num\n\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of its non-repeated elements.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    unique_set = set(arr)\n    # Convert the set back to a list\n    unique_list = list(unique_set)\n    # Calculate the sum of the non-repeated elements\n    sum_of_non_repeated = sum(unique_list)\n    # Return the sum\n    return sum_of_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack_duplicates(group):\n        '''\n        Helper function to pack consecutive duplicates of a given list elements into sublists.\n        '''\n        # List comprehension to create a sublist of consecutive duplicates of a given list elements\n        sublist = list(group[1])\n        sublist.append(group[1][-1])\n        return sublist\n\n    # List comprehension to group consecutive duplicates of a given list elements into sublists\n    packed_list = [pack_duplicates(g) for key, g in groupby(list1) if len(list(g)) > 1]\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return list(groupby(lst))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for item, group in groupby(enumerate(list1), lambda x: x[0] - x[1]):\n        if group:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    groups = []\n    for group in groupby(lst):\n        if len(list(group)) > 1:\n            groups.append(list(group))\n    return groups"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list and groups consecutive duplicates of elements into sublists.\n    '''\n    return [' '.join(list(g)) for k, g in groupby(lst) if k == '' and len(list(g)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    return [list(group) for key, group in grouped_list]\n"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = {}\n    for element in list1:\n        if element in groups:\n            groups[element].append(element)\n        else:\n            groups[element] = [element]\n    return list(groups.values())"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    # Create a generator that groups the elements of the list into consecutive duplicates\n    grouped = groupby(list1)\n    # Create a new list to store the sublists\n    packed = []\n    # Iterate over each consecutive group of consecutive duplicates\n    for key, group in grouped:\n        # Check if the current group has at least two consecutive duplicates\n        if len(list(group)) >= 2:\n            # Pack the consecutive duplicates into a new sublist and append it to the packed list\n            sublist = list(group)\n            packed.append(sublist)\n    # Return the packed list\n    return packed"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create an empty dictionary to store the counts of unique sublists\n    count_dict = {}\n    \n    # Iterate over each element in the list\n    for element in list1:\n        \n        # If the element is a list, convert it to a tuple and add it to the count dictionary\n        if isinstance(element, list):\n            tuple_element = tuple(element)\n            if tuple_element in count_dict:\n                count_dict[tuple_element] += 1\n            else:\n                count_dict[tuple_element] = 1\n                \n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # iterate over the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # check if the tuple is already in the dictionary\n        if sublist_tuple in count_dict:\n            # if it is, increment its count\n            count_dict[sublist_tuple] += 1\n        else:\n            # if it's not, add it with a count of 1\n            count_dict[sublist_tuple] = 1\n    \n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        if tuple(sublist) in sublist_dict:\n            sublist_dict[tuple(sublist)] += 1\n        else:\n            sublist_dict[tuple(sublist)] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        sublist = tuple(list1[i])\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create a dictionary to store the counts of unique sublists\n    counts = {}\n    # Iterate over all sublists of the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist in counts:\n            # Increment its count by 1\n            counts[sublist] += 1\n        else:\n            # Otherwise, add the sublist as a new key-value pair in the dictionary\n            counts[sublist] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = {}\n    for i in list1:\n        if i not in unique_list:\n            unique_list[i] = 1\n        else:\n            unique_list[i] += 1\n    return unique_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create a set to store unique sublists\n    sublist_set = set()\n    # iterate over each list in the input list\n    for sublist in list1:\n        # turn the sublist into a tuple\n        sublist_tuple = tuple(sublist)\n        # add the tuple to the set\n        sublist_set.add(sublist_tuple)\n    # create a dictionary to store the count of each unique sublist\n    sublist_count = {}\n    # iterate over the set of unique sublists\n    for sublist in sublist_set:\n        # get the count of the sublist\n        count = sublist_set.count(sublist)\n        # add the sublist and its count to the dictionary\n        sublist_count[sublist] = count\n    # return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary to store the count of each unique sublist\n    counts = {}\n\n    # Iterate over all the elements in the list\n    for element in list1:\n\n        # If the element is not a list, create a tuple with it and its count 1\n        if not isinstance(element, list):\n            sublist = (element, 1)\n        else:\n            # If the element is a list, convert it to a tuple and count its occurrence\n            sublist = tuple(element), len(element)\n\n        # If the sublist has not been encountered before, add it to the dictionary with its count 1\n        if sublist not in counts:\n            counts[sublist] = 1\n        # If the sublist has been encountered before, increment its count by 1\n        else:\n            counts[sublist] += 1\n\n    # Return the dictionary of unique sublists and their counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublists_dict = {}\n    for sublist in list1:\n        if tuple(sorted(sublist)) not in unique_sublists_dict:\n            unique_sublists_dict[tuple(sorted(sublist))] = 1\n        else:\n            unique_sublists_dict[tuple(sorted(sublist))] += 1\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    \n    # loop through each list in the original list\n    for sublist in list1:\n        # turn the list into a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # check if the tuple is in the dictionary\n        if sublist_tuple in counts:\n            # if it is, increment its count by 1\n            counts[sublist_tuple] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            counts[sublist_tuple] = 1\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum((test_list[i], test_list[j], test_list[k])) == 0:\n                    yield (test_list[i], test_list[j], test_list[k])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Calculate the sum of each tuple in the list\n    total_sum = sum(map(sum, test_list))\n    \n    # Sort the tuples in the list\n    sorted_list = sorted(test_list, key=lambda x: sum(x))\n    \n    # Generate all combinations of sums\n    for i in range(len(sorted_list)):\n        for j in range(i+1, len(sorted_list)):\n            # Check if the sums of the current and next tuples are equal to the total sum\n            if sorted_list[i][0] + sorted_list[j][0] == total_sum:\n                # Append the current and next tuples to the result list\n                result_list = sorted_list[i] + sorted_list[j]\n                yield result_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sums = set()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] + test_list[j][0] == test_list[i][1]:\n                sums.add(tuple(sorted([test_list[i][0], test_list[j][0]])))\n                sums.add(tuple(sorted([test_list[j][0], test_list[i][0]])))\n    return sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    comb = list(combinations(test_list, r=2))\n    for i in range(len(comb)):\n        comb[i] = tuple(comb[i])\n    return comb"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # initialize an empty list to store the combinations of sums\n    combinations_list = []\n\n    # loop through each tuple in the test list\n    for i in range(len(test_list)):\n        # loop through each tuple in the list except for the current tuple\n        for j in range(i+1, len(test_list)):\n            # calculate the sum of the tuples\n            total_sum = sum(test_list[i]) + sum(test_list[j])\n\n            # check if the sum is in the range of the current tuple\n            if total_sum in range(min(test_list[i]), max(test_list[j])+1):\n                # add the current combination to the list of combinations of sums\n                combinations_list.append((test_list[i], test_list[j]))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #combinations() function returns the combinations of tuples from the given list. \n    #Here we are using it to find all the combinations of tuples with sum equal to 3 and with a tuple of length 2. \n    #We are taking all combinations of tuples and checking if each combination contains a tuple of length 2 and if all the sum of the tuples is equal to 3. \n    for combo in combinations(test_list, r=2):\n        if len(combo) == 2 and sum(combo[0]) + sum(combo[1]) == 3:\n            print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    unique_tuples = list(set(test_list))\n    total = sum(tuple(i) for i in unique_tuples)\n    combinations_list = []\n    for i in range(total+1):\n        if i not in combinations_list:\n            combinations_list.append(i)\n    combinations_list.sort()\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combination_list = []\n    n = len(test_list)\n    for i in range(1, n+1):\n        for combo in combinations(test_list, i):\n            if sum(combo) == 0:\n                combination_list.append(combo)\n    return combination_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    unique_tuples = set(test_list)\n    sums = set()\n    for i in range(len(unique_tuples)):\n        for j in range(i+1, len(unique_tuples)):\n            if unique_tuples[i] + unique_tuples[j] == 0:\n                sums.add((unique_tuples[i], unique_tuples[j]))\n    return list(sums)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    This function takes a list of tuples and returns the combinations of sums of the tuples in the list.\n\n    Args:\n        test_list (list): list of tuples\n\n    Returns:\n        list: list of tuples containing the combination of sums\n    \"\"\"\n    # Create a list of tuples containing the combinations of sums\n    combinations_list = []\n    # Loop through all possible pairs of tuples in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Create a tuple containing the combination of sums and append it to the list\n            combinations_list.append((test_list[i][0]+test_list[j][0], test_list[i][1]+test_list[j][1]))\n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Check if the number is negative\n    if n < 0:\n        return \"The number should be a non-negative integer\"\n\n    # Calculate the sum of the divisors\n    sum_of_divisors = 1\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_of_divisors += i + n//i\n    \n    # Calculate the count of divisors\n    count_of_divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count_of_divisors += 1\n\n    # Check if the count of divisors is even\n    if count_of_divisors % 2 == 0:\n        print(n, \"has even number of divisors\")\n    else:\n        print(n, \"has odd number of divisors\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    divisor = 2\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            count += 1\n        divisor += 1\n    if n > 1:\n        count += 1\n    return count % 2"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    def helper(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return 1 + helper(n-1)\n\n    # calculate the number of divisors\n    divisors = helper(n)\n\n    # check whether the count of divisors is even\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    divisors.append(n)\n    count_divisors = len(divisors)\n    if count_divisors % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    \n    count = len(divisors)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    divisor = 1\n    \n    while divisor <= n//2:\n        if n % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    \n    count = len(divisors)\n    \n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # calculate the count of divisors\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n\n    # check whether the count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    n = len(arr)\n    \n    # Iterate through the array and add the sum of odd length subarrays\n    for i in range(n):\n        for j in range(i+2, n, 2):\n            total_sum += arr[j]\n            \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_ = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            sum_ += arr[j]\n    return sum_"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    total = 0\n    n = len(arr)\n    \n    for i in range(n):\n        temp = 0\n        for j in range(i, n):\n            temp += arr[j]\n            \n            if j - i + 1 % 2!= 0:\n                total += temp\n                \n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_subarrays = 0\n    n = len(arr)\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += arr[j]\n            if j-i+1 % 2 == 1:\n                sum_of_subarrays += current_sum\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n-1):\n        left = i\n        right = i\n        while left >= 0 and right < n and arr[left] % 2 == 0:\n            left -= 1\n        while right < n and arr[right] % 2 == 1:\n            right += 1\n        if right - left == 1:\n            result += arr[left]\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    ans = 0\n\n    for i in range(1, n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:  # check if subarray length is odd\n                temp = sum(arr[i:j+1])\n                ans += temp\n\n    return ans"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    result = 0\n    \n    for i in range(1, n):\n        if i%2 == 1:\n            result += arr[i]\n            \n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    # Initialize variables to store the sum and current subarray sum\n    total_sum = 0\n    current_sum = 0\n\n    # Loop through the array\n    for num in arr:\n        # If the current number is odd, add it to the current sum\n        if num % 2!= 0:\n            current_sum += num\n\n        # If the current sum is odd length, add it to the total sum\n        if current_sum % 2!= 0:\n            total_sum += current_sum\n\n        # Reset the current sum to 0 if the next number is even length\n        current_sum = 0\n\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            count += arr[i]\n        else:\n            count = 0\n        for j in range(i+2, n+1, 2):\n            if j == i+2:\n                count += arr[j-1]\n            else:\n                count -= arr[j-2]\n            if j-i == 1:\n                count += arr[j-1]\n            else:\n                count -= arr[j-3]\n    return count"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all odd length subarrays.\n\n    Args:\n        arr: List of integers\n\n    Returns:\n        int: Sum of all odd length subarrays in the list\n    \"\"\"\n    # Initialize a variable to store the sum of odd length subarrays\n    sum_odd_length = 0\n    \n    # Loop through each subarray in the list\n    for i in range(len(arr)):\n        # Check if the length of the subarray is odd\n        if len(arr[i]) % 2 == 1:\n            # Add the sum of the subarray to the sum of all odd length subarrays\n            sum_odd_length += sum(arr[i])\n    \n    return sum_odd_length"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    # Convert r, g, b to floats\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Calculate max and min values of r, g, b\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate h, s, v\n    h = 0\n    s = 0\n    v = max_value\n\n    # Calculate delta value and delta max value\n    delta = max_value - min_value\n\n    if max_value == 0:\n        s = 0\n    else:\n        # Calculate s and h\n        s = delta / max_value\n\n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        # Normalize h\n        if h < 0:\n            h += 6\n\n        # Convert h to degrees\n        h *= 60\n\n    # Convert s, v, h to integers\n    s = int(s * 255)\n    v = int(v * 255)\n    h = int(h)\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes three parameters: red, green and blue values of an rgb color.\n    It then converts the rgb color to hsv color model and returns the h, s and v values.\n\n    H: Hue (0 to 360 degrees)\n    S: Saturation (0 to 100 percent)\n    V: Value (0 to 100 percent)\n\n    Formula for HSV color model:\n    H = (max(R, G, B) - min(R, G, B)) / max(R, G, B)\n    S = (max(R, G, B)) / (max(R, G, B) + min(R, G, B))\n    V = max(R, G, B)\n    '''\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    if max_value == min_value:\n        h = s = v = 0\n    else:\n        delta = max_value - min_value\n        s = (max_value) / (max_value + min_value)\n        if max_value == r:\n            h = ((g - b) / delta) % 6\n        elif max_value == g:\n            h = (b - r) / delta + 2\n        else:\n            h = (r - g) / delta + 4\n            \n        h = h * 60\n        \n        if h < 0:\n            h += 360\n        \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0  # Convert to range 0-1\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:  # If all values are the same\n        h = 0\n        s = 0\n    elif cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    h = h * 60  # Convert to range 0-360\n    if h < 0:\n        h += 360\n    s = delta / (cmax + delta)\n    v = cmax\n    return round(h, 2), round(s, 2), round(v, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = ((g-b)/delta) % 6\n    elif max_val == g:\n        h = (b-r)/delta + 2\n    else:\n        h = (r-g)/delta + 4\n    h = h/6.0\n    if h < 0:\n        h += 1\n    v = max_val\n    s = delta/max_val\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    h = 0\n    s = 0\n    v = max_val\n    \n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / delta)\n    elif max_val == g:\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        h = 60 * ((r - g) / delta + 4)\n    \n    h = int(h)\n    s = delta / max_val\n    \n    if s == 0:\n        v = 0\n    else:\n        v = max_val\n        \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    \n    # Find the minimum and maximum values in the RGB color space\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    # Find the delta between the maximum and minimum values\n    delta = max_val - min_val\n    \n    # Calculate the hue value by converting the relative position of the maximum value to a hue value in the HSV color space\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n    \n    # Convert the hue value to degrees and normalize it between 0 and 360 degrees\n    hue = hue * 60\n    if hue < 0:\n        hue += 360\n    \n    # Calculate the saturation and value by dividing the delta between max and min values by the maximum value\n    saturation = delta / max_val\n    value = max_val\n    \n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    \n    h, s, v = 0, 0, max_color\n    \n    delta = max_color - min_color\n    \n    if delta == 0:\n        return h, s, v\n    \n    if max_color == r:\n        h = (g - b) / delta\n    elif max_color == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    h *= 60\n    \n    if h < 0:\n        h += 360\n    \n    s = delta / max_color\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function converts an RGB color to HSV color space.\n    '''\n    # Convert the RGB values to HSV\n    r, g, b = r/255, g/255, b/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    h = 0\n    s = 0\n    v = cmax\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h / 6\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2*v - 1))\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    if max_val == min_val:\n        h = s = v = 0\n    else:\n        delta = max_val - min_val\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n        if h < 0:\n            h += 360\n        s = delta / max_val\n        v = max_val / 255.0\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n\n    # calculate maximum and minimum values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # calculate difference between maximum and minimum values\n    delta = max_value - min_value\n\n    # calculate saturation value\n    if max_value == 0:\n        h = 0\n    else:\n        h = delta / max_value\n\n    # calculate hue value\n    if max_value == r:\n        h_prime = (g - b) / delta\n    elif max_value == g:\n        h_prime = 2 + (b - r) / delta\n    else:\n        h_prime = 4 + (r - g) / delta\n\n    h = h_prime / 6\n\n    # calculate value\n    v = max_value\n\n    # return hsv values\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and finds the product of first even and odd number of the list.\n    \"\"\"\n    even_product = 1\n    odd_product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            product *= num\n        else:\n            product *= num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    # Initialize variables to store the product of even and odd numbers\n    even_product = 1\n    odd_product = 1\n    \n    # Iterate through the list and multiply the even and odd numbers\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    \n    # Return the product of even and odd numbers\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product *= num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product *= num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # initialize variables\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    # iterate through the list\n    for num in list1:\n        # check if the number is even\n        if num % 2 == 0:\n            # if even, increment even count\n            even_count += 1\n        else:\n            # if odd, increment odd count\n            odd_count += 1\n\n        # if even count is greater than 0 and odd count is 0, return the product\n        if even_count > 0 and odd_count == 0:\n            return product\n\n    # if no product is found, return None\n    return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list of integers as input and returns the product of the first even and first odd numbers in the list.\n    If there are no even or odd numbers in the list, it returns 0.\n    '''\n    even = [num for num in lst if num % 2 == 0]\n    odd = [num for num in lst if num % 2!= 0]\n    if even and odd:\n        return even[0] * odd[0]\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n            \n    if even_count > 0:\n        product *= 2\n    if odd_count > 0:\n        product *= 2\n        \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function will take a list as input and find the product of first even and odd number.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n    product = even_count * odd_count\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2!= 0]\n    if len(even) > 0 and len(odd) > 0:\n        return even[0] * odd[0]\n    else:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    This function takes a string in the form (1, \"2\", 3) and converts it to a tuple of integers.\n    \"\"\"\n    return tuple(map(int, test_str))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by comma\n    tup_str = test_str.split(',')\n    \n    # Convert each string to integer\n    tup_int = tuple(int(i) for i in tup_str)\n    \n    return tup_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a tuple using comma as the separator\n    test_tuple = test_str.split(',')\n\n    # Convert each element in the tuple to an integer using the int() function\n    int_tuple = tuple(int(i) for i in test_tuple)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # initialize an empty list to store the integer tuples\n    result = []\n\n    # split the string into a list of words\n    words = test_str.split()\n\n    # iterate through each word in the list\n    for word in words:\n        # check if the word is a valid integer\n        try:\n            # convert the word to an integer and append it to the result list\n            result.append(int(word))\n        except ValueError:\n            # if the word is not a valid integer, ignore it\n            pass\n\n    # return the result list as a tuple\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # Split the input string by space\n    input_list = test_str.split()\n\n    # Initialize an empty integer tuple\n    output_tuple = ()\n\n    # Loop through each element in the list\n    for item in input_list:\n\n        # Check if the element is a string\n        if type(item) == str:\n\n            # Try to convert the string to an integer\n            try:\n                num = int(item)\n                output_tuple += (num,)\n\n            except ValueError:\n                print(\"Error: Could not convert\", item, \"to an integer.\")\n                continue\n\n    # Return the integer tuple\n    return output_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        if not isinstance(test_str, str):\n            raise TypeError('Input must be a string')\n        test_list = []\n        for item in test_str.split(','):\n            if not item.isdigit():\n                raise TypeError('Invalid input format')\n            test_list.append(int(item))\n        return tuple(test_list)\n    except ValueError:\n        raise TypeError('Invalid input format')"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = []\n    for num_str in test_str:\n        if num_str.isdigit():\n            int_tuple.append(int(num_str))\n    return tuple(int_tuple)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma\n    test_list = test_str.split(',')\n    \n    # Initialize an empty list to store the integer tuples\n    int_tuple_list = []\n    \n    # Loop through the list and convert each string to an integer\n    for string in test_list:\n        int_tuple_list.append(tuple(int(num) for num in string.split()))\n    \n    # Return the integer tuple list\n    return int_tuple_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split()\n    # Convert the list of strings to a list of integers\n    int_list = [int(i) for i in str_list]\n    # Convert the list of integers to a tuple of integers\n    int_tuple = tuple(int_list)\n    # Return the tuple of integers\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into a list of strings\n    list_str = test_str.split(',')\n    # Convert each string to an integer and append it to a list\n    list_int = [int(i.strip()) for i in list_str]\n    # Convert the list of integers to a tuple and return it\n    return tuple(list_int)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use the bisect module to find the correct insertion point\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        # If the value is already in the sorted list, return the index of the last element\n        return i-1\n    elif x == a[i-1]:\n        # If the value is equal to the previous element, return the index of the previous element\n        return i-1\n    else:\n        # Otherwise, return the index of the current element\n        return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect to find the right insertion point\n    index = bisect.bisect_right(a, x)\n    # Return the index\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to locate the right insertion point\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            # Found the value, return its index\n            return mid\n        elif a[mid] < x:\n            # Move to the right half\n            left = mid + 1\n        else:\n            # Move to the left half\n            right = mid - 1\n    # If the value is not found, return the left index\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Find the index where the value should be inserted\n    i = bisect.bisect_right(a, x)\n\n    # If the value is already present in the list, return its index\n    if i!= len(a) and a[i] == x:\n        return i\n\n    # If the value is greater than the first element of the list, return the index of the first element\n    elif x > a[0]:\n        return 0\n\n    # If the value is less than the first element of the list, return the index of the last element plus one\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use bisect to find the index of the insertion point\n    index = bisect.bisect_right(a, x)\n    # Check if the value is already in the list\n    if a[index] == x:\n        return index\n    # Otherwise, insert the value at the right insertion point\n    return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect module to find the index where x should be inserted\n    i = bisect.bisect_right(a, x)\n    # If x is already present in the list, return the index\n    if a[i-1] == x:\n        return i\n    # If x is greater than the last element in the list, return the index of the last element\n    elif a[i] > x:\n        return i\n    # If x is between two elements, return the index of the next element after the insertion point\n    else:\n        return i+1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match found at index\", match.start(), \"with length\", len(match.group()))\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.match(text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b.*b.*b')\n    return pattern.search(text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    match = re.search(pattern, text, re.DOTALL)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'\\ba(?:b{2})\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert string to list of characters\n    str_list = list(test_str)\n    # join the list of characters into a string\n    new_str = ''.join(str_list)\n    # convert the string back to a list\n    new_str_list = list(new_str)\n    # concatenate the two lists\n    new_list = test_list + new_str_list\n    # convert the concatenated list back to a tuple\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the list and string and store it in a new list\n    new_list = [test_str] + test_list\n    \n    # Convert the new list to a tuple and return it\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): A list of values.\n        test_str (str): A string of characters.\n\n    Returns:\n        A new tuple containing the concatenated list and string.\n    \"\"\"\n    return (test_list + test_str, len(test_list + test_str))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_list = []\n    for item in test_list:\n        if item in test_str:\n            new_tuple_list.append(item)\n    return tuple(new_tuple_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists\n    combined_list = test_list + [test_str]\n    # Convert the combined list to a tuple\n    new_tuple = tuple(combined_list)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = list(test_list)\n    new_list.append(test_str)\n    return tuple(new_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for j in range(i, len(nums), 2):\n            if nums[j] % 2 == 0:\n                count += 1\n        if count % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Loop through the list\n    for i in range(0, len(nums), 2):\n        # Check if the current number is even\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums if num % 2 == 0 and i <= num < i + 2])!= 2:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n        if count % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not any(x % 2 == 0 for x in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            for j in range(i+2, len(nums), 2):\n                if nums[j] % 2!= 0:\n                    return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # even index?\n            count = 0\n            for num in nums[i:]:\n                if num % 2 == 0: # even number?\n                    count += 1\n                if count > 0: # even number found?\n                    return False\n            if count == 0: # no even number found?\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    This function takes a tuple as input and removes any nested tuples.\n    '''\n    if not isinstance(test_tup, tuple):\n        return test_tup\n    else:\n        return tuple(remove_nested(x) for x in test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        new_tup = []\n        for item in test_tup:\n            if isinstance(item, tuple):\n                for sub_item in item:\n                    new_tup.append(sub_item)\n            else:\n                new_tup.append(item)\n        return new_tup\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Check if the input is a tuple\n    if type(test_tup) is tuple:\n        # If it is a tuple, remove all its tuples recursively\n        new_tup = [elem for sub_tup in test_tup for elem in sub_tup]\n    # If it is not a tuple, return the input\n    else:\n        new_tup = test_tup\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # If the input tuple is a single element, return that element\n    if type(test_tup) == tuple:\n        if len(test_tup) == 1:\n            return test_tup[0]\n    # If the input tuple is a nested tuple, recursively call the function\n    elif type(test_tup) == list:\n        for element in test_tup:\n            if type(element) == tuple:\n                remove_nested(element)\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        new_tup = ()\n        for item in test_tup:\n            if isinstance(item, tuple):\n                new_tup += item\n            else:\n                new_tup += (item,)\n        return new_tup\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_list.extend(item)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return list(set(test_tup))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            new_tup.append(item)\n        else:\n            new_tup.extend(remove_nested(item))\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    count = 0 \n    for item in input_list: \n        if isinstance(item, list): \n            count += 1 \n            count += count_list(item) \n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    count = 0 \n    for item in input_list: \n        if type(item) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list as input and returns the count of lists in the list.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    This function takes two parameters, the sorted array and the element we want to find the last occurrence of.\n    The function iterates through the array and returns the last position of the element if it is found, otherwise it returns -1.\n    '''\n    n = len(arr)\n    last_index = -1\n    for i in range(n-1, -1, -1):\n        if arr[i] == x:\n            last_index = i\n            break\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position to -1\n    last_pos = -1\n    \n    # Iterate through the array and check if the current element is equal to x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            # If the current element is equal to x, set last_pos to the current index\n            last_pos = i\n    \n    # Return the last position\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    This function takes two arguments: arr (the sorted array) and x (the element to be searched for).\n    The function iterates through the array and keeps track of the last position of the element.\n    If the element is found, the function returns the last position, otherwise it returns -1.\n    '''\n\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    This function takes in a sorted array and an element x as input\n    and returns the index of the last occurrence of x in the array.\n    If x is not present in the array, the function returns -1.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x and returns the last position of x in the array.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    return i if i >= 0 else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the last position as -1\n    last_position = -1\n    # Iterate through the array to find the last position of x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_position = i\n    # Return the last position of x\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    \n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid+1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right = 0,len(arr)-1\n    while left<=right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            right = mid-1\n        elif arr[mid] > x:\n            right = mid-1\n        else:\n            left = mid+1\n    return right+1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the index of the last occurrence of x\n    last_index = arr.index(x) - 1\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr[0] == x:\n        return 0\n    elif arr[-1] == x:\n        return len(arr) - 1\n    else:\n        i = 1\n        while i < len(arr) - 1 and arr[i]!= x:\n            i += 1\n        if arr[i] == x:\n            return i\n        else:\n            return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)(.*)(?=b)'\n    result = re.findall(pattern, text)\n    if result:\n        return result[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize variables\n    sum = 0\n    l = 1\n    r = n\n\n    # loop through odd numbers within range and add to sum\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n\n    # return sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for num in range(l, r+1):\n        if num % 2!= 0:\n            sum += num\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # defining the range of numbers\n    l = 1\n    r = n\n\n    # initializing variables for sum and counter\n    sum_odd = 0\n    count = 0\n\n    # looping through the range\n    while l <= r:\n        # checking if the number is odd\n        if l % 2!= 0:\n            # adding the number to the sum\n            sum_odd += l\n            # incrementing the counter\n            count += 1\n        # incrementing the number in the range\n        l += 1\n\n    # returning the sum of all odd numbers\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    '''\n    This function takes two arguments, l and r, representing the lower and upper limits of the range.\n    The function returns the sum of all odd natural numbers within the range.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return n + sum_odd(n-2)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    if n % 2 == 0:\n        l += 1\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum variable to 0\n    total = 0\n    \n    # loop through the range of numbers from 1 to n-1\n    for i in range(1, n):\n        \n        # check if the number is odd\n        if i % 2!= 0:\n            \n            # add the number to the sum variable\n            total += i\n            \n    # return the total sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(l, r): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_value = 0\n    for i in range(l, r+1): \n        if i % 2!= 0: \n            sum_value += i \n    return sum_value"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # take input of the range\n    l, r = map(int, input(\"Enter range (l, r): \").split())\n\n    # initialize the sum\n    sum_odd = 0\n\n    # iterate through all the odd numbers within the range\n    for num in range(l, r+1, 2):\n        # add the current odd number to the sum\n        sum_odd += num\n\n    # return the sum\n    return sum_odd"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of its elements.\n    \"\"\"\n    sum = 0\n    for element in arr:\n        sum += element\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through the array and add each element to the sum\n    for num in arr:\n        sum += num\n\n    # Return the sum of the array\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_array(arr):\n    '''\n    This function takes an array as input and returns the sum of the array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize the sum variable\n    sum = 0\n    # iterate over the array\n    for num in arr:\n        # add the current number to the sum\n        sum += num\n    # return the final sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n\nprint(_sum([1,2,3,4,5]))\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = 0xFFFFFFFF << (32 - d)\n    return (n << d) | (n >> (32 - d)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return ((n << d) & mask) | (n & ((1 << (32 - d)) - 1))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary string format\n    binary_str = format(n, '032b')\n    # Split the binary string into groups of 4 bits\n    groups = [binary_str[i:i+4] for i in range(0, len(binary_str), 4)]\n    # Reverse the groups list\n    groups = groups[::-1]\n    # Join the reversed groups back into a binary string\n    binary_str = ''.join(groups)\n    # Convert the binary string back to an integer\n    new_num = int(binary_str, 2)\n    # Return the rotated number\n    return new_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32-d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1  # Mask to keep only the d leftmost bits\n    return (n << d) | (n >> (32 - d)) & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    while d > 0:\n        n = n << 1\n        d -= 1\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert n to a binary string\n    bin_str = bin(n)[2:]\n    # check if n is negative\n    is_negative = False\n    if n < 0:\n        is_negative = True\n        n = -n\n    # rotate left by d bits\n    for i in range(d):\n        # get the last bit of bin_str\n        last_bit = bin_str[-1]\n        # shift all the bits to the left\n        bin_str = bin_str[1:]\n        # append the last bit to the front of the string\n        bin_str = last_bit + bin_str\n    # convert bin_str back to an integer\n    if is_negative:\n        return -int(bin_str, 2)\n    else:\n        return int(bin_str, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # mask = (1 << d) - 1\n    # return (n & mask) << d | n >> (32-d)\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF # & 0xFFFFFFFF to make it compatible with 32-bit systems"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    n = int(n)\n    d = int(d)\n    n = n << d | n >> (32 - d)\n    return n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub('[\\s]+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expression\n    text = re.sub('\\s+','', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Define a regular expression pattern to match any whitespace character\n    pattern = re.compile(r'\\s+')\n    # Replace all matches in the string with an empty string\n    return pattern.sub('', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function takes a string as input and removes all whitespaces from it.\n    \"\"\"\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, x+1):\n        for j in range(1, y+1):\n            if i+j == z:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z) + 1):\n        if x == i:\n            count += 1\n        elif y == i:\n            count += 1\n        elif z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n\n    if x == y == z:\n        count += 1\n\n    if x == y!= z:\n        count += 1\n\n    if x!= y == z:\n        count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x+1):\n        if i == x:\n            continue\n        if i == y:\n            continue\n        if i == z:\n            continue\n        if i == x+1:\n            continue\n        if i == y+1:\n            continue\n        if i == z+1:\n            continue\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[n-i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i > 0 and arr[i] < arr[i-1]:\n            count += 1\n        if arr[i] < arr[n-1]:\n            break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # check if array is already sorted\n    if arr == sorted(arr):\n        return 0\n\n    # check if array is already sorted in reverse order\n    if arr == sorted(arr[::-1]):\n        return n\n\n    # check if array has only one element\n    if n == 1:\n        return 0\n\n    # check if array has two or more elements\n    for i in range(n):\n        # check if i is the index of the maximum element\n        if arr[i] == max(arr[:i] + arr[i+1:]):\n            # check if the maximum element is the last element of the array\n            if i == n-1:\n                return 0\n            # check if the maximum element is in the first half of the array\n            elif max(arr[:i]) == min(arr[i+1:]):\n                return n-i-1\n            # check if the maximum element is in the second half of the array\n            else:\n                return i+1\n\n    # check if the array is already sorted and a mirror image\n    if arr == sorted(arr[::-1]):\n        return 2*n\n\n    return -1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        # if the element is not the first element\n        if arr[i]!= arr[0]:\n            # search for the first element greater than the current element\n            for j in range(1, n):\n                if arr[j] > arr[i]:\n                    # if found, swap the elements and decrement the index of the current element\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n            else:\n                # if not found, increment the count of rotations\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n\n    # If all elements are same, there is no rotation needed\n    if all(arr[0] == x for x in arr):\n        return count\n\n    # If the first element is greater than the last element, there is a rotation needed\n    if arr[0] > arr[-1]:\n        count += 1\n\n    # Iterate through the array and check if the current element is greater than the next element\n    for i in range(1, n - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. \n    '''\n\n    n = len(arr)\n    # If array is already sorted then there is no rotation required.\n    if arr == sorted(arr):\n        return 0\n\n    # Initialize variables for counting rotations\n    count = 0\n    start = 0\n    end = n - 1\n\n    # Iterate through the array and perform the required rotations\n    while start < end:\n        if arr[start] < arr[end]:\n            # If element on left side of mid is smaller than the mid element then swap left and right\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n        elif arr[start] > arr[end]:\n            # If element on right side of mid is greater than the mid element then swap left and right\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n        else:\n            # If elements are equal then there is no rotation required, move start and end index one step forward\n            start += 1\n            end -= 1\n\n    # Count the number of rotations required to sort the array\n    while start < end:\n        # If element on left side of mid is smaller than the mid element then swap left and right\n        arr[start], arr[end] = arr[end], arr[start]\n        count += 1\n        start += 1\n        end -= 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    i = 0\n    while i < n and i < n//2:\n        if arr[i] < arr[i+1]:\n            return -1\n        elif arr[i] > arr[i+1]:\n            i += 1\n        else:\n            j = i + 1\n            while j < n and arr[j] >= arr[i]:\n                j += 1\n            count += n - j\n            i = j - 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Traverse the array and check if the array is already sorted or not\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            # If the array is not sorted, return the number of rotations required to sort it\n            return i+1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    # Initialize a variable to keep track of the number of rotations\n    rotation_count = 0\n    \n    # Compare the first element with the last element of the array\n    if arr[0] > arr[-1]:\n        # If the first element is greater than the last element, it means that the array needs to be rotated to be sorted in ascending order.\n        rotation_count += 1\n    \n    # Compare the last element with the second to last element of the array\n    if arr[-1] < arr[-2]:\n        # If the last element is less than the second to last element, it means that the array needs to be rotated to be sorted in descending order.\n        rotation_count += 1\n    \n    # Compare the second to last element with the second element of the array\n    if arr[-2] > arr[0]:\n        # If the second to last element is greater than the second element, it means that the array needs to be rotated to be sorted in ascending order.\n        rotation_count += 1\n    \n    return rotation_count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize the count of rotations required\n    count = 0\n    # Traverse the array from left to right\n    for i in range(n):\n        # Find the index of the smallest element greater than the current element\n        j = i\n        while j < n and arr[j] <= arr[i]:\n            j += 1\n        # Count the number of rotations required to generate the sorted array\n        count += (j - i)\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if a given number is a perfect square or not.\n    \"\"\"\n    # Initialize the square root of the given number\n    sqrt_n = int(n ** 0.5)\n    # Check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    \n    # calculate the square root of n\n    sqrt_n = 0\n    temp = n\n    while temp > 0:\n        sqrt_n += 1\n        temp //= 2\n    \n    # check if the square root is an integer\n    if sqrt_n * sqrt_n!= n:\n        return False\n    \n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        elif i * i < n:\n            i += 1\n        else:\n            i -= 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the given number is already a perfect square\n    if n == int(n**0.5) * int(n**0.5):\n        return True\n    \n    # Check if the given number is less than 2\n    if n < 2:\n        return False\n    \n    # Use the trial division method to check all numbers from 2 to the square root of the given number\n    for i in range(2, int(n**0.5)+1):\n        # If the given number is divisible by i, it's not a perfect square\n        if n % i == 0:\n            return False\n    \n    # If we reach here, it's a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    else:\n        # base case, 1 is a perfect square\n        if n == 1:\n            return True\n        # checking for other perfect squares\n        # checking for the factors of n\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        # checking for the factors of n with a factor of 1 added\n        for i in range(1, int(n**0.5)+1):\n            if n % (i+1) == 0:\n                return False\n        return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether a given number is a perfect square or not.\n    '''\n    # Convert the given number to integer\n    num = int(n)\n\n    # Check if the square root of the given number is an integer\n    if num == int(num ** 0.5):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt_n = int(n**0.5)\n    for i in range(sqrt_n, 0, -1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n\n    # Find the square root of n using Newton's method\n    x = n\n    y = n // 2\n    while abs(x - y) > 0.00001:\n        x = y\n        y = (x + n // x) // 2\n\n    # Check if the square of y is equal to n\n    return y*y == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    else:\n        a, b = 0, n\n        while b > 0:\n            a, b = b, a + b\n        return a == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Base case\n    if n <= 1:\n        return True\n    \n    # Recursive case\n    for i in range(int(n**0.5)+1):\n        if n == i**2:\n            return True\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n\n    for num in arr: \n        product *= num\n\n    if product % 2 == 0: \n        print(\"The product is even.\")\n    else: \n        print(\"The product is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    if len(arr) < 2:\n        return False\n\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize a variable to store the product of numbers in the list\n    product = 1\n    \n    # Loop through each number in the list\n    for num in arr:\n        # Multiply the current number with the product variable\n        product *= num\n        \n        # Check if the product is even or odd\n        if product % 2 == 0:\n            # If the product is even, return True\n            return True\n        else:\n            # If the product is odd, reset the product variable to 1\n            product = 1\n    \n    # If the loop completes without finding any even products, return False\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    product = 1 \n    for num in arr: \n        product *= num \n    if product % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        total_sum = sum(lst)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')  # initialize the maximum sum to negative infinity\n    max_list = []  # initialize an empty list to store the best list\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            sublist = lists[i][:j] + lists[i][j+1:]\n            subsum = sum(sublist)\n            if subsum > max_sum:\n                max_sum = subsum\n                max_list = sublist\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n    \n    max_sum = float('-inf')\n    max_list = None\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        sum_list = 0\n        for j in range(len(lists[i])):\n            sum_list += lists[i][j]\n        if sum_list > max_sum:\n            max_sum = sum_list\n            max_list = [lists[i]]\n        elif sum_list == max_sum:\n            max_list.append(lists[i])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    max_sum = -float('inf')\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for lst in lists:\n        sum = 0\n        for num in lst:\n            sum += num\n        if sum > max_sum:\n            max_sum = sum\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_sublist = []\n    for i in range(len(lists)):\n        sublist = []\n        for j in range(len(lists[i])):\n            sublist.append(lists[i][j])\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_sublist = sublist\n    return max_sublist\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = None\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            result = sublist\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_sum_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = sum(lists[i][j:]) + lists[i][j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_sum_list.append(lists[i][j])\n\n    return max_sum_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                start = i - current_run + 1\n            current_run = 0\n\n    if current_run > max_run:\n        max_run = current_run\n        start = len(test_str) - current_run\n\n    return test_str[start:start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    # Iterate over characters in string\n    for char in test_str:\n        # If character is uppercase, increment current run\n        if char.isupper():\n            current_run += 1\n        else:\n            # If current run is greater than maximum run, update maximum run\n            if current_run > max_run:\n                max_run = current_run\n            # Reset current run\n            current_run = 0\n    # If current run is greater than maximum run, update maximum run\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    prev_char = \"\"\n    # Loop through the string\n    for char in test_str:\n        # If the character is uppercase\n        if char.isupper():\n            # Check if the previous character was also uppercase\n            if prev_char.isupper():\n                current_run += 1\n            # If the current run is greater than the maximum run found so far, update the maximum run\n            elif current_run > max_run:\n                max_run = current_run\n            # Reset the current run\n            current_run = 1\n        # Update the previous character\n        prev_char = char\n    # Check if there is a maximum run of uppercase characters\n    if current_run > max_run:\n        max_run = current_run\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    start = 0\n    end = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str)-1:\n                uppercase_count += 1\n            elif not test_str[i+1].isupper():\n                if end-start+1 > uppercase_count:\n                    uppercase_count = end-start+1\n                start = i+1\n                end = i+1\n        else:\n            if end-start+1 > uppercase_count:\n                uppercase_count = end-start+1\n            start = i\n            end = i\n\n    if end-start+1 > uppercase_count:\n        uppercase_count = end-start+1\n\n    return uppercase_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    run_start = -1\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            if run_start == -1:\n                run_start = i\n            max_run = max(max_run, i - run_start + 1)\n        else:\n            if run_start!= -1:\n                max_run = max(max_run, i - run_start + 1)\n                run_start = -1\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # Iterate through the string\n    for char in test_str:\n        # If the current character is uppercase, increment the run counter\n        if char.isupper():\n            current_run += 1\n        else:\n            # If the run counter is greater than the current maximum, update the maximum\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the run counter to 0\n            current_run = 0\n    \n    # If there's a remaining run at the end of the string, update the maximum\n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    start = 0\n    end = 0\n    uppercase_count = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            if i == len(test_str) - 1:\n                end = i\n                if uppercase_count > max_count:\n                    max_count = uppercase_count\n                    start = start\n            elif test_str[i+1].isupper():\n                count += 1\n                if count > max_count:\n                    max_count = count\n                    start = i\n        else:\n            count = 0\n            uppercase_count = 0\n\n    return test_str[start:end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    start = 0\n    max_start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = start\n        else:\n            count = 0\n            start = i\n\n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    start = 0\n    max_run = 0\n    max_count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1].upper():\n            max_count += 1\n        else:\n            if max_count > max_run:\n                max_run = max_count\n            start = i-max_count+1\n            max_count = 1\n    if max_count > max_run:\n        max_run = max_count\n    start = len(test_str)-max_run\n    return test_str[start:start+max_run]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Loop through the list of numbers and check if each number is odd\n    for num in nums:\n        if num % 2!= 0:\n            # If odd number is found, return it\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers and returns the first odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    \"\"\"\n    # Initialize a variable to store the first odd number\n    first_odd_num = None\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If it's odd, check if it's the first odd number\n            if first_odd_num is None:\n                # If it's the first odd number, set it as the current odd number\n                first_odd_num = num\n            else:\n                # If it's not the first odd number, return the first odd number\n                return first_odd_num\n    # If there are no odd numbers in the list, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if K == test_tup[i]:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    for i in test_tup:\n        if i == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    for tup in test_tup:\n        if tup.count(K) == K:\n            print(\"True\")\n        else:\n            print(\"False\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if K in i:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes two tuples as input and a number K as output.\n    It returns True if all the elements of the first tuple are present in the second tuple and False otherwise.\n    '''\n    for elem in test_tup:\n        if elem not in K:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) < K:\n        return False\n    else:\n        return all(num in set(test_tup) for num in range(1, K+1))"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples must have the same length.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return \"Error: The first tuple contains an element that is greater than its corresponding element in the second tuple.\"\n    \n    return \"All elements in the first tuple are smaller than their corresponding elements in the second tuple.\""
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths.\")\n        return\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: tuples must be of equal length.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple lengths do not match.\")\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n\n    return True"
    }
]