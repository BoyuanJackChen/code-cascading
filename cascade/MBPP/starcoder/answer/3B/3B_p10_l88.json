[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_set = set1.intersection(set2)\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create sets from the given lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the two sets and convert it to a list\n    shared_elements = list(set1.intersection(set2))\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Use set() to remove duplicates from the lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Use intersection() to find the shared elements\n    shared_elements = set1.intersection(set2)\n    \n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    \n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create sets of the given lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # create an empty set to store the shared elements\n    shared = set()\n    # iterate through the first set and add its elements to the shared set if they are in the second set\n    for element in set1:\n        if element in set2:\n            shared.add(element)\n    # return the shared set as a tuple\n    return tuple(shared)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize an empty list to store the shared elements\n    shared_list = []\n    \n    # Loop through the first list and check if each element is present in the second list\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_list.append(elem)\n            \n    # Return the shared elements\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    # Loop over the first tuple and check if it's in the second tuple\n    for elem in test_tup1:\n        if elem in test_tup2:\n            common_elements.append(elem)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    common_elements = set1.intersection(set2)\n\n    return list(common_elements)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    # Check if the number is equal to 2\n    elif n == 2:\n        return False\n    # If the number is greater than 2, then check if it is divisible by 2\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    elif n <= 1 or n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list of numbers to a heap\n    heap = hq.nlargest(n, nums)\n    # extract the n largest numbers from the heap\n    largest = [heapq.heappop(heap) for _ in range(n)]\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the given list of numbers to a min-heap\n    hq.heapify(nums)\n\n    # Remove the first n elements from the min-heap\n    for i in range(n):\n        hq.heappop(nums)\n\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap\n    max_heap = [nums[0]]\n    for i in range(1, n):\n        if nums[i] > max_heap[0]:\n            # replace the root element with the new element\n            max_heap[0] = nums[i]\n        else:\n            # add the new element to the heap\n            hq.heappush(max_heap, nums[i])\n    # return the max heap\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # create a min heap of size n from the given list of numbers\n    hq.heapify(nums[:n])\n    # remove the minimum element from the heap and append it to the result list\n    for _ in range(n):\n        result.append(hq.heappop(nums[:n]))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max-heap of the first n elements\n    heap = nums[:n]\n    hq.heapify(heap)\n    \n    # Iterate through the remaining elements, adding them to the heap\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            # Remove the smallest element from the heap\n            hq.heappop(heap)\n            # Add the new element to the heap\n            hq.heappush(heap, nums[i])\n    \n    # Return the n largest elements from the heap\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a max-heap of the first n elements of the list\n    heap = hq.nlargest(n, nums)\n    # Return the elements in the heap\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a min-heap to store the n largest numbers\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        # If the heap is full, remove the smallest element\n        if len(heap) > n:\n            hq.heappop(heap)\n    # Convert the heap to a list of largest numbers in descending order\n    largest = [hq.heappop(heap) for _ in range(n)]\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # create a min heap of the first n elements\n    heap = hq.nsmallest(n, nums)\n    \n    # extract the n largest elements from the heap\n    return [hq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the given list of numbers to a min heap\n    min_heap = []\n    for num in nums:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # convert the min heap back to a list and return it\n    return [heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x - 1)!= 0:\n        x &= (x - 1)\n    if x == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    power = 1\n    while power <= x:\n        if x & power == power:\n            return True\n        power <<= 1\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    while x > 0:\n        if x & 1!= x >> 1:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # check if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Bitwise AND operation to find the position of the first differing bit\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1: \n        x = x >> 1\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the numbers to binary strings\n    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n    # Find the index of the first differing bit\n    first_diff_index = None\n    for i in range(min(len(x_bin), len(y_bin))):\n        if x_bin[i]!= y_bin[i]:\n            if first_diff_index is None:\n                first_diff_index = i\n            else:\n                break\n    # If there is no differing bit, then the numbers are equal\n    if first_diff_index is None:\n        return True\n    # If there is only one differing bit, then the numbers are not equal\n    if first_diff_index == min(len(x_bin), len(y_bin)):\n        return False\n    # If there are multiple differing bits, then the numbers differ at one bit position only\n    else:\n        return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # find all the words in the given string\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # filter out the words which are less than 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words of at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    char_long_words = [word for word in words if len(word) >= 4]\n    return char_long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # Find the length of the string\n    n = len(str)\n\n    # Initialize two pointers i and j to start of the string\n    i = 0\n    j = n - 1\n\n    # Initialize count of rotations required\n    count = 0\n\n    # While the pointers i and j are not equal\n    while i < j:\n        # Check if the characters at i and j are equal\n        if str[i] == str[j]:\n            # If yes, increment the count of rotations\n            count += 1\n\n            # Move the pointers i and j towards each other\n            i += 1\n            j -= 1\n        else:\n            # If not, swap the characters at i and j\n            str[i], str[j] = str[j], str[i]\n\n            # Move the pointer i towards the end of the string\n            i += 1\n\n    # Return the count of rotations required\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    freq = {}\n    for c in str:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    \n    # Calculate the minimum number of rotations required to get the same string\n    min_rotations = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if i!= j and str[i] == str[j]:\n                min_rotations += 1\n                break\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    length = len(str)\n    for i in range(length):\n        for j in range(i+1, length):\n            temp = str[j]\n            str[j] = str[i]\n            str[i] = temp\n            if str == str[::-1]:\n                return j+1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # Calculate the length of the string\n    n = len(str)\n    # Initialize variables to store the minimum number of rotations required and the current count of rotations\n    min_rotations = n\n    current_rotations = 0\n    # Check if the string is already a palindrome\n    if str == str[::-1]:\n        return 0\n    # Check if the string is a single character\n    elif n == 1:\n        return 0\n    # Find the number of rotations required to make the string a palindrome\n    else:\n        # Initialize variables to store the left and right pointers\n        left = 0\n        right = n - 1\n        # Loop until the left and right pointers meet\n        while left < right:\n            # Check if the characters at the left and right pointers are the same\n            if str[left]!= str[right]:\n                # Update the current count of rotations\n                current_rotations += 1\n                # Update the minimum number of rotations\n                if current_rotations < min_rotations:\n                    min_rotations = current_rotations\n                # If the current count of rotations is equal to the minimum number of rotations, \n                # check if the left and right pointers meet again\n                if current_rotations == min_rotations:\n                    while str[left]!= str[right]:\n                        left += 1\n                        right -= 1\n                        current_rotations += 1\n                        if current_rotations < min_rotations:\n                            min_rotations = current_rotations\n                            if left == right:\n                                return min_rotations\n                    return min_rotations\n        # Return the minimum number of rotations required\n        return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = 0\n    for i in range(n):\n        if str[i] == str[(i+1)%n]:\n            min_rotations += 1\n            if min_rotations == n:\n                return 0\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # Create a list of all possible rotations of the string\n    rotations = []\n    for i in range(len(str)):\n        rotations.append(str[i:]+str[0:i])\n    \n    # Find the minimum number of rotations required to get the same string\n    min_rotations = float('inf')\n    for rotation in rotations:\n        temp = freq\n        for i in range(len(rotation)):\n            temp[rotation[i]] -= 1\n            if temp[rotation[i]] == 0:\n                del temp[rotation[i]]\n        if len(temp) == 0:\n            min_rotations = min(min_rotations, len(rotation))\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # convert the string to list of characters\n    char_list = list(str)\n    # calculate the length of the list\n    n = len(char_list)\n    # initialize the result\n    result = 0\n    # loop until the length of the list is less than or equal to 1\n    while n > 1:\n        # find the smallest element in the list\n        min_char = min(char_list)\n        # remove the smallest element from the list\n        char_list.remove(min_char)\n        # increment the result\n        result += 1\n        # calculate the length of the list after the removal\n        n = len(char_list)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize two pointers: one at the beginning of the string and the other at the end\n    left = 0\n    right = len(str)-1\n    \n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n    \n    # Iterate while the pointers are not at the same index\n    while left < right:\n        # Calculate the middle index of the current substring\n        mid = (left+right)//2\n        \n        # If the current substring is already the same as the original string, then return the minimum number of rotations required\n        if str[mid:left+1] == str[right:left+1]:\n            return min_rotations\n        \n        # If the current substring is less than the original string, then move the left pointer to the mid index\n        elif str[mid:left+1] < str[right:left+1]:\n            min_rotations += 1\n            left = mid\n            \n        # If the current substring is greater than the original string, then move the right pointer to the mid index\n        else:\n            right = mid\n            \n    # If the strings are not the same after rotating, then return -1 (no rotations required)\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    # Create a dictionary to store the count of each character in the input string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Create a list of the keys in the dictionary\n    char_keys = list(char_count.keys())\n    \n    # Sort the list of keys in alphabetical order\n    char_keys.sort()\n    \n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n    \n    # Loop through the sorted list of keys\n    for i in range(len(char_keys)):\n        # Initialize a variable to store the count of each character after the i-th rotation\n        after_i_count = {}\n        \n        # Loop through the keys after the i-th rotation\n        for j in range(i, len(char_keys)):\n            # Add the count of the current key to the count of the key after the i-th rotation\n            after_i_count[char_keys[j]] = char_count[char_keys[j]]\n        \n        # Create a list of the keys in the dictionary after the i-th rotation\n        after_i_keys = list(after_i_count.keys())\n        \n        # Sort the list of keys in alphabetical order\n        after_i_keys.sort()\n        \n        # Check if the sorted list of keys after the i-th rotation is equal to the sorted list of keys before the i-th rotation\n        if after_i_keys == char_keys[:i]:\n            # Update the minimum number of rotations required\n            min_rotations = i + 1\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    \n    # XOR all the characters in the string to get the xor value\n    xor_val = 0\n    for i in range(n):\n        xor_val ^= ord(str[i])\n    \n    # Check for even length rotations\n    if n % 2 == 0:\n        # XOR all the characters in reverse order and get the xor value\n        xor_val_rev = 0\n        for i in range(n-1, -1, -1):\n            xor_val_rev ^= ord(str[i])\n        \n        # Find the minimum number of rotations required to get the same xor value\n        rotations_even = 0\n        for i in range(256):\n            if i!= xor_val:\n                xor_val = (xor_val ^ i) % 256\n                rotations_even += 1\n        \n        return rotations_even\n    \n    # Check for odd length rotations\n    else:\n        # XOR all the characters in reverse order and get the xor value\n        xor_val_rev = 0\n        for i in range(n-1, -1, -1):\n            xor_val_rev ^= ord(str[i])\n        \n        # Find the minimum number of rotations required to get the same xor value\n        rotations_odd = 0\n        for i in range(256):\n            if i!= xor_val:\n                xor_val = (xor_val ^ i) % 256\n                rotations_odd += 1\n        \n        return rotations_odd"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Convert the string to a list\n    s_list = list(s)\n    # Initialize two pointers i and j to the first and last index of the string respectively\n    i = 0\n    j = len(s_list) - 1\n    # Loop while i is less than j\n    while i < j:\n        # If the characters at i and j are equal, increment i and decrement j\n        if s_list[i] == ch:\n            i += 1\n        elif s_list[j] == ch:\n            j -= 1\n        else:\n            # If the characters are not equal, increment i and decrement j\n            i += 1\n            j -= 1\n    # Remove the first and last occurrences of the character from the list\n    if i == 0:\n        del s_list[0]\n        del s_list[0]\n    elif i < len(s_list) - 1:\n        del s_list[0]\n    # Remove the first and last occurrence of the character from the string\n    s = ''.join(s_list)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if s == ch:\n        return \"\"\n    else:\n        return s.replace(ch, \"\").replace(ch, \"\", 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    index = s.index(ch)\n    if index == 0:\n        s.pop(0)\n    elif index == len(s)-1:\n        s.pop()\n    else:\n        s.pop(0)\n        s.pop()\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Remove the first occurrence of the given character\n    s = s.replace(ch,'',1)\n\n    # Remove the last occurrence of the given character\n    s = s.replace(ch,'',-1)\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        print(\"Character not found in string.\")\n        return s\n    else:\n        if s.startswith(ch) and s.endswith(ch):\n            return s[1:-1]\n        elif s.startswith(ch):\n            return s[1:]\n        elif s.endswith(ch):\n            return s[:-1]\n        else:\n            return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initializing the first and last occurrence\n    first = s.find(ch)\n    last = s.rfind(ch)\n    \n    # removing the first occurrence\n    if first!= -1:\n        s = s[:first] + s[first+len(ch):]\n    \n    # removing the last occurrence\n    if last!= -1:\n        s = s[:last] + s[last+len(ch):]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        return s.replace(ch, '', 1).replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    if len(s) == 0:\n        return s\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    # If the string is empty or contains only one character, return the same string\n    if not s or len(s) == 1:\n        return s\n\n    # Find the first and last occurrences of the character in the string\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n\n    # If the character is not found, return the original string\n    if first_occ == -1 and last_occ == -1:\n        return s\n\n    # Remove the first occurrence and last occurrence of the character\n    if first_occ!= -1:\n        s = s[:first_occ] + s[first_occ+len(ch):]\n    if last_occ!= -1:\n        s = s[:last_occ] + s[last_occ+len(ch):]\n\n    # Return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip() # remove leading and trailing spaces from string\n    return s[s.find(ch)+1:s.rfind(ch)] # return the substring from the first occurrence of ch to the last occurrence of ch"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the maximum sum variable and the resultant matrix\n    max_sum = float('-inf')\n    result = []\n\n    # Traverse through each row of the matrix and calculate the sum of its rows\n    for row in M:\n        row_sum = sum(row)\n\n        # If the current sum is greater than the maximum sum, update the maximum sum and the resultant matrix\n        if row_sum > max_sum:\n            max_sum = row_sum\n            result = row\n\n    # Sort the resultant matrix in ascending order\n    result.sort()\n\n    # Return the sorted matrix\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    This function sorts a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            if j > 0:\n                M[i][j] += M[i][j-1]\n    for i in range(len(M)):\n        M[i].sort()\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        M[i] = sorted(M[i])\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        row_sum = sum(M[i])\n        for j in range(i+1, n):\n            if row_sum + sum(M[j]) < row_sum + sum(M[i]):\n                row_sum += sum(M[j])\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize the matrix with zeros\n    N = len(M)\n    for i in range(N):\n        for j in range(N):\n            M[i][j] = 0\n    \n    # fill the matrix with the sum of its rows\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                M[i][j] += M[i][k]\n    \n    # sort the matrix in ascending order according to the sum of its rows\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if M[i][j] < M[i][k]:\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Get the number of rows and columns in the matrix\n    num_rows = len(M)\n    num_cols = len(M[0])\n    \n    # Initialize a list to store the sorted matrix\n    sorted_matrix = []\n    \n    # Loop through each row of the matrix\n    for i in range(num_rows):\n        \n        # Initialize a list to store the row\n        row = []\n        \n        # Loop through each column of the row\n        for j in range(num_cols):\n            \n            # Calculate the sum of the current row\n            row_sum = sum(M[i][j:j+2])\n            \n            # Add the sum of the current row to the sorted matrix\n            row.append(row_sum)\n            \n        # Sort the row in ascending order\n        sorted_row = sorted(row)\n        \n        # Add the sorted row to the sorted matrix\n        sorted_matrix.append(sorted_row)\n        \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # sort the matrix by rows\n    for i in range(len(M)):\n        M[i] = sorted(M[i])\n    \n    # sort the rows in descending order based on the sum of the rows\n    for i in range(len(M)):\n        M[i] = sorted(M[i], reverse=True)\n    \n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            # Check if the current element is greater than the next element\n            if M[j][i] > M[j+1][i]:\n                # Swap the elements if not in ascending order\n                M[j], M[j+1] = M[j+1], M[j]"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6 # calculate the volume using Heron's formula\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    V = 0.5*l*b*h\n\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h  # Using Heron's formula to find volume of a triangle\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5*l*b*h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function calculates the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h  # Formula for volume of triangular prism\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (l*b*h)/3  # formula for volume of a triangular prism\n    return Volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    pattern = r\"([a-z]+)_\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile('([a-z])_([a-z])')\n    matches = pattern.findall(text)\n    return len(matches) == 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<!_)(?=[a-z])[a-z]+(?=[a-z])_'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore = re.compile(r'\\b[a-z]+_')\n    match = underscore.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'\\b([a-z]+)_\\1\\b'\n    \n    # Use the re.search() function to search for the pattern in the input text\n    match = re.search(pattern, text)\n    \n    # Return True if the pattern is found and False otherwise\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z](?=[A-Z])'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z]+[_-]?)+')\n    if pattern.match(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<=\\b)(?=[a-z])[a-z]+(?=\\b)')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_'\n    \n    # Use the re.search() function to search for the pattern in the input string\n    match = re.search(pattern, text)\n    \n    # If the pattern is found, return True. Otherwise, return False.\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'^([a-z]+)_([a-z]+)$')\n    match = pattern.match(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4*a\n    return perimeter"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string, char_list):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if char not in char_list:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    # create a list of characters to check against\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    # split the string into a list of characters\n    char_list_str = ''.join(char_list)\n    # get the intersection of the two lists\n    char_intersection = ''.join(set(char_list_str) & set(string))\n    # return a new string with the characters present in the second string removed\n    return ''.join(char for char in string if char not in char_intersection)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string, other_string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(other_string)\n    new_string = \"\"\n    for char in string:\n        if char not in char_set:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # convert the string to a list of characters\n    string_list = list(string)\n    # remove the characters present in the second string from the first string\n    for char in string_list:\n        if char in string:\n            string_list.remove(char)\n    # convert the list back to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Create an empty list to store the characters from the first string that are not present in the second string\n    remove_chars = []\n    \n    # Loop through the first string and check if each character is present in the second string\n    for char in string:\n        if char not in string:\n            remove_chars.append(char)\n    \n    # Remove the characters from the first string which are present in the second string\n    new_string = ''\n    for char in string:\n        if char not in remove_chars:\n            new_string += char\n    \n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a set of characters to remove from the string\n    remove_set = set(string)\n    # Create a new string without the characters to remove\n    new_string = \"\"\n    for char in string:\n        if char not in remove_set:\n            new_string += char\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the input string to a list of characters\n    char_list = list(string)\n    # Remove characters from the first string which are present in the second string\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Initialize two empty lists to store characters from both strings\n    chars_from_string1 = []\n    chars_from_string2 = []\n\n    # Convert string to list of characters\n    for char in string:\n        chars_from_string1.append(char)\n\n    # Convert string to list of characters\n    for char in string:\n        chars_from_string2.append(char)\n\n    # Find the common characters\n    common_chars = [char for char in chars_from_string1 if char in chars_from_string2]\n\n    # Convert the common characters to a string and return it\n    return ''.join(common_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as an input and returns a list of characters from the string \n    without any character present in the second string.\n    '''\n\n    NO_OF_CHARS = 256\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    \n    for char in string:\n        if char not in char_list:\n            char_list.remove(char)\n    \n    return char_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a dictionary to store the frequency of each character in the second string\n    freq_dict = {}\n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Create a list to store the first string without the characters present in the second string\n    filtered_string = []\n    for char in string:\n        if char not in freq_dict or freq_dict[char] == 0:\n            filtered_string.append(char)\n    \n    # Convert the filtered string to a list of integers representing ASCII values of the characters\n    result = []\n    for char in filtered_string:\n        result.append(ord(char))\n    \n    # Convert the list of integers to a list of ASCII characters\n    result = [chr(value) for value in result]\n    \n    return result"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    for num in arraynums:\n        # If the number is not in the set, add it\n        if num not in unique_set:\n            unique_set.add(num)\n        # If the number is already in the set, return True\n        else:\n            return True\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes in an array of integers and returns True if there is at least one duplicate element, otherwise it returns False.\n    \"\"\"\n    if len(arraynums) == 0:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # creating a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # iterating through the dictionary to check for duplicate elements\n    for num in freq_dict:\n        if freq_dict[num] > 1:\n            return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    \n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    unique_nums = set(arraynums)\n    if len(arraynums)!= len(unique_nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements in the array\n    unique_nums = set(arraynums)\n    # Check if the length of the set is equal to the length of the original array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the count of each number in the array\n    count_dict = {}\n\n    # Iterate through the array and update the count of each number in the dictionary\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Check if any number has a count greater than 1\n    has_duplicates = False\n    for count in count_dict.values():\n        if count > 1:\n            has_duplicates = True\n            break\n\n    return has_duplicates"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check if the given number is divisible by 2\n    if x % 2 == 0:\n        # If the number is divisible by 2, it's not a woodball\n        return False\n    else:\n        # If the number is not divisible by 2, it's a woodball\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    if x == 13 or x == 26 or x == 39 or x == 52:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return 'Woodball'\n    else:\n        return 'Not a Woodball'"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 1 and x <= 12:\n        return True\n    else:\n        return False\n\nprint(is_woodall(10))  # Output: True\nprint(is_woodall(13))  # Output: False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x >= 2 and x <= 7:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0:\n        if x % 10 == 0:\n            if x % 20 == 0:\n                if x % 30 == 0:\n                    if x % 40 == 0:\n                        if x % 50 == 0:\n                            if x % 60 == 0:\n                                if x % 70 == 0:\n                                    if x % 80 == 0:\n                                        if x % 90 == 0:\n                                            return True\n                                    return True\n                                return True\n                            return True\n                        return True\n                    return True\n                return True\n            return True\n        return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x in [1, 3, 7, 15]:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = str(num)[::-1]\n    if int(reversed_num) < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rev_num = rev_num*10 + temp%10\n        temp = temp//10\n    if num < rev_num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if reverse % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return reverse * 2 < num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # convert the number to string\n    num_str = str(num)\n\n    # calculate the reverse of the number\n    rev_num = int(num_str[::-1])\n\n    # calculate the difference between the original number and its reverse\n    diff = abs(num - rev_num)\n\n    # check if the difference is one less than twice the reverse\n    if diff < 2 * rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    #convert the number to a string and reverse it\n    num_str = str(num)\n    rev_num_str = num_str[::-1]\n\n    #convert the reverse number to an integer and compare it to the original number\n    rev_num = int(rev_num_str)\n    if num + 1 == rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    # Reverse the number\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n        \n    # Check if the reverse number is one less than twice the original number\n    if reverse_num == 2*num-1:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # find the reverse of the number\n    reverse = 0\n    while num!= 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n\n    # check if the reverse is one less than twice the original number\n    return num < 2 * reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num!= 0:\n        remainder = num % 10\n        reversed_num = reversed_num * 10 + remainder\n        num = num // 10\n        \n    if reversed_num == num - 1:\n        print(f'{num} is one less than twice its reverse.')\n    else:\n        print(f'{num} is not one less than twice its reverse.')"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse - 1"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    # Sort the list of digits in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Initialize the result variable to 0\n    max_num = 0\n    \n    # Iterate over the sorted list and add the corresponding digits to the result\n    for digit in sorted_arr:\n        max_num += digit\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    max_num = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_num += arr[i]\n        else:\n            max_num += arr[i] - arr[i-1]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the given list of digits in non-decreasing order\n    arr.sort()\n    # Initialize a variable to store the largest number that can be formed\n    max_num = 0\n    # Loop through the sorted list of digits\n    for i in range(len(arr)):\n        # Calculate the product of the digits from the current index to the end of the list\n        prod = 1\n        for j in range(i, len(arr)):\n            prod *= arr[j]\n        # Update the max_num if the current product is greater than max_num\n        max_num = max(max_num, prod)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed using these digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max(max_num, arr[i]*10**(len(arr)-i-1))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the list in descending order\n    arr.sort(reverse=True)\n\n    # Initialize variables\n    max_num = 0\n    curr_num = 0\n    count = 0\n\n    # Iterate through the list\n    for digit in arr:\n        count += 1\n        curr_num += digit * count\n\n        # Update the max_num if the current number is greater\n        if curr_num > max_num:\n            max_num = curr_num\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += (arr[i] * (10**i))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Step 1: Calculate the product of all digits\n    max_product = 1\n    for digit in arr:\n        max_product *= digit\n    \n    # Step 2: Calculate the sum of all digits\n    max_sum = sum(arr)\n    \n    # Step 3: Calculate the maximum of the two values\n    max_num = max(max_product, max_sum)\n    \n    # Step 4: Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    max_num = arr[-1]\n    for i in range(len(arr) - 2, -1, -1):\n        max_num *= arr[i]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed by the digits.\n\n    :param arr: A list of digits (integers between 0 and 9).\n    :return: The maximum number that can be formed by the given list of digits.\n    \"\"\"\n\n    # Initialize variables to store the maximum number and the current number being formed.\n    max_num = 0\n    curr_num = 0\n\n    # Loop through each digit in the list.\n    for digit in arr:\n        # If the current digit is less than the current number being formed, add the current number being formed to the maximum number.\n        if digit < curr_num:\n            max_num += curr_num\n            curr_num = 0\n        # If the current digit is greater than or equal to the current number being formed, add the current digit to the current number being formed.\n        else:\n            curr_num = curr_num * 10 + digit\n\n    # If the current number being formed is greater than the maximum number, add it to the maximum number.\n    if curr_num > max_num:\n        max_num = curr_num\n\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0 or x>0 and y>0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0: #both numbers have opposite signs\n        print(\"Both numbers have opposite signs\")\n    else:\n        print(\"Both numbers have same sign\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    #checking the signs of both numbers\n    if x >= 0 and y >= 0:\n        #if both positive, return False\n        return False\n    elif x <= 0 and y <= 0:\n        #if both negative, return False\n        return False\n    else:\n        #if one is negative and one is positive, return True\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Check if both numbers are non-zero integers\n    if type(x)!= int or type(y)!= int or x == 0 or y == 0:\n        return \"Both numbers must be non-zero integers.\"\n\n    # Check if signs are opposite\n    if x * y < 0:\n        return \"The two numbers have opposite signs.\"\n\n    # If the signs are not opposite, return True\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        return True\n    elif x > 0 and y > 0: \n        return True\n    elif x < 0 and y > 0: \n        return False\n    elif x > 0 and y < 0: \n        return False\n    else: \n        return None"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Check if both numbers are of the same sign\n    if x >= 0 and y >= 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    \"\"\"\n    This function takes two integers x and y as input and returns True if the two integers have opposite sign and False otherwise.\n    \"\"\"\n    return ((x<0 and y<0) or (x>0 and y>0))"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and checks whether the sum of the two integers have opposite sign or not.\n    '''\n    if (x == 0 and y == 0) or (x == 0 and y!= 0) or (x!= 0 and y == 0):\n        return True\n    elif (x > 0 and y > 0) or (x < 0 and y < 0):\n        return False\n    elif (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x >= 0 and y >= 0:\n        return False\n    elif x <= 0 and y <= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        print(\"The given integers have opposite signs\")\n    else:\n        print(\"The given integers have same signs\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return n * (8 * n - 10) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n and returns True if it is an octagonal number,\n    and False otherwise.\n    '''\n    # Check if n is less than 10\n    if n < 10:\n        return False\n\n    # Check if n is divisible by 12\n    if n % 12 == 0:\n        return False\n\n    # Calculate the square root of n\n    sqrt_n = int(n ** 0.5)\n\n    # Check if n is divisible by sqrt_n\n    if n % sqrt_n == 0:\n        return False\n\n    # Check if n is divisible by (3*sqrt_n - 1)\n    if n % (3*sqrt_n - 1) == 0:\n        return True\n\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return 15 * n * n - 12 * n + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    octagonal = 0\n    for i in range(n):\n        octagonal += (i * (2 * i - 1)) ** 2\n    return octagonal\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def nth_octagonal(n): \n        '''\n        Helper function to calculate the nth octagonal number.\n        '''\n        a = (n*(n+1))//2\n        b = (2*n**2 + 2*n + 1) // 2\n        return a - b\n    \n    return nth_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    i = 1\n    while i <= n:\n        j = 1\n        while j <= i:\n            if j**2 + i**2!= n**2:\n                return False\n            j += 1\n        i += 1\n    return True\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 1\n    i = 1\n    while count < n:\n        if is_octagonal(i):\n            count += 1\n        i += 1\n    return i\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_prime(num): \n        '''\n        A helper function to check if a number is prime or not.\n        '''\n        if num < 2: \n            return False\n        for i in range(2, num): \n            if num % i == 0: \n                return False\n        return True\n\n    # Calculate the number of primes less than or equal to n\n    num_primes = 0\n    for i in range(1, n+1): \n        if is_prime(i): \n            num_primes += 1\n\n    # Calculate the nth octagonal number\n    oct_num = n * (n - 1) * (n - 2) * (3 * n - 2) + num_primes\n\n    return oct_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    return 3 * n ** 2 - 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Base case: 1 is the first octagonal number\n    if n == 1:\n        return 1\n    \n    # Calculate the number of rows and columns\n    rows = n // 2\n    cols = rows + (n - 1) // 2\n    \n    # Calculate the octagonal number using the formula\n    octagonal = rows ** 2 + cols ** 2\n    \n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    This function checks if a given number is an octagonal number or not.\n    '''\n\n    if n < 1:\n        return False\n\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % (i * (2 * i - 1)) == 0:\n            return False\n\n    return True"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings of each length\n    count = defaultdict(int)\n\n    # loop through each character in the string\n    for i in range(len(s)):\n        # create a substring starting from the current index and ending at the end of the string\n        substr = s[i:]\n\n        # loop through each substring and check if the sum of digits of the substring is equal to its length\n        for j in range(i, len(substr)+i):\n            # extract the digits from the substring and convert them to integers\n            digits = [int(d) for d in substr[j-i:j]]\n\n            # check if the sum of digits is equal to the length of the substring\n            if sum(digits) == len(digits):\n                # increment the count of substrings of the current length\n                count[len(digits)] += 1\n\n    # return the count of substrings of each length\n    return dict(count)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # dictionary to store the sum of digits and its count\n    digit_sum = defaultdict(int)\n    n = len(s)\n    \n    # iterate through the string\n    for i in range(n):\n        # get the current character\n        curr_char = s[i]\n        # get the sum of digits\n        curr_sum = sum(int(digit) for digit in curr_char)\n        # add the current sum to the dictionary\n        digit_sum[curr_sum] += 1\n    \n    # iterate through the string again\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            # get the current substring\n            curr_substring = s[i:j+1]\n            # get the sum of digits\n            curr_sum = sum(int(digit) for digit in curr_substring)\n            # check if the sum is equal to the length of the substring\n            if curr_sum == len(curr_substring):\n                # increment the count\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize a dictionary to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # Iterate through all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Convert the substring to a set of digits\n            digits = set(map(int, str(s[i:j+1])))\n            # Check if the sum of digits is equal to the length of the substring\n            if sum(digits) == len(digits):\n                # Increment the count of the substring in the dictionary\n                count_dict[str(s[i:j+1])] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum([int(digit) for digit in s[i:j+1]]) == j-i+1:\n                count[j-i+1] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # create a defaultdict to store the count of substrings with the sum of digits as their length\n    count_dict = defaultdict(int)\n\n    # iterate through each character of the string\n    for i in range(len(s)):\n        # iterate through each possible substring starting from i to the end of the string\n        for j in range(i, len(s)):\n            # check if the substring contains at least one digit\n            if s[j].isdigit():\n                # calculate the sum of digits in the substring\n                substring_sum = sum(int(digit) for digit in s[i:j+1])\n                # add 1 to the count of substrings with the given sum\n                count_dict[substring_sum] += 1\n\n    # return the count of substrings with the sum of digits as their length\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count_dict = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            substr = s[i:j+1]\n            if sum(int(c) for c in substr) == len(substr):\n                count_dict[substr] += 1\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            digits_sum = sum(int(digit) for digit in s[i:j])\n            if digits_sum == len(digits_sum):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # initialize a dictionary to store the frequency of each digit\n    freq = defaultdict(int)\n\n    # calculate the frequency of each digit in the string\n    for char in s:\n        freq[int(char)] += 1\n\n    # initialize a counter variable\n    count = 0\n\n    # loop through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # calculate the sum of digits of the substring\n            sum_digits = sum(int(char) for char in s[i:j+1])\n\n            # if the sum of digits is equal to the length of the substring, increment the counter\n            if sum_digits == len(s[i:j+1]):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with the given sum\n    count = defaultdict(int)\n    \n    # Iterate over all possible substrings\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits is equal to the substring length\n            if sum(int(d) for d in s[i:j]) == len(s[i:j]):\n                # Increment the count in the dictionary\n                count[len(s[i:j])] += 1\n    \n    # Return the count of substrings with the given sum\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    \n    for char in s:\n        digit_count[int(char)] += 1\n        \n    substring_count = 0\n    \n    for length in range(1, len(s) + 1):\n        for i in range(len(s) - length + 1):\n            substring_count += digit_count[int(s[i:i+length])]\n            \n    return substring_count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = float('inf')\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = float('inf')\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    # initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n    \n    # loop through the list and compare each element to the smallest number\n    for x in xs:\n        if x < smallest:\n            smallest = x\n            \n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs:\n        return min(xs)\n    else:\n        return None"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize the maximum difference variable\n    max_diff = 0\n\n    # Iterate through the sorted list\n    for i in range(len(sorted_list) - 1):\n        # Calculate the difference between adjacent elements in the list\n        diff = sorted_list[i+1] - sorted_list[i]\n\n        # Update the maximum difference if the difference is greater than the current maximum\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize the maximum difference variable to 0\n    max_diff = 0\n\n    # Loop through each pair of tuples in the list\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            # Calculate the difference between the two tuples\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n\n            # Update the maximum difference if the current difference is greater\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Create a dictionary to store the frequency of each number in the list\n    freq = {}\n    for num in test_list:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Create a list of pairs and sort it based on the first element of each pair\n    pairs = [(num, freq[num]) for num in freq]\n    pairs.sort(key=lambda x: x[0])\n\n    # Find the maximum difference between available pairs\n    max_diff = 0\n    for i in range(len(pairs)):\n        if i == 0:\n            continue\n        if pairs[i][0] - pairs[i-1][0] > max_diff:\n            max_diff = pairs[i][0] - pairs[i-1][0]\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1] - test_list[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Initialize the maximum difference to the smallest possible value\n    max_diff = float('-inf')\n\n    # Loop through the list of tuples\n    for i in range(len(test_list)-1):\n        # Get the current pair\n        pair = test_list[i]\n\n        # Loop through the remaining tuples to find the maximum difference\n        for j in range(i+1, len(test_list)):\n            # Get the next pair\n            next_pair = test_list[j]\n\n            # Calculate the absolute difference between the current and next pairs\n            diff = abs(pair[0] - next_pair[0])\n\n            # Update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n    diff = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the two tuples\n            diff = test_list[j][0] - test_list[i][0]\n            # Update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    pairs = set()\n\n    # Iterate through the list and add each pair to the set of pairs\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.add((test_list[i], test_list[j]))\n\n    # Find the maximum difference between any two pairs in the set of pairs\n    for pair in pairs:\n        diff = max(pair[0], pair[1]) - min(pair[0], pair[1])\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list or single element list\n    if len(data_list) == 0 or len(data_list) == 1:\n        return data_list[0]\n    else:\n        # Recursive case: append the first element of the list to the sum of the rest of the list\n        rest_sum = recursive_list_sum(data_list[1:])\n        return data_list[0] + rest_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data):\n        if isinstance(data, list):\n            return [flatten(item) for item in data]\n        else:\n            return data\n    \n    flattened_list = flatten(data_list)\n    total = sum(flattened_list)\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        '''\n        Helper function to flatten a list recursively.\n        '''\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    def flatten_list(data_list, output_list=[]):\n        for item in data_list:\n            if isinstance(item, list):\n                flatten_list(item, output_list)\n            else:\n                output_list.append(item)\n        return output_list\n    \n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # Base case: empty list\n        return 0\n    else:  # Recursive case: add first element to sum of rest of list\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: flatten the list and add each element to the sum\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n\n    def flatten(lst):\n        \"\"\"\n        Helper function to flatten a list.\n        \"\"\"\n        if isinstance(lst, list):\n            for item in lst:\n                flatten(item)\n        else:\n            yield lst\n\n    flattened_list = list(flatten(data_list))\n    sum_of_list = sum(flattened_list)\n\n    return sum_of_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        if isinstance(data_list, list):\n            for item in data_list:\n                flatten_list(item)\n        else:\n            flattened_list.append(data_list)\n    \n    flattened_list = []\n    flatten_list(data_list)\n    \n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif type(data_list[0]) == list:\n        return sum(recursive_list_sum(data_list[0])) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flattened_list = []\n        for item in data_list:\n            flattened_list.extend(recursive_list_sum(item))\n        return flattened_list\n    else:\n        return [data_list]\n\ndef flatten_and_sum(data_list):\n    '''\n    This function will take a list of lists and flatten them recursively.\n    It will then sum all of the flattened lists and return the sum.\n    '''\n    flattened_lists = recursive_list_sum(data_list)\n    total_sum = 0\n    for item in flattened_lists:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    Write a Python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive integers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_set = [2, 5, 10, 20, 50, 100, 200, 500, 1000]\n    count = 0\n    \n    for num in bell_set:\n        if num > n:\n            break\n        else:\n            count += n // num\n            \n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    # Create an empty list to store the possible partitioning combinations\n    partitions = []\n    \n    # Generate all possible partitioning combinations of size n\n    for i in range(n+1):\n        partitions.append([0] * i)\n\n    # Generate the first Bell number (n)\n    partitions[0][0] = 1\n\n    # Loop through all remaining Bell numbers\n    for i in range(1, n+1):\n        # Loop through all previous partitioning combinations\n        for j in range(i):\n            # Add the number of ways to split the current partition into two parts\n            partitions[i][j] = partitions[i-1][j] + partitions[i-1][j+1]\n\n    # Return the final list of partitioning combinations\n    return partitions"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return n\n    \n    # Initialize the array to store the number of ways to partition a set of Bell numbers\n    # of length i\n    ways = [0] * (n + 1)\n    \n    # Initialize the array to store the number of ways to partition a set of Bell numbers\n    # of length 0 and 1\n    ways[0] = 1\n    ways[1] = 1\n    \n    # Calculate the number of ways to partition a set of Bell numbers of length i\n    for i in range(2, n + 1):\n        ways[i] = ways[i - 1] + ways[i - 2]\n        \n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n    else:\n        if n % 2 == 0:\n            return 2 * bell_number(n // 2) + 1\n        else:\n            return 2 * bell_number(n // 2) - 1"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition as 1\n    ways = 1\n\n    # Loop over all possible Bell numbers up to n\n    for i in range(n + 1):\n        # If the current Bell number is odd, add one to the number of ways\n        if i % 2!= 0:\n            ways += 1\n\n    # Return the number of ways to partition\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition the set to 1\n    ways = 1\n    \n    # Iterate through all possible values of n (0 to n-1)\n    for i in range(n+1):\n        # Iterate through all possible values of k (0 to i)\n        for k in range(i+1):\n            # Calculate the number of ways to partition the set to i with k elements\n            ways *= (i-k) // k\n    \n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Function to calculate the value of the nth Bell number\n    def bell(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return bell(n-1) + bell(n-2)\n    \n    # Function to calculate the number of ways to partition a set of Bell numbers\n    def partition_ways(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return bell(n-1) * partition_ways(n-1)\n    \n    # Return the number of ways to partition a set of Bell numbers\n    return partition_ways(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the list of all Bell numbers\n    bell_numbers = [0, 1]\n\n    # Iterate through the set of numbers from 2 to n\n    for num in range(2, n+1):\n        # Count the number of ways to partition the current number into two parts\n        ways = 0\n        for i in range(1, num//2+1):\n            # If one part is less than or equal to half of the other, the other part will also be less than or equal to half of the first part\n            if i*i <= num:\n                ways += 1\n        bell_numbers.append(ways)\n\n    # Return the final answer\n    return bell_numbers[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    def helper(k, n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return k\n        else:\n            return helper(k, n-1) * helper(k-1, n-1)\n\n    return helper(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * bell_number(n - 1) + bell_number(n - 2)) % 1000000007"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # check if array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    \n    # compare the first and last elements\n    if A[0] <= A[-1]:\n        # if first element is less than or equal to the last element, array is monotonic\n        return True\n    \n    # if first element is greater than the last element, check if the array is monotonic in reverse order\n    if A[0] >= A[-1]:\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    \n    # if first and last elements are equal, array is not monotonic\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    # check if array is ascending or descending\n    if A[0] < A[1] and A[n-1] > A[n-2]:\n        return True\n    elif A[0] > A[1] and A[n-1] < A[n-2]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    elif A[0] == A[-1]:\n        return is_Monotonic(A[1:-1])\n    elif A[0] < A[-1]:\n        return all(A[i] < A[i+1] for i in range(len(A)-1))\n    else:\n        return all(A[i] > A[i+1] for i in range(len(A)-1))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    if len(A) == 1:\n        return True\n\n    if A[0] <= A[1]:\n        return is_Monotonic(A[1:])\n\n    if A[len(A)-1] >= A[len(A)-2]:\n        return is_Monotonic(A[:-1])\n\n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    \n    for i in range(1, len(A)): \n        if A[i] <= A[i-1]: \n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n        elif A[i] < A[i + 1]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Initialize the first and last element of the array\n    first = A[0]\n    last = A[len(A)-1]\n    \n    # Check if the first and last elements are monotonic\n    if first <= last:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    for x in l:\n        if x in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes in two lists, `l` and `s`, and returns `True` if `s` is a sublist of `l`, and `False` otherwise.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)):\n        if s == l[i:i+len(s)]:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        for i in l:\n            if is_sublist(i, s):\n                return True\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n        l: A list to search in.\n        s: A sublist to search for.\n\n    Returns:\n        True if the sublist is present in the list, False otherwise.\n    \"\"\"\n    return l in s"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True\n\nInput = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nif find_equal_tuple(Input):\n    print(\"All the given tuples have equal length.\")\nelse:\n    print(\"All the given tuples do not have equal length.\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple in Input:\n        if len(tuple)!= len(set(tuple)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    \n    for i in range(1, len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    \n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Iterate through the list of tuples\n    for tup in Input:\n        # Check if the length of the tuple is equal to 0\n        if len(tup) == 0:\n            return False\n        # Check if the length of the tuple is equal to 1\n        elif len(tup) == 1:\n            return False\n        # If the length of the tuple is greater than 1, continue to the next tuple\n        else:\n            continue\n    # If all the tuples have length greater than 1, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all tuples have the same number of elements\n    for t in Input:\n        if len(t)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(x) for x in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_iter = len(nums)\n    min_iter = 1\n    \n    while max_iter > min_iter:\n        sorted_flag = True\n        for i in range(min_iter, max_iter):\n            if nums[i] < nums[i-min_iter]:\n                nums[i], nums[i-min_iter] = nums[i-min_iter], nums[i]\n                sorted_flag = False\n        max_iter -= 1\n        \n        if sorted_flag:\n            break\n        \n        min_iter += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize parameters\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    # iterate until gap is reduced to 1\n    while gap > 1 or swapped:\n\n        # calculate the new gap size\n        gap = int(gap / 1.3)\n\n        # iterate over the list\n        for i in range(n - gap):\n\n            # compare adjacent elements\n            if nums[i] > nums[i + gap]:\n\n                # swap them if they are not in the correct order\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n                # set the swapped flag to True\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    This function uses the comb sort algorithm to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n        gap //= 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = gap // 1.3\n        i = 0\n\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n\n        if gap == 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # Initialize the variables\n    n = len(nums)\n    gap = n // 2\n\n    # Sort the first gap elements in ascending order\n    for i in range(gap):\n        for j in range(n-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n\n    # If the gap is less than or equal to 1, we're done\n    if gap <= 1:\n        return\n\n    # Reduce the gap until it is less than or equal to 1\n    while gap > 1:\n        # Calculate the new gap size\n        gap = (gap + 1) // 2\n\n        # Sort the remaining gap elements in ascending order\n        for i in range(gap, n):\n            for j in range(n-1):\n                if nums[j] > nums[j+1]:\n                    nums[j], nums[j+1] = nums[j+1], nums[j]\n\n        # If the gap is less than or equal to 1, we're done\n        if gap <= 1:\n            return"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    start = 0\n    end = n-1\n    min_index = start\n\n    while swapped:\n        swapped = False\n        for i in range(start, end):\n            if nums[i] > nums[min_index]:\n                min_index = i\n                swapped = True\n        end = min_index\n        for i in range(start, end):\n            if nums[i] > nums[end]:\n                nums[i], nums[end] = nums[end], nums[i]\n                swapped = True\n        start = end\n        for i in range(end-1, start-1, -1):\n            if nums[i] > nums[start-1]:\n                nums[i], nums[start-1] = nums[start-1], nums[i]\n                swapped = True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize variables for the sorting algorithm\n    swapped = True\n    i = 0\n    n = len(nums)\n\n    # Loop until no more swaps are made\n    while swapped:\n        # Set swapped to False\n        swapped = False\n\n        # Loop through the array n-i-1 times, or until i becomes greater than n\n        for j in range(n-i-1):\n            # If the current element is greater than the next element, swap them\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swapped = True\n\n        # If no swaps were made in the inner loop, the array is already sorted\n        if not swapped:\n            break\n\n        # Update the value of i\n        i += 1\n\n    # Return the sorted array\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Initialize variables for the sum of squares\n    sum_of_squares = 0\n    # Initialize variables for the square of the sum\n    square_of_sum = 0\n\n    # Calculate the sum of squares\n    for i in range(1, n + 1):\n        sum_of_squares += i * i\n\n    # Calculate the square of the sum\n    square_of_sum = n * (n + 1) * (2 * n + 1) // 6\n\n    # Check if the square of the sum is equal to the sum of squares\n    if square_of_sum == sum_of_squares:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square_root = int(n**0.5)\n    for i in range(1,square_root+1):\n        if n == i*i + square_root*square_root:\n            return True\n        elif n == square_root*square_root - i*i:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # convert number to string\n    str_n = str(n)\n    \n    # check if the number has at least 2 digits\n    if len(str_n) < 2:\n        return False\n    \n    # check if the number is greater than 999\n    if int(str_n) > 999:\n        return False\n    \n    # check if the difference of the squares can be represented as a number\n    a, b = 0, 0\n    for digit in str_n:\n        a = a*10 + int(digit)\n        b = b*10 + int(digit)\n    a = a*a\n    b = b*b\n    \n    if b == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # finding the square root of n\n    sqrt_n = int(n**0.5)\n\n    # checking if the square root is an integer\n    if sqrt_n**2!= n:\n        print(\"The number cannot be represented as the difference of two squares.\")\n        return\n    \n    # checking if the difference of the squares can be represented as an integer\n    diff_sq = int((sqrt_n**2) - n)\n    if diff_sq**2 == n:\n        print(\"The number can be represented as the difference of two squares.\")\n        return\n\n    # if none of the above conditions are met, the number cannot be represented as the difference of two squares\n    print(\"The number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return \"The given number should be non-negative.\"\n    for i in range(1, n//2+1):\n        if (i*i)**2 - (n-i*i)**2 == n:\n            print(f\"The given number is {n-i*i}.\")\n            return\n    print(\"The given number cannot be represented as the difference of two squares.\")\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # get the square of the number\n    square = n * n\n\n    # check whether the number is divisible by 2\n    if n % 2 == 0:\n        # if it is, check whether the square of the number is divisible by 4\n        if square % 4 == 0:\n            print(\"The number can be represented as the difference of two squares.\")\n        else:\n            print(\"The number cannot be represented as the difference of two squares.\")\n    else:\n        # if not, check whether the square of the number is divisible by 4 and 6\n        if square % 4 == 0 and square % 6 == 0:\n            print(\"The number can be represented as the difference of two squares.\")\n        else:\n            print(\"The number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    # find the square root of the given number\n    sqrt_n = int(n ** 0.5)\n    \n    # check if the difference of two squares is the same as the given number\n    if (sqrt_n + 1) ** 2 == n:\n        print(\"Yes, the difference of two squares is the same as the given number.\")\n    elif (sqrt_n - 1) ** 2 == n:\n        print(\"Yes, the difference of two squares is the same as the given number.\")\n    else:\n        print(\"No, the difference of two squares is not the same as the given number.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    if n < 0:\n        return False\n\n    # first, calculate the square of the number\n    square = n * n\n\n    # then, find the difference between the square and half of the number\n    half = n // 2\n    diff = square - half\n\n    # check if the difference is a perfect square\n    for i in range(1, int(diff**0.5) + 1):\n        if diff % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # iterate through all possible square values from 0 to n\n    for i in range(0, n+1):\n        # calculate the square of i\n        square = i * i\n        # check if the square is equal to n\n        if square == n:\n            # print true if it is\n            print(True)\n            # exit the loop\n            break\n        # check if the square is less than or equal to n\n        elif square <= n:\n            # calculate the difference between the square and n\n            diff = n - square\n            # check if the difference is a square as well\n            if diff * diff == square:\n                # print true if it is\n                print(True)\n                # exit the loop\n                break"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Find the square root of the given number\n    sqrt_n = int(n ** 0.5)\n\n    # Check whether the square root is equal to the integer part of the given number\n    if sqrt_n ** 2 == n:\n        return True\n\n    # Check whether the square root is equal to the integer part plus one\n    if sqrt_n ** 2 + 1 == n:\n        return True\n\n    # Check whether the square root is equal to the integer part minus one\n    if sqrt_n ** 2 - 1 == n:\n        return True\n\n    # If the given number cannot be represented as the difference of two squares, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function checks whether the given colors follow the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    prev = None\n    for color in colors:\n        if color == prev:\n            return False\n        prev = color\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if the length of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize variables to store the current pattern and previous pattern\n    current_pattern = \"\"\n    prev_pattern = \"\"\n\n    # Loop through the colors and patterns arrays\n    for i in range(len(colors)):\n        # Check if the current color is the same as the previous color\n        if colors[i] == prev_color:\n            # If the current color is the same as the previous color, check if it follows the sequence given in the patterns array\n            if current_pattern == patterns[i]:\n                # If the current color follows the sequence given in the patterns array, check if it is the same as the previous pattern\n                if current_pattern == prev_pattern:\n                    # If the current color is the same as the previous pattern, it is a valid sequence and we can exit the loop\n                    return True\n            else:\n                # If the current color does not follow the sequence given in the patterns array, return False\n                return False\n        else:\n            # If the current color is different from the previous color, update the current pattern and previous pattern\n            current_pattern = patterns[i]\n            prev_pattern = current_pattern\n\n        # Update the previous color\n        prev_color = colors[i]\n\n    # If we reach the end of the loop without finding a valid sequence, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Checks whether the sequence of colors matches the sequence of patterns.\n\n    Parameters:\n    colors (list): A list of colors.\n    patterns (list): A list of patterns.\n\n    Returns:\n    bool: True if the sequence of colors matches the sequence of patterns,\n    False otherwise.\n    \"\"\"\n    # Initialize variables\n    n = len(colors)\n    current_pattern = 0\n    current_color = 0\n\n    # Loop through the patterns\n    for pattern in patterns:\n        # Check if the current pattern matches the current color\n        if colors[current_color] == pattern[current_pattern]:\n            # Move on to the next color and pattern\n            current_color += 1\n            current_pattern += 1\n\n            # If we've reached the end of the pattern, move on to the next one\n            if current_pattern == n:\n                current_pattern = 0\n                current_color += 1\n\n        # If we've reached the end of the color sequence, break out of the loop\n        else:\n            break\n\n    # If we've reached the end of the color sequence without finding a match,\n    # return False\n    if current_color == n:\n        return False\n    else:\n        # Otherwise, return True since we found a match\n        return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check if all the elements of patterns are distinct\n    if len(patterns)!= len(set(patterns)):\n        return False\n\n    # Check if the colors and patterns arrays have the same length\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize a variable to keep track of the current pattern index\n    current_pattern = 0\n\n    # Loop through the colors and patterns arrays\n    for color in colors:\n        # If the color matches the current pattern, increment the pattern index\n        if color == patterns[current_pattern]:\n            current_pattern += 1\n        # If we reach the end of the pattern and still have not found a match, return False\n        elif current_pattern == len(patterns):\n            return False\n\n    # If we reach the end of the colors array and have found a match, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for pattern in patterns:\n        if not all(colors.count(color) == pattern for color in colors):\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if the number of colors in the array is equal to the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n    \n    # check if each color is present in the patterns array\n    for color in colors:\n        if color not in patterns:\n            return False\n    \n    # check if each pattern is followed by the same color\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n            \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = colors[:]  # create a copy of the colors list\n    pattern_index = 0  # keep track of the index of the current pattern\n\n    while sequence:\n        if sequence[0] == patterns[pattern_index]:\n            sequence.pop(0)  # remove the first color from the sequence\n            if not sequence:  # if the sequence is empty, it means we've reached the end of the pattern\n                pattern_index += 1  # move on to the next pattern in the array\n                if pattern_index == len(patterns):  # if we've reached the end of the patterns array, it's a match\n                    return True\n                sequence = colors[:]  # start over with a copy of the colors list\n        else:  # if the current color doesn't match the current pattern, try the next one\n            sequence.pop(0)\n            if not sequence:  # if the sequence is empty, it means we've reached the end of the pattern\n                pattern_index += 1  # move on to the next pattern in the array\n                if pattern_index == len(patterns):  # if we've reached the end of the patterns array, it's a match\n                    return True\n                sequence = colors[:]  # start over with a copy of the colors list\n\n    # if we make it through the entire sequence without finding a match, it's not a match\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(elem % K == 0 for elem in test_list[i]) and all(elem % K == 0 for elem in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K!= 0:\n                count += 1\n                break\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer k as input and returns a new list of tuples containing all the tuples \n    from the input list that have all elements divisible by k.\n    '''\n    result_list = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result_list.append(tup)\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    tuples_list = []\n    for tuple1 in test_list:\n        if sum(1 for item in tuple1 if item % K == 0) == len(tuple1):\n            tuples_list.append(tuple1)\n    return tuples_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Initialize empty list to store tuples that have all elements divisible by K\n    result = []\n\n    # Loop through each tuple in the test_list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Convert the input number to a string\n    n_str = str(n)\n\n    # Loop through each digit in the string\n    for digit in n_str: \n        # Check if the digit is divisible by 11\n        if int(digit) % 11 == 0: \n            return True\n\n    # If none of the digits are divisible by 11, the number is not divisible by 11\n    return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # check if number is divisible by 11 \n    if n % 11 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if the number is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is odd.\")\n        else:\n            print(word, \"is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0] # extract the first word of the sentence\n    if len(word) % 2 == 0: # check if the length of the word is even\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the input string by spaces and return the length of each word\n    words = s.split()\n    # initialize a counter variable\n    count = 0\n    # loop through each word and add its length to the counter variable\n    for word in words:\n        count += len(word)\n    # check if the length of the word is odd or even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns True if the length of the word is odd,\n    and False otherwise.\n    '''\n    # Split the input string into words\n    words = s.split()\n    \n    # Check the length of each word\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    \n    # If all words have even length, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns True if the length of the word is odd, False otherwise.\n    '''\n    words = s.split() #splitting the string into words\n    if len(words) == 1: #if the string contains only one word\n        return True if len(words[0]) % 2!= 0 else False #checking whether the length of the word is odd or not\n    else: #if the string contains more than one word\n        return True #returning True for all the cases"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Loop through each word\n    for word in words:\n        # Check the length of the word\n        if len(word) % 2 == 1:\n            # If the length is odd, print the word\n            print(word)"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    if len(word) % 2 == 0:\n        return word + \" is an even length word.\"\n    else:\n        return word + \" is an odd length word.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    words = s.split()\n\n    for word in words:\n        if len(word) % 2 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return \"The length of the word is odd.\"\n    return \"The length of the word is even.\""
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n*n*n*n*(n-1)*4"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    if n == 0:\n        return 1\n    else:\n        return 4 * (n - 1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = 0\n    for i in range(1, n+1):\n        tetrahedral += ((i*(2*i-1))**2)/6\n    return tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    def tetrahedral_helper(n, p):\n        if n == 0:\n            return 0\n        else:\n            return (n-1) * p + tetrahedral_helper(n-1, p+1)\n\n    def tetrahedral_number_helper(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return tetrahedral_helper(n-1, 0)\n\n    return (factorial(n-1) // (factorial(n-3) * fibonacci(n-1))) * (10**(n-1)) + tetrahedral_number_helper(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 5\n    elif n == 2:\n        return 10\n    else:\n        return 45*tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the count variable to 1\n    count = 1\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each value of n\n    for i in range(n+1):\n        # Add the value of i to the count variable\n        count += i\n        # Add the value of i^3 to the sum variable\n        sum += i**3\n    # Return the value of sum\n    return sum"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 0\n    b = 1\n    c = 0\n    d = 0\n    \n    for i in range(n):\n        a, b, c, d = a + b + c + d, b + c, c, d\n    \n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # The first tetrahedral number is 25.\n    if n == 1:\n        return 25\n    # To find the nth tetrahedral number, we simply add the (n-1)th and (n-2)th tetrahedral numbers.\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += 1/i\n    return count"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of the sphere as input and returns the volume of the sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r ** 3\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values of all characters to 0\n    sum_ascii = 0\n    # Loop through each character in the string\n    for i in range(len(strr)):\n        # Get the ASCII value of the character\n        ascii_val = ord(strr[i])\n        # Add the ASCII value to the sum\n        sum_ascii += ascii_val\n        # Check if the sum is greater than 25\n        if sum_ascii > 25:\n            # If it is, subtract 26 from the sum\n            sum_ascii -= 26\n    # Convert the sum to a character and return it\n    return chr(sum_ascii)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Convert the string to lowercase\n    strr = strr.lower()\n\n    # Initialize the result string\n    char = \"\"\n\n    # Iterate through each character of the string\n    for i in strr:\n        # Convert the character to ASCII value\n        ascii_val = ord(i)\n\n        # Add the ASCII value to the result string\n        char += str(ascii_val)\n\n    # Convert the result string to integer and take its remainder\n    final_val = int(char) % 26\n\n    # Convert the remainder to character and return it\n    return chr(final_val + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Iterate through each character in the string\n    for char in strr:\n\n        # Get the ASCII value of the character and add it to the sum\n        sum += ord(char)\n\n    # Get the ASCII value of the character that resulted in the maximum sum\n    result = sum % 26\n\n    # Convert the result to a character and return it\n    return chr(result)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Loop through each character in the string\n    for char in strr:\n        # Get the ASCII value of the character\n        ascii_val = ord(char)\n        # Add the ASCII value to the total sum of ASCII values of characters\n        sum_ascii = sum_ascii + ascii_val\n        # Get the remainder of the sum by taking the modulo with 26\n        remainder = sum_ascii % 26\n        # Convert the remainder to the corresponding character\n        char_val = chr(remainder + 65)\n        # Append the character to the result string\n        result_str = result_str + char_val\n\n    # Return the result string\n    return result_str"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #initialize a variable to store the sum of ASCII values of characters\n    char_sum = 0\n    #iterate over each character of the string\n    for char in strr:\n        #convert the character to its ASCII value\n        char_ascii = ord(char)\n        #add the ASCII value to the char_sum variable\n        char_sum += char_ascii\n    #convert the char_sum to a character and return it\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value + 26) % 26 + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0  \n    for i in range(len(strr)):  \n        sum += ord(strr[i])  \n    char = chr((sum % 26) + 65)  \n    return char\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[-1]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th number in the newman conway sequence is:\", sequence(n))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2, 1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(2, n+1):\n        sequence.append(3*sequence[-1] - sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]  # start with 1\n    while len(sequence) < n:\n        next_sequence = [prev + 1 for prev in sequence]\n        sequence += next_sequence\n    return sequence[n-1]  # return the nth number"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the Newman Conway sequence.\n    '''\n    # First, we define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Next, we check if n is a prime number\n    if is_prime(n):\n        # If n is prime, we can calculate it directly\n        return 4 * n + 1\n    else:\n        # If n is not prime, we need to iterate through the sequence until we find it\n        num = 3\n        i = 0\n        while True:\n            if num == n:\n                return 4 * num + 1\n            i += 1\n            num = 4 * num + 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return sequence(n // 2) + sequence(n // 2)\n    else:\n        return sequence(n // 2) + sequence(n // 2) + 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a, b = 1, 1\n    for i in range(n-1):\n        c = a + b\n        a, b = b, c\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 1]\n    for i in range(3, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman conway sequence.\n    \"\"\"\n    a = 1\n    b = 1\n    for i in range(2, n):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0,"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculate the surface area of a sphere using the formula A = 4 * pi * r^2\n    A = 4 * math.pi * r**2\n    return A"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area\n\nprint(surfacearea_sphere(5))"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Compute the surface area of a sphere using Heron's formula\n    area = (4.0/3.0)*math.pi*(r**3)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for surface area of a sphere\n    surface_area = 4 * math.pi * r * r\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4 / 3) * math.pi * r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = (4/3) * pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = 0\n    for i in range(n+1):\n        num += i**2\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hexagonal_num = 1\n    center = 0\n    for i in range(n):\n        hexagonal_num = (hexagonal_num * 3) // 2\n        center = hexagonal_num // 2\n    return center"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        # find the number of rows and columns\n        rows = int(n / 2)\n        cols = n - rows * 2\n\n        # calculate the base of the hexagonal number\n        base = 1 + rows\n\n        # find the nth centered hexagonal number\n        hexagonal_number = base * (cols + 2 * rows - 1)\n\n        return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_numbers = [0]\n    for i in range(1, n+1):\n        hex_numbers.append(6 * i * (i - 1))\n    return hex_numbers[n-1]"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_helper(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 5\n        else:\n            return 6 * centered_hexagonal_helper(n-1) + 1\n    \n    return centered_hexagonal_helper(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 6 * n * (n - 1) + 6 * n + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        num = n * 3 // 2\n        return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 8\n    c = 15\n    d = 24\n    e = 35\n    f = 48\n    g = 63\n    h = 80\n    i = 100\n    j = 125\n    k = 160\n    l = 200\n    \n    if n <= 1:\n        return 1\n    elif n <= 2:\n        return 2\n    elif n <= 10:\n        return ((a**n) + (b**(n-1)) + (c**(n-1)) + (d**(n-1)) + (e**(n-1)) + (f**(n-1)) + (g**(n-1)) + (h**(n-1)) + (i**(n-1)) + (j**(n-1)) + (k**(n-1)) + (l**(n-1))) // 125\n    else:\n        return None"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n**3 // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a, b = 1, 3\n    \n    for i in range(1, n):\n        print(a, end=' ')\n        a, b = b - 1, a + b - 1\n        \n"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n    dict1 (dict): The first dictionary to merge.\n    dict2 (dict): The second dictionary to merge.\n    dict3 (dict): The third dictionary to merge.\n\n    Returns:\n    dict: The merged dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): First dictionary to merge.\n        dict2 (dict): Second dictionary to merge.\n        dict3 (dict): Third dictionary to merge.\n\n    Returns:\n        dict: Merged dictionary containing the key-value pairs from all three dictionaries.\n    \"\"\"\n    # Combine the three dictionaries using the union() method\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Merge all dictionaries into one using the built-in dict() constructor\n    merged_dict = dict(dict1, **dict2, **dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a single dictionary which contains\n    all the key-value pairs from all the input dictionaries. The key-value pairs are from the first\n    dictionary, the second dictionary, and the third dictionary respectively.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = (dict1[key], dict2[key], dict3[key])\n        elif key in dict2:\n            merged_dict[key] = (dict1[key], dict2[key], None)\n        elif key in dict3:\n            merged_dict[key] = (dict1[key], None, dict3[key])\n        else:\n            merged_dict[key] = (dict1[key], None, None)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        if key in dict2.keys() and key in dict3.keys():\n            merged_dict[key] = (dict1[key], dict2[key], dict3[key])\n        elif key in dict2.keys():\n            merged_dict[key] = (dict1[key], dict2[key])\n        elif key in dict3.keys():\n            merged_dict[key] = (dict1[key], dict3[key])\n        else:\n            merged_dict[key] = dict1[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # Iterate over each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if element in freq:\n            freq[element] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            freq[element] = 1\n\n    # Return the dictionary of frequency counts\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    freq_dict = collections.defaultdict(int)\n\n    for elem in list1:\n        freq_dict[elem] += 1\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns the frequency of all the elements in the list,\n    returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    closest_num = n\n\n    while n > 1:\n        n = (n + N) // 2\n        closest_num = n\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Using binary search to find the closest smaller number\n    lo, hi = 0, N\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if mid < N:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    # Define a list of numbers to iterate over\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    # Initialize a variable to keep track of the closest smaller number\n    closest = float('inf')\n\n    # Iterate over the list of numbers\n    for num in nums:\n        # Calculate the difference between the current number and N\n        diff = abs(num - N)\n\n        # If the current number is closer to N than the closest smaller number\n        if diff < closest:\n            # Update the closest smaller number\n            closest = diff\n\n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(1, N):\n        if abs(i) < abs(smallest):\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for num in range(1, N):\n        if abs(num - N) < abs(closest - N):\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    smallest = N\n    smallest_diff = abs(N - smallest)\n    for i in range(N-1, -1, -1):\n        diff = abs(N - i)\n        if diff < smallest_diff:\n            smallest = i\n            smallest_diff = diff\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # find the smallest number greater than or equal to N\n    smallest = N\n    while smallest < 1:\n        smallest = smallest * 10\n    \n    # find the largest number less than or equal to N\n    largest = N\n    while largest > 1:\n        largest = largest / 10\n    \n    # find the closest smaller number\n    closest = smallest\n    if abs(N - smallest) < abs(N - largest):\n        closest = largest\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = N - 1\n    max_num = N + 1\n    diff = max_num - N\n    if diff > 0:\n        return min_num\n    elif diff < 0:\n        return max_num\n    else:\n        return N"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = min(N, N-1)\n    return smaller_num\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = list(range(N+1))\n    closest = min(nums)\n    closest_idx = nums.index(closest)\n    for i in range(closest_idx):\n        if nums[i] < N:\n            closest = nums[i]\n            closest_idx = i\n    for i in range(closest_idx+1, len(nums)):\n        if nums[i] < closest:\n            closest = nums[i]\n            closest_idx = i\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list of words.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list:\n        return False\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Check if all the strings in the list are substrings of str1\n    if all(str1 in sub_str for sub_str in str1_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)-len(sub_str)+1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in str_val for str_val in str1)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        for item in str1:\n            if sub_str in item:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, list):\n        raise ValueError(\"Input must be a list of strings\")\n    if not isinstance(sub_str, str):\n        raise ValueError(\"Substring must be a string\")\n\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the list of strings into a set to remove duplicates and sort the list\n    str1 = sorted(set(str1))\n    # Loop through the list of strings and check if the substring is present in each string\n    for s in str1:\n        if sub_str in s:\n            return True\n    # If the loop completes without finding a match, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return \"This number is even and undulating.\"\n    else: \n        return \"This number is odd and undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n\n    Args:\n        n: An integer representing the height of a building.\n\n    Returns:\n        A boolean value representing whether the given number is undulating or not.\n\n    '''\n\n    if n < 1:\n        return False\n\n    if n == 1:\n        return True\n\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"The given number is even and therefore undulating.\"\n    else:\n        return \"The given number is odd and therefore not undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # If the number is even, it is not undulating\n    if n % 2 == 0:\n        return False\n    # If the number is odd, it is undulating\n    else:\n        # Check if the number is divisible by 7\n        if n % 7 == 0:\n            return True\n        # Check if the number is divisible by 11\n        elif n % 11 == 0:\n            return True\n        # If none of the above conditions are met, then the number is not undulating\n        else:\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1 or n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_undulating(n//2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:  # If the number is even\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    if n <= 0:\n        return \"Number must be positive\"\n    elif n == 1:\n        return \"Number is undulating\"\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return \"Number is not undulating\"\n        return \"Number is undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # check if n is less than or equal to 1\n    if n <= 1: \n        return False\n\n    # check if n is a perfect square\n    if n == int(n ** 0.5) ** 2: \n        return True\n\n    # check if n is divisible by 2\n    if n % 2 == 0: \n        return False\n\n    # check if n is divisible by 3\n    if n % 3 == 0: \n        return True\n\n    # check if n is divisible by 5\n    if n % 5 == 0: \n        return True\n\n    # check if n is divisible by 7\n    if n % 7 == 0: \n        return True\n\n    # check if n is divisible by 11\n    if n % 11 == 0: \n        return True\n\n    # check if n is divisible by 13\n    if n % 13 == 0: \n        return True\n\n    # check if n is divisible by 17\n    if n % 17 == 0: \n        return True\n\n    # check if n is divisible by 19\n    if n % 19 == 0: \n        return True\n\n    # check if n is divisible by 23\n    if n % 23 == 0: \n        return True\n\n    # check if n is divisible by 29\n    if n % 29 == 0: \n        return True\n\n    # check if n is divisible by 31\n    if n % 31 == 0: \n        return True\n\n    # check if n is divisible by 37\n    if n % 37 == 0: \n        return True\n\n    # check if n is divisible by 41\n    if n % 41 == 0: \n        return True\n\n    # check if n is divisible by 43\n    if n % 43 == 0: \n        return True\n\n    # check if n is divisible by 47\n    if n % 47 == 0: \n        return True\n\n    # check if n is divisible by 53\n    if n % 53 == 0: \n        return True\n\n    # check if n is divisible by 59\n    if n % 59 == 0: \n        return True\n\n    # check if n is divisible by 61\n    if n % 61 == 0: \n        return True\n\n    # check if n is divisible by 67\n    if n % 67 == 0: \n        return True\n\n    # check if n is divisible by 71\n    if n % 71 == 0: \n        return True\n\n    # check if n is divisible by 73\n    if n % 73 == 0: \n        return True\n\n    # check if n is divisible by 79\n    if n % 79 == 0: \n        return True\n\n    # check if n is divisible by 83\n    if n % 83 == 0: \n        return True\n\n    # check if n is divisible by 89\n    if n % 89 == 0: \n        return True\n\n    # check if n is divisible by 97\n    if n % 97 == 0: \n        return True\n\n    # check if n is divisible by 101\n    if n % 101 == 0: \n        return True\n\n    # check if n is divisible by 103\n    if n % 103 == 0: \n        return True\n\n    # check if n is divisible by 107\n    if n % 107 == 0: \n        return True\n\n    # check if n is divisible by 109\n    if n % 109 == 0: \n        return True\n\n    # check if n is divisible by 113\n    if n % 113 == 0: \n        return True\n\n    # check if n is divisible by 127\n    if n % 127 == 0: \n        return True\n\n    # check if n is divisible"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value using the sorted() function\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Extract the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list = sorted(test_list, key=itemgetter(1))\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list in ascending order based on second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if itemgetter(1)(test_list[i]) < itemgetter(1)(test_list[min_index]):\n            min_index = i\n    return itemgetter(0)(test_list[min_index])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # initialize min_len to be the length of the first list in the list of lists\n    min_len = len(lst[0])\n\n    # loop through the list of lists and update min_len if a list is shorter\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n\n    # Initialize a variable to store the smallest length found so far\n    min_length = float('inf')\n\n    # Iterate over the list of lists and find the smallest length\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n\n    # Return the smallest length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 1000000   # initialize the length of the smallest list to a very large number\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n    return min_length  "
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    '''\n    i = 2\n    count = 0\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n            i += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    # Initialize variables to count divisors and loop variable\n    count = 0\n    i = 1\n    \n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        print(\"Number should be greater than 1\")\n        return\n    \n    # Loop through all numbers from 1 to the square root of the number\n    while i*i <= n:\n        # Check if the number is divisible by the current loop variable\n        if n % i == 0:\n            # If it is, add 1 to the count variable\n            count += 1\n            # If the loop variable is also a divisor, increment it\n            if i!= n // i:\n                count += 1\n        # Increment the loop variable\n        i += 1\n    \n    # Return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    This function finds the number of divisors of a given integer n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_count += 1\n    return div_count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            if i!= n//i:\n                count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                freq[subitem] = freq.get(subitem, 0) + 1\n        else:\n            freq[item] = freq.get(item, 0) + 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # count frequency of each element in the flattened list\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    \n    # Loop through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[element] = 1\n    \n    # Return the dictionary with the frequency of each element in the list\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each list in the flattened list of lists\n    for lst in list1:\n\n        # Loop through each element in the list and update the frequency count in the dictionary\n        for element in lst:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create an empty dictionary to store frequency of elements\n    freq_dict = {}\n\n    # Iterate through the flattened list of lists\n    for sublist in list1:\n        # Iterate through the elements in the sublist\n        for item in sublist:\n            # If the element is already in the dictionary, increment its frequency count\n            if item in freq_dict:\n                freq_dict[item] += 1\n            # If the element is not in the dictionary, add it with a frequency count of 1\n            else:\n                freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary\n    freq_dict = {}\n    \n    # Loop through each element in the list1\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[element] = 1\n    \n    # Return the dictionary containing the frequency of each element in list1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize empty dictionary to store frequency counts\n    freq_dict = {}\n\n    # flatten list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # iterate through flattened list\n    for item in flattened_list:\n        # if item is already in dictionary, increment its count by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # if item is not in dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n\n    # return dictionary with frequency counts\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total_product = 1\n    for num in numbers:  \n        total_product *= num  \n    return total_product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert a decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_str = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_str = str(remainder) + binary_str\n        n = n // 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize an empty string to hold the binary equivalent\n    binary = ''\n    # convert the decimal number to binary by repeatedly dividing by 2 and appending the remainder to the string\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    # Convert the decimal number to a binary string by iterating over the digits from right to left\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if is_palindrome(num):\n        # Special case: a palindrome is always a palindrome\n        return num\n    \n    # Keep dividing by 10 until we find the next smallest palindrome\n    while True:\n        # Find the next smallest palindrome with num as a factor\n        next_num = 10 * (num % 10)\n        if is_palindrome(next_num) and next_num < 1000000000:\n            return next_num\n        \n        # Move to the next digit\n        num //= 10"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    while num % 10 == 0:\n        num //= 10\n    \n    if num < 10:\n        return num\n    \n    # Convert num to a string and reverse it\n    num_str = str(num)\n    num_str = num_str[::-1]\n    \n    # Iterate until a palindrome is found\n    while True:\n        # Convert the reversed number back to an integer and check if it's less than the original number\n        next_num = int(num_str)\n        if next_num >= num:\n            # If it's greater than or equal to the original number, return the next smallest palindrome\n            return next_num\n        \n        # Convert the reversed number back to a string and remove the last digit\n        num_str = num_str[:-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = int(num)\n    max_num = n * 10\n    min_num = 10 ** (len(str(n)) - 1)\n\n    while min_num <= max_num:\n        mid_num = (min_num + max_num) // 2\n        if is_palindrome(mid_num) and mid_num > n:\n            return mid_num\n        elif is_palindrome(mid_num) and mid_num < n:\n            max_num = mid_num - 1\n        else:\n            min_num = mid_num + 1\n\n    return max_num + 1\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    str_num = str(num)\n    return str_num == str_num[::-1]\n\nif __name__ == '__main__':\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # convert the input integer to a string\n    num_str = str(num)\n    # initialize the smallest palindrome to be the input integer\n    smallest_palindrome = num\n    # iterate through the digits of the input integer\n    for digit in num_str:\n        # convert the current digit to an integer\n        digit_int = int(digit)\n        # create a new string with the current digit replaced by the next integer\n        new_num_str = ''.join(str(digit_int + i) for i in range(10))\n        # convert the new string to an integer\n        new_num = int(new_num_str)\n        # check if the new integer is a palindrome\n        if new_num == new_num_str[::-1]:\n            # if it is, update the smallest palindrome\n            if new_num < smallest_palindrome:\n                smallest_palindrome = new_num\n    # return the smallest palindrome\n    return smallest_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the input is a positive integer\n    if not num > 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        sys.exit()\n\n    # check if the input is less than or equal to 10\n    if num > 10:\n        print(\"Invalid input. Please enter a number less than or equal to 10.\")\n        sys.exit()\n\n    # create a string of all digits from 0 to 9\n    digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n\n    # loop through all possible permutations of digits\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                for l in range(10):\n                    for m in range(10):\n                        # create a string of the current permutation\n                        current_permutation = digits[i] + digits[j] + digits[k] + digits[l] + digits[m]\n\n                        # check if the current permutation is a palindrome and greater than the input number\n                        if int(current_permutation) >= num and int(current_permutation) == int(current_permutation[::-1]):\n                            # return the next smallest palindrome\n                            return int(current_permutation)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    is_palindrome = True\n    current_num = num\n    while is_palindrome:\n        current_num += 1\n        is_palindrome = True\n        temp = current_num\n        while temp > 0:\n            digit = temp % 10\n            if digit!= temp // 10:\n                is_palindrome = False\n                break\n            temp //= 10\n        if is_palindrome:\n            return current_num\n    return \"Palindrome not found\"\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 2:\n        num = int(sys.argv[1])\n        print(next_smallest_palindrome(num))\n    else:\n        print(\"Usage: python3 next_smallest_palindrome.py <integer>\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Reverse the original number\n    reversed_num = int(str(num)[::-1])\n    \n    # Find the next smallest palindrome\n    while reversed_num >= 10:\n        reversed_num /= 10\n    \n    # Multiply the original number by the next smallest palindrome\n    return num * reversed_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max_num = 10**9\n    count = 0\n    for i in range(max_num, 0, -1):\n        temp_num = i\n        reverse_num = 0\n        while temp_num > 0:\n            reverse_num = reverse_num * 10 + temp_num % 10\n            temp_num //= 10\n        if reverse_num == i:\n            count += 1\n        if count >= num:\n            return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    for i in range(num, 0, -1):\n        if is_palindrome(i) and i > num:\n            return i\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(num):\n    '''\n    Returns True if the input number is a palindrome, False otherwise.\n    '''\n    reversed_num = str(num)[::-1]\n    return num == int(reversed_num)\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    for i in range(num, 1000000, -1):\n        if is_palindrome(i):\n            return i\n    return -1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    else:\n        left = 1\n        right = len(arr)\n        while left <= right:\n            mid = (left + right) // 2\n            if k == mid:\n                return arr[mid-1]\n            elif k < mid:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k <= 0 or k > n:\n        return None\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid-1] < arr[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if the array is empty\n    if len(arr) == 0:\n        return None\n    \n    # check if k is valid\n    if k < 1 or k > len(arr):\n        return None\n    \n    # check if the array has only one element\n    if len(arr) == 1:\n        return arr[0]\n    \n    # find the middle element of the array\n    middle = len(arr) // 2\n    \n    # if k is less than or equal to the middle element, search the left half of the array\n    if k <= middle:\n        return kth_element(arr[:middle], k)\n    \n    # if k is greater than the middle element, search the right half of the array\n    else:\n        return kth_element(arr[middle:], k - middle)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return arr[0] if k == 1 else None\n\n    # Partition the array into two subarrays based on the middle element\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    # If the kth element is in the left subarray, recursively find it there\n    if k <= len(left):\n        return kth_element(left, k)\n\n    # If the kth element is in the right subarray, recursively find it there\n    return kth_element(right, k - len(left) - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Convert the given array to a list\n    arr_list = list(arr)\n\n    # If the array is empty or has only one element, return the first element\n    if len(arr_list) == 0 or len(arr_list) == 1:\n        return arr_list[0]\n\n    # If the array has multiple elements, divide it into two halves until the middle element is the kth element\n    while len(arr_list) > 1:\n        mid = len(arr_list) // 2\n        if k <= mid:\n            arr_list = arr_list[:mid]\n        else:\n            arr_list = arr_list[mid:]\n        k -= mid\n\n    # Return the middle element if the array has only one element\n    if len(arr_list) == 1:\n        return arr_list[0]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        raise ValueError('k is greater than the length of the array')\n    if k < 1:\n        raise ValueError('k is less than 1')\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Convert the 0-based indexing to 1-based indexing\n    arr = [arr[i-1] for i in range(1, len(arr)+1)]\n    # Sort the array in ascending order\n    arr.sort()\n    # Return the kth element\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if k is a positive integer\n    if not isinstance(k, int) or k <= 0:\n        raise ValueError('k must be a positive integer')\n\n    # check if array is not empty\n    if not arr:\n        raise IndexError('array cannot be empty')\n\n    # find the length of the array\n    n = len(arr)\n\n    # check if k is greater than or equal to n\n    if k >= n:\n        raise IndexError('k is greater than or equal to the length of the array')\n\n    # find the kth element\n    for i in range(n):\n        if i == k - 1:\n            return arr[i]\n\n    # if the kth element is not found, raise an IndexError\n    raise IndexError('k is greater than the length of the array')"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case_word = []\n    for i in range(len(word)):\n        if i == 0:\n            camel_case_word.append(word[i].lower())\n        elif word[i].isupper():\n            camel_case_word.append('_')\n            camel_case_word.append(word[i].lower())\n        else:\n            camel_case_word.append(word[i])\n    return ''.join(camel_case_word)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = []\n    for char in word:\n        if char.isupper():\n            camel.append(char)\n        elif camel and not camel[-1].isupper():\n            camel.append(\"_\")\n    return \"\".join(camel)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = ''\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i].lower()\n        else:\n            camel_case += words[i][0].upper() + words[i][1:]\n    return camel_case.lstrip('_')"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif i < len(word)-1:\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Initialize the camel case word\n    camel_case = ''\n    # Split the input word into words using snake case as the delimiter\n    words = word.split('_')\n    # Loop over the words, capitalizing the first letter of each word and appending it to the camel case word\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_case += word.lower()\n        else:\n            camel_case += word.capitalize()\n    # Return the camel case word\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    result = ''\n    for i in range(len(word)):\n        if i == 0:\n            result += word[i].lower()\n        elif i > 0 and word[i].isupper():\n            result += '_'\n        result += word[i]\n    return result.capitalize()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert all uppercase letters to lowercase\n    word = word.lower()\n    \n    # Split the word by underscores\n    words = word.split('_')\n    \n    # Convert the first letter to uppercase and join the words with a capital letter\n    return words[0].capitalize() + ''.join([word.capitalize() for word in words[1:]])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    parts = word.split('_')\n    camel_case_word = ''\n    for part in parts:\n        camel_case_word += part.capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            if i > 0 and not word[i-1].isupper():\n                result += \"_\"\n        result += word[i].lower()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    words = word.split('_')\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i].lower()\n        else:\n            camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # create a list of all possible edges in the graph\n    edges = [(i, j) for i in range(n) for j in range(i+1, n+1)]\n\n    # find the shortest path between any pair of vertices\n    def shortest_path(s, t, edges):\n        # create a dictionary to store distances from s to each vertex\n        dist = {u: float('inf') for u in range(n+1)}\n        dist[s] = 0\n\n        # create a queue to store vertices to be checked\n        queue = [(s, [s])]\n\n        while queue:\n            u, path = queue.pop(0)\n\n            if u == t:\n                return dist[t], path\n\n            for v, w in edges:\n                if dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n                    queue.append((v, path + [v]))\n\n        # if no path found, return None\n        return None\n\n    # find the minimum distance between any pair of vertices\n    def min_distance(edges):\n        min_dist = float('inf')\n        for i in range(n+1):\n            for j in range(i+1, n+1):\n                path1 = shortest_path(i, j, edges)[1]\n                path2 = shortest_path(j, i, edges)[1]\n                dist = len(set(path1 + path2))\n                if dist < min_dist:\n                    min_dist = dist\n        return min_dist\n\n    # find the Eulerian number a(n, m) by finding the minimum distance\n    eulerian = min_distance(edges)\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the number of divisors of n and m\n    div_n = 0\n    div_m = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_n += 1\n    for i in range(1, m+1):\n        if m % i == 0:\n            div_m += 1\n    \n    # If n and m are divisible by different numbers, there is no Eulerian number\n    if div_n!= div_m:\n        print(\"No Eulerian number\")\n        return\n    \n    # Calculate the sum of divisors of n and m\n    sum_div = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_div += i\n    for i in range(1, m+1):\n        if m % i == 0:\n            sum_div += i\n    \n    # Calculate the product of divisors of n and m\n    prod_div = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            prod_div *= i\n    for i in range(1, m+1):\n        if m % i == 0:\n            prod_div *= i\n    \n    # Calculate the Eulerian number a(n, m)\n    eulerian = (prod_div - sum_div) // (div_n * div_m)\n    \n    print(\"Eulerian number:\", eulerian)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function takes two integers n and m as input and returns the Eulerian number a(n, m).\n    The Eulerian number is defined as the sum of the cubes of the first n natural numbers (starting from 1).\n    '''\n    a = 0\n    for i in range(1, n + 1):\n        a += i ** 3\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the two-dimensional array of triangle\n    triangle = [[0] * (m+1) for _ in range(n+1)]\n\n    # Fill the first row and column of the triangle with 1\n    triangle[1][1] = 1\n    triangle[1][m] = 1\n\n    # Fill the other elements of the triangle recursively\n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            if j == 1:\n                triangle[i][j] = triangle[i-1][j]\n            else:\n                triangle[i][j] = triangle[i-1][j] + triangle[i-1][j-1]\n\n    # Return the value of the last element of the triangle\n    return triangle[-1][-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the 2D list for the graph\n    adj_list = [[0 for j in range(m + 1)] for i in range(n + 1)]\n\n    # Add edges to the graph\n    adj_list[1][2] = 1\n    adj_list[2][3] = 1\n    adj_list[3][4] = 1\n    adj_list[4][5] = 1\n    adj_list[5][6] = 1\n    adj_list[6][7] = 1\n    adj_list[7][8] = 1\n    adj_list[8][9] = 1\n\n    # Initialize the visited list and the total count\n    visited = [False for i in range(n + 1)]\n    count = 0\n\n    # Breadth-first search for the Eulerian number\n    def bfs(node):\n        nonlocal count\n        visited[node] = True\n        for neighbor in adj_list[node]:\n            if not visited[neighbor]:\n                bfs(neighbor)\n        count += 1\n\n    # Start with node 1\n    bfs(1)\n\n    # Return the Eulerian number\n    return count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def binomial(n, k): \n        return math.comb(n, k) * math.comb(k, n - k)\n\n    def factorial(n): \n        return 1 if n == 0 else n * factorial(n-1)\n\n    def binomial_coefficient(n, k): \n        return math.comb(n, k)\n\n    def combination(n, k): \n        return math.comb(n, k)\n\n    def inv_factorial(n):\n        a = 1\n        for i in range(1, n+1):\n            a *= i\n        return a\n\n    def inv_binomial(n, k):\n        return binomial_coefficient(n, k) / factorial(k)\n\n    def inv_combination(n, k):\n        return binomial_coefficient(n, k) / factorial(n - k)\n\n    def inv_permutation(n, k):\n        return binomial_coefficient(n, k) / factorial(n)\n\n    def inv_combination_inv_permutation(n, k):\n        return binomial_coefficient(n, k) / (factorial(n) * factorial(k))\n\n    def eulerian_number(n, m):\n        if n == 1 or m == 1:\n            return 1\n\n        if n == m:\n            return 1 + eulerian_number(n - 1, m - 1)\n\n        if n < m:\n            return 0\n\n        a = inv_permutation(n - 1, m - 1)\n        b = inv_factorial(m - 1)\n        c = inv_factorial(n - 1)\n        d = inv_combination(m - 1, n - 1)\n        e = inv_combination_inv_permutation(m - 1, n - 1)\n\n        return (a * b * c * d * e) // factorial(m + n - 2)\n\n    return eulerian_number(n, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Generate all possible pairs of numbers from 1 to n\n    pairs = [(i, j) for i in range(1, n+1) for j in range(1, n+1) if i!= j]\n    \n    # Calculate the number of possible pairs\n    num_pairs = len(pairs)\n    \n    # Calculate the number of possible pairs where the sum of the two numbers is a multiple of m\n    eulerian = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if (i + j) % m == 0:\n                eulerian += 1\n    \n    # Calculate the Eulerian number a(n, m)\n    a = (num_pairs - eulerian) / (num_pairs * 0.5)\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number to 0\n    eulerian = 0\n    \n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Initialize the sum of the product of i and 2^(m-1) to 0\n        sum_product = 0\n        \n        # Iterate from 1 to i\n        for j in range(1, i+1):\n            # Add the product of j and 2^(m-1) to the sum_product\n            sum_product += j * 2 ** (m-1)\n        \n        # If the sum_product is even, add 1 to the Eulerian number\n        if sum_product % 2 == 0:\n            eulerian += 1\n    \n    # Return the Eulerian number\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # define the 2D array of integers\n    matrix = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # initialize the matrix with the input values\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            matrix[i][j] = input(\"Enter element (%d, %d): \" % (i, j))\n\n    # find the Eulerian number\n    result = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1 or j == 1 or i == n or j == m:\n                result += int(matrix[i][j])\n\n    # print the result\n    print(\"The Eulerian number is:\", result)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number to 1\n    a = 1\n\n    # Loop through all possible values of n and m\n    for i in range(n+1):\n        for j in range(m+1):\n            # Calculate the value of a(i, j) using the formula\n            a = (a * i) // j\n\n    # Return the final value of a\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Convert all sublists to strings\n    input_list = [str(sublist) for sublist in input_list]\n    # Sort each sublist using the built-in sort function\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    # Convert all sorted sublists back to lists\n    sorted_sublists = [list(sublist) for sublist in input_list]\n    return sorted_sublists"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n\ninput_list = [\n    ['apple', 'banana', 'cherry'],\n    ['grape', 'kiwi','mango'],\n    ['orange', 'pear', 'grapefruit'],\n    ['watermelon', 'peach', 'banana'],\n    ['strawberry', 'blueberry', 'cherry']\n]\n\nsort_sublists(input_list)\n\nfor sublist in input_list:\n    print(sublist)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        # Sort the sublist using the built-in `sorted()` function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n\n        # Sort the sublist in alphabetical order\n        sublist.sort()\n\n        # Print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # initialize an empty list to hold sorted sublists\n    sorted_sublists = []\n\n    # loop through each sublist in the input list\n    for sublist in input_list:\n        # create a list of strings from each sublist element\n        sublist_strings = [str(elem) for elem in sublist]\n\n        # sort the list of strings in-place using the built-in sorted() function\n        sorted_strings = sorted(sublist_strings)\n\n        # convert the sorted list of strings back to a list of sublist elements\n        sorted_sublist_elements = [int(elem) if elem.isdigit() else elem for elem in sorted_strings]\n\n        # create a new list with the sorted sublist elements\n        sorted_sublist = [int(elem) if elem.isdigit() else elem for elem in sublist]\n\n        # append the new sorted sublist to the list of sorted sublists\n        sorted_sublists.append(sorted_sublist)\n\n    # return the list of sorted sublists\n    return sorted_sublists"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Check if the list is already a tuple\n    if isinstance(test_list, tuple):\n        # If it is, simply append the list to the end of the tuple\n        test_tup = test_tup + (test_list,)\n    # If the list is not a tuple, convert it to a tuple and append it to the end\n    else:\n        test_tup = test_tup + (tuple(test_list),)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Combine the two lists into a new list\n    combined_list = test_list + test_tup\n    \n    # Convert the combined list back into a tuple\n    combined_tup = tuple(combined_list)\n    \n    return combined_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n\n    # Define an empty list to hold the appended tuples\n    appended_tuples = []\n\n    # Loop through each tuple in the list\n    for tup in test_tup:\n        # Append the list to each tuple\n        new_tup = tup + test_list\n        # Append the new tuple to the appended_tuples list\n        appended_tuples.append(new_tup)\n\n    # Return the list of appended tuples\n    return appended_tuples"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup)\n    test_list = list(test_list)\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    return (test_tup + test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    # merge the three lists into one single list\n    merged_list = num1 + num2 + num3\n    \n    # create a min heap to sort the merged list\n    heap = []\n    for num in merged_list:\n        heapq.heappush(heap, num)\n    \n    # pop the minimum element from the heap to get the sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all three lists into one\n    merged_list = num1 + num2 + num3\n\n    # Create a min heap to store the indices of each element in the merged list\n    heap = []\n    for i in range(len(merged_list)):\n        heapq.heappush(heap, i)\n\n    # Create a new list to store the sorted elements from the merged list\n    result = []\n\n    # Merge the elements from the merged list into the result list\n    while heap:\n        i = heapq.heappop(heap)\n        result.append(merged_list[i])\n\n        # If the current element is smaller than its neighbors, add its index to the heap\n        if i > 0 and merged_list[i] < merged_list[i-1]:\n            heapq.heappush(heap, i)\n\n        if i < len(merged_list)-1 and merged_list[i] < merged_list[i+1]:\n            heapq.heappush(heap, i)\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    This function takes three lists of integers as input and returns\n    a single sorted list containing all the elements of the input lists.\n    \"\"\"\n    # Merge two lists and the third list into a single list.\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list in ascending order.\n    merged_list.sort()\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge the three lists into a single list\n    merged_list = sorted(num1 + num2 + num3)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.merge(num1, num2, num3, merged_list)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge two lists into a single list\n    merged_list = num1 + num2\n\n    # Sort the merged list using heapq\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    # Merge the three sorted lists into a single sorted list\n    final_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            final_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            final_list.append(num2[j])\n            j += 1\n        else:\n            final_list.append(num3[k])\n            k += 1\n\n    # Add the remaining elements from the remaining lists\n    final_list += num1[i:]\n    final_list += num2[j:]\n    final_list += num3[k:]\n\n    return final_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge num1 and num2\n    merged_list = []\n    i = j = 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] <= num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n    # add remaining elements of num1 and num2\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    # merge num3 with merged_list\n    i = j = 0\n    while i < len(num3) and j < len(merged_list):\n        if num3[i] <= merged_list[j]:\n            merged_list.insert(j, num3[i])\n            i += 1\n        else:\n            j += 1\n    # add remaining elements of num3\n    merged_list += num3[i:]\n    # sort merged_list\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as inputs and merges them into a single sorted list.\n    '''\n    # Create three empty lists to store the three input lists\n    sorted_list1 = []\n    sorted_list2 = []\n    sorted_list3 = []\n    \n    # Push the elements of the input lists to the empty lists\n    for i in num1:\n        heapq.heappush(sorted_list1, i)\n    for i in num2:\n        heapq.heappush(sorted_list2, i)\n    for i in num3:\n        heapq.heappush(sorted_list3, i)\n    \n    # Merge the three lists using a heap\n    merged_list = []\n    while sorted_list1 and sorted_list2 and sorted_list3:\n        if heapq.heappop(sorted_list1) < heapq.heappop(sorted_list2):\n            merged_list.append(heapq.heappop(sorted_list1))\n        elif heapq.heappop(sorted_list1) > heapq.heappop(sorted_list2):\n            merged_list.append(heapq.heappop(sorted_list2))\n        else:\n            merged_list.append(heapq.heappop(sorted_list1))\n            heapq.heappop(sorted_list2)\n    \n    # Add the remaining elements of the sorted lists to the merged list\n    while sorted_list1:\n        merged_list.append(heapq.heappop(sorted_list1))\n    while sorted_list2:\n        merged_list.append(heapq.heappop(sorted_list2))\n    while sorted_list3:\n        merged_list.append(heapq.heappop(sorted_list3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three sorted lists into a single sorted list\n    merged_list = []\n    i = j = k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n\n    # Add the remaining elements of the sorted lists to the merged list\n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    heap1 = []\n    heap2 = []\n    heap3 = []\n\n    # add elements from each list to the heaps\n    for element in num1:\n        heapq.heappush(heap1, element)\n    for element in num2:\n        heapq.heappush(heap2, element)\n    for element in num3:\n        heapq.heappush(heap3, element)\n\n    # merge the heaps into a single sorted list\n    result = []\n    while heap1 and heap2 and heap3:\n        if heapq.heappop(heap1) <= heapq.heappop(heap2):\n            result.append(heapq.heappop(heap1))\n        else:\n            result.append(heapq.heappop(heap2))\n    result += heap1 + heap2 + heap3\n\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize variables\n    even_count = 0\n    odd_count = 0\n    count = 0\n    \n    # Convert the binary string to a list of integers\n    binary_list = list(map(int, bin(int(s, 2))[2:].zfill(len(s))))\n    \n    # Rotate the binary list the given number of times\n    for i in range(n):\n        # Append the first element of the binary list to the end of the list\n        binary_list.append(binary_list.pop(0))\n    \n    # Iterate through the binary list and count odd and even numbers\n    for i in binary_list:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Add the counts of even and odd numbers to the total count\n    count = even_count + odd_count\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    s = s[::-1]\n    for i in range(n):\n        s = s[::-1]\n        for j in range(len(s)):\n            if int(s[j]) % 2!= 0:\n                odd_count += 1\n                break\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        # rotate the binary string by one bit to the right\n        rotated = s[::-1] + s[0]\n        # count the number of odd digits in the rotated string\n        count += sum(1 for digit in rotated if digit == '1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        new_s = ''\n        for j in range(len(s)-1):\n            if s[j] == '0':\n                new_s += '0'\n            elif s[j] == '1':\n                new_s += '1'\n            else:\n                print(\"Invalid input\")\n                return\n        count += int(new_s,2)\n        s = new_s\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n    \n    # Find the length of the binary string\n    length = len(digits)\n    \n    # Initialize an empty list to store the rotated digits\n    rotated_digits = []\n    \n    # Rotate the digits n times\n    for _ in range(n):\n        # Copy the last digit to the beginning of the list\n        rotated_digits.append(digits[-1])\n        \n        # Remove the last digit from the list\n        digits = digits[:-1]\n    \n    # Initialize an empty list to store the numbers with odd values\n    odd_numbers = []\n    \n    # Iterate over the rotated digits and check if each number has an odd value\n    for digit in rotated_digits:\n        if digit % 2!= 0:\n            odd_numbers.append(digit)\n    \n    # Return the count of odd numbers\n    return len(odd_numbers)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    binary_string = ''.join(format(ord(c), 'b') for c in s)\n    odd_count = 0\n    for _ in range(n):\n        binary_string = binary_string[-len(binary_string):] + binary_string[:len(binary_string)-1]\n        odd_count += binary_string.count('1')\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize variables to keep track of odd numbers and the rotated binary string\n    odd_count = 0\n    rotated_binary = ''\n\n    # Loop n times to rotate the binary string n times\n    for _ in range(n):\n        # Append the last character of the original binary string to the beginning\n        rotated_binary = s[-1] + rotated_binary\n\n        # Find the length of the rotated binary string\n        rotated_length = len(rotated_binary)\n\n        # Loop through the characters in the rotated binary string\n        for i in range(rotated_length):\n            # Check if the current character is an odd number\n            if int(rotated_binary[i]) % 2 == 1:\n                # Increment the odd_count variable\n                odd_count += 1\n\n    # Return the odd_count variable\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize count to 0\n    count = 0\n    \n    # convert the string to binary\n    binary = bin(int(s,2))[2:]\n    \n    # rotate the binary string by n positions\n    for _ in range(n):\n        binary = binary[-1] + binary[:-1]\n    \n    # iterate through the binary string and count odd values\n    for char in binary:\n        if char == '1':\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of digits\n    binary_list = [int(digit) for digit in s]\n    # Perform the rotation n times\n    for i in range(n):\n        # Reverse the list\n        binary_list = binary_list[::-1]\n        # Find the odd numbers in the reversed list\n        odd_nums = [x for x in binary_list if x%2!=0]\n        # Update the list with odd numbers\n        binary_list = odd_nums\n    # Find the count of odd numbers in the final list\n    count = sum(binary_list)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize variables\n    odd_count = 0\n    rotated_s = \"\"\n    prev_odd = False\n\n    # Loop through the string n times\n    for i in range(n):\n        # If the previous character was odd, add it to the rotated string\n        if prev_odd:\n            rotated_s += s[0]\n        # If the current character is odd, increment the odd count and set prev_odd to True\n        elif s[0] == '1':\n            odd_count += 1\n            prev_odd = True\n        # If the current character is even, set prev_odd to False\n        else:\n            prev_odd = False\n        # Remove the first character from the string\n        s = s[1:]\n\n    # Return the final odd count\n    return odd_count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                if nestedlist[j] not in common_elements:\n                    common_elements.append(nestedlist[j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # initialize an empty set to store the common elements\n    common = set()\n\n    # loop through each list in the nested list\n    for lst in nestedlist:\n\n        # loop through each element in the list\n        for element in lst:\n\n            # if the element is already in the set, add it to the common set\n            if element in common:\n                common.add(element)\n\n            # otherwise, add it to the set\n            else:\n                common.add(element)\n\n    # return the common set\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Create a set for storing common elements\n    common = set()\n\n    # Loop through each list in the nested list\n    for list in nestedlist:\n\n        # Loop through each element in the list\n        for element in list:\n\n            # Add the element to the set if it's not already there\n            if element not in common:\n                common.add(element)\n\n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append((nestedlist[i], nestedlist[j]))\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_set = set()\n    for sublist in nestedlist:\n        for item in sublist:\n            common_set.add(item)\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                common.remove(nestedlist[i][j])\n            else:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set of all the elements in the first list\n    set1 = set(nestedlist[0])\n    # iterate through the remaining lists and find common elements\n    for i in range(1, len(nestedlist)):\n        # create a set of all the elements in the current list\n        set2 = set(nestedlist[i])\n        # find the intersection of the two sets\n        common = set1.intersection(set2)\n        # update the set of common elements\n        set1 = common\n    # convert the set of common elements back to a list\n    common_list = list(set1)\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Loop through each sublist in the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Add the element to the set if it's already not in it\n            if element not in common:\n                common.add(element)\n\n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j not in common and j not in i:\n                common.append(j)\n    return common"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in range(len(list1)):\n        if not list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(isinstance(item, dict) and not item for item in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for dict in list1:\n        if dict:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty string\n    result = ''\n    # Loop through the tuple\n    for num in nums:\n        # Convert the current number to a string\n        str_num = str(num)\n        # Append the first character of the string to the result\n        result += str_num[0]\n    # Convert the result to an integer\n    return int(result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list to allow for easy indexing\n    nums_list = list(nums)\n    # Initialize a variable to store the sum of the integers in the tuple\n    int_sum = 0\n    # Loop through the list and add each integer to the sum\n    for num in nums_list:\n        int_sum += num\n    # Return the sum of the integers in the tuple\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Check if the input is a tuple of integers\n    if not isinstance(nums, tuple):\n        raise TypeError(\"Input must be a tuple of integers.\")\n    # Check if all elements in the tuple are positive integers\n    for num in nums:\n        if not isinstance(num, int) or num <= 0:\n            raise ValueError(\"All elements in the tuple must be positive integers.\")\n    # Calculate the sum of the integers in the tuple\n    total = sum(nums)\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Define a function that takes a list as input and returns a list of floats\n    def convert_list(lst):\n        # Initialize an empty list to store the converted elements\n        float_lst = []\n        # Loop through each element in the input list\n        for element in lst:\n            # If the element is convertible to a float, append it to the float_lst\n            if isinstance(element, float):\n                float_lst.append(element)\n            # If the element is not convertible to a float, convert it to a float using the float() function and append it to the float_lst\n            else:\n                float_lst.append(float(element))\n        # Return the float_lst\n        return float_lst\n    \n    # Loop through each element in the input list\n    for element in test_list:\n        # If the element is a list, call the convert_list function to convert all possible convertible elements to floats\n        if isinstance(element, list):\n            test_list[test_list.index(element)] = convert_list(element)\n    \n    # Return the modified list\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for element in test_list:\n        if isinstance(element, (int, float)):\n            result.append(float(element))\n        elif isinstance(element, list):\n            result.append(list_to_float(element))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                return None\n            else:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each list in the input list\n    for sub_list in test_list:\n        # Loop through each element in the current sublist\n        for element in sub_list:\n            # Check if the element is a convertible type (string, float, int, etc.)\n            if isinstance(element, (str, int, float, complex)):\n                # Convert the element to a float if it is\n                element = float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each list in the test_list\n    for lst in test_list:\n        # Loop through each element in the list\n        for elem in lst:\n            # Try to convert the element to a float\n            try:\n                float(elem)\n            except ValueError:\n                # If it fails, don't convert it and continue to the next element\n                continue\n            else:\n                # If it converts successfully, convert it to a float and append it to the list\n                lst.append(float(elem))"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            if isinstance(element, str):\n                try:\n                    float(element)\n                except ValueError:\n                    continue\n            elif isinstance(element, (int, float)):\n                row[row.index(element)] = float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                continue\n            else:\n                sublist[sublist.index(element)] = float(element)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for item in test_list:\n        for element in item:\n            if isinstance(element, (int, float, str)):\n                element = float(element)\n            elif isinstance(element, list):\n                element = list_to_float(element)\n            else:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                element = float(element)\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            print(\"The element appears only once in the array.\")\n            return unique_element\n        else:\n            unique_element = arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            count += 1\n        else:\n            count = 1\n    return arr[arr.index(arr[0]) + 1]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return \"Error: The array contains duplicate elements.\"\n    \n    for i in range(len(arr)):\n        if arr[i]!= i + 1:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            return unique_element\n        elif arr[i] < unique_element:\n            unique_element = arr[i]\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] not in freq:\n            freq[arr[i]] = 1\n        else:\n            freq[arr[i]] += 1\n\n    # Iterate over the dictionary and find the element that appears only once\n    for i in freq:\n        if freq[i] == 1:\n            return i"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in count:\n        if count[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    # Initialize an empty dictionary to store the count of each element in the array\n    count = {}\n    \n    # Iterate through the array and increment the count of each element in the dictionary\n    for i in arr:\n        count[i] = count.get(i, 0) + 1\n    \n    # Find the element that appears only once in the array\n    for key in count:\n        if count[key] == 1:\n            return key\n    \n    # If the element is not found, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            return None\n        elif arr[i] < unique_element:\n            unique_element = arr[i]\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n    \n    # Loop through the array\n    for num in arr:\n        # If the element is already in the dictionary, increment its count by 1\n        if num in count:\n            count[num] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count[num] = 1\n            \n    # Find the element that appears only once\n    for num, count in count.items():\n        if count == 1:\n            return num\n            \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i-1]:\n            count += 1\n        elif i == n-1 or arr[i]!= arr[i+1]:\n            count -= 1\n        if count == 0:\n            return arr[i]\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize variables to store maximum absolute product and current absolute product\n    max_abs_product = float('-inf')\n    current_abs_product = 1\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Calculate the absolute product of the current number and the next number in the tuple\n        current_abs_product = abs(list1[i][0]) * abs(list1[i][1])\n\n        # Update the maximum absolute product if the current absolute product is greater\n        if current_abs_product > max_abs_product:\n            max_abs_product = current_abs_product\n\n    # Return the maximum absolute product found\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize maximum absolute product and variables\n    max_product = float('-inf')\n    product = 1\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n\n            # Calculate product of current tuple\n            current_product = list1[i] * list1[j]\n\n            # Calculate absolute product of current tuple\n            absolute_product = abs(current_product)\n\n            # Update maximum absolute product if current absolute product is greater\n            if absolute_product > max_product:\n                max_product = absolute_product\n                product = current_product\n\n    # Return maximum absolute product\n    return max_product, product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    product = 1\n    \n    # iterate through list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            \n            # find absolute difference between numbers in tuples\n            diff = abs(list1[i][1] - list1[j][1])\n            \n            # update maximum product\n            if diff > max_product:\n                max_product = diff\n            \n            # update current product\n            current_product *= diff\n            \n            # update product\n            product = max(product, current_product)\n    \n    # return maximum product\n    return product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize the maximum product and the current product to zero\n    max_product = 0\n    current_product = 0\n    \n    # loop through the list of tuples\n    for i in range(len(list1)):\n        # loop through the remaining elements of the current tuple\n        for j in range(i+1, len(list1)):\n            # calculate the absolute product of the current elements\n            abs_product = abs(list1[i][0] * list1[j][0])\n            # check if the absolute product is greater than the current maximum product\n            if abs_product > max_product:\n                # update the maximum product\n                max_product = abs_product\n                # update the current product to zero\n                current_product = 0\n            # add the absolute product to the current product\n            current_product += abs_product\n    # return the maximum product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # initialize variables for max product and current product\n    max_product = -float('inf')\n    current_product = 1\n\n    # loop through the list of tuples\n    for i in range(len(list1)):\n        # calculate the difference between the current product and the previous product\n        difference = current_product - list1[i][1]\n\n        # update the max product if the difference is greater than the current max product\n        if difference > max_product:\n            max_product = difference\n\n        # update the current product for the next iteration\n        current_product = list1[i][0] * list1[i][1]\n\n    # return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize variables to store the maximum product and the maximum difference between products\n    max_product = float('-inf')\n    max_diff = float('-inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the numbers and its absolute value\n            product = abs(list1[i][0]*list1[j][0]) + abs(list1[i][1]*list1[j][1])\n            # Calculate the absolute difference between the products\n            diff = abs(product - max_product)\n            # Update the maximum product and maximum difference if the current product is greater than the current maximum product and the absolute difference between the products is greater than the current maximum difference\n            if product > max_product and diff > max_diff:\n                max_product = product\n                max_diff = diff\n\n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for num in range(1, limit+1):\n        if is_prime(num) and num!= 1:\n            for a in range(1, limit+1):\n                if a!= num and is_prime(a) and num + a == 28 and num + a == a + num:\n                    sum += num + a\n                    break\n    return sum\n\nlimit = int(input(\"Enter a number: \"))\nprint(\"Sum of all amicable numbers from 1 to\", limit, \"is:\", sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(2, limit+1):\n        if i == 2:\n            amicable_numbers.add(i)\n        elif i in amicable_numbers:\n            continue\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                amicable_numbers.add(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num == sum(set(range(1, num))):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a list of all numbers from 1 to the limit\n    numbers = list(range(1, limit+1))\n\n    # Initialize the sum of amicable numbers to 0\n    amicable_sum = 0\n\n    # Iterate through the list of numbers\n    for num in numbers:\n        # Check if the number is amicable to the previous number\n        if num!= 1:\n            # Check if the number is amicable to the square of the previous number\n            if num in numbers and num**2 in numbers:\n                # Add the amicable number to the sum\n                amicable_sum += num\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Create a set to store unique amicable numbers\n    amicable = set()\n\n    # Find all pairs of numbers less than limit that have sum equal to 1\n    for i in range(1, limit):\n        j = i + limit // i\n        if i!= j and i + j == limit:\n            amicable.add(i)\n            amicable.add(j)\n\n    # Sum all amicable numbers\n    return sum(amicable)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if num == sum_of_proper_divisors(num):\n            amicable_sum += num\n    return amicable_sum\n\ndef sum_of_proper_divisors(n):\n    '''\n    Write a function to calculate the sum of proper divisors of a given number n.\n    '''\n    sum = 0\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            sum += i\n            if i!= n//i:\n                sum += n//i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit):\n        if i == 1:\n            amicable_numbers.append(i)\n        elif i == 2:\n            amicable_numbers.append(i)\n        else:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize variables to keep track of amicable numbers\n    a_sum = 0\n    b_sum = 0\n    # loop through numbers from 1 to the specified limit\n    for i in range(1, limit+1):\n        # check if i is a prime number\n        is_prime = True\n        for j in range(2, int(i/2)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if i is a prime number, check if it is an amicable number\n        if is_prime:\n            # calculate the sum of a and b\n            a = i\n            b = limit - i\n            # check if a and b are amicable\n            while a!= b:\n                if a > b:\n                    a -= 1\n                else:\n                    b -= 1\n            # if a and b are amicable, add them to the sum\n            if a == b:\n                a_sum += a\n                b_sum += b\n    return a_sum + b_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    for i in range(1, limit+1):\n        num1 = i\n        num2 = limit - i\n        \n        if num1 == num2:\n            amicable_sum += num1\n            \n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i == sum_of_proper_divisors(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_proper_divisors(num):\n    '''\n    Function to calculate the sum of proper divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Convert a,b into polar coordinates\n    r = cmath.sqrt(a**2 + b**2)\n    theta = cmath.phase(a + b*1j)\n    # Convert polar coordinates back into complex number\n    angle = cmath.rect(r, theta)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    angle_degrees = angle * 180 / cmath.pi\n    return angle_degrees"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    # Initialize two variables to keep track of the number of 0s and 1s in the string\n    count_0s = 0\n    count_1s = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0s += 1\n        # If the character is a 1, increment the count of 1s\n        elif char == '1':\n            count_1s += 1\n        # If the character is neither a 0 nor a 1, the difference in counts is 0, so we can return 0\n        else:\n            return 0\n    \n    # Calculate the difference in counts between the current substring and the entire string\n    max_diff = abs(count_0s - count_1s)\n    \n    # Loop through each substring of the string starting from the second character and ending at the end of the string\n    for i in range(1, len(string)):\n        # If the difference in counts between the current substring and the entire string is greater than the maximum difference, update the maximum difference\n        if abs(count_0s - count_1s) > max_diff:\n            max_diff = abs(count_0s - count_1s)\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    prev_zero = -1\n    prev_one = -1\n    for i in range(len(string)):\n        if string[i] == '0':\n            if prev_one == -1:\n                prev_one = i\n            else:\n                max_diff = max(max_diff, i - prev_one)\n                prev_one = -1\n        elif string[i] == '1':\n            if prev_zero == -1:\n                prev_zero = i\n            else:\n                max_diff = max(max_diff, i - prev_zero)\n                prev_zero = -1\n    if prev_one!= -1:\n        max_diff = max(max_diff, len(string) - prev_one)\n    if prev_zero!= -1:\n        max_diff = max(max_diff, len(string) - prev_zero)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    dp = [0] * (2 * n)\n    max_diff = 0\n    for i in range(n):\n        for j in range(2 * n):\n            if i == 0:\n                dp[j] = string[0] == '1'\n            elif j == i:\n                dp[j] = max(dp[j - 1], string[i] == '1')\n            else:\n                dp[j] = max(dp[j - 1], dp[j - 2]) + (string[i] == '1')\n            if dp[j] - dp[j - 1] > max_diff:\n                max_diff = dp[j] - dp[j - 1]\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    count0 = 0\n    count1 = 0\n    length = 0\n\n    for char in string:\n        if char == \"0\":\n            count0 += 1\n        else:\n            count1 += 1\n\n        length = max(length, count0 - count1)\n\n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Convert binary string to list of integers\n    binary_list = [int(bit) for bit in string]\n    # Initialize variables for 0 and 1 count\n    count_0 = 0\n    count_1 = 0\n    # Initialize variables for maximum difference and current difference\n    max_diff = 0\n    current_diff = 0\n    # Loop through each character in the binary string\n    for i in range(len(binary_list)):\n        # If current character is 0, increment 0 count\n        if binary_list[i] == 0:\n            count_0 += 1\n        # If current character is 1, increment 1 count\n        else:\n            count_1 += 1\n        # Calculate current difference between 0 and 1 count\n        current_diff = abs(count_0 - count_1)\n        # If current difference is greater than maximum difference, update maximum difference\n        if current_diff > max_diff:\n            max_diff = current_diff\n    # Return maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    # Initialize counters for 0s and 1s\n    zeros = 0\n    ones = 0\n    # Initialize result variable\n    result = 0\n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the 0 counter\n        if char == '0':\n            zeros += 1\n        # If the character is a 1, increment the 1 counter\n        else:\n            ones += 1\n        # Calculate the difference between the 0 and 1 counters\n        diff = abs(zeros - ones)\n        # If the difference is greater than the current result, update the result\n        if diff > result:\n            result = diff\n    # Return the result\n    return result"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    max_diff = 0\n    prev_count = 0\n    count = 0\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s and 1s\n        if char == '0':\n            count += 1\n        else:\n            count -= 1\n        # Calculate the difference between the current and previous counts of 0s and 1s\n        diff = count - prev_count\n        # Update the maximum difference found so far\n        max_diff = max(diff, max_diff)\n        # Update the previous count of 0s and 1s\n        prev_count = count\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    max_diff = 0\n    n = len(string)\n    prev_count = 0\n    curr_count = 0\n    \n    for i in range(n):\n        if string[i] == '0':\n            curr_count += 1\n        else:\n            curr_count = 0\n        \n        if curr_count!= prev_count:\n            max_diff = max(max_diff, curr_count - prev_count)\n            \n        prev_count = curr_count\n        \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # Initialize the length of the longest sub-string\n    length = 0\n    \n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Initialize the current count of 0s and 1s in the sub-string\n        count_zero = 0\n        count_one = 0\n        \n        # Loop through each character after the current one in the string\n        for j in range(i+1, len(string)+1):\n            # Check if the current character is a 0 or 1\n            if string[j-1] == '0':\n                count_zero += 1\n            else:\n                count_one += 1\n            \n            # Check if the count difference is greater than the length of the longest sub-string\n            if abs(count_zero - count_one) > length:\n                length = abs(count_zero - count_one)\n    \n    # Return the length of the longest sub-string\n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    count = [0] * 2\n    max_diff = 0\n    \n    for i in range(n):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n        \n        diff = abs(count[0] - count[1])\n        \n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = set(a*i for i in range(1,b+1) if a%i == 0 and b%i == 0)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the set of common divisors of a and b\n    common_divisors = set(set(a).intersection(set(b)))\n\n    # Calculate the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Finding the list of common divisors of a and b\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    \n    # Finding the sum of the common divisors\n    result = 0\n    for i in divisors:\n        result += i\n    \n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    elif a > b:\n        temp = a\n        a = b\n        b = temp\n    divisors = []\n    divisor = 1\n    while divisor <= b:\n        if a % divisor == 0 and b % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(a,b) - sum(a,min(divisors))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function calculates the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a,b):\n    \"\"\"\n    Function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Finding all common divisors of a and b\n    divisors = []\n    for i in range(1,a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    # Finding the sum of the common divisors\n    sum_common = sum(divisors)\n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Get the set of divisors of a\n    set_a = set(divisors(a))\n    # Get the set of divisors of b\n    set_b = set(divisors(b))\n    # Find the intersection of the two sets\n    common_divisors = set_a.intersection(set_b)\n    # Calculate the sum of the common divisors\n    sum_common_divisors = sum(common_divisors)\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function calculates the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = [i for i in range(1, b+1) if b % i == 0]\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == b:\n        return a\n\n    common_divisors = []\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a < b:\n        return sum(b, a)\n    \n    # loop through all possible divisors of a\n    for i in range(1, a):\n        if (a % i == 0) and (b % i == 0):\n            # add i to sum\n            sum = i + sum\n    \n    return sum"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y & 1:  # check if the least significant bit is 1\n            result += x  # add x to the result if the least significant bit is 1\n        x <<= 1  # shift x one bit to the left\n        y >>= 1  # shift y one bit to the right\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(max(x, y)+1):\n        result += x if i <= x else 0\n        result += y if i <= y else 0\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Parameters:\n    n (int): The maximum number of characters a word can have.\n    words (list): A list of words.\n\n    Returns:\n    list: A list of words that are longer than n characters.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()  # Split the string into a list of words\n    long_words = []  # Initialize an empty list to store long words\n\n    for word in words:  # Loop through each word in the list\n        if len(word) > n:  # Check if the length of the word is greater than n\n            long_words.append(word)  # If it is, append it to the long_words list\n\n    return long_words  # Return the long_words list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()  # split the string into words\n    long_words = [word for word in words if len(word) > n]  # create a new list of words that are longer than n characters\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    \n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # check if matrix has n^2 elements\n    if n**2!= len(my_matrix[0]):\n        return \"Matrix must have n^2 elements\"\n\n    # check if all elements are unique\n    unique = set(sum(my_matrix, []))\n    if len(unique)!= n**2:\n        return \"Matrix must contain only unique elements\"\n\n    # check if the sum of the diagonal elements is equal to the sum of the rest of the elements\n    diagonal_sum = sum([my_matrix[i][i] for i in range(n)])\n    if diagonal_sum!= sum(sum(my_matrix, [])[i] for i in range(n) if i!= j for j in range(n)):\n        return \"Matrix must have the sum of the diagonal elements equal to the sum of the rest of the elements\"\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize variables to keep track of the sums of each row, column, and diagonal\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n\n    # Loop through each element in the matrix\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            # Calculate the sum of the element and add it to the appropriate sum variable\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n            diag_sum += my_matrix[i][i]\n\n    # Check if the sum of the diagonal and row/column sums is equal to the original sum of the matrix\n    if row_sum == diag_sum == col_sum == sum(sum(row) for row in my_matrix):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    \n    # Check if the matrix is a magic square\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        if row_sum == col_sum or row_sum + col_sum == n*(n**2) or row_sum - col_sum == n*(n**2):\n            return True\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # initialize variables for rows and columns\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    # check if the matrix is square\n    if rows!= cols:\n        return False\n    # check if all the elements in the matrix are distinct\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] in my_matrix[i][j+1:cols] or my_matrix[i][j] in my_matrix[i+1:rows][j] or my_matrix[i][j] == my_matrix[i+1:rows][j+1:cols]:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Calculate the sum of the rows and columns\n    row_sum = sum(sum(row) for row in my_matrix)\n    col_sum = sum(sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix)))\n    \n    # Check if the sum is equal to the product of the matrix size\n    if row_sum == len(my_matrix) ** 2 and col_sum == len(my_matrix) ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i]) for i in range(n)]\n    diagonal_sum = sum(my_matrix[i][i] for i in range(n))\n    for i in range(n):\n        if row_sums[i]!= col_sums[i] or row_sums[i]!= diagonal_sum or col_sums[i]!= diagonal_sum:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has the same number of rows and columns\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is a magic square\n    total = sum(sum(row) for row in my_matrix)\n    if total!= 30:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if matrix is a square\n    if rows!= cols:\n        return False\n\n    # Check if matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            # Check if element is present in the row and column\n            if my_matrix[i][j] == 0:\n                return False\n\n            # Check if element is present diagonally in the square\n            if i == j or i + j == rows - 1:\n                if my_matrix[i][j]!= (i + j + 1):\n                    return False\n\n    # If all conditions are satisfied, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3:\n        return False\n\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix[0])!= 3:\n        return False\n\n    # Check if the matrix has all integers\n    for row in my_matrix:\n        for item in row:\n            if not isinstance(item, int):\n                return False\n\n    # Check if the matrix is a magic square\n    for i in range(3):\n        for j in range(3):\n            if my_matrix[i][j]!= i+1:\n                return False\n            if my_matrix[j][i]!= i+1:\n                return False\n            if i == j:\n                for k in range(3):\n                    if my_matrix[i][k]!= k+1:\n                        return False\n                    if my_matrix[k][i]!= k+1:\n                        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # check if all elements are unique\n    unique_elements = set(sum(my_matrix, []))\n    if len(unique_elements)!= len(my_matrix) ** 2:\n        return False\n    \n    # check if the matrix is a magic square\n    magic_sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            magic_sum += my_matrix[i][j]\n    if magic_sum == len(my_matrix) ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to count the occurrences of each item in the list\n    item_count = defaultdict(int)\n    for num in nums:\n        item_count[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = max(item_count, key=item_count.get)\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    for num, count in freq.items():\n        if count == max_freq:\n            return num\n\n    return None"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    # count the frequency of each item in the list\n    for num in nums:\n        freq[num] += 1\n        \n    # find the item with the maximum frequency\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_item = None\n    max_count = 0\n    \n    for num in nums:\n        count[num] += 1\n        \n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_count = max(freq_dict.values())\n    max_item = None\n    for item, count in freq_dict.items():\n        if count == max_count:\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    max_item = None\n    max_freq = 0\n\n    for num in nums:\n        frequency[num] += 1\n        if frequency[num] > max_freq:\n            max_freq = frequency[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    # Initialize an empty string to store the reversed vowels\n    reversed_vowels = ''\n    # Loop through each character of the given string\n    for i in range(len(str1)-1, -1, -1):\n        # If the character is a vowel, append it to the reversed_vowels string\n        if str1[i] in vowels:\n            reversed_vowels += str1[i]\n    return reversed_vowels"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    new_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            new_str = char + new_str\n        else:\n            new_str = new_str + char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_reverse = ''\n    for char in str1:\n        if char.lower() in vowels:\n            vowels_reverse += char\n    return vowels_reverse[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_set = set(vowels)\n    vowels_list = list(vowels_set)\n    vowels_list.remove(\"y\")\n    vowels_str = \"\".join(vowels_list)\n    return str1[::-1].replace(vowels_str, \"\")"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            result = char + result\n    return result[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(char)\n    result.reverse()\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_str += char\n    return reversed_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reverse_str = ''\n    for char in str1:\n        if char not in vowels:\n            reverse_str += char\n    return reverse_str[::-1]\n"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Initialize an empty string\n    result = \"\"\n    # Iterate through the tuple\n    for i in tup1:\n        # Convert each element to a string and concatenate it to the result string\n        result += str(i)\n    # Return the result string\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n\n    # Convert the tuple to a string\n    string = str(tup1)\n\n    # Return the string\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # convert the tuple to a string using the join() method\n    string = \",\".join(str(x) for x in tup1)\n    return string"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return''.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(elem) for elem in tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize sum variable to zero\n    negative_sum = 0\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            negative_sum += num\n    # Return the sum of negative numbers\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativesum = 0\n    for num in nums:\n        if num < 0:\n            negativesum += num\n    return negativesum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n    else:\n        hexagonal_num = 1\n        for i in range(1, n+1):\n            hexagonal_num += 2 * i\n        print(hexagonal_num)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 6\n    while a < n:\n        c = a + b\n        print(c, end=\" \")\n        a += 1\n        b += 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n*(2*n - 1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth hexagonal number is:\", hexagonal_num(n))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # base case for n=0\n    if n == 0:\n        return 0\n    \n    # base case for n=1\n    if n == 1:\n        return 1\n    \n    # base case for n=2\n    if n == 2:\n        return 3\n    \n    # calculating nth hexagonal number\n    return (n * (2 * n - 1)) // 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((2*n+1) * (2*n+1) + (2*n-1) * (2*n-1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return ((n * (3 * n - 1)) // 2) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    if n <= 1:\n        return n\n    else:\n        return 3*n*n - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (5 * n * n) // 2"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    ratio = zeros / non_zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the array to an array of bytes\n    byte_array = array('B', [0] * len(nums))\n    for i in range(len(nums)):\n        byte_array[i] = nums[i]\n\n    # Calculate the sum of all non-zeroes in the array\n    non_zero_sum = sum(byte_array[byte_array!= 0])\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_count = byte_array.count(0)\n    ratio = zero_count / non_zero_sum\n\n    # Return the ratio of zeroes to non-zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_ones = 0\n    \n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_ones += 1\n            \n    ratio = num_zeroes/num_ones if num_ones > 0 else 0\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    if non_zeros == 0:\n        return 0\n    else:\n        return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create a boolean array of the same length as the input array\n    arr = array('B', [1] * len(nums))\n    # iterate through the input array and set the corresponding boolean element in the array to True\n    for num in nums:\n        arr[num] = 0\n    # count the number of zeroes and non-zeroes in the array\n    count_zero = sum(arr)\n    count_non_zero = len(nums) - count_zero\n    # calculate the ratio of zeroes to non-zeroes and return it\n    return count_zero / count_non_zero"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    count = array('i', [0] * len(nums))\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n        count[num] += 1\n    ratio_zero = count_zero / count_non_zero\n    return ratio_zero"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # convert the list to an array\n    arr = array('i', nums)\n\n    # count the number of zeroes and non-zeroes\n    count_zero = 0\n    count_non_zero = 0\n    for num in arr:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n\n    # calculate the ratio of zeroes to non-zeroes\n    ratio = count_zero / count_non_zero\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = array('i', [0] * len(nums))\n    non_zeroes = array('i', [0] * len(nums))\n    \n    for num in nums:\n        if num == 0:\n            zeroes[zeroes.index(num)] += 1\n        else:\n            non_zeroes[non_zeroes.index(num)] += 1\n    \n    ratio = 0\n    for i in range(len(zeroes)):\n        ratio += non_zeroes[i] / zeroes[i]\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))  # create an array of integers of size len(nums) and initial values 0\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1  # increment the count of the index of the first occurrence of 0\n    non_zeros_count = len(nums) - sum(zeros)  # calculate the count of non-zeroes in the array by subtracting the sum of zero counts\n    return float(zeros[0]) / non_zeros_count  # return the ratio of zeroes to non-zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zero_count = 0\n    non_zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    \n    return zero_count / non_zero_count"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if n is a power of 2\n    if n == 1 or n == 2:\n        return True\n    elif n == 0:\n        return False\n\n    # Check if n can be represented as sum of powers of 2\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 2:\n        return False\n    # check if n is divisible by 2^p for some p >= 1\n    p = 1\n    while (n >= 2**p) and (p <= 31):\n        p += 1\n    if p > 31:\n        return False\n    # check if the number can be represented as sum of 2^p powers of 2\n    for i in range(p):\n        if n % (2**i)!= 0:\n            return False\n    # check if the number can be represented as sum of non-zero powers of 2\n    for i in range(1, p):\n        if n % (2**i) == 0:\n            if n - 2**i < 0:\n                return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # We can check if the given number can be represented as sum of non-zero powers of 2 or not by using bit manipulation.\n    # Let's start with the binary representation of the given number.\n    binary_representation = bin(n)[2:]\n    \n    # Now, we will check if there is at least one non-zero digit in the binary representation.\n    # If not, then the given number cannot be represented as sum of non-zero powers of 2.\n    if binary_representation.count('0') == 0:\n        return False\n    \n    # Now, we will check if the sum of non-zero powers of 2 in the binary representation is a power of 2.\n    # We can check this by multiplying the powers of 2 until the sum is a power of 2.\n    # If the sum is a power of 2, then we will return True.\n    # Otherwise, we will return False.\n    power_of_two = 2\n    sum_of_powers_of_two = 0\n    while power_of_two <= len(binary_representation):\n        if binary_representation.count('0') == sum_of_powers_of_two:\n            return True\n        sum_of_powers_of_two += power_of_two\n        power_of_two *= 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # initialize the result variable to True\n    result = True\n\n    # loop through the digits of the number\n    for digit in str(n):\n        # if the digit is 0, set the result to False\n        if digit == '0':\n            result = False\n            break\n\n        # if the digit is 1, check if the next digit is also 1\n        elif digit == '1' and str(n)[1:].startswith('0'):\n            # if the next digit is 0, then this is not a valid representation\n            result = False\n            break\n\n        # if the digit is not 1 or 0, then this is not a valid representation\n        else:\n            result = False\n            break\n\n    # if the result is True, then the number is a valid sum of powers of 2\n    return result"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # To check whether the given number can be represented as sum of non-zero powers of 2 or not, we need to check whether the sum of all non-zero powers of 2 in the decimal representation of the given number is equal to the given number itself.\n    # We can use the binary search algorithm to solve this problem.\n    \n    # Convert the given number to decimal and find the number of bits in the binary representation of the number.\n    decimal_representation = int(bin(n)[2:])\n    no_of_bits = len(decimal_representation)\n    \n    # Initialize the left and right limits of the binary search range.\n    left = 0\n    right = (1 << no_of_bits) - 1\n    \n    # Iterate until the left and right limits cross.\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # If the sum of all non-zero powers of 2 in the mid binary representation is less than the given number, the given number can be represented as sum of non-zero powers of 2.\n        # Calculate the sum of all non-zero powers of 2 in the mid binary representation.\n        mid_decimal_representation = int(bin(mid)[2:])\n        mid_no_of_bits = len(mid_decimal_representation)\n        mid_sum_of_powers_of_two = 0\n        for i in range(mid_no_of_bits):\n            if mid_decimal_representation[i] == '1':\n                mid_sum_of_powers_of_two += 2**i\n        \n        # If the sum of all non-zero powers of 2 in the mid binary representation is equal to the given number, we can return True, because the given number can be represented as sum of non-zero powers of 2.\n        if mid_sum_of_powers_of_two == n:\n            return True\n        \n        # If the sum of all non-zero powers of 2 in the mid binary representation is greater than the given number, the given number cannot be represented as sum of non-zero powers of 2.\n        # Update the right limit to the mid point.\n        elif mid_sum_of_powers_of_two > n:\n            right = mid - 1\n        \n        # If the sum of all non-zero powers of 2 in the mid binary representation is less than the given number, the given number cannot be represented as sum of non-zero powers of 2.\n        # Update the left limit to the mid point.\n        else:\n            left = mid + 1\n    \n    # If the left and right limits cross and the given number cannot be represented as sum of non-zero powers of 2, we can return False, because it is impossible to find the sum of all non-zero powers of 2.\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power = 0\n    while n > 0:\n        power += 1\n        n >>= 1\n    if n > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    if n == 0: \n        return True \n\n    if n % 2 == 0: \n        return False \n\n    # check for power of 2 \n    while n > 1: \n        if n % 2 == 0: \n            n = n // 2 \n        else: \n            return False \n\n    return True \n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count >= 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # To check if the given number can be represented as sum of non-zero powers of 2 or not.\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count == 32  # if the count is 32, it means that the number can be represented as sum of non-zero powers of 2."
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize the count of 2's in the number\n    count = 0\n    # Check whether the number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n    # Iterate through the number and count the number of 2's\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    # Check if the count of 2's is odd\n    if count % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # circumference is pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.1415926535897932384626433832795\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r\n    \n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # Formula for circumference of a circle\n    return circumference # Return the value of circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*(r**2)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265359\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [item for sublist in test_list for item in sublist]\n    unique_numbers = list(set(flat_list))\n    return unique_numbers"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(sum(test_list, []))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = set()\n    for item in test_list:\n        if type(item) == list:\n            result.update(extract_singly(item))\n        elif type(item) == int:\n            result.add(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for element in sublist:\n            flat_list.append(element)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    # Initialize an empty set to store the flattened list\n    flattened_set = set()\n    \n    # Loop through each element of the list\n    for item in test_list:\n        # If the element is a list, recursively flatten it\n        if type(item) == list:\n            flattened_set.update(extract_singly(item))\n        # Otherwise, add the element to the set\n        else:\n            flattened_set.add(item)\n    \n    # Convert the set to a list and return it\n    return list(flattened_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for num in sublist:\n            flattened_list.append(num)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        for subitem in item:\n            flat_list.append(subitem)\n    return set(flat_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    # Bubble sort\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    \n    # Insertion sort\n    for i in range(1, n):\n        key = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > key:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = key"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # find the largest element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # swap the largest element with the first element of the unsorted part of the array\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # reverse the unsorted part of the array\n        for j in range(i, n):\n            nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    def reverse_list(arr):\n        i = 0\n        while i < len(arr) // 2:\n            arr[i], arr[-i - 1] = arr[-i - 1], arr[i]\n            i += 1\n        return arr\n\n    for i in range(len(nums) - 1, 0, -1):\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        if max_index!= i:\n            nums[max_index], nums[i] = nums[i], nums[max_index]\n\n    reverse_list(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    # Get the length of the list\n    n = len(nums)\n\n    # Create a boolean array 'inversions' of length n to keep track of swaps\n    inversions = [False] * n\n\n    # Perform pancake sort\n    for i in range(n):\n        # Find the largest element in the unsorted part of the list\n        max_index = i\n        for j in range(i + 1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the largest element with the first element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Check if any elements have been swapped during this pass\n        if inversions[max_index]:\n            # If yes, the array is already sorted, so we can break the loop\n            break\n\n        # Mark all elements to the right of the current index as already sorted\n        for j in range(max_index + 1, n):\n            inversions[j] = True\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    # Initialize the indices and a boolean variable to keep track of swapping\n    indices = [i for i in range(n)]\n    swapping = True\n\n    while swapping:\n        swapping = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                indices[i], indices[i+1] = indices[i+1], indices[i]\n                swapping = True\n\n    # Rearrange the list based on the indices\n    sorted_nums = [nums[i] for i in indices]\n\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize the list of numbers to sort\n    n = len(nums)\n    # Sort the numbers in descending order\n    nums.sort(reverse=True)\n    # Initialize the pancake and pancake sizes\n    pancake = [0] * n\n    pancake_size = 0\n\n    # Starting from the last number, find the pancake size and the pancake\n    for i in range(n - 1, -1, -1):\n        # Move the pancake to the next position\n        pancake[i] = i + 1\n        # Update the pancake size\n        pancake_size += 1\n        # If the pancake size is greater than the current number, swap the pancake with the current number\n        if pancake_size > i + 1:\n            pancake[i + 1], pancake_size = pancake_size, pancake[i + 1]\n\n    # Iterate through the pancake and swapping the elements in the list\n    for i in range(n):\n        j = pancake[i] - 1\n        nums[i], nums[j] = nums[j], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the largest element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Swap the largest element with the i-th element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n        # Reverse the remaining part of the list\n        for j in range(i, n-1, -1):\n            nums[j], nums[n-1-j] = nums[n-1-j], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # convert the list to a string to sort it\n    sorted_nums = str(nums)\n    # split the string into a list of characters\n    sorted_chars = list(sorted_nums)\n    # convert the list of characters back to a string\n    sorted_nums = ''.join(sorted_chars)\n    # convert the sorted string back to a list of integers\n    sorted_nums = list(sorted_nums)\n    # reverse the sorted list\n    sorted_nums.reverse()\n    # iterate over the sorted list and swap adjacent elements\n    for i in range(len(sorted_nums)-1):\n        temp = sorted_nums[i]\n        sorted_nums[i] = sorted_nums[i+1]\n        sorted_nums[i+1] = temp\n    # return the sorted list\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    def rotate(nums, k):\n        n = len(nums)\n        k %= n\n        nums[:k], nums[n-k:] = nums[n-k:], nums[:k]\n\n    def pancake_sort_helper(nums, k):\n        n = len(nums)\n        for i in range(n):\n            j = i\n            while j > 0 and nums[j-1] > nums[j]:\n                nums[j-1], nums[j] = nums[j], nums[j-1]\n                j -= 1\n        rotate(nums, k)\n\n    def pancake_sort_iterative(nums):\n        n = len(nums)\n        for k in range(n, 1, -1):\n            pancake_sort_helper(nums, k)\n\n    pancake_sort_iterative(nums)\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list2[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    for i in range(len(list1)):\n        if list1[i] == list3[i]:\n            count += 1\n    for i in range(len(list2)):\n        if list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes in three lists and counts the number of items that are identical in the same position of each list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as an input and returns the number of lists present in it.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array must have at least two elements\")\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # initialize variables for min and max values\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # loop through the array and update min and max values\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n\n    # calculate the maximum difference between any two elements\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Given an array of integers, return the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array must have at least 2 elements.\")\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Create a list of tuples containing the values of x and y that satisfy ax + by = n\n    solutions = [(x, y) for x in range(-1000, 1001) for y in range(-1000, 1001) if a*x + b*y == n]\n    # Check if there exists at least one solution\n    if solutions:\n        return solutions[0]\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None # no solutions if ax = 0\n    \n    # check if there are any solutions\n    for x in range(-1000, 1001):\n        if x == 0 and a!= 0: # check if x = 0 and ax!= 0\n            continue\n        y = (n - a*x) // b # calculate y using the formula y = (n - ax) // b\n        if y >= -1000 and y <= 1000: # check if y is within the range of possible values\n            return (x, y) # return the solution as a tuple\n    \n    return None # no solution found"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n//2+1):\n        y = n - a*x - b*x\n        if y == 0:\n            return (x,y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if the equation has no solutions\n    if b == 0:\n        return None\n    \n    # Calculate the discriminant\n    disc = b**2 - 4*a*n\n    \n    # Check if the equation has a single solution\n    if disc == 0:\n        x1 = -b/2/a\n        return (int(x1),)\n    \n    # Check if the equation has two solutions\n    elif disc > 0:\n        x1 = (-b + disc**0.5)/2/a\n        x2 = (-b - disc**0.5)/2/a\n        return (int(x1), int(x2))\n    \n    # If the equation has three or more solutions, return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "Let's write a Python function that implements the given problem statement."
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Use the quadratic formula to find the roots of the equation ax^2 + bx + c = 0\n    c = b*b - 4*a*n\n    if c < 0:\n        # No real roots, no solution\n        return None\n    elif c == 0:\n        # One real root, one solution\n        x = -b / (2*a)\n        y = x\n        return (x, y)\n    else:\n        # Two real roots, two solutions\n        x1 = (-b + sqrt(c)) / (2*a)\n        x2 = (-b - sqrt(c)) / (2*a)\n        y1 = x1\n        y2 = x2\n        return ((x1, y1), (x2, y2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if there is a solution\n    if d < 0:\n        return None\n    elif d == 0:\n        return ((-b) // a,)\n    else:\n        # Calculate the roots of the discriminant\n        root1 = (-b + d**0.5) // (2*a)\n        root2 = (-b - d**0.5) // (2*a)\n        \n        # Check if the roots are integers\n        if not root1.is_integer() or not root2.is_integer():\n            return None\n        \n        # Return the solution as a tuple of integers\n        return (int(root1), int(root2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0:\n        # ax = 0\n        # y = -n/b\n        if b == 0:\n            return None\n        else:\n            return (-n//b, -n//b)\n    else:\n        # ax + by = n\n        # x = (n - by) / a\n        # y = (n + by) / a\n        x = (n - b*a) // a\n        y = (n + b*a) // a\n        if x == 0 or y == 0:\n            return None\n        else:\n            return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    # Initialize variables\n    x = y = 0\n    \n    # Check for divisibility by b\n    while b % a == 0:\n        # Calculate new x and check if it satisfies n\n        x = x + 1\n        if a * x + b * y == n:\n            return (x, y)\n        \n        # Calculate new y and check if it satisfies n\n        y = y + 1\n        if a * x + b * y == n:\n            return (x, y)\n        \n        # If no solution found, update b and try again\n        b += 1\n        \n    # If no solution found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x_i = 0\n    while x_i <= n//a:\n        x_i *= 2\n    y_i = 0\n    while y_i <= n//b:\n        y_i *= 2\n    x = x_i - 1\n    y = n - a*x - b*y_i\n    if a*x + b*y == n:\n        return (x, y)\n    while x < n//a:\n        while y < n//b:\n            x_i += 1\n            y_i += 1\n            if x_i*a + y_i*b == n:\n                return (x_i, y_i)\n            x_i -= 1\n            y_i -= 1\n        y_i -= 1\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_new = []\n    for item in list1:\n        if item not in list2:\n            list1_new.append(item)\n    return list1_new"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through list1 and remove elements from list2\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n\n    # Return the modified list1\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Initialize a new list to store the final result\n    result = []\n    # Loop through each element of the first list\n    for element in list1:\n        # Check if the element is not present in the second list\n        if element not in list2:\n            # If it's not, add it to the result list\n            result.append(element)\n    # Return the final result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through each element in list1\n    for i in range(len(list1)):\n        # Check if the element is present in list2\n        if list1[i] in list2:\n            # If yes, remove it from list1\n            list1.remove(list1[i])"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create an empty list to store the result\n    result = []\n    # loop through the first list\n    for item in list1:\n        # check if the item is present in the second list\n        if item not in list2:\n            # if it's not, add it to the result list\n            result.append(item)\n    # return the result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += (n - 2*i)\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    i = 0\n    total = 0\n    while i * 2 <= n // 2:\n        total += n - 2 * i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize sum\n    sum = 0\n    \n    # Loop through odd indices (from 1 to n // 2)\n    for i in range(1, n // 2 + 1):\n        # Add (n - 2*i) to sum\n        sum += n - 2 * i\n    \n    # Return sum\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += (n - 2 * i)\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    \n    for i in range(l):\n        area += s * math.tan(math.pi / l)\n    \n    area *= 0.5 * s ** 2\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    sp = (s * (s - 2 * l)) / (4 * tan(pi / l))\n    # Return the area of the polygon\n    return sp * l"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the perimeter of the polygon\n    perimeter = l * s\n\n    # Calculate the area of the polygon using the formula\n    # A = (s * (tan(pi/l) + 1)) / 2\n    area = (s * (tan(pi/l) + 1)) / 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s*(tan(pi/l))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using the Heron's formula\n    area = (s * l * (s + l)) / (4 * tan(pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the perimeter of the polygon\n    perimeter = (l * s) / 2\n    # Calculate the area of the polygon\n    area = perimeter * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the semi-perimeter\n    sp = (s*l)/2\n    \n    # Calculate the area using the formula:\n    # A = (s^2 * sin(n*pi/l)) / (2 * tan(n*pi/l))\n    # where n is the number of sides and A is the area.\n    n = l\n    area = (sp**2 * tan(n*pi/l)) / (2 * tan(n*pi/l))\n\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    angle = 360 / l\n    for i in range(l):\n        x = s * tan(pi / 180 * angle)\n        y = 0\n        area += x\n        angle -= 360 / l\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, n//2+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # find the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n\n    # check if the sum of the divisors is the same as n\n    if sum(divisors) == n:\n        print(\"The sum of the divisors is the same as n.\")\n    else:\n        print(\"The sum of the divisors is not the same as n.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            div_list.append(i)\n    div_list.append(n)\n    div_list = sorted(div_list)\n    div_sum = 0\n    for i in div_list:\n        div_sum += i\n    return div_sum == sum(div_list)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n using math.prod() function\n    div_sum = math.prod(range(1, int(math.sqrt(n))+1))\n    # Calculate the sum of the divisors of n using a loop\n    # for i in range(1, int(math.sqrt(n))+1):\n    #     div_sum += i\n    #     if n % div_sum == 0:\n    #         break\n    # Calculate the sum of the divisors of n using a recursive function\n    def sum_div(num):\n        if num == 1:\n            return 1\n        return num + sum_div(num-1)\n    # Call the sum_div() function with n as an argument\n    div_sum = sum_div(n)\n\n    # Check if the sum of divisors of n is the same as the sum of divisors of the sum of the divisors of n\n    if div_sum == sum_div(div_sum):\n        print(\"The sum of divisors of\", n, \"and\", div_sum, \"are the same.\")\n    else:\n        print(\"The sum of divisors of\", n, \"and\", div_sum, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function determines if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div_sum += i \n    if n > 1 and div_sum == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    div_sum = sum(divs)\n\n    if div_sum == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Check if n is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Calculate the sum of the divisors of n\n    divisor_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i + n // i\n\n    # Check if the sum of the divisors of n is equal to n\n    if divisor_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # finding the divisors of n \n    divisors = [] \n    for i in range(1, n+1): \n        if n % i == 0: \n            divisors.append(i) \n    # finding the sum of the divisors \n    sum_divisors = sum(divisors) \n    return sum_divisors"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for c1 in str1.lower():\n        for c2 in alphabet:\n            if c1 == c2:\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase and remove all non-alphabetic characters\n    str1 = str1.lower()\n    str1 = ''.join(filter(str.isalpha, str1))\n\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n\n    # Loop through the string and count the characters at the same position as in the English alphabet\n    for char in str1:\n        if char.isalpha():\n            # If the character is an alphabet, check if it is in the English alphabet\n            for i in range(ord('a'), ord('z')+1):\n                if chr(i) == char:\n                    # If it is, add 1 to its count in the dictionary\n                    if char in char_count:\n                        char_count[char] += 1\n                    else:\n                        char_count[char] = 1\n\n    # Print the count of each character\n    for char, count in char_count.items():\n        print(char, count)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n    \n    # Iterate over each character in the input string\n    for char in str1:\n        # Check if the character is in the English alphabet\n        if char.isalpha():\n            # Convert the character to its position in the alphabet and add 1 to the count for that position\n            pos = ord(char) - 96\n            char_count[pos] = char_count.get(pos, 0) + 1\n    \n    # Return the dictionary containing the count of characters at each position in the alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize an empty dictionary to store the count of characters\n    char_count = {}\n    \n    # Loop through the characters of the English alphabet\n    for i in range(ord('a'), ord('z')+1):\n        # Convert the current character to its ASCII code and store it in the variable letter\n        letter = chr(i)\n        \n        # If the current character is in the input string, add 1 to its count in the dictionary\n        if letter in str1:\n            if letter in char_count:\n                char_count[letter] += 1\n            else:\n                char_count[letter] = 1\n    \n    # Loop through the characters of the input string and add 1 to the count of its letter in the dictionary\n    for letter in str1:\n        if letter in char_count:\n            char_count[letter] += 1\n    \n    # Return the count of characters\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    count = 0\n    for i in range(26):\n        if str1.upper() == chr(65+i).upper():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    count_dict = {}\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in alphabet:\n        count_dict[char.lower()] = str1.lower().count(char.lower())\n\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize an empty dictionary to store the count of each character\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a letter (both uppercase and lowercase), add 1 to the count in the dictionary\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    # Initialize a variable to store the total count of characters\n    total_count = 0\n    # Loop through the dictionary and add up the counts for each character\n    for count in char_count.values():\n        total_count += count\n    # Return the total count of characters\n    return total_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(97 + i).lower(): # ASCII code of 'a'\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(26):\n        char = chr(i+97)\n        if str1.lower().count(char.lower()) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    count_dict = {}\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a vowel (a, e, i, o, u)\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            # If it is, add 1 to the count for the position of the character in the English alphabet (case insensitive)\n            count_dict[char] = count_dict.get(char, 0) + 1\n    # Return the count of each character in the string\n    return count_dict"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0:\n                if A[i] ^ A[j] == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    This function takes an integer as an input and returns the next power of 2\n    greater than or equal to the input.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the next power of 2 using bitwise operations\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    # Return the result\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n using the binary search algorithm.\n    \"\"\"\n    # The smallest power of 2 greater than or equal to n\n    min_power = 1\n    \n    # Initialize the left and right bounds of the binary search\n    left = 0\n    right = n\n    \n    # Perform the binary search to find the smallest power of 2 greater than or equal to n\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If mid is a power of 2, update min_power and exit the loop\n        if mid & (mid - 1) == 0:\n            min_power = mid\n            break\n        \n        # If mid is less than or equal to the square root of n, update the right bound\n        if mid <= n ** 0.5:\n            left = mid + 1\n            \n        # If mid is greater than the square root of n, update the left bound\n        else:\n            right = mid - 1\n            \n    # Return the smallest power of 2 greater than or equal to n\n    return min_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    i = 1\n    while i < n:\n        i *= 2\n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the variable to store the smallest power of 2 greater than or equal to n\n    smallest_power_of_2 = n\n    \n    # Iterate over all powers of 2 from 1 to 2^31 - 1 (i.e. all possible 32-bit integers)\n    for i in range(1, 2**32):\n        # If the current integer is a power of 2, check if it is greater than or equal to n\n        if i >= n:\n            # If it is, update the smallest_power_of_2 variable with the current integer\n            smallest_power_of_2 = i\n    \n    # Return the smallest_power_of_2 variable\n    return smallest_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n    \n    # Find the next power of 2 using bitwise operations\n    while n & (n - 1)!= 0:\n        n = n | (n - 1)\n    \n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize the smallest power of 2 greater than or equal to 1 as 2\n    power_of_2 = 2\n    \n    # loop until the power of 2 is greater than or equal to the input number\n    while power_of_2 < n:\n        # check if the power of 2 is a power of 2\n        if power_of_2 & (power_of_2 - 1) == 0:\n            # if it is, increment it and continue looping\n            power_of_2 <<= 1\n        else:\n            # if it is not, decrement it and continue looping\n            power_of_2 >>= 1\n    \n    # return the smallest power of 2 greater than or equal to n\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the power of 2 to check\n    power = 1\n\n    # Loop until we find the next power of 2 greater than or equal to n\n    while power < n:\n        power <<= 1\n\n    # Return the next power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the variable to store the next power of 2\n    next_power = 1\n\n    # Loop while the current number is less than the next power of 2\n    while next_power < n:\n        # Increment the next power of 2 by 2\n        next_power <<= 1\n\n    # Return the next power of 2\n    return next_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 2\n    else:\n        # Find the next power of 2 using binary exponentiation\n        n = n - 1\n        n |= n >> 1\n        n |= n >> 2\n        n |= n >> 4\n        n |= n >> 8\n        n |= n >> 16\n        return n + 1"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n\n    Parameters:\n    a (list): List to search for the number in\n    x (int): Number to search for in the list\n\n    Returns:\n    int: Number of occurrences of the number in the list\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    This function takes in a list and a number x as input and returns the number of occurrences of x in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:j] for i in range(m, n+1) for j in range(m, n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    total = 0\n    for i in range(m, n+1):\n        if i < len(list1):\n            total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    if m > n:\n        m, n = n, m\n\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        m, n = n, m\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return None\n    # Initialize sum to 0\n    sum = 0\n    # Loop through the range and add the numbers\n    for i in range(m, n+1):\n        sum += list1[i]\n    # Return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Calculate the sum of the numbers within the range\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-m]\n\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 5 * a\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the semi-perimeter using the formula: 5a^2\n    s = 5*a**2\n    # use the math library to calculate the arccosine of 1/5\n    c = math.acos(1/5)\n    # calculate the length of the base using the formula: 5sin(c)\n    base_length = 5*math.sin(c)\n    # use the formula: 2(sin(c))^2 to find the hypotenuse of the right triangle\n    hypotenuse = 2*(math.sin(c))**2\n    # use the formula: 5sin(c)cos(c) to find the length of the apothem of the right triangle\n    apothem = 5*math.sin(c)*math.cos(c)\n    # calculate the perimeter of the pentagon using the formula: 5+5+5+...+5+5=25+25+25+...+25+25=125\n    perimeter = 5+5+5+5+5\n    # add the semi-perimeter and the base length to find the total length of the pentagon\n    total_length = s + base_length\n    # add the hypotenuse and the apothem to find the total length of the base of the pentagon\n    base_length = hypotenuse + apothem\n    # add the total length of the pentagon to the total length of the base to get the total length of the entire pentagon\n    total_length = total_length + base_length\n    # return the total length of the pentagon\n    return total_length"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    \n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula for perimeter of a regular pentagon: 5*a\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the perimeter of the pentagon using the formula: 5 * a^2\n    perimeter = 5 * a**2\n\n    # Return the perimeter of the pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Use the formula for the perimeter of a regular pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = s.find('std')\n    while i!= -1:\n        count += 1\n        i = s.find('std', i+4)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' or i == 'd' or i == 't':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurance of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    std ='std'\n    count = 0\n    for char in s:\n        if char == std:\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # define a list to store the data types of all the elements in the tuple\n    data_types = []\n\n    # iterate through each element in the tuple\n    for element in test_tuple:\n        # add the data type of the current element to the data_types list\n        data_types.append(type(element))\n\n    # iterate through each data type in the data_types list and check if all the elements have the same type\n    for i in range(len(data_types) - 1):\n        if data_types[i]!= data_types[i+1]:\n            return False\n\n    # if all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(test_tuple) == 0:\n        return True\n    \n    # initialize the first element of the tuple as the data type\n    data_type = type(test_tuple[0])\n    \n    # check if all the elements in the tuple have the same data type\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 1:\n        return True\n    else:\n        for i in range(len(test_tuple)-1):\n            if not isinstance(test_tuple[i], type(test_tuple[i+1])):\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # check if the tuple is empty\n    if len(test_tuple) == 0:\n        return True\n\n    # iterate through the tuple and get the data type of each element\n    types = [type(x) for x in test_tuple]\n\n    # check if all the data types are the same\n    if len(set(types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to keep track of the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    \n    # loop through the rest of the elements in the tuple and check if their data type matches the initial data type\n    for element in test_tuple[1:]:\n        if type(element)!= data_type:\n            return False\n    \n    # if all elements in the tuple have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n            if count > n/2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    \n    # Initialize count and candidate\n    count = 0\n    candidate = 0\n    \n    # Iterate through the array and update count and candidate\n    for i in arr:\n        if i == x:\n            count += 1\n        elif count > 0:\n            count -= 1\n        \n        if count == 0:\n            candidate = i\n            \n    # Check if the candidate is the majority element\n    if count > 0:\n        return False\n    else:\n        if arr.count(candidate) > n//2:\n            return True\n        else:\n            return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize a counter for the element x\n    count = 0\n    # Loop through the array\n    for i in range(n):\n        # If the current element is equal to x, increment the counter\n        if arr[i] == x:\n            count += 1\n            # If the counter has reached n/2, return True (the element is the majority)\n            if count == n // 2:\n                return True\n    # If the loop completes without finding the element, return False (the element is not the majority)\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize the count of occurrences of x\n    count = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        \n        # If the current element is equal to x, increment the count\n        if arr[i] == x:\n            count += 1\n            \n    # If the count is greater than n/2, return True\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count >= n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        n &= (n - 1)\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0  # Initialize a variable to store the count of set bits\n\n    while n > 0:  # Loop until the input number is zero\n\n        # Check if the last bit of the input number is set (i.e., if its value is 1)\n        if n % 2 == 1:\n            count += 1  # Increment the count of set bits\n\n        # Shift the input number one bit to the right (i.e., divide by 2)\n        n = n >> 1\n\n    return count  # Return the count of set bits"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        n &= (n - 1)\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    new_str = ''\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    return ''.join(filter(lambda x: x%2==0, str))"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    # Initialize a new string to store the output\n    output = ''\n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index of the character is odd\n        if ord(char) % 2 == 1:\n            # If the character is odd, append it to the output string\n            output += char\n    # Return the output string\n    return output"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(string):\n    '''\n    This function removes the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 1:\n            result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2!= 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns a new string with all the odd index values removed.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(string):\n    result = \"\"\n    for i, char in enumerate(string):\n        if i % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum number.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # Check if a is the minimum of the three numbers\n    if a < b and a < c:\n        return a\n    # Check if b is the minimum of the three numbers\n    elif b < a and b < c:\n        return b\n    # Check if c is the minimum of the three numbers\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    # check if all three numbers are valid\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(c, int)):\n        print(\"Error: All three numbers must be integers.\")\n        return\n\n    # find minimum value\n    min_value = min(a, b, c)\n\n    # return minimum value\n    return min_value"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n    n: int - number of bits in the number\n    l: int - start of the range\n    r: int - end of the range\n\n    Returns:\n    bool - True if all the bits are unset in the given range, else False.\n    \"\"\"\n\n    # Loop through each bit of the number\n    for i in range(l, r+1):\n        # Get the binary representation of the current bit\n        bin_num = bin(i)[2:]\n\n        # Check if the binary representation is all 0's\n        if bin_num == '0' * n:\n            return False\n\n    # If we get here, all the bits are set in the given range\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i = l\n    while i <= r:\n        if n & (1 << i):\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a variable to store the count of unset bits\n    unset_bits = 0\n\n    # loop through all the bits in the given range\n    for i in range(l, r+1):\n        # check if the current bit is unset\n        if n & (1 << i) == 0:\n            # increment the count of unset bits\n            unset_bits += 1\n            # break out of the loop if all the bits are unset\n            if unset_bits == 32:\n                return False\n    # if all the bits are unset, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initialize a counter to keep track of unset bits\n    unset_bits = 0\n    \n    # loop through all possible bits from the given range\n    for i in range(l, r+1):\n        # check whether the i-th bit is set or not\n        if n & (1 << i) == 0:\n            # if the i-th bit is unset, increment the counter\n            unset_bits += 1\n    \n    # if the counter is equal to the number of bits in the given range, all bits are unset\n    if unset_bits == (r - l + 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # initializing a variable to store the count of unset bits in the range\n    unset_bits_count = 0\n\n    # iterating from the leftmost bit to the rightmost bit of the given range\n    for bit in range(l, r+1):\n        # checking if the bit is set or not in the given range\n        if n & (1 << bit) == 0:\n            # incrementing the count of unset bits\n            unset_bits_count += 1\n\n    # checking whether all the bits are unset in the given range or not\n    if unset_bits_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # check if n is a power of 2 or not\n    if n & (n - 1)!= 0:\n        return False\n    # set all the bits in the given range\n    bits_set = 0\n    for i in range(l, r + 1):\n        bits_set |= 1 << i\n    # check if all the bits are set or not\n    if bits_set!= n:\n        return False\n    # if all the conditions are satisfied, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # initialize a variable to store the sum of all the set bits in the range\n    total_set_bits = 0\n\n    # loop through all the bits in the given range\n    for i in range(l, r+1):\n        # check if the bit is set or not\n        if n & (1 << i):\n            # if the bit is set, increment the total set bits\n            total_set_bits += 1\n    \n    # check if the total set bits is equal to the number of bits in the range\n    if total_set_bits == (r-l+1):\n        # if the total set bits is equal to the number of bits in the range, then all the bits are unset\n        return True\n    else:\n        # if the total set bits is not equal to the number of bits in the range, then all the bits are set\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # check if n is a power of 2\n    if n & (n-1)!= 0:\n        return False\n\n    # count the number of set bits in the range\n    count = 0\n    for i in range(l, r+1):\n        count += bin(i).count('1')\n\n    # check if all the bits are unset in the range\n    if count == r-l+1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the input range to binary\n    binary_range = bin(r - l + 1)[2:]\n    # Check if all bits are set in the range\n    all_unset = all(int(digit) == 0 for digit in binary_range)\n    # Return the result\n    return all_unset"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two pointers: one for positive elements, and one for negative elements\n    pos = 0\n    neg = n - 1\n    \n    # loop through the array and swap elements as needed\n    for i in range(n):\n        if arr[i] >= 0:\n            # move positive elements to the front of the array\n            if pos < neg:\n                arr[pos], arr[neg] = arr[neg], arr[pos]\n                pos += 1\n                neg -= 1\n            # move positive elements to the end of the array\n            else:\n                arr[pos], arr[i] = arr[i], arr[pos]\n                pos += 1\n                \n        else:\n            # move negative elements to the end of the array\n            if neg < pos:\n                arr[neg], arr[pos] = arr[pos], arr[neg]\n                neg += 1\n                pos -= 1\n            # move negative elements to the front of the array\n            else:\n                arr[neg], arr[i] = arr[i], arr[neg]\n                neg += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n        i += 1\n    neg.extend(pos)\n    return neg"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    # Create two empty lists to store positive and negative elements\n    pos_list = []\n    neg_list = []\n\n    # Iterate through the array and add elements to the appropriate list\n    for num in arr:\n        if num >= 0:\n            pos_list.append(num)\n        else:\n            neg_list.append(num)\n\n    # Merge the two lists into a single list and sort it in descending order\n    sorted_list = neg_list + sorted(pos_list, reverse=True)\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create a dictionary to keep track of the index of each element\n    index_dict = {}\n    for i, num in enumerate(arr):\n        index_dict[num] = i\n    \n    # sort the dictionary by the value (index) of the element\n    sorted_dict = dict(sorted(index_dict.items()))\n    \n    # get the first n indices of the sorted dictionary\n    first_n_indices = sorted_dict.values()[:n]\n    \n    # create a new array to store the re-arranged elements\n    re_arr = []\n    \n    # iterate through the first n indices of the sorted dictionary\n    for i in first_n_indices:\n        # add the element to the new array\n        re_arr.append(arr[i])\n        # remove the element from the original array\n        del arr[i]\n    \n    # add the remaining elements to the new array\n    for num in arr:\n        re_arr.append(num)\n    \n    # return the new array\n    return re_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Function to swap two elements of the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Function to partition the array around a pivot element\n    def partition(arr, low, high, pivot):\n        pivot_index = partition_helper(arr, low, high, pivot)\n        swap(arr, pivot_index, high)\n        return pivot_index\n\n    # Helper function to partition the array around a pivot element\n    def partition_helper(arr, low, high, pivot):\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                swap(arr, i, j)\n        swap(arr, i + 1, high)\n        return i + 1\n\n    # Function to rearrange the array\n    def re_arrange(arr, low, high, n):\n        if high - low + 1 < n:\n            return\n\n        pivot = arr[low]\n        pivot_index = partition(arr, low, high, pivot)\n\n        if pivot_index == n - 1:\n            return\n\n        if pivot_index < n - 1:\n            re_arrange(arr, pivot_index + 1, high, n)\n        else:\n            re_arrange(arr, low, pivot_index - 1, n)\n\n    re_arrange(arr, 0, len(arr) - 1, n)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize two lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # loop through the array and add negative and positive elements to their respective lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n\n    # loop through the array and add positive elements to the first n elements of the array\n    i = 0\n    for j in range(n, len(arr)):\n        if arr[j] >= 0:\n            arr[j], arr[i] = arr[i], arr[j]\n            i += 1\n\n    # add negative elements to the remaining elements of the array\n    for k in range(len(neg_list)):\n        arr[k+n] = neg_list[k]\n\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two pointers: one for positive elements, one for negative elements\n    i = 0\n    j = 0\n\n    # Iterate through the array\n    while i < n:\n        # If the current element is negative, move the positive pointer to the next position\n        if arr[i] < 0:\n            i += 1\n            continue\n\n        # If the current element is positive, move the negative pointer to the next position\n        else:\n            j += 1\n\n            # If the negative pointer has reached the end of the array, move the positive pointer to the next position\n            if j == n:\n                i += 1\n                j = 0\n\n    # Move the negative elements to the beginning of the array\n    arr[:n] = arr[:n][::-1]\n    arr[n:] = arr[n:][::-1]\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            arr[i], arr[n] = arr[n], arr[i]\n            n -= 1\n        i += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Initialize variables\n    neg = []\n    pos = []\n\n    # Separate elements into negative and positive groups\n    for num in arr:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n\n    # Sort the negative group in descending order\n    neg.sort(reverse=True)\n\n    # Concatenate the sorted negative group with the positive group\n    result = neg + pos\n\n    # Truncate the result to the first n elements\n    result = result[:n]\n\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # Initialize negative and positive indices\n    neg_index = 0\n    pos_index = n - 1\n\n    # Traverse the array and swap negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            arr[neg_index], arr[i] = arr[i], arr[neg_index]\n            neg_index += 1\n        else:\n            arr[pos_index], arr[i] = arr[i], arr[pos_index]\n            pos_index -= 1\n\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # split the string into words\n    words = str1.split()\n    # loop through each word\n    for i in range(len(words)):\n        # check if the word is blank\n        if words[i] == '':\n            # replace it with the character\n            words[i] = char\n    # join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # replace all spaces in the string with the character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Initialize a new string variable to store the modified string\n    new_str = \"\"\n    \n    # Loop through each character in the original string\n    for i in range(len(str1)):\n        # If the character is a blank space, replace it with the given character\n        if str1[i] == \" \":\n            new_str += char\n        else:\n            # If the character is not a blank space, append it to the new string\n            new_str += str1[i]\n    \n    # Return the modified string\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(char if s =='' else s for s in str1)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(char if char =='' else'' for char in str1)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join([char if c==''else c for c in str1])"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # create a new string that is a copy of the input string\n    str2 = str1\n    \n    # loop over each character in the input string\n    for i in range(len(str2)):\n        # if the character is a blank space, replace it with the specified character\n        if str2[i] =='':\n            str2 = str2[:i] + char + str2[i+1:]\n    \n    # return the modified string\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # Check if the character is a space\n        if str1[i] =='':\n            # Replace the space with the specified character\n            str1 = str1.replace(' ', char, 1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # initialize a min heap with the first n elements of the list\n    heap = list1[:n]\n    heapq.heapify(heap)\n    # remove the smallest element from the heap and add the next smallest element to the heap\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    # return the largest n elements of the heap\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a max heap to store the n largest numbers\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min-heap of the first n elements of the list\n    min_heap = []\n    heapq.heapify(min_heap)\n    \n    # Iterate through the list and add each element to the heap\n    for i in range(n):\n        heapq.heappush(min_heap, list1[i])\n        \n    # Iterate through the rest of the list and update the heap\n    for i in range(n, len(list1)):\n        if list1[i] > heapq.heappop(min_heap):\n            heapq.heappush(min_heap, list1[i])\n            \n    # Return the n largest elements in the heap\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a max heap to keep track of the n largest items\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    \n    # Return the n largest items\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    max_heap = []\n    # add the first n elements of the list to the max heap\n    heapq.heapify(max_heap, list1[:n])\n    # iterate through the remaining elements of the list\n    for i in range(n, len(list1)):\n        # if the current element is greater than the root of the max heap, pop the root of the max heap and add the current element to the heap\n        if list1[i] > max_heap[0]:\n            heapq.heapreplace(max_heap, list1[i])\n        # add the current element to the max heap\n        else:\n            heapq.heappush(max_heap, list1[i])\n    # return the max heap as a list\n    return [max_heap[0]] + max_heap[1:]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Return a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, lst)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, list1[i])\n    # iterate through the list and add elements to the heap\n    for i in range(n, len(list1)):\n        if list1[i] > min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, list1[i])\n    # return the n largest elements from the heap\n    return list(min_heap)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    area = 2*pi*r**2 + 2*pi*r*h + pi*r**2\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi*(r**2)*h\n    print(\"The lateral surface area of the cylinder is:\", area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h # Formula for lateral surface area of a cylinder"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = 2 * math.pi * r * h\n    return A"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as inputs and returns the lateral surface area of the cylinder.\n    '''\n    # Formula for lateral surface area of a cylinder: 2 * \u03c0 * r * h\n    area = 2 * 3.14 * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r**2 + 2 * 3.14 * r * h + 2 * 3.14 * h**2\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    # Calculate the lateral surface area of the cylinder using the formula\n    # lateral surface area = 2 * pi * r * h\n    lateral_surface_area = 2 * 3.14159 * r * h\n    \n    # Return the lateral surface area of the cylinder\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    area = 2 * r * h\n    \n    # return the surface area\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * r * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * h\n    print(\"The lateral surface area of a cylinder is:\", area)"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l[0]**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = []\n    for i in range(32):\n        if ((n >> i) & 1) == 0:\n            even_bits.append(i)\n    for bit in even_bits:\n        n = n | (1 << bit)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the even bits of the number\n    even_bits = []\n    # loop through each bit of the number\n    for i in range(32):\n        # check if the current bit is even\n        if (n >> i) & 1 == 0:\n            # if it is even, append it to the even_bits list\n            even_bits.append(1)\n        else:\n            # if it's odd, append 0 to the even_bits list\n            even_bits.append(0)\n    # combine the even bits into a single integer\n    even_bits_int = int(''.join(map(str, even_bits)), 2)\n    # return the combined even bits integer\n    return even_bits_int"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    while n > 0:\n        if n % 2 == 0:\n            result = result | (1 << (n-1))\n        n = n >> 1\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n & 1) # set all even bits to 1 by ORing with 1."
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable to zero\n    result = 0\n    # Iterate through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1, otherwise leave it as is\n        if int(bit) == 0:\n            result += 1\n        else:\n            result += 2**int(bit)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1\n        if bit == '1':\n            result += 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a counter for even bits\n    even_bits = 0\n    \n    # iterate over all bits in the number\n    for bit in bin(n)[2:]:\n        # if the bit is even, increment the counter\n        if int(bit) == 0:\n            even_bits += 1\n    \n    # set all even bits to 1\n    even_bits_set = n | (1 << even_bits)\n    \n    # return the result\n    return even_bits_set"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the bits of n\n    bits = []\n\n    # Convert the number to binary\n    bin_n = bin(n)[2:]\n\n    # Iterate through the binary string and append each even bit to the list\n    for bit in bin_n:\n        if bit == '0':\n            bits.append(bit)\n        elif int(bit) % 2 == 0:\n            bits.append(bit)\n\n    # Convert the list to an integer and return it\n    return int(''.join(bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n!= 0:\n        even_bit = n & 1\n        n = n >> 1\n        if even_bit!= 0:\n            n = n | even_bit << 1\n    return n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts\n    count_dict = {}\n    # iterate over the list of tuples\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # increment the count by 1\n            count_dict[tup] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            count_dict[tup] = 1\n    # return the dictionary with the counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Counter is used to count the number of occurrences of each tuple\n    counter = Counter(test_list)\n\n    # Dictionary is created to store the results\n    result = {}\n\n    # Loop through the counter object and add each unique tuple to the dictionary\n    for key, value in counter.items():\n        result[key] = value\n\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    count_dict = Counter()\n    \n    # iterate over the list of tuples\n    for tup in test_list:\n        # add the tuple to the dictionary and increment its count by 1\n        count_dict[tup] += 1\n    \n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    # loop through each tuple in the list\n    for tup in test_list:\n        # check if the tuple is already in the dictionary\n        if tup in counts:\n            # if it is, increment its count by 1\n            counts[tup] += 1\n        # if it's not in the dictionary, add it with a count of 1\n        else:\n            counts[tup] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize count to 0\n    count = 0\n    \n    # iterate through all possible substrings of the string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # check if substring is not empty (i.e. if it contains at least one character)\n            if str[i:j].strip():\n                # increment count\n                count += 1\n    \n    # return count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    current = 1\n    prev = 0\n    \n    while current <= n:\n        if current >= 2 * prev and current <= m:\n            total += 1\n        prev = current\n        current += 1\n        \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(m, 1, -1):\n        for j in range(1, n+1):\n            if (2*j-1) >= 2*i <= m:\n                total += 1\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(1, m+1):\n        if i % 2!= 0:\n            count += 1\n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            if i % 2!= 0:\n                if j % 2 == 0 and j >= 2*i:\n                    count += 1\n            else:\n                if j % 2!= 0 and j <= 2*i:\n                    count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the count variable\n    count = 0\n\n    # Initialize the list of current sequence\n    curr_seq = []\n\n    # Initialize the list of all possible sequences\n    all_sequences = []\n\n    # Iterate through the range of m to n\n    for i in range(m,n+1):\n        # Iterate through the range of 1 to i-2\n        for j in range(1,i//2+1):\n            # Check if the current element is greater than or equal to twice the previous element\n            if i >= 2*j and i <= m:\n                # Add the current element to the current sequence\n                curr_seq.append(i)\n                # Check if the current sequence is a valid sequence\n                if len(curr_seq) == n:\n                    # Check if the current sequence is not already in the list of all possible sequences\n                    if curr_seq not in all_sequences:\n                        # Add the current sequence to the list of all possible sequences\n                        all_sequences.append(curr_seq)\n                        # Increment the count variable\n                        count += 1\n                # Remove the current element from the current sequence\n                curr_seq.pop()\n\n    # Return the count of all possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequence = [2*i for i in range(m)]\n    sequence.sort()\n    count = 0\n    \n    for i in range(m, 2*m, 2):\n        if i >= sequence[-1]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    sequence = []\n    sequence.append(0)\n    \n    for i in range(1, m+1):\n        if sequence[-1] + 2 <= i and i <= m:\n            sequence.append(i)\n            \n        if len(sequence) == n:\n            count += 1\n            sequence.pop(0)\n            \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    seq = [0] * n  # Initialize sequence with zeros\n\n    # Check if m is greater than twice n\n    if m > 2 * n:\n        return 0\n\n    # Fill sequence with zeros\n    for i in range(n):\n        seq[i] = 0\n\n    # Generate sequence by adding next element\n    for i in range(n):\n        if seq[i] == 0:\n            seq[i] = i + 1\n            count += 1\n        elif seq[i] % 2 == 0:\n            seq[i] += 1\n        else:\n            seq[i] -= 1\n\n    # Check if sequence is a valid sequence\n    for i in range(n - 1):\n        if seq[i] >= 2 * seq[i + 1] <= m:\n            return 0\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    count = 0\n    for i in range(2*n, m+1):\n        if m % i == 0:\n            count += m//i\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(sequence):\n        for i in range(len(sequence)):\n            if sequence[i] < 2 * sequence[i - 1] or sequence[i] > m:\n                return False\n        return True\n\n    def generate_valid_sequences(prev_sequence, current_sequence):\n        if len(current_sequence) == n:\n            if is_valid_sequence(current_sequence):\n                return [current_sequence]\n            else:\n                return []\n\n        next_sequence = prev_sequence + [current_sequence[-1] + 1]\n        return [next_sequence] + generate_valid_sequences(prev_sequence, next_sequence)\n\n    total_sequences = 0\n    for i in range(2, m + 1):\n        valid_sequences = generate_valid_sequences([], [2 * i])\n        total_sequences += len(valid_sequences)\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    current_length = 1\n    current_sum = 2\n    \n    while current_length <= n:\n        if current_sum <= m:\n            total_sequences += 1\n        current_sum += current_length\n        current_length += 1\n    \n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Loop through the list1 and append the elements of list2 to it\n    for i in range(len(list1)-1):\n        list1.append(list2[i])\n\n    # Add the last element of list2 to list1\n    list1.append(list2[-1])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replace the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n\n    # Check if the length of the second list is equal to the length of the first list (if not, raise an error)\n    if len(list2)!= length:\n        raise ValueError(\"The second list must have the same length as the first list.\")\n\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Check if the second list is empty\n    if not list2:\n        return list1\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for i in range(len(list2)):\n        list1.append(list2[i])\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = len(str1)\n    return total_charac"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    This function takes a string as an argument and returns the total number of characters in the string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    # check if N is a positive integer\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n\n    # binary search for the next perfect square greater than N\n    i = 1\n    while True:\n        i = 2 ** i\n        if i > N:\n            break\n\n    # return the next perfect square greater than N\n    return i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    if sqrt_N == int(sqrt_N):\n        return int(sqrt_N) + 1\n    else:\n        return int(sqrt_N) + 2\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function finds the next perfect square greater than a given number N.\n    '''\n    while True:\n        N += 1\n        square_root = math.sqrt(N)\n        if square_root == int(square_root):\n            return int(square_root)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Base case: N is already a perfect square\n    if N >= 10:\n        return N\n    # Calculate the largest perfect square less than or equal to N\n    k = int(math.sqrt(N))\n    # Calculate the smallest integer greater than N that is a perfect square\n    i = int(k * k)\n    # Check if i is already a perfect square\n    while i > N:\n        i -= 1\n    # Check if the smallest integer greater than N that is a perfect square is greater than k\n    if i == k:\n        i += 1\n    # Find the next perfect square greater than i\n    next_sq = i * i\n    while next_sq <= N:\n        next_sq += i * i\n    return next_sq - i * i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Find the sqrt of N\n    sqrtN = math.sqrt(N)\n\n    # Find the integer part of sqrtN\n    intPartSqrtN = int(sqrtN)\n\n    # Find the square of the integer part of sqrtN\n    squareIntPartSqrtN = intPartSqrtN * intPartSqrtN\n\n    # Find the difference between squareIntPartSqrtN and N\n    difference = squareIntPartSqrtN - N\n\n    # Find the next perfect square\n    nextPerfectSquare = intPartSqrtN + difference\n\n    return nextPerfectSquare"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Helper function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return math.sqrt(num) == int(math.sqrt(num))\n\n    # Check if N is a perfect square\n    if is_perfect_square(N):\n        # Find the integer part of sqrt(N)\n        integer_part = math.sqrt(N)\n        # Find the next odd integer greater than integer_part\n        next_integer = integer_part * 2 + 1\n        # If next_integer is greater than sqrt(N), we need to find the next perfect square greater than sqrt(N)\n        while not is_perfect_square(next_integer):\n            next_integer += 1\n        # Return the next perfect square greater than N\n        return next_integer\n    else:\n        # Return the next perfect square greater than N\n        return next_integer\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    sqrt_N = int(math.sqrt(N))\n    x = sqrt_N**2\n\n    if x == N:\n        x += 1\n\n    if x*x == N:\n        return x*x\n    else:\n        return next_Perfect_Square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    def is_perfect_square(n):\n        return int(math.sqrt(n)) ** 2 == n\n    \n    def find_next_square(n):\n        while not is_perfect_square(n + 1):\n            n += 1\n        return n\n    \n    if N == 1:\n        return 1\n    elif N == 2:\n        return 4\n    else:\n        n = N\n        while not is_perfect_square(n - 1):\n            n -= 1\n        return find_next_square(n)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Check if the number is already a perfect square\n    if math.isqrt(N) * math.isqrt(N) == N:\n        # If it is, increment by 1 to get the next perfect square\n        return N + 1\n    # If the number is not a perfect square, find the next greater perfect square\n    else:\n        # Get the square root of the given number\n        root = math.sqrt(N)\n        # Round up the square root to the nearest integer\n        root_int = math.ceil(root)\n        # Get the square of the next perfect square\n        next_square = root_int * root_int + 1\n        # Return the next perfect square\n        return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a Python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        # Find the square root of N\n        sqrt_N = math.sqrt(N)\n        # Find the next integer greater than sqrt_N\n        sqrt_N = int(sqrt_N) + 1\n        # Check if sqrt_N^2 is greater than N\n        if sqrt_N**2 > N:\n            # If it is, return sqrt_N^2\n            return sqrt_N**2\n        # If not, continue searching for a larger perfect square\n        else:\n            N = sqrt_N"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Initialize variables\n    prev_inc = True\n    max_sum = arr[0]\n    max_sum_prev = arr[0]\n    max_sum_prev_inc = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            # Case 1: increasing\n            prev_inc = True\n        elif arr[i] < arr[i-1]:\n            # Case 2: decreasing\n            prev_inc = False\n\n        if prev_inc:\n            # Case 1.1: increasing\n            if arr[i] + max_sum_prev_inc > max_sum:\n                max_sum = arr[i] + max_sum_prev_inc\n            max_sum_prev_inc = arr[i]\n        else:\n            # Case 1.2: decreasing\n            if arr[i] + max_sum_prev > max_sum:\n                max_sum = arr[i] + max_sum_prev\n            max_sum_prev = arr[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Check if the array is bitonic\n    is_bitonic = True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            is_bitonic = False\n            break\n    \n    if is_bitonic:\n        # Initialize the maximum sum\n        max_sum = arr[0]\n        left_sum = arr[0]\n        right_sum = arr[0]\n        for i in range(1, len(arr)):\n            # Update the left sum\n            if arr[i] > arr[i-1]:\n                left_sum += arr[i]\n            else:\n                left_sum = arr[i]\n            \n            # Update the right sum\n            if arr[i] > arr[i-1]:\n                right_sum = max(right_sum, arr[i])\n            else:\n                right_sum += arr[i]\n            \n            # Update the maximum sum\n            max_sum = max(max_sum, left_sum+right_sum)\n        \n        return max_sum\n    else:\n        return 0"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_ending_here = arr[0]\n    local_max = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > local_max:\n            local_max = arr[i]\n        elif arr[i] < local_max:\n            max_ending_here = max(max_ending_here, local_max)\n            local_max = arr[i]\n        else:\n            continue\n\n    max_ending_here = max(max_ending_here, local_max)\n    return max_ending_here"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return 0\n    max_sum_increasing = arr[1]\n    max_sum_decreasing = arr[1]\n    max_sum_ending_at_same = max(arr[0], arr[1])\n    \n    for i in range(2, n):\n        max_sum_increasing = max(max_sum_increasing + arr[i], arr[i])\n        max_sum_decreasing = max(max_sum_decreasing - arr[i - 1], arr[i - 1])\n        max_sum_ending_at_same = max(max_sum_ending_at_same, arr[i])\n    \n    return max(max_sum_increasing, max_sum_decreasing, max_sum_ending_at_same)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Check if the array is already bitonic\n    if arr[1] < arr[0]:\n        return max(arr[0], arr[1])\n\n    # Initialize the maximum subsequence sum to the first element\n    max_sum = arr[0]\n\n    # Iterate over the array from the second element\n    for i in range(1, n):\n        # Check if the current element is smaller than the previous element\n        if arr[i] < arr[i - 1]:\n            # Check if the subsequence ending at the current element is increasing\n            if max_sum < max(arr[i - 1], arr[i]):\n                # Update the maximum subsequence sum\n                max_sum = max(arr[i - 1], arr[i])\n        else:\n            # The current element is larger than the previous element\n            # Check if the subsequence ending at the current element is decreasing\n            if max_sum < max(arr[i - 1], arr[i]):\n                # Update the maximum subsequence sum\n                max_sum = max(arr[i - 1], arr[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and returns the maximum sum of a bitonic subsequence.\n\n    Parameters:\n    arr (list): A list of integers representing a bitonic subsequence.\n\n    Returns:\n    int: The maximum sum of the bitonic subsequence.\n    \"\"\"\n    # Initialize variables\n    left = [0] * len(arr)\n    right = [0] * len(arr)\n    max_sum_left = float('-inf')\n    max_sum_right = float('-inf')\n\n    # Calculate the maximum sum for each subsequence\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            left[i] = arr[i] + left[i - 1]\n            max_sum_left = max(max_sum_left, left[i])\n        else:\n            right[i] = arr[i] + right[i - 1]\n            max_sum_right = max(max_sum_right, right[i])\n\n    # Find the maximum sum of the subsequences\n    max_sum = max(max_sum_left, max_sum_right)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    This function takes an array as input and finds the maximum sum of a bitonic subsequence for the given array. \n    A sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr) \n    max_sum = float('-inf')\n    \n    # Initialize variables to keep track of the maximum sum of increasing and decreasing subsequences\n    inc_sum = 0\n    dec_sum = 0\n    \n    # Iterate through the array and update the maximum sum of increasing and decreasing subsequences\n    for i in range(n): \n        if arr[i] > arr[i+1]: \n            inc_sum += arr[i] \n            if inc_sum > max_sum: \n                max_sum = inc_sum \n        elif arr[i] < arr[i+1]: \n            dec_sum += arr[i] \n            if dec_sum > max_sum: \n                max_sum = dec_sum \n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    bitonic_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            bitonic_sum += arr[i]\n            if max_sum < bitonic_sum:\n                max_sum = bitonic_sum\n        else:\n            bitonic_sum += arr[i]\n            if max_sum < bitonic_sum:\n                max_sum = bitonic_sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n\n    for i in range(n - 1):\n        if arr[i] <= arr[i + 1]:\n            dp[i] = dp[i + 1]\n        else:\n            dp[i] = max(dp[i], dp[i + 1]) + arr[i]\n\n    return dp[n - 2]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    if len(arr) < 3:\n        return 0\n\n    # Initialize variables to keep track of the increasing and decreasing subsequences\n    increasing = 0\n    decreasing = float('-inf')\n\n    # Iterate through the array\n    for num in arr:\n        # Update the increasing subsequence\n        if num > increasing:\n            increasing = num\n        # Update the decreasing subsequence\n        elif num < decreasing:\n            decreasing = num\n\n    # Compute the maximum sum of the increasing subsequence\n    max_sum_increasing = increasing\n\n    # Compute the maximum sum of the decreasing subsequence\n    max_sum_decreasing = max(decreasing, increasing)\n\n    # Return the maximum sum of the bitonic subsequence\n    return max(max_sum_increasing, max_sum_decreasing)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number // 2\n    \n    while y!= x:\n        x = y\n        y = (number // x) + x\n        \n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1\n    y = number / x\n    while x!= y:\n        x = y\n        y = (number / x) + x / y\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a, b, c = 1, 2, number\n    while b**2 - 4*a*c > 0:\n        a, b, c = b, (b + c/b) / 2, number\n    return 2 * a / (a + b)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00001\n    x0 = 1\n    while abs(x0**2 - number) > epsilon:\n        x1 = (number/x0) + x0\n        x0 = x1\n    return x0"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    y = number/2\n    while abs(x-y) > 0.0001:\n        x = (x + y) / 2\n        y = number/x\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Set initial guess for root\n    guess = number / 2\n    \n    # Loop until within tolerance of actual root\n    while abs(guess * guess - number) >= 0.000001:\n        guess = (guess + number / guess) / 2\n        \n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    i = 0\n    error = 1.0\n    while abs(error) > 0.000001:\n        i += 1\n        quotient = (number + 1.0) / (2.0 * i)\n        error = number / (quotient * quotient)\n    return i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Start with a guess of the square root of the input number\n    guess = number / 2\n\n    # Keep track of the number of iterations\n    iterations = 0\n\n    # Loop while the difference between the guess and the square root is greater than a small tolerance\n    while abs(guess * guess - number) > 0.0001:\n        # Update the guess\n        guess = (guess + number / guess) / 2\n\n        # Increment the number of iterations\n        iterations += 1\n\n    # Print the final value of the guess\n    print(\"The square root of\", number, \"using the babylonian method is approximately\", guess)\n    print(\"It took\", iterations, \"iterations to converge.\")"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # initialize the guess and the tolerance for the root\n    guess = 0.5\n    tol = 1e-6\n\n    while abs(guess*guess - number) > tol:\n        guess = (guess + number/guess)/2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Check if the number is a positive integer\n    if number <= 0 or not isinstance(number, int):\n        return \"Error: The input must be a positive integer.\"\n    \n    # Initialize variables\n    guess = number / 2\n    old_guess = guess\n    \n    # Run the Babylonian method for the given number\n    while True:\n        # Compute the current guess and its square\n        guess = (guess + number / guess) / 2\n        old_guess = guess\n        \n        # Check if the current guess is close enough to the square root\n        if abs(guess * guess - number) < 0.0001:\n            break\n    \n    # Return the computed square root\n    return math.sqrt(number)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_palindrome(s, start, end):\n    while start < end:\n        if s[start]!= s[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\ndef lps(s):\n    # Initialize variables\n    max_length = 0\n    start = 0\n    end = 0\n\n    # Find the length of the longest palindromic subsequence\n    for i in range(len(s)):\n        # Check if the current character is a palindrome\n        if is_palindrome(s, i, i):\n            length = 1\n        else:\n            # Find the length of the longest palindromic subsequence that ends at the i-th character\n            length = 2\n            while i - length >= 0 and i + length < len(s) and is_palindrome(s, i - length, i + length):\n                length += 2\n\n            # If the current character is not a palindrome, increment the length by 1 to expand the palindrome\n            length += 1\n\n        # Update the maximum length and the start and end indices of the longest palindromic subsequence found so far\n        max_length = max(max_length, length)\n        start = i - length + 1\n        end = i + length - 1\n\n    # Return the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    n = len(str)\n\n    # Create a table to store the lengths of longest palindromic subsequence ending at each index\n    lps_table = [[0] * n for i in range(n)]\n\n    # Initialize the longest palindromic subsequence length as 1\n    max_length = 1\n\n    # Initialize the start and end index of the longest palindromic subsequence\n    start = 0\n    end = 0\n\n    # Traverse through the string and find the length of longest palindromic subsequence ending at each index\n    for i in range(1, n):\n        # If the current character is same as the previous character, then expand the longest palindromic subsequence\n        if str[i] == str[i-1]:\n            lps_table[i][i] = lps_table[i-1][i-1] + 1\n\n            # Update the start and end index of the longest palindromic subsequence\n            if lps_table[i][i] > max_length:\n                max_length = lps_table[i][i]\n                start = i - lps_table[i][i]\n                end = i\n\n        # If the current character is different from the previous character, then check if the subsequence ending at i-1 is palindromic\n        elif lps_table[i-1][i] > lps_table[i][i-1]:\n            lps_table[i][i] = lps_table[i-1][i]\n\n        # If the current character is different from the previous character and the subsequence ending at i-1 is not palindromic, then check if the subsequence ending at i-2 is palindromic\n        else:\n            lps_table[i][i] = lps_table[i][i-1]\n\n    # Return the length of the longest palindromic subsequence\n    return max_length\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def longest_palindromic_subseq(s):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence of a given string s.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return 0\n\n    # create a 2D array to store LPS lengths\n    dp = [[0] * n for _ in range(n)]\n\n    # base cases:\n    # dp[i][j] = 0 for i >= j\n    for i in range(n):\n        dp[i][i] = 1\n\n    # fill dp array using dynamic programming\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n\n\ndef lps(s):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence of a given string s.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return 0\n\n    # create a 2D array to store LPS lengths\n    dp = [[0] * n for _ in range(n)]\n\n    # base cases:\n    # dp[i][j] = 0 for i >= j\n    for i in range(n):\n        dp[i][i] = 1\n\n    # fill dp array using dynamic programming\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # find the maximum length palindrome subsequence\n    max_len = 0\n    start = 0\n    for i in range(n):\n        if dp[i][i] > max_len:\n            max_len = dp[i][i]\n            start = i\n    end = start + max_len - 1\n\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [1] * n\n    \n    # Find lengths of longest palindromic subsequences ending at i\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            dp[i] = dp[i-1] + 2\n        else:\n            dp[i] = max(dp[i-1], dp[i-2])\n    \n    # Return the length of the longest palindromic subsequence\n    return max(dp)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a 2D table to store length of longest palindromic subsequence for all prefixes of the string\n    # Initialize all entries of the table as 1 (longest palindromic subsequence is one character)\n    lps_table = [[1 for j in range(n)] for i in range(n)]\n    # Initialize the last character of the string as 0\n    lps_table[-1][-1] = 0\n    # Fill the table in bottom-up manner\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i-1, -1):\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i+1][j+1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i+1][j], lps_table[i][j+1])\n    # Return the length of the longest palindromic subsequence\n    return lps_table[0][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Check if the string is empty or contains only one character\n    if len(str) < 2:\n        return len(str)\n\n    # Initialize a 2D array to store the lengths of the longest palindromic subsequences for substrings of the input string\n    dp = [[0 for j in range(len(str))] for i in range(len(str))]\n\n    # Initialize the first row and column of the 2D array\n    dp[0][0] = 0\n\n    # Iterate through the string from the second character to the last character\n    for i in range(1, len(str)):\n        # If the current character is same as the previous character, we can extend the palindrome by one character\n        if str[i-1] == str[i]:\n            dp[i][i] = dp[i-1][i-1] + 1\n\n        # If the current character is not same as the previous character, we need to check whether we can extend the palindrome by two characters\n        else:\n            # Check if the previous character is already part of a palindrome substring\n            if dp[i-1][i-1] > 0:\n                # Update the value of the cell in the 2D array\n                dp[i][i] = dp[i-1][i-1] + 2\n\n            # If the previous character is not part of a palindrome substring, we cannot extend the palindrome by two characters\n            else:\n                # Initialize the value of the cell in the 2D array to zero\n                dp[i][i] = 0\n\n    # Return the maximum value in the 2D array\n    return max(max(row) for row in dp)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a 2D table to store lengths of longest palindromic subsequences of all pairs of substring \n    L = [[0] * n for _ in range(n)] \n    for i in range(1, n): \n  \n        # One by one compare all characters of the string \n        for j in range(n-i-1): \n  \n            # If the characters are same, then check for maximum length palindromic subsequence \n            if str[j] == str[j+i]: \n  \n                # If length of current substring is greater, then update L[i][j] value of L[][] table \n                if L[j+1][j+i-1] + 2 > L[j][i]: \n                    L[j][i] = L[j+1][j+i-1] + 2\n  \n    # Return the length of longest palindromic subsequence \n    return L[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    if len(str) <= 1:\n        return len(str)\n    else:\n        max_length = 1\n        lps_array = [1] * len(str)\n        for i in range(1, len(str)):\n            if str[i] == str[i-1]:\n                lps_array[i] = lps_array[i-1] + 1\n                if max_length < lps_array[i]:\n                    max_length = lps_array[i]\n            else:\n                lps_array[i] = 1\n                if max_length < lps_array[i]:\n                    max_length = lps_array[i]\n        return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(s):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence.\n    \"\"\"\n    n = len(s)\n    # Initialize a 2D table to store the length of LPS ending at each index\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # Fill the table in bottom-up manner\n    for i in range(n):\n        dp[i][i] = 1\n        if s[i] == s[i+1]:\n            dp[i][i+1] = 1\n            \n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n    \n    # Return the length of the longest palindromic subsequence ending at index n-1\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    if n == 0:\n        return 0\n\n    # create a 2D array to store the lengths of longest palindromic subsequences ending at each position\n    dp = [[0] * n for _ in range(n)]\n\n    # initialize the first row and column as 1 (single character palindrome)\n    for i in range(n):\n        dp[i][i] = 1\n\n    # fill the rest of the dp array using dynamic programming\n    for length in range(3, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if s[start] == s[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2*n - 1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_n = 1.0\n    for i in range(1, n):\n        sum_of_n += 1.0 / i\n    return sum_of_n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        print(\"Please enter a positive integer greater than or equal to 1.\")\n        return\n    \n    # Calculate harmonic sum using a for loop\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += (1/i)\n    \n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        raise ValueError(\"Input must be positive.\")\n    \n    return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize variables to hold the sum and the harmonic sum\n    sum_of_n = 0\n    harmonic_sum = 0\n\n    # Calculate the sum of n\n    for i in range(1, n+1):\n        sum_of_n += 1/i\n\n    # Calculate the harmonic sum\n    for i in range(1, n):\n        harmonic_sum += i/sum_of_n\n\n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return 2 * n * n - n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n):\n        harmonic_sum += (1/i)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / sum([1/i for i in range(1, n)])"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set of elements in array_nums2\n    array_nums2_set = set(array_nums2)\n    # create an empty list to store the common elements\n    common_elements = []\n    # iterate over each element in array_nums1\n    for element in array_nums1:\n        # if the element is present in array_nums2, add it to common_elements\n        if element in array_nums2_set:\n            common_elements.append(element)\n    # return the common elements\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Find the intersection of the two arrays\n    intersection = [num for num in array_nums1 if num in array_nums2]\n\n    # Sort the intersection array in ascending order\n    intersection.sort()\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n    return list(intersection)\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set of the unique elements in array_nums1\n    set_nums1 = set(array_nums1)\n    \n    # Create an empty set to store the intersection\n    intersection = set()\n    \n    # Loop through the elements in array_nums2\n    for num in array_nums2:\n        # If the number is in the set of array_nums1 and not in the intersection set, add it to the intersection set\n        if num in set_nums1 and num not in intersection:\n            intersection.add(num)\n    \n    # Return the intersection set as a list\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    array_nums1 = list(set(array_nums1))\n    array_nums2 = list(set(array_nums2))\n    intersection = [x for x in array_nums1 if x in array_nums2]\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Find the intersection of two arrays using set data structure\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    # use two pointers to iterate through arrays\n    i = 0\n    j = 0\n    # use a dictionary to keep track of the frequency of each element in array_nums1\n    freq = {}\n    for num in array_nums1:\n        freq[num] = freq.get(num, 0) + 1\n    # iterate through array_nums2\n    while i < len(array_nums2) and j < len(array_nums2):\n        # check if the current element in array_nums2 is in the dictionary\n        if array_nums2[j] in freq and freq[array_nums2[j]] > 0:\n            intersection.append(array_nums2[j])\n            # decrease the frequency of the current element in array_nums1\n            freq[array_nums2[j]] -= 1\n            j += 1\n        # otherwise, move to the next element in array_nums2\n        else:\n            i += 1\n            j += 1\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create two sets to store the unique elements of array_nums1 and array_nums2\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    # find the intersection of the two sets using the intersection method\n    intersection = set1.intersection(set2)\n    # convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Args:\n    - array_nums1: A list of integers\n    - array_nums2: A list of integers\n\n    Returns:\n    - A list of integers representing the intersection of the two arrays.\n    \"\"\"\n\n    # Find the intersection of two arrays\n    intersection = [num for num in array_nums1 if num in array_nums2]\n\n    # Sort the intersection in ascending order\n    intersection.sort()\n\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # create a new list to store the modified list\n    result = []\n    # loop through each element in the original list\n    for i in list:\n        # add the element to the result list before the current element\n        result.insert(0, element)\n        # add the current element to the result list\n        result.append(i)\n    # return the result list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Copy the list to a new list\n    new_list = list.copy()\n    # Loop through the list and insert the element before each element\n    for i in range(len(new_list)):\n        new_list.insert(i, element)\n    # Return the modified list\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result[1:-1]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    # Initialize a new list to hold the result\n    result = []\n    \n    # Iterate over each element in the original list\n    for item in list:\n        # Add the element to the result before the item\n        result.insert(0, item)\n    \n    # Add the element to the end of the result\n    result.append(element)\n    \n    # Return the final result list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_lst = []\n    for i, item in enumerate(lst):\n        new_lst.insert(i, element)\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(len(list)):\n        if i == 0:\n            list.insert(0, element)\n        else:\n            list.insert(i, element)\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            r = abs(num)\n            theta = cmath.phase(num)\n            print(\"({},{})\".format(r, theta))\n        elif isinstance(num, int):\n            print(num)\n        else:\n            print(\"Invalid input!\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_number = complex(number)\n        complex_numbers.append(complex_number)\n\n    polar_coordinates = []\n    for complex_number in complex_numbers:\n        real = complex_number.real\n        imag = complex_number.imag\n        mag = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(complex_number)\n        polar_coordinate = (mag, angle)\n        polar_coordinates.append(polar_coordinate)\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # convert each number in the list to complex number\n    for i in range(len(numbers)):\n        numbers[i] = complex(numbers[i])\n\n    # calculate the magnitude and angle of each complex number\n    for i in range(len(numbers)):\n        numbers[i] = cmath.polar(numbers[i])\n\n    # convert the polar coordinates back to complex numbers\n    for i in range(len(numbers)):\n        numbers[i] = cmath.rect(numbers[i][0], numbers[i][1])\n\n    return numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function converts a list of complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        polar_coordinates.append((real, imag))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    complex_numbers = []\n    for num in numbers:\n        complex_numbers.append(complex(num))\n\n    polar_coordinates = []\n    for num in complex_numbers:\n        magnitude = abs(num)\n        phase = cmath.phase(num)\n        polar_coordinates.append((magnitude, phase))\n\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n\n    # create a list of tuples to store the polar coordinates of each complex number\n    polar_coords = []\n\n    # iterate over the complex numbers in the input list\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n\n        # add the polar coordinates to the list of tuples\n        polar_coords.append((r, theta))\n\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert a list of complex numbers to polar coordinates.\n    '''\n\n    polar_list = []\n    for number in numbers:\n        if isinstance(number, complex):\n            r = cmath.sqrt(number.real**2 + number.imag**2)\n            theta = cmath.phase(number)\n            polar_list.append((r, theta))\n        else:\n            polar_list.append(number)\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        complex_num = complex(num[0], num[1])\n        polar_num = cmath.polar(complex_num)\n        polar_num_list = [polar_num[0], polar_num[1]]\n        result.append(polar_num_list)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            real = abs(num.real)\n            imag = num.imag\n            if imag == 0:\n                pol = (real, 0)\n            else:\n                pol = (real, cmath.phase(num))\n            print(pol)\n        else:\n            print(\"Invalid input\")"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all combinations (with repetition) of the elements of the list\n    combinations = list(combinations_with_replacement(lst, n))\n\n    # Return a list with a tuple for each combination\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Define a function to generate all possible combinations with repetition\n    def generate_combinations(lst, n):\n        return combinations_with_replacement(lst, n)\n\n    # Generate all possible combinations with repetition\n    combs = generate_combinations(l, n)\n\n    # Convert the generator to a list of tuples\n    comb_list = [tuple(comb) for comb in combs]\n\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(1, len(l) + 1):\n        for j in combinations_with_replacement(l, i):\n            combinations.append(tuple(j))\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue']\n    color_combinations = []\n    for color_list in combinations_with_replacement(colors, n):\n        color_combination = tuple(color_list)\n        color_combinations.append(color_combination)\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Get all combinations of length n from the list\n    combinations = combinations_with_replacement(l, n)\n    # Convert the combinations to a list of tuples\n    result = list(combinations)\n    # Return the result\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n        else:\n            continue\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    num = 2\n\n    while num <= n:\n        if num > 1:\n            prime = True\n            for i in range(2, num):\n                if num % i == 0:\n                    prime = False\n                    break\n            if prime:\n                count += 1\n        num += 1\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    '''\n    A helper function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    '''\n    A helper function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n            if count == n:\n                return count\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    A helper function that checks if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Using list comprehension to create a new tuple with maximum values\n    max_tup = tuple([max(tup1[i], tup2[i]) for i in range(len(tup1))])\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n    # create an empty tuple to store the maximized elements\n    max_tup = ()\n    # loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # compare the current element of the first tuple with the current element of the second tuple\n        if test_tup1[i] < test_tup2[i]:\n            # if the first tuple element is smaller than the second tuple element, add the first tuple element to the maximized tuple\n            max_tup += (test_tup1[i],)\n        else:\n            # otherwise, add the second tuple element to the maximized tuple\n            max_tup += (test_tup2[i],)\n    # return the maximized tuple\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Initialize variables to store the maximum values in the tuples\n    max_tup1 = max_tup2 = 0\n    \n    # Iterate through the tuples and compare the values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup1 = max(max_tup1, test_tup1[i])\n        elif test_tup1[i] < test_tup2[i]:\n            max_tup2 = max(max_tup2, test_tup2[i])\n    \n    # Return the maximum values\n    return max_tup1, max_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Initialize the maximum value to None\n    max_value = None\n    \n    # Loop through both tuples and compare the elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            if max_value is None or max_value < test_tup1[i]:\n                max_value = test_tup1[i]\n        elif test_tup1[i] < test_tup2[i]:\n            if max_value is None or max_value < test_tup2[i]:\n                max_value = test_tup2[i]\n    \n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # convert the tuples to lists for easy comparison\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # compare the lists using the max() function\n    max_list = max(list1, list2)\n    # convert the max_list back to a tuple for return\n    max_tup = tuple(max_list)\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = max(test_tup1)\n    test_tup1 = (x if x!= max_val else 0 for x in test_tup1)\n    test_tup2 = (x if x!= max_val else 0 for x in test_tup2)\n\n    return max(test_tup1, test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # loop through the tuples and compare each element\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            # if the first tuple is smaller than the second, swap the elements\n            test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n    # return the tuple with the maximum elements\n    return test_tup1 if test_tup1 > test_tup2 else test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        max_val = 0\n        max_elem = None\n        for elem in test_tup1:\n            if elem > max_val:\n                max_val = elem\n                max_elem = elem\n        return max_elem"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    is_prime = True\n    prime_count = 0\n    current_number = 2\n\n    # Check if the number is 1 or less\n    if n <= 1:\n        return None\n\n    # Loop through all numbers until nth prime number is found\n    while prime_count < n:\n\n        # Check if the number is prime\n        for i in range(2, current_number):\n            if current_number % i == 0:\n                is_prime = False\n                break\n\n        # Increment the count if the number is prime\n        if is_prime:\n            prime_count += 1\n\n        # Increment the current number\n        current_number += 1\n\n    # Return the nth prime number\n    return current_number"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize the list of primes to check\n    primes = [2]\n\n    # Check if n is less than 2\n    if n < 2:\n        return \"n must be greater than or equal to 2.\"\n\n    # Check if n is divisible by 2\n    if n % 2 == 0:\n        return \"n must be odd.\"\n\n    # Loop through the odd numbers between 3 and sqrt(n)\n    for i in range(3, int(n**0.5) + 1, 2):\n        # Check if i is a prime number\n        if n % i == 0:\n            # If i is a divisor of n, then n is not a newman\u2013shanks\u2013williams prime number\n            return \"n is not a newman\u2013shanks\u2013williams prime number.\"\n\n    # If no prime numbers were found up to the square root of n, then n is a newman\u2013shanks\u2013williams prime number\n    return n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    a, b, c = 0, 0, 1\n    count = 0\n    \n    # Loop through n-1 numbers to find the nth newman\u2013shanks\u2013williams prime number\n    while count < n:\n        if is_prime(a) and is_prime(b) and is_prime(c):\n            count += 1\n        a, b, c = b, c, a**2 + c**2\n    \n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return a\n\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    # Check if n is less than 2\n    if n < 2:\n        return False\n    \n    # Check if n is equal to 2\n    if n == 2:\n        return True\n    \n    # Check if n is divisible by any number less than or equal to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    # n is a prime number\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # initialize variables\n    count = 1\n    num = 3\n    \n    # loop until count reaches n\n    while count < n:\n        # check if num is prime\n        if is_prime(num):\n            # if prime, increment count and move on to next number\n            count += 1\n            num += 2\n        # if not prime, move on to next number\n        else:\n            num += 2\n    \n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list of prime numbers up to the square root of n\n    primes = [2, 3]\n    while primes[-1] * primes[-1] <= n:\n        primes.append(primes[-1] * 2 + 1)\n\n    # Use the Sieve of Eratosthenes to find all prime numbers up to n\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for p in primes:\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n\n    # Find the nth newman\u2013shanks\u2013williams prime number by counting primes up to n\n    count = 0\n    for p in primes:\n        if sieve[p]:\n            count += 1\n        if count == n:\n            return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list of primes to check against\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Loop through the list of primes and check for the nth prime\n    for i in range(1, n+1):\n        if i in primes:\n            # The nth prime has been found, return it\n            return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the variable to store the result\n    prime = 0\n    \n    # Loop until the number of primes found reaches n\n    while len(prime) < n: \n        # Generate a new random prime number\n        prime = generate_prime()\n    \n    # Return the nth prime number\n    return prime[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    count = 0\n\n    for prime in primes:\n        if prime <= n:\n            count += 1\n\n    return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the count to 0\n    count = 0\n\n    # Initialize the prime flag to True\n    prime = True\n\n    # Iterate until count reaches n\n    while count < n:\n        # Set the flag to False\n        flag = True\n\n        # Iterate from 2 to the square root of the current count\n        for i in range(2, int(count ** 0.5) + 1):\n            # If the count is divisible by i, set the flag to False and break the loop\n            if count % i == 0:\n                flag = False\n                break\n\n        # If the flag is still True after the loop, the current count is a newman-shanks-williams prime\n        if flag:\n            prime = True\n            count += 1\n        # If the flag is False after the loop, the current count is not a newman-shanks-williams prime\n        else:\n            prime = False\n            count += 1\n\n    # If the count is less than n, there are fewer newman-shanks-williams primes than n\n    if count < n:\n        print(\"There are fewer newman-shanks-williams primes than\", n)\n    # Otherwise, print the nth newman-shanks-williams prime number\n    else:\n        print(\"The\", n, \"th newman-shanks-williams prime number is:\", count)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the list of primes to be searched\n    primes = [2]\n    for i in range(3, n + 1):\n        # Check if the current number is prime\n        for j in primes:\n            if i % j == 0:\n                break\n        else:\n            # If it's not prime, add it to the list of primes\n            primes.append(i)\n    # Return the nth prime number in the list\n    return primes[n - 1]"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples have equal lengths\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same length.\")\n    \n    # Perform element-wise division\n    result = [(num1/num2) for num1, num2 in zip(test_tup1, test_tup2)]\n    \n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i]!= 0:\n            result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Length of test_tup1 and test_tup2 should be equal')\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            result_tup += (0,)\n        else:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Initialize an empty list to hold the result\n    result_list = []\n    # Check if the length of both tuples are the same\n    if len(test_tup1) == len(test_tup2):\n        # Loop through the elements of both tuples\n        for i in range(len(test_tup1)):\n            # Perform element-wise division on the corresponding elements of the two tuples\n            result = test_tup1[i] / test_tup2[i]\n            # Append the result to the result list\n            result_list.append(result)\n        # Return the result list\n        return result_list\n    else:\n        # If the length of the first tuple is not equal to the length of the second tuple, return None\n        return None"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # initialize result tuple\n    result_tup = ()\n    # iterate through tuples and perform division operation element-wise\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] / test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: the two tuples have different lengths\")\n        return\n    \n    # Divide the corresponding elements of the two tuples element-wise and store the result in a new tuple\n    result_tup = tuple(x/y for x, y in zip(test_tup1, test_tup2))\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple((num1 / num2) for num1, num2 in zip(test_tup1, test_tup2))"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Calculate the length of the first part of the list\n    first_part_length = L\n\n    # Split the list into two parts\n    first_part = list1[:first_part_length]\n    second_part = list1[first_part_length:]\n\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes a list and an integer L as input and splits the given list into two parts where the length of the first part of the list is L. \n    The function returns the resulting lists in a tuple.\n    \"\"\"\n    lst_split = []\n    n = len(lst)\n    for i in range(0, n, L):\n        lst_split.append(lst[i:i+L])\n    return tuple(lst_split)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Ensure that L is a positive integer\n    if L <= 0:\n        raise ValueError(\"L must be a positive integer.\")\n\n    # Determine the length of the first part\n    length = len(list1) // 2\n\n    # Return the two parts of the list\n    return list1[:length], list1[length:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(lst):\n        return None\n    else:\n        return (lst[:L], lst[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Split a list into two parts of length L.\n\n    Args:\n        lst (list): The list to split.\n        L (int): The length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two resulting lists.\n    '''\n    # Calculate the length of the second part of the list\n    L2 = len(lst) - L\n\n    # Create the first part of the list\n    lst1 = lst[:L]\n\n    # Create the second part of the list\n    lst2 = lst[L:]\n\n    return (lst1, lst2)\n"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % 2 == 0:\n        mid = len(list1) // 2\n        return (list1[:mid], list1[mid:])\n    else:\n        mid = (len(list1) + 1) // 2\n        return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Convert the list to a list of tuples to split into two parts\n    list2 = tuple(list1[:L])\n    \n    # Remove the first L elements from list1 and return the two parts as a tuple\n    return (list1[L:], list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # check if L is a positive integer\n    if L <= 0:\n        return \"Error: L must be a positive integer.\"\n    # check if L is less than or equal to the length of the list\n    elif L > len(list1):\n        return \"Error: L cannot be greater than the length of the list.\"\n    else:\n        # split the list into two parts with length L\n        list_a = list1[:L]\n        list_b = list1[L:]\n        # return the two parts in a tuple\n        return (list_a, list_b)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # calculate the length of the first part\n    first_part_length = len(list1) // 2\n    \n    # create the first part of the list\n    first_part = list1[:first_part_length]\n    \n    # create the second part of the list\n    second_part = list1[first_part_length:]\n    \n    # return the resulting lists as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7\n    return h_age * dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age / 7)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert hours to dog years\n    dog_years = h_age / 7\n    \n    # round to the nearest integer\n    dog_years = int(dog_years + 0.5)\n    \n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    age = h_age * 7\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert human age to dog years\n    dog_years = h_age * 7\n    # Return the result\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # convert h_age from hours to days\n    d_age = h_age / 24\n\n    # calculate dog's years based on age in days\n    dog_years = d_age * 7\n\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age / 7\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    dog_years = h_age * 7\n\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Split the list into chunks of n elements\n    S_split = [S[i:i+step] for i in range(0, len(S), step)]\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    \n    # Loop through the list and split it for every nth element\n    for i in range(0, len(S), step):\n        # Create a new list and append the current element\n        new_list = S[i:i+step]\n        result.append(new_list)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        raise ValueError(\"Input must be a list\")\n    if not isinstance(step, int):\n        raise ValueError(\"Step must be an integer\")\n    if step <= 0:\n        raise ValueError(\"Step must be greater than zero\")\n    \n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        j = i + step\n        while j < len(S) and j <= i + step * 2:\n            result.append(S[i:j])\n            j += step\n        i += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    if step == 1:\n        return [S]\n    else:\n        result = []\n        for i in range(0, n, step):\n            result.append(S[i:i+step])\n        return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Initialize a counter to keep track of the index of the current list\n    index = 0\n    \n    # Loop through the input list\n    while index < len(S):\n        # Split the list at the nth index\n        sublist = S[index:index+step]\n        # Add the sublist to the result list\n        result.append(sublist)\n        # Increment the index by the step size\n        index += step\n    \n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area\n    lateral_area = 6 * l * l\n    return lateral_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    # Calculate the volume of the cube\n    V = l**3\n\n    # Calculate the lateral surface area of the cube\n    A_lateral = 6 * (l**2)\n\n    # Return the lateral surface area of the cube\n    return A_lateral"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2) / 3"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6*l**2 # lateral surface area is 6 * side length^2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2*6"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of each odd number to the sum variable\n        sum += i*i\n    # return the sum variable as the result\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n\n    # iterate through odd natural numbers up to n\n    for i in range(3, n+1, 2):\n        # square the odd natural number and add it to sum\n        sum += i**2\n\n    # return the sum of squares of odd natural numbers up to n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    sum_of_squares = 0\n    current_number = 1\n    count = 1\n\n    while count <= n:\n        if current_number % 2!= 0:\n            sum_of_squares += current_number ** 2\n            count += 1\n        current_number += 1\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n, 1, -2): # start with n and end at 1 and step by -2 to get the odd numbers\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    \n    while count < n:\n        if count % 2 == 1:\n            sum_of_squares += count ** 2\n        count += 1\n    \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    current_number = 1\n\n    while count < n:\n        if current_number % 2!= 0:\n            sum_of_squares += current_number ** 2\n            count += 1\n        current_number += 2\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize a counter variable to keep track of the number of stars\n    count = 1\n    # Initialize a string variable to hold the final star number\n    star_num = \"\"\n    # Loop through each iteration of the function\n    for i in range(1, n + 1):\n        # If the counter is odd, add an asterisk to the string\n        if count % 2 == 1:\n            star_num += \"*\"\n        # Increment the counter\n        count += 1\n    # Return the final star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n\n    if n < 1:\n        return \"Invalid input. n must be a positive integer.\"\n\n    if n == 1:\n        return \"1\"\n\n    # Initialize the count of stars\n    count = 0\n\n    # Initialize the star string\n    star_str = \"\"\n\n    # Loop through the count\n    while count < n:\n        # Increment the count by 1\n        count += 1\n\n        # Add a star to the star string\n        star_str += \"*\"\n\n    # Return the star string\n    return star_str"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 0:\n        return \"1\"\n    elif n == 1:\n        return \"1*\"\n    else:\n        return str(find_star_num(n-1)) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result = result + (i*i)\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return \"*\"\n    else:\n        return \"*\" + find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"*\"\n    elif n == 2:\n        return \"***\"\n    else:\n        return \"*\" + find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the result variable\n    result = 1\n    \n    # loop n times\n    for i in range(1, n+1):\n        # multiply the result by 2 (since 1*2 = 2, 2*2 = 4,...)\n        result *= 2\n        \n        # add the result to the sum variable\n        sum += result\n    \n    # return the final value of sum\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    elif n == 2:\n        return \"**\"\n    else:\n        for i in range(1, n):\n            print(\"*\", end=\" \")\n        print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result += i\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variables\n    count = 1\n    num = 1\n\n    # loop through until we reach the desired star number\n    while count <= n:\n        # print the current star number\n        print('*' * num)\n        # increment the count and the number of stars\n        count += 1\n        num += 1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        return ord(k)\n    elif isinstance(k, int):\n        return k\n    else:\n        raise ValueError('Input must be a string or an integer.')"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value_dict = {\n        'a': 97,\n        'b': 98,\n        'c': 99,\n        'd': 100,\n        'e': 101,\n        'f': 102,\n        'g': 103,\n        'h': 104,\n        'i': 105,\n        'j': 106,\n        'k': 107,\n        'l': 108,\n       'm': 109,\n        'n': 110,\n        'o': 111,\n        'p': 112,\n        'q': 113,\n        'r': 114,\n       's': 115,\n        't': 116,\n        'u': 117,\n        'v': 118,\n        'w': 119,\n        'x': 120,\n        'y': 121,\n        'z': 122\n    }\n    return ascii_value_dict.get(k, None)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        print(\"Invalid input\")"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n            count += 1\n    if count == 0:\n        return None\n    else:\n        return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n        \n        if even_index == i:\n            even_index += 1\n    \n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n    return even_sum, even_count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_count += 1\n    if even_count == 0:\n        return \"There are no even numbers in the list.\"\n    else:\n        return even_sum / even_count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    # initialize sum and counter\n    total = 0\n    count = 0\n    \n    # iterate over even numbers up to n\n    for i in range(2, n+1, 2):\n        # if the number is raised to the fifth power, add it to the total and increment the counter\n        if i ** 5 == 0:\n            total += i\n            count += 1\n            \n    # return the total and count\n    return total, count"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2,n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 5\n        i += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(n):\n        sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i * i * i * i * i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    return [t[1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    result_tup = ()\n\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        return result_tup\n    else:\n        raise ValueError(\"The two tuples must have the same length.\")"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The tuples must have the same length\")\n        return\n    \n    # Loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            test_tup1[i] -= test_tup2[i]\n    \n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length.\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length\")\n    \n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n        \n    return tuple(result_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] -= test_tup2[i]\n        return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        for j in range(2*i, n+1, 2*i):\n            sum += math.comb(n, j-2*i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        return 'Invalid input. Please enter a positive integer.'\n    elif n == 1:\n        return 0\n    else:\n        coeff_sum = 0\n        for i in range(2, n+1, 2):\n            coeff_sum += math.comb(n, i)\n        return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return None\n\n    # Initialize sum to 0\n    even_sum = 0\n\n    # Iterate through the odd indices\n    for i in range(1, n+1, 2):\n        # Calculate the binomial coefficient\n        coeff = math.comb(n, i)\n        # If the coefficient is even, add it to the sum\n        if coeff % 2 == 0:\n            even_sum += coeff\n\n    return even_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Find the number of terms in the series\n    num_terms = 0\n    for i in range(n):\n        num_terms += (i * (n - i)) // 2\n    \n    # Calculate the sum of even index binomial coefficients\n    sum_even_binomial_coeffs = 0\n    for i in range(1, n + 1):\n        sum_even_binomial_coeffs += math.comb(n, i, exact=True)\n    \n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize variables for sum and denominator\n    sum_even = 0\n    denominator = 1\n    # loop through even indices\n    for i in range(2, n+1, 2):\n        # calculate the binomial coefficient using formula\n        # n choose i = n! / (i! * (n-i)!)\n        binomial_coeff = math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n        # if the index is even, add the corresponding binomial coefficient to sum_even\n        if i % 2 == 0:\n            sum_even += binomial_coeff\n    # return the sum of even index binomial coefficients\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Calculate the number of terms in the sum\n    terms = n * (n - 1) // 2\n    \n    # Initialize variables for the sum and the current term\n    term_sum = 0\n    current_term = 1\n    \n    # Iterate through the terms and calculate each term\n    for i in range(terms):\n        # Calculate the even-indexed coefficient\n        even_index_coeff = 2 * current_term\n        \n        # Add the even-indexed coefficient to the term sum\n        term_sum += even_index_coeff\n        \n        # Update the current term to the next odd term\n        current_term += 2\n    \n    # Return the sum of the even-indexed binomial coefficients\n    return term_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Compute the first term of the sum\n    first_term = math.factorial(n) // math.factorial(n - 2)\n    \n    # Compute the even index terms of the sum\n    even_index_terms = []\n    for i in range(2, n + 1):\n        even_index_terms.append(math.comb(n, i) * math.comb(n - 2, n - 2 - i))\n    \n    # Compute the sum of the even index terms\n    even_index_sum = sum(even_index_terms)\n    \n    # Compute the final sum\n    final_sum = first_term + even_index_sum\n    \n    return final_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum( n): \n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0 \n    for i in range(2, n+1, 2): \n        term = math.factorial(n-i) / math.factorial(i) \n        sum += term \n    return sum "
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0,n+1):\n        if i%2 == 0:\n            sum += math.comb(n,i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize the sum to zero\n    sum = 0\n    # loop through the first n terms of the sequence\n    for i in range(n): \n        # calculate the i-th term of the sequence\n        term = math.comb(2*i, i) \n        # add the term to the sum only if it is even\n        if i % 2 == 0:\n            sum += term\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = ((1/3) * 3.14159 * r * r * h)\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume of the cylinder.\n    '''\n    area = 3.14 * r * r\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * (r ** 2) * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (1/3) * 3.14159 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 3.14 * r ** 2  # calculate the area of the cylinder using the formula A = pi * r^2\n    volume = area * h  # calculate the volume of the cylinder using the formula V = A * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # create an empty dictionary to store the filtered entries\n    filtered_dict = {}\n    for key, value in dict.items():\n        # check if the value is greater than or equal to n\n        if value >= n:\n            # add the key-value pair to the filtered dictionary\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        else:\n            if test_tup[i]!= test_tup[i-1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i]!= test_tup[i+1]:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0 and test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize a variable to store the current decagonal number\n    num = 0\n    \n    # Check if n is less than 1\n    if n < 1:\n        return \"n must be greater than or equal to 1\"\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the next number in the sequence\n        next_num = (2*i)**2 - i\n        \n        # Check if the calculated number is equal to n\n        if next_num == n:\n            return num\n        \n        # Increase the current decagonal number\n        num += 1\n    \n    # If the loop completes without finding a match, return \"n is not a decagonal number\"\n    return \"n is not a decagonal number\""
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the first n terms of the sequence\n    sequence = [i*i*2 for i in range(1, n+1)]\n    # Sum the terms and divide by 2 (since we're looking for the nth decagonal)\n    return (sum(sequence) // 2)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_numbers = []\n    for i in range(1, n+1):\n        decagonal_numbers.append(2*i**2)\n    return decagonal_numbers[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 0\n    while count < n:\n        count += 1\n        if count in range(1, int(n**0.5)+1):\n            return True\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Initialize the count variable and the result variable\n    count = 0\n    result = 0\n\n    # Loop through each number from 1 to n\n    for i in range(1, n + 1):\n\n        # Check if the number is a decagonal number\n        if count == 0 or count == n:\n            result = result + i\n            count = count + 1\n\n    return result"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize variables for decagonal number\n    num = 0\n    power = 1\n\n    # Calculate the decagonal number\n    while num < n:\n        num += power\n        power += 2\n\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_numbers = [1, 2, 5, 12, 22, 35, 51, 70, 92, 117, 145, 176, 210, 247, 287, 330, 376, 425, 477, 532, 590, 651, 715, 782, 852, 925, 1001, 1080, 1162, 1247, 1335, 1426, 1520, 1617, 1717, 1820, 1926, 2035, 2147, 2262, 2380, 2501, 2625, 2752, 2882, 3015, 3151, 3290, 3432, 3577, 3725, 3876, 4030, 4187, 4347, 4510, 4676, 4845, 5017, 5192, 5370, 5551, 5735, 5922, 6112, 6305, 6501, 6700, 6902, 7107, 7315, 7526, 7740, 7957, 8177, 8400, 8626, 8855, 9087, 9322, 9560, 9801, 10045, 10292, 10542, 10795, 11051, 11310, 11572, 11837, 12105, 12376, 12650, 12927, 13207, 13490, 13776, 14065, 14357, 14652, 14950, 15251, 15555, 15862, 16172, 16485, 16801, 17120, 17442, 17767, 18095, 18426, 18760, 19097, 19437, 19780, 20126, 20475, 20827, 21182, 21540, 21899, 22262, 22628, 22997, 23369, 23744, 24122, 24502, 24885, 25271, 25660, 26052, 26447, 26844, 27244, 27647, 28053, 28461, 28872, 29285, 29701, 30119, 30540, 30963, 31389, 31817, 32248, 32681, 33117, 33555, 33996, 34440, 34886, 35335, 35787, 3"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_sum = 0\n    for i in range(1, n+1):\n        decagonal_sum += (5 * i * (i - 1)) // 2\n    return decagonal_sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"The nth decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    row = 1\n\n    while row <= n:\n        col = 1\n        while col <= n - row:\n            decagonal_num += col\n            col += 1\n        row += 1\n\n    return decagonal_num\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The {n}th decagonal number is {is_num_decagonal(n)}\")\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n as input and returns the nth decagonal number.\n    '''\n    # Initialize a variable to keep track of the current number\n    current_num = 1\n    \n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Add the current number to the sum of the previous two numbers\n        current_sum = current_num + (2*current_num-1)\n        # Update the current number to the sum of the previous two numbers\n        current_num = current_sum\n    \n    # Return the current number, which is the nth decagonal number\n    return current_num"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    return (index!= -1, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements in the list are unique,\n    and False otherwise.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n\n    # Create a set from the input list\n    unique_set = set(test_list)\n\n    # Check if the length of the set is equal to the length of the input list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set()\n    # Loop through each element in the list\n    for element in test_list:\n        # If the element is not in the set, add it to the set and return False\n        if element not in unique_set:\n            unique_set.add(element)\n        # If the element is already in the set, return False\n        else:\n            return False\n    # If all elements are unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    if len(unique_list) == len(test_list):\n        print(\"All elements in the list are unique.\")\n    else:\n        print(\"Some elements in the list are not unique.\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set, which automatically removes duplicates\n    unique_set = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    return len(unique_set) == len(test_list)"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have equal length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        return \"Lists do not have the same length.\"\n    else:\n        # Subtract the two lists element-wise\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Args:\n        nums1: A list of numbers.\n        nums2: A list of numbers.\n\n    Returns:\n        A list of numbers representing the subtraction of the two input lists.\n    \"\"\"\n    # Check that both lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # Subtract the elements of each list element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists must have the same length.')\n    result = [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the length of lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must be of equal length\")\n    # create an empty list to store the result\n    result = []\n    # iterate over each element in the lists\n    for i in range(len(nums1)):\n        # subtract the two elements and add it to the result list\n        result.append(nums1[i] - nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in str(n):\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    for i in freq:\n        if freq[i] > n:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # create a list to store the frequency of each digit in the integer\n    \n    # loop through each digit in the integer\n    for digit in str(n):\n        freq[int(digit)] += 1 # add 1 to the frequency of the digit in the list\n        \n    # loop through the frequency list and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in range(10):\n        if freq[digit] > digit: # if the frequency of the digit is greater than the digit itself, return False\n            return False\n        \n    # if all digits have a frequency less than or equal to the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10\n\n    for digit in digits:\n        freq[digit] += 1\n\n    for i in range(10):\n        if freq[i] > freq[i] or freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [digits.count(d) for d in range(10)]\n    \n    # check if the frequency of each digit is less than or equal to the digit itself\n    for d in range(10):\n        if freq[d] > d:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    for digit in digits:\n        if digit > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > 1 and int(digit) > count:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Initialize a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    for i in range(10):\n        freq[i] = n.count(str(i))\n\n    # Check if the frequency of each digit in the integer is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Convert the integer to a string and split it into a list of characters\n    digits = list(str(n))\n    \n    # Loop through the list of characters and count the frequency of each digit\n    for digit in digits:\n        freq[digit] = freq.get(digit, 0) + 1\n    \n    # Loop through the frequency dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    # If all digits have a frequency less than or equal to their value, then the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n): \n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10  # initialize frequency list with zeros\n    \n    # iterate over each digit in the integer and update the frequency list\n    for i in range(10):\n        if n // (10 ** i) == 0:  # if the digit is zero, it has a frequency of 0\n            freq[i] = 0\n        else:\n            freq[n // (10 ** i)] += 1  # else, it has a frequency of the number of occurrences of that digit in the integer\n    \n    # iterate over the frequency list and check if the frequency is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > n % (10 ** i):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # create a dictionary to store the frequency of digits\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # check if the frequency of digits is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(list[0] == element):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        return list[0] == element and check_element(list[1:],element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and element and returns a boolean value indicating whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(lst)!= len(set(lst)):\n        return False\n    for i in lst:\n        if i!= elem:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)b{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?<=a)(b{2,3})(?=\\s|$)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def text_match_two_three(text):\n    pattern = r'(?<![ab])ab{2,3}(?![ab])'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*[b]{2,3}'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[bB]{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a([bB]{2,3})'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'ab(b)*')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}')\n    return pattern.search(text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = re.compile(r'a(b){2,3}')\n    match = pattern.search(text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize maximum subarray sum and current subarray sum as 0\n    max_sum = 0\n    curr_sum = 0\n    # Initialize a list to store the modified array\n    modified_arr = []\n    # Repeat the given array k times to form the modified array\n    for i in range(k):\n        modified_arr.append(a)\n    # Iterate through the modified array and calculate the sum of the subarrays\n    for i in range(n):\n        curr_sum = curr_sum - a[i] + a[(i+k)%n]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    This function takes an array a, its length n, and the value of k, and returns the maximum sum of a contiguous array\n    in the modified array formed by repeating the given array k times.\n    \"\"\"\n    # Create a modified array by repeating the given array k times\n    modified_array = a * k\n\n    # Initialize variables to keep track of the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through the modified array\n    for i in range(n):\n        # Update the current sum by adding the value at index i of the given array\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sum = float('-inf') # Initialize the maximum sum to negative infinity\n    \n    for i in range(n): # Loop through the array\n        for j in range(k): # Repeat the array k times\n            a.insert(0, a[i]) # Insert the current element at the beginning of the array\n            \n        sub_array_sum = sum(a) # Calculate the sum of the modified array\n        if sub_array_sum > max_sum: # If the sum is greater than the maximum sum\n            max_sum = sub_array_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    mod_array = a * k\n    for i in range(n-k+1):\n        current_sum = sum(mod_array[i:i+k])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the maximum sum subarray of length n\n    max_sum = max_sum_of_n = 0\n    for i in range(n):\n        max_sum_of_n = max(max_sum_of_n + a[i], a[i])\n        max_sum = max(max_sum, max_sum_of_n)\n        \n    # Now we repeat the given array k times and find the maximum sum subarray\n    max_sum_repeated = max_sum_of_n = 0\n    for i in range(k):\n        max_sum_of_n = max(max_sum_of_n + a[0], a[0])\n        max_sum_repeated = max(max_sum_repeated, max_sum_of_n)\n        \n    return max_sum_repeated"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_of_original_array = sum(a)\n    sum_of_modified_array = sum_of_original_array * k\n    \n    max_sum_of_modified_array = float('-inf')\n    current_sum_of_modified_array = 0\n    current_start_index = 0\n    \n    for i in range(n):\n        current_sum_of_modified_array += a[i]\n        \n        if current_sum_of_modified_array > max_sum_of_modified_array:\n            max_sum_of_modified_array = current_sum_of_modified_array\n            current_start_index = i - k + 1\n            \n    return max_sum_of_modified_array, a[current_start_index:current_start_index+k]"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        if i < k:\n            current_sum += a[i]\n        else:\n            current_sum -= a[i-k]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Modify the array to form a modified array with repeated values of the original array\n    modified_array = [a] * k\n    for i in range(k - 1):\n        modified_array.append(a[i])\n\n    # Initialize variables to store the sum of the array and the maximum sum\n    total_sum = max_sum = a[0]\n\n    # Traverse the modified array and find the sum of subarrays\n    for i in range(1, n):\n        total_sum += a[i]\n        if total_sum > max_sum:\n            max_sum = total_sum\n\n        # If the sum becomes negative, reset the sum to zero\n        if total_sum < 0:\n            total_sum = a[i]\n\n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    modified_array = a*k\n    max_sum = max(modified_array)\n    max_sum_index = modified_array.index(max_sum)\n    return max_sum, max_sum_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Create a modified array by repeating the given array k times\n    modified_arr = []\n    for i in range(k):\n        modified_arr += a\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the modified array and calculate the sum of current subarray\n    for i in range(len(modified_arr)):\n        current_sum += modified_arr[i]\n        \n        # Check if current subarray is greater than max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # If current subarray is less than or equal to max_sum, update the subarray sum\n        if current_sum <= max_sum:\n            current_sum -= modified_arr[i - k + 1]\n    \n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # Initialize a variable to keep track of the sum of squares of even numbers\n    even_sum = 0\n\n    # Iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        even_sum += i**2\n\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum to zero\n    sum = 0\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the number to the sum\n        sum += i*i\n    # return the sum of squares of first n even natural numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n:\n        count += 1\n        if count % 2 == 0:\n            sum += count ** 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(n):\n        square = i*i\n        sum_of_squares += square\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    while count < n:\n        num = count * 2 + 1\n        total += num**2\n        count += 1\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for i in list1:\n        if len(i) > len(max_lengths) or not max_lengths:\n            max_lengths = i\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        lengths = [len(item) for item in lst]\n        max_length = max(lengths)\n        if max_length not in max_lengths:\n            max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths, default=0):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max(max_lengths, default=0):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for item in list1:\n        if len(item) > max(max_lengths, default=0):\n            max_lengths = [len(item)]\n        elif len(item) > max_lengths[0]:\n            max_lengths[0] = len(item)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > len(max_lengths):\n            max_lengths = lst\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Returns the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == len(max_lengths):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and sublist > max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Create a 2D matrix to store the number of ways of painting the fence\n    ways = [[0 for _ in range(k+1)] for _ in range(n+1)]\n\n    # Base cases:\n    # 1. If there are no posts, there is only one way to paint the fence with 0 colors\n    if n == 0:\n        ways[0][0] = 1\n    # 2. If there is only one color, there is only one way to paint the fence with that color\n    elif k == 1:\n        ways[0][1] = 1\n    else:\n        # Initialize the first row and the first column to 1\n        ways[0][0] = 1\n        ways[0][1] = 1\n\n        # Fill the rest of the matrix using recursion\n        for i in range(1, n+1):\n            for j in range(2, k+1):\n                ways[i][j] = ways[i-1][j] + ways[i][j-1]\n\n    # Return the value stored in the bottom right corner of the matrix\n    return ways[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    def count_ways(n, k, l, r, color):\n        \"\"\"\n        Recursive helper function to count the number of ways of painting the fence with n posts and k colors such that at most 2 adjacent posts have the same color.\n        \"\"\"\n        if n == 0:\n            return 1\n        if r < l:\n            return 0\n        if l + 1 == r:\n            return 1\n        if r - l == 1 and color[l] == color[r]:\n            return count_ways(n - 1, k, l + 1, r - 1, color)\n        return count_ways(n - 1, k, l + 1, r, color) + count_ways(n - 1, k, l, r - 1, color)\n\n    return count_ways(n, k, 0, n - 1, [0] * k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    ways = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j >= i:\n                ways += (n-i+1) * (k-j+1)\n            else:\n                ways -= (j-1) * (n-i+1)\n\n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the number of ways to paint the fence\n    ways = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # Initialize the first row and column of the array\n    ways[0][0] = 1\n    ways[1][1] = 1\n    \n    # Fill the rest of the array using the recurrence relation\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            ways[i][j] = ways[i-1][j] + ways[i][j-1]\n    \n    # Return the value in the last row and column of the array\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D list to store the number of ways to paint the fence\n    ways = [[0] * (k + 1) for i in range(n + 1)]\n    \n    # Base case\n    ways[0][0] = 1\n    \n    # Loop through each possible number of posts\n    for i in range(1, n + 1):\n        # Loop through each possible number of colors\n        for j in range(k + 1):\n            # If there are no more ways to paint the fence, skip to the next iteration\n            if j == 0:\n                continue\n            \n            # If the current post has a color, and the previous post has the same color, add 1 to the number of ways to paint the fence\n            if j >= i:\n                ways[i][j] = ways[i][j - i] + ways[i - 1][j]\n                \n    # Return the final number of ways to paint the fence\n    return ways[-1][-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Base case: if n is zero or k is zero, there is only one way to paint the fence\n    if n == 0 or k == 0:\n        return 1\n\n    # Initialize variables to count the ways of painting the fence\n    ways = 0\n    prev_color = None\n\n    # Loop through the possible colors to paint the fence\n    for color in range(k):\n        # If the current color is different from the previous color, there are n-1 ways of painting the fence with the previous color\n        if color!= prev_color:\n            ways += count_no_of_ways(n-1, k)\n\n        # Update the previous color for the next iteration\n        prev_color = color\n\n    # Return the number of ways of painting the fence\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the number of ways to paint the fence\n    ways = [[0] * (n + 1) for _ in range(k + 1)]\n    \n    # Base case: All fences have 1 post and 1 color\n    ways[1][1] = 1\n    \n    # Fill the array\n    for i in range(2, k + 1):\n        ways[i][1] = ways[i-1][1]\n    \n    for i in range(2, n + 1):\n        ways[1][i] = ways[1][i-1]\n    \n    for i in range(2, k + 1):\n        for j in range(2, n + 1):\n            if ways[i-1][j-1] + ways[i-1][j] == 1:\n                ways[i][j] = ways[i-1][j]\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i][j-1]\n    \n    return ways[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a list of k colors with value 0 and 1 for each color\n    colors = [0] * k\n    \n    # Create a 2D list to store the count of ways for each combination of colors\n    count = [[0] * (n+1) for i in range(k+1)]\n    \n    # Initialize the count of ways for an empty fence as 1\n    count[0][0] = 1\n    \n    # Iterate through the list of colors\n    for i in range(1, k+1):\n        # Iterate through the list of fence posts\n        for j in range(1, n+1):\n            # If the color at post j-1 is the same as the color at post j, increment the count of ways\n            if colors[j-1] == colors[j]:\n                count[i][j] = count[i-1][j-1] + count[i-1][j]\n            else:\n                # If the color at post j-1 is different from the color at post j, increment the count of ways by 1\n                count[i][j] = count[i-1][j]\n    \n    # Return the count of ways\n    return count[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a matrix to store the number of ways to paint the fence\n    ways = [[0 for i in range(k+1)] for j in range(n+1)]\n\n    # Base cases\n    for i in range(1, n+1):\n        ways[i][1] = 1\n\n    for j in range(1, k+1):\n        ways[1][j] = 1\n\n    # Fill in the matrix using dynamic programming\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            if ways[i-1][j] == ways[i][j-1] == 1:\n                ways[i][j] = ways[i-1][j]\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i][j-1] + ways[i-1][j-1]\n\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case: if n=1, then we have only 1 way of painting the fence\n    if n == 1:\n        return 1\n    \n    # Initialize two lists to store the count of ways for different combinations of colors\n    ways_1 = [1] * k # If there's only one color, we can paint the fence with any color combination\n    ways_2 = [0] * k # If there's two colors, we can paint the fence with any two colors\n    \n    # Iterate through all possible combinations of colors\n    for i in range(1, k+1):\n        ways_1[i-1] += ways_2[i-1] # Count the number of ways for i colors\n        ways_2[i-1] += ways_1[i-1] # Count the number of ways for i-1 colors\n    \n    # Iterate through all possible combinations of the last n-1 posts and calculate the number of ways for the last post\n    ways_last = [0] * (n-1)\n    for i in range(1, k+1):\n        ways_last[i-1] = ways_1[i-1] + ways_last[i-2] + ways_2[i-1]\n    \n    # Return the number of ways for the last n-1 posts\n    return ways_last[n-2]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    if m == 0:\n        return \"Cannot divide by zero.\"\n\n    # Calculate the quotient\n    quotient = n//m\n\n    # Calculate the remainder\n    remainder = n%m\n\n    # If the remainder is non-zero, round down to the nearest integer\n    if remainder!= 0:\n        quotient -= 1\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient\n    quotient = n // m\n    \n    # Round down the quotient to the nearest integer using the floor division operator\n    quotient = quotient - quotient % 1\n    \n    # Return the rounded down quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - w) * (s - h))\n\n    # Calculate the length of the other side of the triangle using Pythagorean theorem\n    other_side = math.sqrt(area ** 2 - w ** 2)\n\n    # Return the third side of the triangle\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w * h) / 2\n    side_a = math.sqrt(w**2 + h**2)\n    side_b = math.sqrt(w**2 + (h/2)**2)\n    side_c = side_a + side_b\n\n    return side_c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in two inputs: the length of one side of the right angled triangle\n    and the height of the triangle. It then calculates the third side of the triangle, which is\n    the diagonal of the triangle. The function returns the value of the third side.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = math.sqrt(w**2 + h**2)\n    side2 = math.sqrt(h**2 + w**2)\n    third_side = math.sqrt(w**2 + h**2) + math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    angle = math.degrees(math.acos((w*w + h*h - (w+h)*(w+h)) / (2 * w * h)))\n    return w * math.sin(math.radians(angle))"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the length of the third side of the triangle\n    third_side = math.sqrt(s * (s - w) * (s - h))\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_a = math.sqrt((w ** 2) + (h ** 2))\n    side_b = math.sqrt((w ** 2) + (h ** 2))\n    c = side_a - side_b\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    #calculate the length of the hypotenuse\n    hypotenuse = math.sqrt(w*w + h*h)\n\n    #return the length of the opposite side\n    return hypotenuse"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = float('-inf') # initialize max_num with smallest possible float value\n    \n    for num in listval:\n        if num > max_num:\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize max_val to first value in listval\n    max_val = listval[0]\n    \n    # loop through the rest of the list\n    for i in range(1, len(listval)):\n        # if the current value is greater than the current max_val, update max_val\n        if listval[i] > max_val:\n            max_val = listval[i]\n    \n    # return max_val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for i in listval:\n        if max_val is None or i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Define a dictionary to store the data types of the list elements\n    data_dict = {'int': [], 'float': [],'str': []}\n    \n    # Iterate over the list and store the data types in the dictionary\n    for element in listval:\n        if isinstance(element, int):\n            data_dict['int'].append(element)\n        elif isinstance(element, float):\n            data_dict['float'].append(element)\n        else:\n            data_dict['str'].append(element)\n    \n    # Find the maximum value in the dictionary of integer, float, and string values\n    max_int = max(data_dict['int']) if data_dict['int'] else None\n    max_float = max(data_dict['float']) if data_dict['float'] else None\n    max_str = max(data_dict['str']) if data_dict['str'] else None\n    \n    # Return the maximum value among integer, float, and string values\n    return max_int if max_int and max_float and max_str else None"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    This function finds the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = float('-inf')  # initialize the maximum value to negative infinity\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of heterogeneous values as input and returns the maximum value.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize the sum variable to zero\n    sum_div = 0\n    \n    # loop through all the numbers from 1 to the square root of the number\n    for i in range(1, int(number**0.5)+1):\n        # check if the current number is divisible by the number we are looking for\n        if number % i == 0:\n            # add the current number to the sum of divisors\n            sum_div += i\n    \n    # return the sum of all the divisors\n    return sum_div"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Sort the array\n    arr.sort()\n\n    # Initialize the inversion counter\n    inv_count = 0\n\n    # Traverse the sorted array and count inversions\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += j - i\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] <= right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\ndef get_Inv_Count(arr):\n    merge_sort(arr)\n    inv_count = 0\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            inv_count += n - i\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    count = 0 \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                count += 1 \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n\n    # Counting inversions using three-way partitioning \n    def merge_sort(arr, low, high): \n        if low < high: \n            # pi is partitioning index, arr[p] is now \n            # at right place \n            pi = (low + high) // 2 \n            # Separately sort elements before \n            # partition and after partition \n            merge_sort(arr, low, pi) \n            merge_sort(arr, pi+1, high) \n            # Merge the sorted sub-arrays \n            i = low \n            j = pi+1\n            k = low\n            while i <= pi and j <= high: \n                if arr[i] <= arr[j]: \n                    arr[k] = arr[i] \n                    i += 1 \n                else: \n                    arr[k] = arr[j] \n                    j += 1 \n                k += 1 \n            while i <= pi: \n                arr[k] = arr[i] \n                i += 1 \n                k += 1 \n            while j <= high: \n                arr[k] = arr[j] \n                j += 1 \n                k += 1 \n\n    # Counting inversions using merge sort \n    def count_inversions(arr, low, high): \n        if low < high: \n            # pi is partitioning index, arr[p] is now \n            # at right place \n            pi = (low + high) // 2 \n\n            # Separately sort elements before \n            # partition and after partition \n            count_inversions(arr, low, pi) \n            count_inversions(arr, pi+1, high) \n\n            # Merge the sorted sub-arrays \n            i = low \n            j = pi+1\n            k = low\n            while i <= pi and j <= high: \n                if arr[i] <= arr[j]: \n                    i += 1 \n                else: \n                    j += 1 \n                k += 1 \n            return k - low \n\n    # Main function to count inversions in array \n    def count_inversions_helper(arr, low, high): \n        if low < high: \n            # pi is partitioning index, arr[p] is now \n            # at right place \n            pi = (low + high) // 2 \n\n            # Separately sort elements before \n            # partition and after partition \n            count_inversions_helper(arr, low, pi) \n            count_inversions_helper(arr, pi+1, high) \n\n            # Merge the sorted sub-arrays \n            i = low \n            j = pi+1\n            k = low\n            while i <= pi and j <= high: \n                if arr[i] <= arr[j]: \n                    i += 1 \n                else: \n                    j += 1 \n                k += 1 \n            return k - low \n\n    # Counting inversions using the recursive approach \n    def count_inversions_recursive(arr, low, high): \n        if low < high: \n            # pi is partitioning index, arr[p] is now \n            # at right place \n            pi = (low + high) // 2 \n\n            # Separately sort elements before \n            # partition and after partition \n            count_inversions_recursive(arr, low, pi) \n            count_inversions_recursive(arr, pi+1, high) \n\n            # Merge the sorted sub-arrays \n            i = low \n            j = pi+1\n            k = low\n            while i <= pi and j <= high: \n                if arr[i] <= arr[j]: \n                    i += 1 \n                else: \n                    j += 1 \n                k += 1 \n            return k - low \n\n    # Counting inversions in the array \n    merge_sort(arr, 0, n-1) \n    return count_inversions(arr, 0, n-1) \n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if arr[j] > arr[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the first element of the unsorted part of the array\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        inv_count += max_idx - i\n\n        # Recursively sort the unsorted part of the array\n        if i < max_idx-1:\n            inv_count += get_Inv_Count(arr[i+1:max_idx])\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    Inversions are defined as pairs of elements that are in the wrong order.\n    '''\n    inv_count = 0  # Initialize the variable to store the number of inversions.\n    \n    for i in range(len(arr)):  # Loop through the array\n        # Use two pointers to find the maximum element in the current subarray.\n        left = i  # Initialize left pointer to i.\n        right = len(arr) - 1  # Initialize right pointer to the last element of the array.\n        \n        while left < right:  # Loop until the pointers meet.\n            # If the left element is greater than the right element, there is an inversion.\n            if arr[left] > arr[right]:\n                inv_count += (right - left)  # Increment the inversion count by the number of elements between the pointers.\n                # Swap the left and right elements.\n                arr[left], arr[right] = arr[right], arr[left]\n                # Move the pointers towards each other until they meet again.\n                left += 1\n                right -= 1\n            else:  # If the left element is smaller than or equal to the right element, move the left pointer towards the right.\n                left += 1\n        \n        # Check if there are any elements left in the current subarray.\n        if left < len(arr):  # If there are elements left in the subarray, there is an inversion.\n            inv_count += (len(arr) - left)  # Increment the inversion count by the number of elements left in the subarray.\n    \n    return inv_count  # Return the number of inversions."
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i = j = k = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\n\ndef get_Inv_Count(arr):\n    merge_sort(arr)\n    inv_count = 0\n\n    for i in range(1, len(arr)):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                inv_count += (i - j)\n\n    return inv_count\n"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # Initialize an empty list to hold the flattened list\n    flattened_list = []\n    \n    # Loop through each item in the input list\n    for item in list1:\n        # If the item is itself a list, flatten it and add the flattened items to the flattened list\n        if type(item) == list:\n            flattened_list += flatten_list(item)\n        # Otherwise, just add the item to the flattened list\n        else:\n            flattened_list.append(item)\n    \n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    flattened_list = []\n    for item in lst:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) is list:\n            flattened_list += flatten_list(item)\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    '''\n    Flatten a nested list structure.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # initialize an empty list to store flattened items\n    flattened_list = []\n\n    # loop through each item in the list\n    for item in list1:\n        # if the item is a list, recursively call the function\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        # otherwise, append the item to the flattened list\n        else:\n            flattened_list.append(item)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_data = defaultdict(int)\n\n    for t in stdata:\n        agg_data[t[0]] += t[1]\n\n    max_agg = max(agg_data.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for customer, amount in stdata:\n        # Calculate the maximum aggregate for the customer\n        max_aggr[customer] = max(max_aggr[customer], amount)\n\n    # Find the maximum aggregate from the defaultdict\n    max_amount = max(max_aggr.values())\n\n    # Return the maximum aggregate\n    return max_amount"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate for each day\n    max_agg = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for day, val in stdata:\n        # Update the max aggregate for each day\n        max_agg[day] = max(max_agg[day], val)\n\n    # Find the maximum aggregate across all days\n    max_agg_all = max(max_agg.values())\n\n    return max_agg_all"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Convert the list of tuples into a dictionary\n    data = defaultdict(int)\n    for item in stdata:\n        data[item[0]] += item[1]\n\n    # Find the maximum aggregate\n    max_agg = max(data.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Convert the list of tuples into a dictionary of lists\n    data = defaultdict(list)\n    for name, balance, amount in stdata:\n        data[name].append(balance + amount)\n\n    # Calculate the maximum aggregate for each person\n    max_aggs = [max(balance + amount for balance, amount in stdata if name == k) for k, balance_list in data.items()]\n\n    # Find the name of the person(s) with the maximum aggregate(s)\n    max_names = [name for name, balance_list in data.items() if max(balance_list) == max_aggs[i]]\n\n    # Print the result\n    if len(max_names) == 1:\n        print(f\"The maximum aggregate for {max_names[0]} is ${max_aggs[0]:.2f}.\")\n    else:\n        print(f\"The maximum aggregates for {', '.join(max_names)} are ${', '.join(str(agg).replace('.00', '') for agg in max_aggs)}.\")"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a defaultdict to store the maximum aggregate for each transaction\n    max_aggr = defaultdict(lambda: 0)\n\n    # iterate through the list of tuples\n    for trans in stdata:\n        # calculate the maximum aggregate for the current transaction\n        max_aggr[trans[0]] = max(max_aggr[trans[0]], trans[2])\n\n    # return the maximum aggregate for the entire list of transactions\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the maximum aggregate for each item\n    max_aggs = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, price in stdata:\n        # Update the maximum aggregate for the current item\n        max_aggs[item] = max(max_aggs[item], price)\n\n    # Return the maximum aggregate for all items\n    return max(max_aggs.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for x in stdata:\n        for i, y in enumerate(x):\n            max_agg[i] += y\n    max_val = max(max_agg.values())\n    return max_val"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the count of each item in the list\n    item_count = defaultdict(int)\n    # Iterate through each tuple in the list\n    for item, price in stdata:\n        # Increment the count of the current item in the dictionary\n        item_count[item] += 1\n    # Calculate the maximum aggregate\n    max_agg = 0\n    for count in item_count.values():\n        max_agg += count\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the count of each item\n    item_count = defaultdict(int)\n    for item, price in stdata:\n        item_count[item] += 1\n\n    # Calculate the maximum aggregate\n    max_agg = float('-inf')\n    for item, count in item_count.items():\n        max_agg = max(max_agg, count * price)\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if sum(i[:n]) == sum(i[n:]) and sum(i[:n])!= 0 and sum(i[n:])!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    total = 0\n    for i in range(2**n):\n        sum1 = 0\n        sum2 = 0\n        for j in range(i//2):\n            if (i & (1<<j)):\n                sum1 += 1\n            if (i & (1<<(j+n))):\n                sum2 += 1\n        if (sum1 == sum2):\n            total += 1\n    return total"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        # check if the sum of first n bits is same as the sum of last n bits\n        if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(i)[-n:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n = bin(i)[2:].zfill(n)\n        last_n = bin(i+2**n-1)[2:].zfill(n)\n        if int(first_n) == int(last_n):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize a variable to store the count of binary sequences\n    count = 0\n\n    # Iterate over all possible binary sequences of length 2n\n    for i in range(2**n, 2**(2*n)+1):\n        # Extract the first n bits and the last n bits of the sequence\n        first_n = i & ((1<<n)-1)\n        last_n = i >> n\n\n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if first_n == (last_n ^ ((1<<n)-1)):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    # Calculate the sum of the first n bits\n    first_sum = sum(1 for i in range(n))\n\n    # Calculate the sum of the last n bits\n    last_sum = 0\n    for i in range(n, 2*n):\n        last_sum += 2**i\n    \n    # Count the binary sequences with the given sums\n    count = 0\n    for i in range(2**n):\n        first = i // 2**(n-1)\n        last = i % 2**(n-1)\n        if first_sum == first and last_sum == last:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2 ** n):\n        binary_seq = bin(i)[2:].zfill(2 * n)\n        sum_first_n = int(binary_seq[:n], 2)\n        sum_last_n = int(binary_seq[-n:], 2)\n        if sum_first_n == sum_last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n-1):\n        first_bits = i & ((1 << n) - 1)\n        last_bits = (i >> n) & ((1 << n) - 1)\n        if first_bits == last_bits:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n): \n        first_n_bits = bin(i)[2:].zfill(n) # get the first n bits\n        last_n_bits = bin(2**(n-1)-1-i)[2:].zfill(n) # get the last n bits\n        if int(first_n_bits, 2) + int(last_n_bits, 2) == 2**n: \n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize two variables to store the sum of first and last n bits\n    sum1 = 0\n    sum2 = 0\n\n    # Generate all possible binary sequences of length 2n\n    for i in range(2**n): \n        # Check if the binary sequence is a valid binary sequence\n        if i & (i - 1) == 0: \n            # If it is, add it to the list of valid sequences\n            if i > 0: \n                sum1 += i\n            if i < 2**n - 1: \n                sum2 += i\n            if sum1 == sum2: \n                return i"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a counter to keep track of the depth\n    depth = 0\n    # Loop through each key in the dictionary\n    for key in d:\n        # If the key is another dictionary, increment the depth and call the function recursively\n        if isinstance(d[key], dict):\n            depth += 1\n            depth = max(depth, dict_depth(d[key]))\n        # If the key is a list, increment the depth by the length of the list\n        elif isinstance(d[key], list):\n            depth += len(d[key])\n    # Return the final depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1 + dict_depth(value)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1 + dict_depth(item)\n        elif isinstance(value, tuple):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1 + dict_depth(item)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            if depth > 1:\n                return depth\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    depth += 1\n                    if depth > 1:\n                        return depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    current_dict = d\n    while True:\n        if isinstance(current_dict, dict):\n            depth += 1\n            current_dict = current_dict.values()[0]\n        else:\n            return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 1\n    else:\n        return 1 + max(dict_depth(v) for k, v in d.items())"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            count += 1\n            count += dict_depth(value)\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = []\n    stack.append(d)\n    depth = 1\n    while stack:\n        d = stack.pop()\n        for key, value in d.items():\n            if isinstance(value, dict):\n                stack.append(value)\n        depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = 0\n        for key in d:\n            new_depth = 1 + dict_depth(d[key])\n            if new_depth > max_depth:\n                max_depth = new_depth\n        return max_depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    stack = [(d, 1)]\n    while stack:\n        key, value = stack.pop()\n        if isinstance(value, dict):\n            for k, v in value.items():\n                stack.append((k, v))\n        depth = max(depth, value + 1)\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes three arguments:\n    arr: list of elements\n    ranges: list of lists, where each sublist contains two numbers [start, end]\n    rotations: number of rotations to perform\n    index: index of element to find after rotations\n    \n    The function returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = None\n    \n    # Loop through each range of elements and rotation to find the element at the given index\n    for i in range(len(ranges)):\n        start, end = ranges[i]\n        if rotations > 0:\n            # Apply the specified rotation to the range of elements\n            if start > end:\n                arr[start:end+1] = arr[start:end+1][::-1]\n            else:\n                arr[start:end+1] = arr[start:end+1]\n            rotations -= 1\n        \n        # Check if the current element is the one we're looking for\n        if index >= start and index <= end:\n            result = arr[index]\n            break\n    \n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, the number of rotations and the index of the element to find.\n    It returns the element at the given index after the given number of rotations.\n    '''\n    # Initialize variables\n    total_rotations = 0\n    current_index = 0\n    element = None\n    \n    # Loop through the array and find the element at the given index after the rotations\n    for i in range(len(arr)):\n        if current_index == index:\n            element = arr[i]\n            break\n        current_index += 1\n        total_rotations += 1\n        \n        # If the current index is within a range, subtract the range from the total rotations and continue to the next index\n        for j in range(len(ranges)):\n            if current_index >= ranges[j][0] and current_index <= ranges[j][1]:\n                total_rotations -= ranges[j][2]\n                current_index += 1\n                break\n    \n    # Rotate the array\n    for i in range(total_rotations):\n        arr = arr[-1:] + arr[:-1]\n    \n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    def find_element(arr, ranges, rotations, index):\n        if rotations == 0:\n            return arr[index]\n        if rotations % 2 == 0:\n            mid = (rotations + 1) // 2\n            return find_element(arr[mid:], ranges, rotations - mid, index)\n        else:\n            mid = rotations // 2\n            return find_element(arr[:mid], ranges, rotations - mid, index)\n\n    if ranges[0] > rotations or ranges[-1] < 0:\n        return None\n    return find_element(arr, ranges, rotations, index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function finds the element at a given index after a specified number of rotations.\n    '''\n    n = len(arr)\n    # Calculate the range of elements to be rotated.\n    if rotations % 2 == 0:\n        start = 0\n        end = rotations // 2\n    else:\n        start = rotations // 2\n        end = n - 1\n\n    # Calculate the range of elements to be considered for the search.\n    if index % 2 == 0:\n        search_start = 0\n        search_end = index // 2\n    else:\n        search_start = index // 2\n        search_end = n - 1\n\n    # Find the elements to be rotated.\n    rotating_elements = arr[start:end+1]\n    # Find the elements to be searched.\n    searching_elements = arr[search_start:search_end+1]\n\n    # Calculate the number of rotations needed to return to the original position.\n    if rotations % 2 == 0:\n        number_of_rotations = (rotations // 2) + 1\n    else:\n        number_of_rotations = rotations // 2\n\n    # Rotate the rotating elements to the original position.\n    for _ in range(number_of_rotations):\n        rotating_elements.insert(0, rotating_elements.pop())\n\n    # Combine the rotated elements and the searching elements to find the element at the given index.\n    result = searching_elements + rotating_elements\n    return result[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array of integers, a list of tuples representing the ranges of values for each\n    rotation, the number of rotations to perform, and the index to find the element at.\n\n    It returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Find the value at the given index after the rotations\n    value_at_index = arr[index]\n    for i in range(rotations):\n        value_at_index = find_value_after_rotation(value_at_index, ranges)\n    return value_at_index\n\n\ndef find_value_after_rotation(value, ranges):\n    \"\"\"\n    This function takes a value and a list of tuples representing the ranges of values for each\n    rotation. It returns the value of the element after the rotation.\n    \"\"\"\n    for range_start, range_end in ranges:\n        if range_start <= value <= range_end:\n            return range_start + (value - range_start) // (range_end - range_start) * (range_end - range_start)\n    raise ValueError(\"Value not found in ranges\")"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Get the element at the given index\n    current_element = arr[index]\n\n    # Rotate the array\n    for i in range(rotations):\n        # Find the last element\n        last_element = arr[len(arr) - 1]\n\n        # Swap the first and last elements\n        arr[0], arr[len(arr) - 1] = arr[len(arr) - 1], arr[0]\n\n        # Shift the elements of the array to the left\n        for j in range(len(arr) - 1):\n            arr[j + 1] = arr[j]\n\n    # Iterate through the rotated array\n    for i in range(len(arr)):\n        # If the current element is the one we want to find, return its value\n        if arr[i] == current_element:\n            return arr[i]\n\n        # If we've reached the end of the array without finding the element, return None\n        if i == len(arr) - 1:\n            return None\n\n    # If we've made it this far, the element was not found in the rotated array\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize the result variable to None\n    result = None\n\n    # Perform the rotations and find the element at the given index\n    for i in range(rotations):\n        arr = arr[::-1] # Reverse the array\n    result = arr[index]\n\n    # Perform the reverse of the array\n    arr = arr[::-1]\n\n    # Return the element at the given index after the rotations\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, list of ranges and number of rotations, and an index of the element to be searched.\n    It returns the element at the given index after number of rotations.\n    '''\n\n    # Initialize the element to be searched\n    element = arr[index]\n\n    # Perform the required rotations\n    for _ in range(rotations):\n        if element in ranges:\n            # Search the element in the ranges that contain the element\n            element = ranges[ranges.index(element)]\n        else:\n            # Search the element in the remaining ranges\n            for i in range(len(ranges)):\n                if i!= ranges.index(element):\n                    ranges[i] = ranges[i][1:] + ranges[i][0]\n            element = ranges[0]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Find the number of elements to be rotated\n    num_elements = ranges[index]\n\n    # Find the element to be rotated\n    element = arr[ranges[index - 1]]\n\n    # Initialize the rotated array\n    rotated_arr = [0] * num_elements\n\n    # Find the element to be replaced in the rotated array\n    replaced_element = find_Replaced_Element(element, num_elements, ranges)\n\n    # Find the index of the replaced element in the original array\n    replaced_index = arr.index(replaced_element)\n\n    # Rotate the rotated array\n    for i in range(num_elements):\n        rotated_arr[(i + rotations) % num_elements] = arr[replaced_index + i]\n\n    # Find the element at the given index after the rotation\n    rotated_element = rotated_arr[(index - 1) % num_elements]\n\n    return rotated_element\n\ndef find_Replaced_Element(element, num_elements, ranges):\n    # Find the replaced element after rotations\n    replaced_element = arr[ranges[index - 1] + (rotations % num_elements)]\n\n    return replaced_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array of integers, a list of ranges, and a list of rotations, and returns the element at the given index after performing the specified number of rotations.\n\n    Parameters:\n    arr (list): An array of integers.\n    ranges (list): A list of ranges, where each range is a tuple containing the start and end indices of the subarray to be rotated.\n    rotations (list): A list of rotations, where each rotation is an integer representing the number of rotations to be performed.\n    index (int): The index of the element to be found.\n\n    Returns:\n    int: The element at the given index after performing the specified number of rotations.\n    \"\"\"\n    # Get the length of the array and the total number of rotations\n    n = len(arr)\n    total_rotations = sum(rotations)\n\n    # Calculate the range for each rotation\n    rotation_ranges = []\n    for i in range(len(ranges)):\n        rotation_ranges.append((ranges[i][0] - (total_rotations - rotations[i]), ranges[i][1] - (total_rotations - rotations[i])))\n\n    # Initialize the pointers to the start and end of the subarray\n    start = 0\n    end = rotation_ranges[0][1]\n\n    # Iterate through the rotations\n    for i in range(len(rotations)):\n        # Calculate the length of the subarray to be rotated\n        subarray_length = rotation_ranges[i][1] - rotation_ranges[i][0] + 1\n\n        # Reverse the subarray\n        arr[rotation_ranges[i][0]:rotation_ranges[i][1] + 1] = arr[rotation_ranges[i][0]:rotation_ranges[i][1] + 1][::-1]\n\n        # Update the pointers\n        start = rotation_ranges[i][0] + (total_rotations - rotations[i])\n        end = rotation_ranges[i][1]\n\n        # Update the start and end indices of the next rotation\n        if i < len(rotations) - 1:\n            start = rotation_ranges[i + 1][0]\n            end = rotation_ranges[i + 1][1]\n\n    # Return the element at the given index\n    return arr[index]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    pattern = re.compile(pattern)\n    results = re.findall(pattern, words)\n    if len(results) == 0:\n        return None\n    elif len(results) == 1:\n        return results[0]\n    else:\n        return results[0], results[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import random\nimport re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    p_words = [word for word in words if pattern.match(word)]\n    \n    if len(p_words) < 2:\n        return None\n    \n    return random.choice(p_words), random.choice(p_words)"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    if len(p_words) < 2:\n        return 'No such words starting with p'\n    else:\n        return f'{p_words[0]} and {p_words[1]}'"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.search(r'^p', word):\n            p_words.append(word)\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    for word in words:\n        if re.match(pattern, word):\n            return word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # use regular expression to find words starting with 'p'\n    p_words = re.findall(r'\\bp\\w+', words)\n\n    # check if p_words is not empty\n    if p_words:\n        # return two randomly selected words from the p_words list\n        selected_words = []\n        for i in range(2):\n            index = random.randint(0, len(p_words) - 1)\n            selected_words.append(p_words[index])\n        return selected_words\n    else:\n        # if p_words is empty, return an empty list\n        return []"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # create a regular expression to match words starting with 'p'\n    pattern = r'^\\w+p\\w+$'\n    \n    # use the regular expression to filter the words that start with 'p'\n    result = list(filter(lambda x: re.match(pattern, x), words))\n    \n    # if there are not exactly two words starting with 'p', return None\n    if len(result)!= 2:\n        return None\n    \n    # return the two words starting with 'p'\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    # Define a regular expression pattern to match words starting with 'p'\n    pattern = re.compile(r'\\bp\\w+')\n\n    # Find all words starting with 'p'\n    matches = re.findall(pattern,''.join(words))\n\n    # If there are at least two matches, return them in a list\n    if len(matches) >= 2:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Loop through each word in the list\n    for word in words:\n\n        # Check if the word starts with 'p'\n        if re.match(\"^p\", word):\n\n            # If it does, print the word and break out of the loop\n            print(word)\n            break"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[:2]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == 0:\n        return 0\n    if index == 1:\n        return max(a[0], a[1])\n\n    # Initialize variables\n    prefix_sum = [0] * (n + 1)\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + a[i]\n\n    # Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    max_sum = float('-inf')\n    for i in range(index, n):\n        for j in range(i + 1, min(index + k, n) + 1):\n            if i == j:\n                max_sum = max(max_sum, prefix_sum[j])\n            elif j - 1 == i:\n                max_sum = max(max_sum, prefix_sum[j] - prefix_sum[i])\n            else:\n                max_sum = max(max_sum, prefix_sum[j] - prefix_sum[i] + max_sum_increasing_subseq(a, n, i, k - (j - i)))\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize max_sum to zero\n    max_sum = 0\n\n    # Initialize an array to store the sum of increasing subsequence\n    sum_arr = [0] * n\n\n    # Initialize an array to store the starting index of each increasing subsequence\n    start_index_arr = [0] * n\n\n    # Initialize an array to store the ending index of each increasing subsequence\n    end_index_arr = [0] * n\n\n    # Initialize an array to store the length of each increasing subsequence\n    length_arr = [0] * n\n\n    # Initialize an array to store the prefix sum\n    prefix_sum = [0] * (n + 1)\n\n    # Initialize an array to store the maximum length of increasing subsequence\n    max_length = 0\n\n    # Initialize an array to store the index of the element with maximum sum in the subsequence\n    max_index = -1\n\n    # Initialize an array to store the index of the element with maximum sum in the subsequence\n    sum_index = -1\n\n    # Loop from 1 to n-1\n    for i in range(1, n):\n        # Update the prefix sum\n        prefix_sum[i] = prefix_sum[i-1] + a[i-1]\n\n        # Find the starting index of the increasing subsequence till i\n        start_index = i - 1\n        while start_index >= 0 and a[start_index] > a[i]:\n            start_index -= 1\n        start_index_arr[i] = start_index + 1\n\n        # Find the ending index of the increasing subsequence till i\n        end_index = i - 1\n        while end_index >= 0 and a[end_index] < a[i]:\n            end_index -= 1\n        end_index_arr[i] = end_index + 1\n\n        # Calculate the sum of increasing subsequence till i\n        sum_arr[i] = prefix_sum[i] - prefix_sum[start_index_arr[i]]\n\n        # Calculate the length of increasing subsequence till i\n        length_arr[i] = end_index_arr[i] - start_index_arr[i] + 1\n\n        # Update the maximum length and index of subsequence\n        if length_arr[i] > max_length:\n            max_length = length_arr[i]\n            max_index = i\n            sum_index = i - 1\n        elif length_arr[i] == max_length and sum_arr[i] > sum_arr[sum_index]:\n            max_index = i\n            sum_index = i - 1\n\n        # Check if the sum of increasing subsequence till i also includes the given kth element k\n        if i >= k:\n            # Calculate the maximum sum of increasing subsequence till i including k\n            max_sum_k = 0\n            start_k = i - k\n            if start_k >= 0:\n                max_sum_k = prefix_sum[i] - prefix_sum[start_k]\n\n            # Update the maximum sum of increasing subsequence till i and the starting index of the subsequence\n            if max_sum_k > max_sum:\n                max_sum = max_sum_k\n                sum_index = i - k\n\n    # Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    if index >= k:\n        return max_sum + a[index]\n    else:\n        return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [[0] * (n + 1) for _ in range(k + 1)]\n    # dp[i][j] represents the maximum sum of increasing subsequence from prefix until ith index and including a given kth element which is after i, i.e., k > i\n    for i in range(k, n + 1):\n        for j in range(i, k + 1):\n            dp[j][i] = max(dp[j][i - 1], dp[j][i - 2]) + a[i - 1]\n            # dp[j][i] is updated as maximum sum of increasing subsequence from prefix until ith index and including a given kth element which is after i, i.e., k > i\n\n    return dp[k][n]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:  # base case\n        return 0, []\n\n    if a[index] > a[index + 1]:  # if current element is greater than next element\n        current_sum, current_seq = max_sum_increasing_subseq(a, n, index + 1, k)  # recursively calculate the maximum sum of increasing subsequence for the prefix up to the ith index\n        current_sum += a[index]  # add the current element to the sum of the current sequence\n        if current_sum > k:  # check if the maximum sum of increasing subsequence including the current element exceeds k\n            return current_sum, [a[index]] + current_seq  # return the maximum sum and the current sequence with the current element as the last element\n        else:\n            return current_sum, current_seq  # return the maximum sum and the current sequence\n\n    else:  # if current element is less than or equal to the next element\n        current_sum, current_seq = max_sum_increasing_subseq(a, n, index + 1, k)  # recursively calculate the maximum sum of increasing subsequence for the prefix up to the ith index\n        return current_sum, current_seq  # return the maximum sum and the current sequence"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    # loop through the array\n    for i in range(index, n):\n        # check if the current element is greater than k\n        if a[i] > k:\n            # if yes, add it to the sum and update the max sum if necessary\n            current_sum += a[i]\n            max_sum = max(max_sum, current_sum)\n        # if not, only add it to the sum\n        else:\n            current_sum += a[i]\n            \n        # if the current sum becomes greater than the max sum, update the start index\n        if current_sum > max_sum:\n            start = i\n            \n    # return the maximum sum\n    return max_sum, start"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum and maximum increasing subsequence ending at index i\n    max_sum = a[index]\n    max_seq = [a[index]]\n\n    # Loop through the remaining elements from index i+1 to n-1\n    for i in range(index+1, n):\n        # If the current element is greater than k, skip the current element\n        if a[i] <= k:\n            continue\n        # If the current element is not greater than k, then check if the maximum sum of increasing subsequence ending at index i+1 is greater than the current maximum sum\n        if a[i] + max_seq[-1] > max_sum:\n            max_sum = a[i] + max_seq[-1]\n            max_seq = max_seq[:-1] + [a[i]]\n        # If the current element is not greater than k and the maximum sum of increasing subsequence ending at index i+1 is equal to the current maximum sum, then add the current element to the maximum increasing subsequence ending at index i+1\n        else:\n            max_seq = max_seq[:-1] + [a[i]]\n\n    return max_sum, max_seq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0\n    if a[index] >= a[k]:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k),\n                   max_sum_increasing_subseq(a, n, index + 1, k))\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Find the maximum sum of increasing subsequence from prefix\n    until index and also including kth element which is after index.\n\n    Args:\n        a (list): A list of integers.\n        n (int): Length of the list.\n        index (int): Index of the element to be included in the increasing subsequence.\n        k (int): Index of the element after index to be included in the increasing subsequence.\n\n    Returns:\n        int: The maximum sum of increasing subsequence from prefix until index and including kth element.\n    \"\"\"\n    if index == n:\n        return 0\n\n    # Check if the current element is greater than kth element\n    if a[index] > a[k]:\n        return max(a[index], max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n\n    # Check if the current element is equal to kth element\n    elif a[index] == a[k]:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k) + a[index],\n                   max_sum_increasing_subseq(a, n, index + 1, k + 1))\n\n    # If the current element is less than or equal to kth element\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    # initialize dp array with the first element as 0 and remaining elements as -infinity\n    dp = [-float('inf')] * n\n    \n    # fill dp array using Kadane's algorithm\n    dp[0] = a[0]\n    for i in range(1, n):\n        if i < k:\n            dp[i] = max(dp[i-1], a[i])\n        else:\n            dp[i] = max(dp[i-1], a[i] + dp[i-k])\n    \n    # find the maximum sum of increasing subsequence in the dp array\n    max_sum = max(dp[i] for i in range(index, n))\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0\n    \n    max_sum = 0\n    max_ending_here = 0\n    dp = [[0] * (n+1) for i in range(n+1)]\n    \n    for i in range(index, n+1):\n        for j in range(i, n+1):\n            if i == j:\n                dp[i][j] = a[i-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + a[i-1]\n            \n            if i == k:\n                max_sum = max(max_sum, dp[i][j])\n                \n            max_ending_here = max(max_ending_here, dp[i][j])\n    \n    if index == n:\n        return max_sum + max_ending_here\n    \n    return dp[index][n]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the tuple has enough elements to form a colon\n    if len(tuplex) < m*n:\n        return \"Error: The tuple has insufficient elements to form a colon.\"\n    \n    # Create a copy of the tuple to modify\n    tuplex_copy = deepcopy(tuplex)\n    \n    # Divide the tuple into columns\n    for i in range(n):\n        for j in range(m):\n            # Get the index of the current element\n            index = i*m + j\n            \n            # If the index is within the bounds of the tuple, copy it to the colon\n            if 0 <= index < len(tuplex_copy):\n                tuplex_copy[index] = tuplex[index]\n    \n    # Return the colon as a tuple\n    return tuple(tuplex_copy)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = deepcopy(tuplex)\n    result[m] = 'colon'\n    result[n] = 'colon'\n    return tuple(result)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple to prevent modification\n    tuplex = deepcopy(tuplex)\n\n    # get the length of the tuple\n    length = len(tuplex)\n\n    # check if the length of the colon is valid\n    if length < m:\n        raise ValueError(\"Length of colon is invalid.\")\n\n    # loop through the tuple and get the m elements in the colon\n    colon = []\n    for i in range(0, length, n):\n        colon.append(tuplex[i:i+m])\n\n    # return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # check if the input tuple is valid\n    if len(tuplex)!= m:\n        raise ValueError(\"Tuple should be of length m\")\n    \n    # create a new tuple with m+1 elements\n    new_tuplex = deepcopy(tuplex)\n    \n    # set the new elements to 0\n    for i in range(m):\n        new_tuplex[i+1] = 0\n    \n    # return the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a copy of the original tuple\n    tuplex = deepcopy(tuplex)\n    # get the length of the original tuple\n    length = len(tuplex)\n    # get the indices of the first element\n    first_index = 0\n    # get the indices of the last element\n    last_index = length - 1\n    # get the indices of the first colon\n    first_colon = first_index + m\n    # get the indices of the last colon\n    last_colon = first_colon + m - 1\n    # check if the first colon is within range\n    if first_colon < last_index:\n        # get the first element of the first colon\n        first_element = tuplex[first_colon]\n        # get the last element of the last colon\n        last_element = tuplex[last_colon]\n        # get the indices of the first element in the first colon\n        first_element_first_colon = m - (first_index - first_colon)\n        # get the indices of the last element in the last colon\n        last_element_last_colon = m - (last_index - last_colon)\n        # get the indices of the second element in the first colon\n        first_element_second_colon = first_element_first_colon + 1\n        # get the indices of the second element in the last colon\n        last_element_second_colon = last_element_last_colon + 1\n        # create a new tuple with the first element in the first colon, the second element in the second colon, and the other elements in their original position\n        colon_tuplex = (first_element, tuplex[first_element_second_colon], tuplex[first_element_first_colon:first_element_second_colon], tuplex[last_element_second_colon:last_element_last_colon], last_element)\n        # return the colon_tuplex\n        return colon_tuplex\n    else:\n        # return None if the first colon is not within range\n        return None"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Create an empty list to store the colon\n    colon = []\n\n    # Loop through each element of the tuple\n    for i in range(m):\n        # Get the element at index i\n        element = tuplex_copy[i]\n\n        # Loop through each index j in range(n)\n        for j in range(n):\n            # Get the element at index j\n            element_j = tuplex_copy[j]\n\n            # Set the element at index i to the element at index j\n            tuplex_copy[i] = element_j\n\n            # Add the element at index j to the colon\n            colon.append(element_j)\n\n            # Set the element at index j to the element at index i\n            tuplex_copy[j] = element\n\n            # If j is equal to n-1, move on to the next i\n            if j == n-1:\n                break\n\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the length of the tuple\n    length = len(new_tuplex)\n\n    # Get the index of the last element in the tuple\n    last_index = length - 1\n\n    # Get the index of the colon\n    colon_index = m\n\n    # Get the index of the second colon\n    second_colon_index = n\n\n    # Check if the colon index is less than the second colon index\n    if colon_index < second_colon_index:\n        # Iterate over the tuple from the colon index to the second colon index\n        for i in range(colon_index, second_colon_index):\n            # Get the element at the current index\n            element = new_tuplex[i]\n            # Replace the element at the current index with None\n            new_tuplex[i] = None\n            # Insert the element at the second colon index\n            new_tuplex.insert(second_colon_index, element)\n        # Iterate over the tuple from the second colon index to the last index\n        for i in range(second_colon_index, last_index):\n            # Get the element at the current index\n            element = new_tuplex[i]\n            # Replace the element at the current index with None\n            new_tuplex[i] = None\n            # Insert the element at the colon index\n            new_tuplex.insert(colon_index, element)\n    else:\n        # Iterate over the tuple from the second colon index to the last index\n        for i in range(second_colon_index, last_index):\n            # Get the element at the current index\n            element = new_tuplex[i]\n            # Replace the element at the current index with None\n            new_tuplex[i] = None\n            # Insert the element at the colon index\n            new_tuplex.insert(colon_index, element)\n        # Iterate over the tuple from the colon index to the second colon index\n        for i in range(colon_index, second_colon_index):\n            # Get the element at the current index\n            element = new_tuplex[i]\n            # Replace the element at the current index with None\n            new_tuplex[i] = None\n            # Insert the element at the second colon index\n            new_tuplex.insert(second_colon_index, element)\n\n    # Return the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = deepcopy(tuplex)\n    for i in range(m-1):\n        row = tuple([row[j] for j in range(n)])\n    return tuple(row)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    This function takes a tuple of integers and returns a colon of length n. The colon is obtained by selecting the first m elements of the tuple.\n\n    Args:\n    tuplex (tuple): A tuple of integers.\n    m (int): The number of elements to be selected.\n    n (int): The desired length of the colon.\n\n    Returns:\n    list: A list of integers.\n    \"\"\"\n    # Deep copy of the tuple to avoid modifying the original tuple.\n    tuplex = deepcopy(tuplex)\n    # Select the first m elements of the tuple.\n    colon = tuplex[:m]\n    # Reverse the colon and return it.\n    return colon[::-1]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Initialize an empty tuple\n    col = ()\n\n    # Get a copy of the tuple\n    copy_tup = deepcopy(tuplex)\n\n    # Loop through the rows of the tuple\n    for i in range(m):\n\n        # Loop through the columns of the tuple\n        for j in range(n):\n\n            # Check if the tuple is empty\n            if len(copy_tup) == 0:\n                break\n\n            # Get the first element of the tuple\n            first_element = copy_tup[0]\n\n            # Append the first element to the colon\n            col += (first_element,)\n\n            # Remove the first element from the tuple\n            copy_tup = copy_tup[1:]\n\n    # Return the colon of the tuple\n    return col"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    max_products = []\n\n    # Compute the maximum product for each factor of nums1 and nums2\n    for i in range(1, N+1):\n        product1 = max(nums1[:i]) * max(nums1[i:])\n        product2 = max(nums2[:i]) * max(nums2[i:])\n        if product1 > max_product:\n            max_product = product1\n            max_products = [product1]\n        if product2 > max_product:\n            max_product = product2\n            max_products = [product2]\n\n    # Return the list of maximum products\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Calculate the maximum product of any two numbers\n    max_product = max(max(nums1[i]*nums2[j] for j in range(len(nums2))) for i in range(len(nums1)))\n\n    # Initialize an empty list to store the largest products\n    largest_products = []\n\n    # Iterate through the numbers in the first list\n    for i in range(len(nums1)):\n        # Initialize an empty list to store the products of the current factor and all the other factors\n        factor_products = []\n        # Iterate through the numbers in the second list\n        for j in range(len(nums2)):\n            # Calculate the product of the current factor and the other factor\n            product = nums1[i]*nums2[j]\n            # If the product is greater than the maximum product, add it to the list of largest products\n            if product > max_product:\n                factor_products.append(product)\n\n        # If the list of products for the current factor is not empty, sort it in descending order and add the first N elements to the list of largest products\n        if factor_products:\n            factor_products.sort(reverse=True)\n            largest_products += factor_products[:N]\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n    nums1: list of integers\n    nums2: list of integers\n    N: int\n\n    Returns:\n    list of integers: The N largest products from each list, where N is the input parameter N.\n    \"\"\"\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize an empty list to store the largest products\n    largest_products = []\n\n    # Iterate through the two lists\n    for i in range(len(nums1)):\n        # Calculate the product of the current factor and the largest factor in nums1\n        factor1 = nums1[i] * nums1[i]\n        # Calculate the product of the current factor and the largest factor in nums2\n        factor2 = nums2[i] * nums2[i]\n\n        # If the product is greater than the largest product found so far, add it to the list\n        if factor1 > largest_products[-1]:\n            largest_products.append(factor1)\n        if factor2 > largest_products[-1]:\n            largest_products.append(factor2)\n\n        # If we have found the N largest products, exit the loop\n        if len(largest_products) == N:\n            break\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    large_products = []\n    for i in range(N):\n        product1 = nums1[i] * nums1[i+1] * nums1[i+2]\n        product2 = nums2[i] * nums2[i+1] * nums2[i+2]\n        if product1 > product2:\n            large_products.append(product1)\n        else:\n            large_products.append(product2)\n    \n    return large_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest products list\n    largest_products = []\n\n    # Initialize two pointers for each list\n    i = 0\n    j = 0\n\n    # Iterate over the desired number of largest products\n    for _ in range(N):\n        # Calculate the product of the current largest factor from each list\n        current_product = nums1[i] * nums2[j]\n\n        # Add the current product to the largest_products list\n        largest_products.append(current_product)\n\n        # Move the pointers of the lists to the next largest factors\n        if i == len(nums1) - 1:\n            j += 1\n            i = 0\n        elif j == len(nums2) - 1:\n            i += 1\n            j = 0\n        else:\n            i += 1\n            j += 1\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # initialize the largest products list\n    largest_products = []\n    \n    # loop through the lists and add the largest products to the list\n    for i in range(N):\n        largest_products.append(max(nums1[0] * nums2[0], nums1[1] * nums2[1]))\n        nums1 = nums1[1:]\n        nums2 = nums2[1:]\n    \n    # return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return None\n    \n    products = []\n    for i in range(N):\n        products.append([nums1[i], nums2[i]])\n    \n    for i in range(N, len(nums1)):\n        for j in range(i - N + 1):\n            # Find the maximum product in the current subarray\n            max_product = float('-inf')\n            for k in range(j, j + N):\n                max_product = max(max_product, products[i - N + 1][k] * products[j][k])\n            # Update the products list with the maximum product found\n            for k in range(j, j + N):\n                products[i][k] = max_product\n    \n    max_product = float('-inf')\n    max_products = []\n    for i in range(N):\n        for j in range(len(nums1) - N + 1):\n            max_product = max(max_product, nums1[j] * nums2[j + i])\n            max_products.append([nums1[j], nums2[j + i]])\n    \n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] > right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    def select_kth(arr, k):\n        if len(arr) == 1:\n            return arr[0]\n        mid = len(arr) // 2\n        left = select_kth(arr[:mid], k)\n        right = select_kth(arr[mid:], k - mid)\n        if k < mid:\n            return left\n        else:\n            return right\n\n    nums1 = merge_sort(nums1)\n    nums2 = merge_sort(nums2)\n    k = N // 2\n    product1 = select_kth(nums1, k)\n    product2 = select_kth(nums2, k)\n    result = product1 * product2\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Find the maximum value in each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n\n    # Initialize the list to store the largest products\n    largest_products = []\n\n    # Iterate over the specified number of products\n    for i in range(N):\n        # Find the maximum product of a factor from each list\n        product1 = nums1[0] * max1\n        product2 = nums2[0] * max2\n\n        # Update the largest products list\n        largest_products.append((product1, product2))\n\n        # Update the factor lists to exclude the largest product\n        for j in range(len(nums1)):\n            if j == 0:\n                nums1.pop(0)\n            else:\n                nums1[j] -= max1\n        for j in range(len(nums2)):\n            if j == 0:\n                nums2.pop(0)\n            else:\n                nums2[j] -= max2\n\n    # Sort the list of largest products by product1\n    largest_products.sort(key=lambda x: x[0], reverse=True)\n\n    # Return the largest products\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    max_product1 = max_product2 = float('-inf')\n    max_count1 = max_count2 = 0\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        if product1 > max_product1:\n            max_product1 = product1\n            max_count1 = 1\n        elif product1 == max_product1:\n            max_count1 += 1\n        if max_count1 == i + 1:\n            break\n        product2 = nums1[i] * nums2[N - i - 1]\n        if product2 > max_product2:\n            max_product2 = product2\n            max_count2 = 1\n        elif product2 == max_product2:\n            max_count2 += 1\n        if max_count2 == i + 1:\n            break\n    return max_product1, max_product2"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as inputs and returns the maximum of them.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # split the string into individual characters\n    char_tuple = tuple(str1)\n    return char_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of its characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a given number.\n    \"\"\"\n    # Initialize a variable to store the unset bits.\n    unset_bits = 0\n    \n    # Loop through each bit in the binary representation of n.\n    for bit in bin(n)[2:]:\n        # Check if the bit is 1.\n        if bit == '1':\n            break\n        # If the bit is 0, increment unset_bits by 1.\n        else:\n            unset_bits += 1\n            \n    # Return the left most unset bit.\n    return unset_bits"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to keep track of the position of the leftmost unset bit\n    leftmost_unset_bit = 0\n\n    # Loop through all bits of the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is unset, increment the leftmost_unset_bit variable\n        if bit == '0':\n            leftmost_unset_bit += 1\n        # If the bit is set, exit the loop and return the leftmost_unset_bit value\n        else:\n            break\n\n    # Use the leftmost_unset_bit value to set the rightmost set bit\n    rightmost_set_bit = 0\n    while n & (1 << rightmost_set_bit) == 0:\n        rightmost_set_bit += 1\n\n    # Return the resultant number with the rightmost set bit set to 1\n    return n | (1 << leftmost_unset_bit)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0: # Check if n is even\n        n >>= 1 # Shift n right by 1\n    return n << 1 # Set the left most unset bit in n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n\n    # Initialize an empty set\n    unset_bits = set()\n\n    # Loop through all bits of n\n    for bit in bin(n)[2:]:\n        # If the bit is 0, add it to the unset_bits set\n        if bit == \"0\":\n            unset_bits.add(bit)\n\n    # Find the leftmost unset bit and set it to 1\n    for bit in bin(n)[2:]:\n        if bit == \"0\" and bit not in unset_bits:\n            n = n | (int(bit) << (bit_index(bit) - 1))\n\n    return n\n\n\ndef bit_index(bit):\n    \"\"\"\n    Helper function to return the bit index.\n    \"\"\"\n    return bit.index(\"1\")"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize count of set bits to zero\n    count = 0\n    \n    # Initialize leftmost unset bit to -1\n    leftmost_unset_bit = -1\n    \n    # Iterate through each bit in binary form of n\n    for bit in bin(n)[2:]:\n        # Check if bit is set to one\n        if bit == '1':\n            # Increment count\n            count += 1\n            \n            # If count is odd, bit is leftmost unset bit\n            if count % 2 == 1:\n                leftmost_unset_bit = int(bit)\n    \n    # Return leftmost unset bit\n    return leftmost_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n:\n        if n & 1:\n            return n\n        n = n >> 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # Initialize a variable to keep track of the unset bits\n    unset_bits = 0\n    \n    # Iterate through each bit in the number\n    for i in range(32):\n        bit = n & (1 << i)\n        \n        # If the bit is 0, add it to the unset bits\n        if bit == 0:\n            unset_bits |= 1 << i\n    \n    # Set the leftmost unset bit to 1\n    n |= 1 << unset_bits\n    \n    # Return the updated number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    # loop through all the bits in n\n    for i in range(32):\n        # if the i-th bit is 0, set n to n | (1 << i)\n        if not (n & (1 << i)):\n            n |= (1 << i)\n            break\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    set_bit = 1\n    while (n & set_bit) == 0:\n        set_bit = set_bit << 1\n    return set_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the rightmost set bit\n    bit_count = 0\n    while n:\n        n &= n - 1\n        bit_count += 1\n    \n    # Set the leftmost unset bit to 1\n    n |= 1 << bit_count\n    \n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # calculate the volume of a cone using the formula V = \u03c0r^2h\n    V = math.pi * r**2 * h\n\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area_cone = math.pi * r**2\n    volume = area_cone * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return 1 << int(n).bit_length() - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        if n % 2 == 1:\n            return n\n        n = n // 2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer `n` and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # initialize the highest power of 2 to 1\n    highest_power_of_2 = 1\n\n    # loop through all possible powers of 2 up to n\n    while highest_power_of_2 <= n:\n        # if the highest power of 2 is less than or equal to n, increment it\n        if highest_power_of_2 <= n:\n            highest_power_of_2 *= 2\n\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    for i in range(n, 1, -1):\n        if (1 << i) <= n:\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 <<= 1\n    return power_of_2 >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize variables\n    highest = 1\n    current = 1\n\n    # Loop through powers of 2 until we reach n\n    while current <= n:\n        highest = current\n        current <<= 1\n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    if n == 1: \n        return 1 \n    elif n == 0: \n        return 0 \n    else: \n        return 1 + highest_Power_of_2(n >> 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 as 1\n    highest_power_of_2 = 1\n    \n    # Iterate through the powers of 2 from 2 to n\n    for i in range(2, n+1):\n        # If the current power of 2 is greater than the highest power of 2, update the highest power of 2\n        if i > highest_power_of_2:\n            highest_power_of_2 = i\n    \n    # Return the highest power of 2\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highestPowerOf2 = 1\n    while highestPowerOf2 <= n:\n        highestPowerOf2 <<= 1\n    return highestPowerOf2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    highest_power_of_2 = 0\n    for i in range(1, n+1):\n        if i == 2**highest_power_of_2:\n            highest_power_of_2 += 1\n        elif 2**highest_power_of_2 > i:\n            return highest_power_of_2\n    return highest_power_of_2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter a number to find its nth Lucas number: \"))\nprint(\"The\", n, \"th Lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    This function finds then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter a value of n: \"))\n\nprint(\"The\", n, \"th Lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize first two numbers of the sequence\n    a = 2\n    b = 1\n    # Loop through the sequence to find the nth number\n    for i in range(2, n+1):\n        # Find the next number in the sequence\n        c = a + b\n        # Update the values of a and b for the next iteration\n        a = b\n        b = c\n    # Return the nth number in the sequence\n    return a"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Calculate the lucas number\n    lucas_prev = 2\n    lucas_curr = 1\n    \n    # Loop through the range of n numbers\n    for i in range(2, n+1):\n        lucas_next = lucas_prev + lucas_curr\n        lucas_prev = lucas_curr\n        lucas_curr = lucas_next\n    \n    return lucas_curr"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [format_str.format(x) for x in lst]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # loop through each element in the list\n    for i in range(len(list_)):\n        # apply the format string to the element\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string % item"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # create an empty dictionary\n    result = {}\n\n    # loop through each list and add values to the dictionary\n    for i in range(len(l1)):\n        # add the first list value to the dictionary as a key\n        result[l1[i]] = l2[i]\n        # add the second list value to the dictionary as a nested key\n        result[l1[i]][l3[i]] = l3[i]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert a sequence of lists to a nested dictionary, with the keys being\n    the first list, and the values being the second list. The values in the\n    second list should be dictionaries with keys matching the first list.\n    \n    Parameters\n    ----------\n    *lists: list\n        A sequence of lists to convert to a nested dictionary. Each list should\n        have the same length, and the first element of each list should be the\n        key for the corresponding value in the second list.\n    \n    Returns\n    -------\n    dict\n        A nested dictionary with the keys from the first list and the values\n        from the second list.\n    \"\"\"\n    result = {}\n    for i in range(len(lists[0])):\n        key = lists[0][i]\n        value = {}\n        for j in range(1, len(lists)):\n            value[lists[j][i]] = lists[j][i]\n        result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l1[i]].append(l3[i])\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary to store the converted data\n    data = {}\n\n    # Iterate through each list and create a nested dictionary\n    for i, lst in enumerate([l1, l2, l3]):\n        for j, item in enumerate(lst):\n            # Check if the item is a dictionary and add it to the data dictionary\n            if isinstance(item, dict):\n                data.update(item)\n            # Check if the item is a list and add it to the data dictionary as a list\n            elif isinstance(item, list):\n                data[lst.pop(j)] = item\n            # Add the item to the data dictionary as a scalar value\n            else:\n                data[lst.pop(j)] = item\n\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    This function takes any number of lists as input and returns a nested dictionary containing those lists as values.\n    '''\n    result = {}\n    for i, lst in enumerate(lists):\n        if len(lst) > 1:\n            result[i] = lst\n        else:\n            result[i] = lst[0]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        raise ValueError(\"All lists must have the same length.\")\n\n    # Initialize an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through each list and create nested dictionary\n    for i in range(len(l1)):\n        nested_dict[i] = {\n            \"list1\": l1[i],\n            \"list2\": l2[i],\n            \"list3\": l3[i]\n        }\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    - l1: A list of strings.\n    - l2: A list of integers.\n    - l3: A list of floating point numbers.\n\n    Returns:\n    - A nested dictionary with the given lists as keys and their corresponding values.\n\n    Example:\n    input_list = [[\"apple\", \"banana\", \"cherry\"], [1, 2, 3], [1.1, 2.2, 3.3]]\n    output_dict = convert_list_dictionary(input_list[0], input_list[1], input_list[2])\n\n    output_dict:\n    {\n        \"apple\": \"banana\",\n        \"banana\": \"cherry\",\n        \"cherry\": 1,\n        \"1\": 2,\n        \"2\": 3,\n        \"3\": 1.1,\n        \"1.1\": 2.2,\n        \"2.2\": 3.3,\n        \"3.3\": \"apple\"\n    }\n    '''\n\n    # Create a dictionary to store the output dictionary\n    output_dict = {}\n\n    # Loop through each element in the input lists\n    for i in range(len(l1)):\n        # Loop through each element in the corresponding list\n        for j in range(len(l2[i])):\n            # Add the current element from each list as a key and its corresponding value to the output dictionary\n            output_dict[l1[i][j]] = l2[i][j]\n\n    # Return the output dictionary\n    return output_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n\n    # Check if all lists have the same length\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        raise ValueError(\"All lists must have the same length.\")\n\n    # Initialize an empty dictionary to hold the result\n    result = {}\n\n    # Loop through each list and add key-value pairs to the result\n    for i in range(len(l1)):\n        key = l1[i]\n        value = [l2[i], l3[i]]\n        result[key] = value\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary for the first list\n    dict1 = {i:l1[i] for i in range(len(l1))}\n    # create a dictionary for the second list\n    dict2 = {i:l2[i] for i in range(len(l2))}\n    # create a dictionary for the third list\n    dict3 = {i:l3[i] for i in range(len(l3))}\n    \n    # create a list to store the dictionaries\n    list_dict = [dict1, dict2, dict3]\n    \n    # create a nested dictionary from the list of dictionaries\n    nested_dict = {}\n    for item in list_dict:\n        for key, value in item.items():\n            if key not in nested_dict:\n                nested_dict[key] = []\n            nested_dict[key].append(value)\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define an empty dictionary to hold the converted data\n    data = {}\n    # Iterate over each list\n    for i in range(len(l1)):\n        # Iterate over each item in the list and add the keys and values to the dictionary\n        for key, value in l1[i].items():\n            if key not in data:\n                data[key] = []\n            data[key].append(value)\n    for i in range(len(l2)):\n        for key, value in l2[i].items():\n            if key not in data:\n                data[key] = []\n            data[key].append(value)\n    for i in range(len(l3)):\n        for key, value in l3[i].items():\n            if key not in data:\n                data[key] = []\n            data[key].append(value)\n    # Return the final dictionary\n    return data"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 2:\n        return n\n\n    # Compute the sum of the first n/2 numbers\n    a = n // 2\n    f1 = a * (a + 1) // 2\n    f2 = n - a\n\n    # Compute the sum of the first n/2 numbers\n    b = a + n - 1\n    f3 = b * (b - 1) // 2\n\n    # Compute the sum of the first n/2 numbers\n    c = a * (a + 1) // 2\n    f4 = c * (c - 1) // 2\n\n    # Compute the sum of the first n/2 numbers\n    d = a * (a + 1) // 2\n    f5 = d * (d - 1) // 2\n\n    # Compute the sum of the first n/2 numbers\n    e = a * (a + 1) // 2\n    f6 = e * (e - 1) // 2\n\n    # Compute the sum of the first n/2 numbers\n    f = max(f1, f2, f3, f4, f5, f6)\n\n    # Compute the sum of the first n/2 numbers\n    g = max(f1, f2, f3, f4, f5)\n\n    # Compute the sum of the first n/2 numbers\n    h = max(f1, f2, f3, f4)\n\n    # Compute the sum of the first n/2 numbers\n    i = max(f1, f2, f3)\n\n    # Compute the sum of the first n/2 numbers\n    j = max(f1, f2)\n\n    # Compute the sum of the first n/2 numbers\n    k = max(f1)\n\n    # Compute the sum of the first n/2 numbers\n    l = n\n\n    # Compute the sum of the first n/2 numbers\n    m = (f1 + f2 + f3 + f4 + f5 + f6) // 2\n\n    # Compute the sum of the first n/2 numbers\n    n = (f1 + f2 + f3 + f4 + f5) // 2\n\n    # Compute the sum of the first n/2 numbers\n    o = (f1 + f2 + f3 + f4) // 2\n\n    # Compute the sum of the first n/2 numbers\n    p = (f1 + f2 + f3) // 2\n\n    # Compute the sum of the first n/2 numbers\n    q = (f1 + f2) // 2\n\n    # Compute the sum of the first n/2 numbers\n    r = f1 // 2\n\n    # Compute the sum of the first n/2 numbers\n    s = (f1 + f2) // 3\n\n    # Compute the sum of the first n/2 numbers\n    t = (f1 + f2 + f3 + f4 + f5 + f6) // 3\n\n    # Compute the sum of the first n/2 numbers\n    u = (f1 + f2 + f3 + f4 + f5 + f6) // 4\n\n    # Compute the sum of the first n/2 numbers\n    v = (f1 + f2 + f3 + f4 + f5 + f6) // 5\n\n    # Compute the sum of the first n/2 numbers\n    w = (f1 + f2 + f3 + f4 + f5 + f6) // 6\n\n    # Compute the sum of the first n/2 numbers\n    x = (f1 + f2 + f3 + f4 + f5 + f6) // 7\n\n    # Compute the sum of the first n/2 numbers\n    y = (f1 + f2 + f3 + f4 + f5 + f6) // 8\n\n    # Compute the sum of the first n/2 numbers\n    z = (f1 + f2 + f3 + f4 + f5 + f6) // 9\n\n    # Compute the sum of the first n/2 numbers\n    a = max(f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)\n\n    # Compute the sum of the first n/2 numbers\n    b = max(a, f, g, h, i, j, k, l, m"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\nprint(get_max_sum(6)) # output: 12"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n\n    # base case: return n if n is less than or equal to 1\n    if n <= 1:\n        return n\n\n    # recursive case: compute the sum of f(n/2), f(n/3), f(n/4), and f(n/5)\n    left_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n\n    # compute the maximum sum possible by adding n to the left sum\n    max_sum = max(left_sum + n, n)\n\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case: if n is 1, return 1\n    if n == 1:\n        return 1\n\n    # Recursive case: calculate the maximum sum possible by adding the maximum of f(n/2), f(n/3), f(n/4), and f(n/5)\n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\n    # Return the maximum sum found up to n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case: if n is 1 or less, return n\n    if n <= 1:\n        return n\n    # Recursive case: otherwise, return the maximum of f(n/2) + f(n/3) + f(n/4) + f(n/5) and n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n <= 1:\n        return n\n    \n    if n % 2 == 0:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n    \n    if n % 3 == 0:\n        return get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n    \n    if n % 4 == 0:\n        return get_max_sum(n//4) + get_max_sum(n//5)\n    \n    return get_max_sum(n//5) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n\n    # Calculate the maximum sum for n/2\n    sum1 = n/2 + get_max_sum(n/2)\n\n    # Calculate the maximum sum for n/3\n    sum2 = n/3 + get_max_sum(n/3)\n\n    # Calculate the maximum sum for n/4\n    sum3 = n/4 + get_max_sum(n/4)\n\n    # Calculate the maximum sum for n/5\n    sum4 = n/5 + get_max_sum(n/5)\n\n    # Return the maximum sum of any of the four sums\n    return max(sum1, sum2, sum3, sum4)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def f(n):\n        if n == 1:\n            return n\n        elif n % 2 == 0:\n            return 2 * f(n/2) + f(n/3)\n        else:\n            return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n    \n    max_sum = 0\n    for i in range(1, n+1):\n        if f(i) > max_sum:\n            max_sum = f(i)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    half = n // 2\n    third = n // 3\n    fourth = n // 4\n    fifth = n // 5\n    \n    return max(get_max_sum(half) + get_max_sum(third) + get_max_sum(fourth) + get_max_sum(fifth), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n\n    a = get_max_sum(n//2)\n    b = get_max_sum(n//3)\n    c = get_max_sum(n//4)\n    d = get_max_sum(n//5)\n\n    return max(a + b + c + d, n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n\n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as an input and returns the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n    \n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    longest_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            longest_list = [i]\n        elif len(i) == max_length:\n            longest_list.append(i)\n\n    return longest_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize variables\n    max_length = 0\n    max_list = []\n\n    # loop through each element of the list\n    for item in input_list:\n        # check if the current item's length is greater than the current max_length\n        if len(str(item)) > max_length:\n            # update max_length and max_list\n            max_length = len(str(item))\n            max_list = [item]\n        # if the current item's length is equal to or less than the current max_length,\n        # append the item to the max_list\n        else:\n            max_list.append(item)\n\n    # return the max_list with the maximum length\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > length:\n            length = len(input_list[i])\n            index = i\n    return input_list[index]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = len(input_list[0])\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n    return max_len"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    unique_tup = list(set(test_tup))\n    return len(unique_tup) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n\n    # Check if the set is empty\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns True if it contains no duplicates, else False.\n    \"\"\"\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store unique elements of the tuple\n    unique_elements = set(test_tup)\n    # Check if the set is empty, if it is, then there are duplicates\n    if len(unique_elements) == len(test_tup):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # create a set to store the elements of the tuple\n    set_tup = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(set_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # check if tuple is empty\n    if not test_tup:\n        return True\n    \n    # convert tuple to set to remove duplicates\n    test_set = set(test_tup)\n    \n    # check if set is empty\n    if not test_set:\n        return True\n    \n    # check if len of set is equal to len of tuple\n    if len(test_set) == len(test_tup):\n        return True\n    \n    # if no duplicates found, return True\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_tup = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    return len(unique_tup) == len(test_tup)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Loop through the dictionary and find the first non-repeating character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    If there are multiple non-repeating characters, the function returns the first one it finds.\n    '''\n    \n    # Initialize a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    \n    # Iterate through the string and update the frequency dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # Iterate through the frequency dictionary to find the first non-repeating character\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # iterate through the string and return the first character that appears only once\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if the loop completes without finding a character that appears only once, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            # Increment the count for the character in the dictionary\n            char_count[char] += 1\n        else:\n            # Add the character to the dictionary with a count of 1\n            char_count[char] = 1\n    \n    # Find the first character in the dictionary that has a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # If no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # create a dictionary to store the count of each character\n    char_count = {}\n\n    # iterate over the characters in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # iterate over the characters in the string again\n    for char in str1:\n        # if the character is in the dictionary and its count is 1, return it\n        if char in char_count and char_count[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the characters and their frequency\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n            \n    # iterate through the dictionary and find the first non-repeated character\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char\n    \n    # if all characters have been counted, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n\n    # iterate over each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency by 1\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # if the character is not in the dictionary, add it with frequency 1\n        else:\n            freq_dict[char] = 1\n\n    # find the first character in the dictionary with frequency 1\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char\n\n    # if all characters have frequency greater than 1, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if not re.match(regex, string):\n        return False\n    else:\n        return True"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    return string[0] == string[-1]"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    return bool(pattern.match(string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    return match is not None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_list = [a, b, c]\n    sorted_list.sort()\n    if len(sorted_list) % 2 == 0:\n        mid = len(sorted_list) // 2\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2\n    else:\n        return sorted_list[len(sorted_list) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        return (numbers[n//2-1] + numbers[n//2])/2\n    else:\n        return numbers[n//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Create a list of numbers\n    numbers = [a, b, c]\n    # Sort the list in ascending order\n    numbers.sort()\n    # Determine the length of the list\n    n = len(numbers)\n    # Determine the median\n    if n % 2 == 0:\n        median = (numbers[n//2 - 1] + numbers[n//2]) / 2\n    else:\n        median = numbers[n//2]\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    \n    # Find the midpoint index of the sorted list\n    midpoint = len(sorted_numbers)//2\n    \n    # If the length of the list is odd, the median is the middle number\n    if len(sorted_numbers)%2 == 1:\n        median = sorted_numbers[midpoint]\n    \n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[midpoint-1] + sorted_numbers[midpoint]) / 2\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    n = len(sorted_numbers)\n\n    if n % 2 == 0:\n        # even number of numbers\n        median = (sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2\n    else:\n        # odd number of numbers\n        median = sorted_numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    This function takes three numbers as input and returns the median of those numbers.\n    '''\n\n    # Sort the numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Find the middle index of the sorted list\n    mid_index = len(sorted_nums) // 2\n\n    # If the length of the list is odd, the median is the middle number\n    if len(sorted_nums) % 2 == 1:\n        return sorted_nums[mid_index]\n\n    # If the length of the list is even, the median is the average of the two middle numbers\n    else:\n        return (sorted_nums[mid_index-1] + sorted_nums[mid_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[len(numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n\n    # Calculate the median based on the length of the sorted list\n    if len(sorted_numbers) % 2 == 0: # if the length is even\n        median = (sorted_numbers[len(sorted_numbers)//2-1] + sorted_numbers[len(sorted_numbers)//2])/2\n    else: # if the length is odd\n        median = sorted_numbers[len(sorted_numbers)//2]\n\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Determine the median by taking the middle number\n    median = numbers[1]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n    if n % 2 == 0:\n        return (numbers[n//2 - 1] + numbers[n//2]) / 2\n    else:\n        return numbers[n//2]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize an empty list to store the sum of digits of each number\n    digit_sum = []\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into a list of digits\n        digit_list = [int(d) for d in str(num)]\n        # compute the sum of the digits\n        digit_sum.append(sum(digit_list))\n    # return the list of digit sums\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for num in nums for digit in str(num))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        sum_list.append(digit_sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        temp = num\n        while temp > 0:\n            digit_sum += temp % 10\n            temp //= 10\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        sum_of_digits.append(digit_sum)\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum(int(digit) for digit in str(num)))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [sum(int(digit) for digit in str(num)) for num in nums]"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize variables for the length of the tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # Check if the lengths of the tuples are equal\n    if len1!= len2:\n        print(\"Error: The length of the tuples must be equal.\")\n        return\n\n    # Create an empty list to store the result\n    result_list = []\n\n    # Iterate through the tuples\n    for i in range(len1):\n        # Perform the bitwise xor operation on the corresponding elements\n        result_list.append(test_tup1[i] ^ test_tup2[i])\n\n    # Convert the list to a tuple and return it\n    return tuple(result_list)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_value = 0\n    for i in range(len(test_tup1)):\n        xor_value |= test_tup1[i] ^ test_tup2[i]\n    return xor_value"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_sum = 0\n    for i in range(len(test_tup1)):\n        xor_sum = xor_sum ^ test_tup1[i] ^ test_tup2[i]\n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each element in the first tuple\n    for i in test_tup1:\n        # Use the bitwise xor operator to perform the operation\n        xor_result = i ^ test_tup2[0]\n        # Append the result to the result list\n        result.append(xor_result)\n        # Shift the tuple to the right by one element\n        test_tup2 = test_tup2[1:]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    result_tup = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n\n    if len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup1) - len(test_tup2)):\n            result_tup += (test_tup1[i],)\n    elif len(test_tup2) > len(test_tup1):\n        for i in range(len(test_tup2) - len(test_tup1)):\n            result_tup += (test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Create an empty dictionary to store the frequency of tuples\n    freq = {}\n\n    # Loop through the list of tuples and update the frequency of each tuple\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n\n    # Count the number of unique tuples in the list\n    unique_freq = len(freq)\n\n    return unique_freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set to store unique tuples\n    unique_tuples = set()\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Add each tuple to the set\n        unique_tuples.add(tup)\n\n    # Return the length of the set, which is the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_freq = {}\n    for item in test_list:\n        if item not in unique_freq:\n            unique_freq[item] = 1\n        else:\n            unique_freq[item] += 1\n    return len(unique_freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Create an empty dictionary to store the frequency of each tuple in the list\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for element in test_list:\n        # Convert the element to a tuple using tuple() function\n        tuple_element = tuple(element)\n\n        # If the tuple already exists in the dictionary, increment its frequency by 1\n        if tuple_element in freq_dict:\n            freq_dict[tuple_element] += 1\n        # If the tuple doesn't exist in the dictionary, add it to the dictionary with a frequency of 1\n        else:\n            freq_dict[tuple_element] = 1\n\n    # Print the frequency of each tuple in the dictionary\n    for key, value in freq_dict.items():\n        print(key, ':', value)\n\n    # Return the frequency of each tuple in the dictionary\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n\n    Args:\n    test_list: a list of tuples (e.g. [('apple', 2), ('banana', 4), ('apple', 1)])\n\n    Returns:\n    freq: an integer representing the number of unique tuples in the given list.\n    '''\n\n    # Create a set to store unique tuples from the list\n    unique_tuples = set(test_list)\n\n    # Get the length of the set to get the number of unique tuples\n    freq = len(unique_tuples)\n\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            result.append(test_tup1[i] + test_tup2[i][j])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples should have same length.\")\n        return\n    \n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[0])):\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    \n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the sum of the elements in the two tuples\n    result_list = []\n    \n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # loop through each element in the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the elements at the current index in the tuple\n            result_list.append(test_tup1[i][j] + test_tup2[i][j])\n    \n    # return the sum of all elements in the result list\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # initialize an empty list to store the result\n    result = []\n\n    # loop through the two tuples\n    for i in range(len(test_tup1)):\n        # loop through the elements in the inner tuples\n        for j in range(len(test_tup1[i])):\n            # add the corresponding elements and append the result to the result list\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n\n    # return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a variable to store the resultant tuple\n    result_tup = ()\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Loop through each element in the second tuple\n        for j in range(len(test_tup2[0])):\n            # Add the corresponding elements from the two tuples\n            sum_elem = test_tup1[i][j] + test_tup2[0][j]\n            # Append the summed element to the result tuple\n            result_tup += (sum_elem,)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize the result tuple\n    result_tup = ()\n\n    # Check if the two input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same number of elements.\")\n\n    # Iterate over the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of the two tuples and append it to the result tuple\n        result_tup += (test_tup1[i] + test_tup2[i],)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize a new tuple to store the result\n    result_tup = []\n\n    # iterate over both tuples and add the elements at each index\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n\n    # If the first number is smaller, return it.\n    if a < b:\n        return a\n\n    # Otherwise, return the second number.\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:  \n        return a\n    else:  \n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(f\"{tuplex} exists in {tuple1}\") \n    else: \n        print(f\"{tuplex} does not exist in {tuple1}\") "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes two arguments: a tuple x and a tuple y. \n    It checks whether an element exists within the tuple x, and returns True or False accordingly.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in the tuple.\")\n    else:\n        print(f\"{tuplex} does not exist in the tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True \n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): the tuple to search in.\n        tuple1 (tuple): the tuple to search for.\n\n    Returns:\n        bool: True if an element is found in the tuple, otherwise False.\n    \"\"\"\n\n    # Check if the tuple1 contains any elements that are not in the tuplex\n    for element in tuple1:\n        if element not in tuplex:\n            return False\n\n    # If no elements were found that were not in the tuplex, the function returns True\n    return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(f'{x} is even.')\n    else:\n        print(f'{x} is odd.')"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False \n    else: \n        return True "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0: \n        return \"The parity of {} is even.\".format(x) \n    else: \n        return \"The parity of {} is odd.\".format(x) "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(x, \"is even.\")\n    else: \n        print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Check if the input is an integer\n    if type(x)!= int:\n        return 'Please enter a valid integer.'\n    \n    # Check if the input is negative\n    if x < 0:\n        return 'Please enter a non-negative integer.'\n    \n    # Find the parity of the input number\n    parity = 1 if x % 2 == 0 else 0\n    \n    # Return the parity\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Check if the given number is even or odd using modulo operator\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    parity = x % 2\n    if parity == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Checking whether the given number is even or odd\n    if x % 2 == 0:\n        # If the number is even, it is a parity of even number\n        return False\n    else:\n        # If the number is odd, it is a parity of odd number\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # convert the given number to a string\n    num_str = str(n)\n\n    # initialize the index of the first digit to be swapped\n    index = 0\n\n    # initialize the maximum value that can be swapped\n    max_value = int(num_str[index])\n\n    # loop through the remaining digits of the number\n    for i in range(1, len(num_str)):\n\n        # check if the current digit is greater than the maximum value\n        if int(num_str[i]) > max_value:\n\n            # swap the digits and update the maximum value\n            num_str[index], num_str[i] = num_str[i], num_str[index]\n            max_value = int(num_str[index])\n\n            # increment the index of the first digit to be swapped\n            index = (index + 1) % len(num_str)\n\n    # convert the string back to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Reverse the digits of the input number\n    n = int(str(n)[::-1])\n\n    # Find the largest number that can be formed by rearranging the digits of the input number\n    for i in range(9, -1, -1):\n        if n >= i * 10**5:\n            break\n\n    # Create a string with the number in the format \"123456789\"\n    str_n = str(n)\n\n    # Rearrange the digits of the input number to create the next bigger number\n    next_n = int(str_n[:i] + str_n[i+1:])\n\n    return next_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # convert the number to a string\n    num = str(n)\n    \n    # initialize the result\n    result = ''\n    \n    # loop through the digits of the number in reverse order\n    for digit in reversed(num):\n        \n        # initialize the count of digits\n        count = 0\n        \n        # loop through the digits of the number in reverse order\n        for d in reversed(num):\n            \n            # if the current digit is greater than the digit being processed, increment the count\n            if int(d) > int(digit):\n                count += 1\n                \n                # if the sum of the counts is equal to the length of the number, we have found the next bigger number\n                if count == len(num):\n                    break\n        \n        # if the count is less than the length of the number, we have found the next bigger number\n        if count < len(num):\n            break\n        \n        # append the digit to the result\n        result += digit\n    \n    # convert the result to an integer and return it\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the given number to a list of digits\n    digits = list(str(n))\n\n    # Reverse the list of digits\n    digits.reverse()\n\n    # Initialize the next bigger number\n    next_bigger = 0\n\n    # Iterate through the digits of the given number\n    for digit in digits:\n        # Calculate the sum of the digits\n        sum_of_digits = int(digit) + int(next_bigger % 10)\n\n        # If the sum of the digits is greater than 9, subtract 9 from the sum\n        if sum_of_digits > 9:\n            sum_of_digits -= 9\n\n        # Set the next bigger number to the sum of the current digit and the next digit\n        next_bigger = sum_of_digits\n\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    if n == 9 or n == 0:\n        return n + 1\n    for i in range(len(digits)):\n        if digits[i] == 9:\n            digits[i] = 0\n            digits[i+1] += 1\n            return int(''.join(str(digit) for digit in digits))\n    return 10\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Initialize the output variable\n    output = ''\n    \n    # Get the length of the input number\n    length = len(str(n))\n    \n    # Loop through each digit of the input number\n    for digit in str(n):\n        # Get the index of the digit in the list of digits\n        index = length - int(digit)\n        \n        # Check if the digit is in the list of digits\n        if index < 0:\n            # If not, add it to the end of the output string\n            output += digit\n        else:\n            # If so, add the digit to the output string at the correct index\n            output = output[:index] + digit + output[index:]\n    \n    # Convert the output string to an integer and return it\n    return int(output)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Find the largest digit in the given number\n    largest_digit = max(map(int, str(n)))\n    \n    # Create a list of digits from the given number\n    digits = list(map(int, str(n)))\n    \n    # Find the index of the largest digit in the list\n    index = digits.index(largest_digit)\n    \n    # Swap the digits at the index with the index immediately before it\n    digits[index], digits[index-1] = digits[index-1], digits[index]\n    \n    # Convert the list of digits back into a number and return it\n    return int(''.join(map(str, digits)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n    # Initialize the result as an empty string\n    result = ''\n    # Iterate over the characters of the string in reverse order\n    for char in reversed(num_str):\n        # If the character is a digit, add 1 to its value and convert it back to a string\n        if char.isdigit():\n            result += str(int(char) + 1)\n        else:\n            # If the character is not a digit, append it to the result as-is\n            result += char\n    # Convert the result to an integer and add 1 to it to get the next bigger number\n    return int(result) + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    n = 0\n    for i in range(len(digits)):\n        if digits[i] == 9:\n            digits[i] = 0\n        else:\n            digits[i] += 1\n            break\n    for i in range(len(digits)):\n        n += digits[i] * 10**(len(digits)-i-1)\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    #initialize a list to hold the digits of the input number\n    digits = list(str(n))\n    \n    #sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    #convert the sorted digits back to a string and return it\n    return int(''.join(digits))"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    This function takes three arguments:\n    - nums1: list of integers, first array of numbers\n    - nums2: list of integers, second array of numbers\n    - k: integer, number of pairs to find\n\n    It returns a list of tuples containing k smallest pairs of elements from the first array and second array.\n\n    Time Complexity: O(nlogk)\n    Space Complexity: O(k)\n    \"\"\"\n    # Create a priority queue to store the smallest elements\n    min_heap = []\n\n    # Add the first element of each array to the priority queue\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n\n    # Initialize the answer list to store the pairs\n    pairs = []\n\n    # Iterate through the second array\n    for num2 in nums2:\n        # Pop the smallest element from the priority queue\n        smallest = heapq.heappop(min_heap)\n\n        # If the heap is empty, we have found all the pairs we need\n        if not min_heap:\n            break\n\n        # Add the new pair to the answer list\n        pairs.append((smallest, num2))\n\n        # If we have found k pairs, we can stop iterating\n        if len(pairs) == k:\n            break\n\n        # Add the next smallest element to the priority queue\n        heapq.heappush(min_heap, min(smallest, num2))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    pq = []\n    heapq.heapify(pq)\n    \n    for num1 in nums1:\n        heapq.heappush(pq, num1)\n        if len(pq) > k:\n            heapq.heappop(pq)\n    \n    for num2 in nums2:\n        if len(pq) < k:\n            heapq.heappush(pq, num2)\n        else:\n            heapq.heappushpop(pq, num2)\n    \n    result = []\n    for i in range(k):\n        result.append((pq[0], pq[-1]))\n        if pq[0] == pq[-1]:\n            heapq.heappop(pq)\n            heapq.heappop(pq)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Use a heap to keep track of the pairs\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            if len(min_heap) < k or pair[0] < min_heap[0][0] or (pair[0] == min_heap[0][0] and pair[1] < min_heap[0][1]):\n                heapq.heappush(min_heap, pair)\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    # Extract the pairs from the heap and return them\n    return [pair for pair in min_heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        heapq.heappush(heap, (num1, -1))\n    for num2 in nums2:\n        if heapq.heappop(heap)[0] < num2:\n            heapq.heappush(heap, (num2, -1))\n            if len(heap) == k:\n                heapq.heappop(heap)\n    result = []\n    while heap:\n        num1, num2 = heapq.heappop(heap)\n        if num1 > num2:\n            heapq.heappush(heap, (num1, num2))\n        else:\n            result.append((num1, num2))\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Define a custom comparison function to sort pairs by the sum of their elements\n    def cmp(p1, p2):\n        return p1[0]+p1[1] < p2[0]+p2[1]\n\n    # Create a min heap to store the k smallest pairs\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # Calculate the sum of the current pair\n            current_sum = num1+num2\n\n            # If the heap is not full yet, add the current pair to the heap\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, [current_sum, num1, num2])\n\n            # Otherwise, if the current pair is the smallest one in the heap, remove the last element and add the current pair\n            elif cmp([heapq.heappop(min_heap)[0], heapq.heappop(min_heap)[1], heapq.heappop(min_heap)[2]], [current_sum, num1, num2]):\n                heapq.heappush(min_heap, [current_sum, num1, num2])\n\n    # Extract the k smallest pairs from the heap\n    result = []\n    while min_heap:\n        result.append([heapq.heappop(min_heap)[1], heapq.heappop(min_heap)[2]])\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the smallest k elements\n    min_heap = []\n    for i in range(k):\n        heapq.heappush(min_heap, (float('inf'), None))\n    for num1 in nums1:\n        for num2 in nums2:\n            # Find the smallest value among the numbers in the first and second arrays\n            if num1 < min_heap[0][0] and num2 < min_heap[0][0]:\n                # Add the smallest value to the min heap\n                heapq.heappush(min_heap, (min(num1, num2), (num1, num2)))\n                # If the heap size becomes greater than k, remove the smallest element\n                if len(min_heap) > k:\n                    heapq.heappop(min_heap)\n    # Extract the k smallest elements from the heap and store them in a list\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # convert the input list of lists into a single list\n    nums = [num for sublist in nums1 + nums2 for num in sublist]\n    \n    # create a min heap to store the smallest k elements\n    min_heap = []\n    for i in range(len(nums)):\n        heapq.heappush(min_heap, nums[i])\n        \n        # if the heap size exceeds k, remove the smallest element from the heap\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # convert the min heap into a list of pairs\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+len(nums2)):\n            pairs.append((nums1[i], nums2[j-len(nums1)]))\n    \n    # return the list of pairs\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # sorting the two arrays\n    nums1.sort()\n    nums2.sort()\n    # creating a min heap to store the pairs\n    pairs = []\n    # initialising the heap with the first element of each array\n    heapq.heappush(pairs, (nums1[0], nums2[0]))\n    # iterating over the remaining elements of both arrays\n    i, j = 0, 0\n    while k > 0:\n        # checking if there are still pairs to be added to the heap\n        if len(pairs) > 0:\n            # extracting the smallest pair from the heap\n            smallest_pair = heapq.heappop(pairs)\n            # adding the remaining elements of the smallest pair to the heap\n            if i < len(nums1) - 1:\n                heapq.heappush(pairs, (nums1[i+1], smallest_pair[1]))\n            if j < len(nums2) - 1:\n                heapq.heappush(pairs, (smallest_pair[0], nums2[j+1]))\n            # incrementing the counters\n            k -= 1\n            i += 1\n            j += 1\n    # extracting the pairs from the heap\n    result = []\n    while pairs:\n        result.append(pairs.pop())\n    # returning the result\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a heap of tuples (second element, first element)\n    heap = [(nums2[0], nums1[0])]\n\n    # Iterate through the second array and remove the smallest element\n    for i in range(1, len(nums2)):\n        # Remove the smallest element from the heap and add the current element\n        heapq.heappop(heap)\n        heapq.heappush(heap, (nums2[i], nums1[i]))\n\n        # If the heap has less than k elements, add the current element to the heap\n        if len(heap) < k:\n            heapq.heappush(heap, (nums2[i], nums1[i]))\n\n    # Extract the smallest k pairs from the heap\n    pairs = []\n    while len(heap) > 1:\n        first_element, second_element = heapq.heappop(heap)\n        pairs.append((first_element, second_element))\n\n    # Add the last pair which was not extracted from the heap\n    first_element, second_element = heapq.heappop(heap)\n    pairs.append((first_element, second_element))\n\n    # Sort the pairs by the second element\n    pairs.sort(key=lambda x: x[1])\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the given arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize a min heap of size k\n    min_heap = []\n\n    # Initialize variables for indices\n    i, j = 0, 0\n\n    # Initialize a list to store the result\n    result = []\n\n    while len(result) < k:\n        # If the current index in the first array is greater than the current index in the second array, pop the smallest element from the heap and add it to the result list\n        if i < len(nums1) and (j == 0 or nums2[j-1] > nums1[i]):\n            heapq.heappush(min_heap, (nums1[i], i))\n            i += 1\n        # If the current index in the second array is greater than the current index in the first array, pop the smallest element from the heap and add it to the result list\n        elif j < len(nums2) and (i == 0 or nums1[i-1] > nums2[j]):\n            heapq.heappush(min_heap, (nums2[j], j))\n            j += 1\n        # If both indices are not equal, pop the smallest element from the heap and add it to the result list\n        else:\n            min_heap_element = heapq.heappop(min_heap)\n            result.append(min_heap_element[0])\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # find the minimum value in the list\n    min_val = min(list1)\n\n    # initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # loop through the list and calculate the minimum product for each pair of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples in ascending order based on their first element\n    list1.sort(key=lambda x: x[0])\n    # Initialize the minimum product to infinity\n    min_product = float('inf')\n    # Initialize variables to keep track of the current product and the indices of the tuples\n    current_product = 1\n    current_indices = []\n    # Iterate through the list of tuples and calculate the product of the current tuple and the previous tuples\n    for i, current_tuple in enumerate(list1):\n        # Calculate the product of the current tuple and the previous tuples\n        prev_product = 1\n        for j in range(i):\n            prev_product *= list1[j][1]\n        # Update the minimum product if the current product is smaller\n        if current_product < min_product:\n            min_product = current_product\n            current_indices = []\n        if current_product < prev_product:\n            current_product = prev_product\n            current_indices = [i]\n        else:\n            current_product *= current_tuple[1]\n            current_indices.append(i)\n    # Return the minimum product and the indices of the tuples\n    return min_product, current_indices"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of the pairs of tuples.\n    '''\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to be infinity\n    min_product = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # Check if the product is less than the current minimum product\n            if product < min_product:\n                # If so, update the minimum product\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize the minimum product to be the maximum possible integer value\n    min_product = float('inf')\n    \n    # Loop through the list of tuples\n    for tup in list1:\n        # Compute the product of the first element of the tuple and the second element of the tuple\n        product = tup[0] * tup[1]\n        \n        # Update the minimum product if the current product is smaller than the minimum product\n        if product < min_product:\n            min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 1\n    min_pair = (1, 1)\n    for tup in list1:\n        product = 1\n        for i in tup:\n            product *= i\n        if product < min_product:\n            min_product = product\n            min_pair = tup\n    return min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product to infinity\n    min_product = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and check if it's smaller than the minimum product\n            product = tuple(list1[i]) * tuple(list1[j])\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(lst):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = lst[0]\n    for num in lst:\n        if num < min_val:\n            min_val = num\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to the first element of the list\n    min_val = listval[0]\n    # loop through the rest of the list and compare each value to the minimum\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first element of the list\n    min_val = listval[0]\n    # Iterate through the list and update the minimum value if an element is smaller\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Iterate through the remaining elements of the list\n    for i in range(1, len(listval)):\n        # If the current element is smaller than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = float('inf')\n    for value in listval:\n        if value < min_value:\n            min_value = value\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    \n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first value in the list\n    min_val = listval[0]\n    # Loop through the remaining values in the list\n    for val in listval[1:]:\n        # If the current value is less than the minimum value, update the minimum value\n        if val < min_val:\n            min_val = val\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to be the first value in the list\n    min_val = listval[0]\n\n    # loop through the list to find the minimum value\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    # return the minimum value\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile('([a-z])_([a-z])')\n    result = pattern.sub(r'\\1\\2', word)\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r\"([a-z])([A-Z]+)\"\n    replacement = r\"\\1_\\2\"\n    return re.sub(pattern, replacement, word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_word = re.sub(r'_(.)', lambda x: x.group(1).upper(), word)\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove any non-alphanumeric characters\n    word = re.sub('[^A-Za-z0-9]+', '', word)\n    # Convert first letter to uppercase and the rest to lowercase\n    return word[0].upper() + word[1:].lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove underscores and convert to lowercase\n    word = word.replace('_', '').lower()\n    # Split the word by underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_word = ''.join([words[0]] + [word.capitalize() for word in words[1:]])\n    # Return the camel case word\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_(.)', lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove the leading underscore from the word\n    word = word.lstrip('_')\n    # Split the word into words based on underscores\n    words = word.split('_')\n    # Convert the words to camel case\n    camel_case = ''.join(word.capitalize() for word in words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    word = re.sub(r'_([a-z])', lambda x: x.group(1).upper(), word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n\n    Args:\n    word (str): A snake case string.\n\n    Returns:\n    str: The camel case string.\n    '''\n    # Convert all underscores to spaces\n    word = re.sub(r'_','', word)\n\n    # Split the word by spaces and capitalize the first letter of each word\n    words = [word[0].upper() + word[1:].lower() for word in word.split()]\n\n    # Join the words with underscores\n    return ''.join(words)"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input is valid\n    if not isinstance(list1, list) or not all(isinstance(t, tuple) for t in list1):\n        raise ValueError('Input must be a list of tuples')\n    elif n < 1:\n        raise ValueError('n must be a positive integer')\n\n    # Extract the nth element and return it\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes a list of tuples as input and an integer n as output.\n    It returns the nth element of the list, which is the element with index n in the original list.\n\n    Example:\n    >>> lst = [('apple', 1), ('banana', 2), ('cherry', 3)]\n    >>> extract_nth_element(lst, 2)\n    ('banana', 2)\n    '''\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the list is empty\n    if not list1:\n        return None\n    # check if the list has only one element\n    elif len(list1) == 1:\n        return list1[0][n-1]\n    # check if n is less than 1 or greater than the length of the list\n    elif n < 1 or n > len(list1):\n        return None\n    # loop through the list and extract the nth element\n    else:\n        for i in range(len(list1)):\n            if i == n-1:\n                return list1[i][n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Ensure that n is a positive integer\n    if n <= 0:\n        return \"Error: n must be a positive integer\"\n    \n    # Initialize the index variable to 0\n    index = 0\n    \n    # Iterate through the list of tuples\n    for tup in list1:\n        # If the index variable equals n, return the tuple\n        if index == n - 1:\n            return tup\n        # Increment the index variable\n        index += 1\n    \n    # If the index variable is not equal to n, return an error message\n    return \"Error: n is greater than the length of the list\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        index = n - 1\n        result = list1[index]\n        return result\n    except IndexError:\n        return \"Index out of range\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Loop through the list of tuples and return the nth element\n    for i in list1:\n        if i[0] == n:\n            return i[1]\n    # If the nth element is not found in the list, return None\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Initialize an empty list to store the extracted elements\n    extracted_elements = []\n    # Iterate over the list of tuples\n    for element in list1:\n        # If the index is equal to the nth element, add it to the extracted_elements list\n        if n == 1:\n            extracted_elements.append(element)\n            # If the index is greater than the nth element, break out of the loop\n            if n > 1:\n                break\n    # Return the extracted_elements list\n    return extracted_elements"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Create a set of the first list and intersect it with the second list\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Create a set for list1\n    set1 = set(list1)\n    \n    # Loop through list2 and check if it exists in set1\n    for item in list2:\n        if item in set1:\n            return True\n    \n    # If no overlapping value found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Loop through each element in list1\n    for i in list1:\n        # If the element is also in list2, return True\n        if i in list2:\n            return True\n    # If no overlapping values are found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and returns a boolean value indicating whether any value in the first sequence\n    exists in the second sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list1 for x in list2)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    max1 = arr[0] \n    max2 = max(arr[0], arr[1]) \n    min1 = arr[0] \n    min2 = min(arr[0], arr[1]) \n\n    for i in range(2, len(arr)): \n        temp = max(max1*arr[i], min1*arr[i], max2*arr[i], min2*arr[i]) \n        max2 = max1 \n        max1 = temp \n        temp = min(max1*arr[i], min1*arr[i], max2*arr[i], min2*arr[i]) \n        min2 = min1 \n        min1 = temp \n\n    return max(max1*max2, min1*min2) "
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Given an array of integers, return the pair with the highest product.\n    If there are multiple pairs with the same highest product, return one of them.\n    \"\"\"\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    return max1 * max2, max1 * min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Finds a pair with the highest product from a given array of integers.\n    \"\"\"\n\n    # Initialize two variables to track the maximum product and the first pair\n    max_product = arr[0] * arr[1]\n    pair = (arr[0], arr[1])\n\n    # Iterate through the rest of the array and update the maximum product and pair if a larger product is found\n    for i in range(2, len(arr)):\n        new_product = max(arr[i] * arr[i - 1], arr[i] * arr[i - 2], arr[i - 1] * arr[i - 2])\n        if new_product > max_product:\n            max_product = new_product\n            pair = (arr[i], arr[i - 1])\n\n    # Return the pair with the maximum product\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_so_far)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_so_far)\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_val = arr[0]\n    max_product = arr[0] * arr[1]\n    min_val = arr[0]\n    min_product = arr[0] * arr[1]\n\n    for i in range(2, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_product = max_val * arr[i+1]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n            min_product = min_val * arr[i+1]\n        else:\n            if arr[i+1] > max_product:\n                max_product = arr[i] * arr[i+1]\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    '''\n    \n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Initialize the maximum product and the pair\n    max_product = arr[0] * arr[1]\n    pair = (arr[0], arr[1])\n    \n    # Loop through the array from the second element\n    for i in range(2, len(arr)):\n        # Calculate the current product\n        current_product = arr[i] * arr[i-1]\n        \n        # Check if the current product is greater than the maximum product\n        if current_product > max_product:\n            # Update the maximum product and the pair\n            max_product = current_product\n            pair = (arr[i], arr[i-1])\n    \n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max(max1*max2, max2*max1)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    first_elements = []\n    for tup in Input:\n        first_elements.append(tup[0])\n    return first_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns the common first element in each tuple.\n    '''\n    common_elements = []\n\n    for tup in Input: \n        if tup[0] not in common_elements: \n            common_elements.append(tup[0])\n\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elements = []\n    for tuple in Input:\n        first_elements.append(tuple[0])\n    common_first_element = set(first_elements).intersection(first_elements)\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    common_list = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_list.append(Input[i])\n                common_list.append(Input[j])\n    return common_list"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize a dictionary to store count of each element in the input list\n    count = {}\n\n    # loop through the input list\n    for elem in Input:\n        # get the first element of the tuple and check if it exists in the count dictionary\n        if elem[0] in count:\n            # increment the count for the first element\n            count[elem[0]] += 1\n        else:\n            # if the element is not in the dictionary, add it with a count of 1\n            count[elem[0]] = 1\n\n    # initialize an empty list to store the result\n    result = []\n\n    # loop through the input list and check if the first element is the same for each tuple\n    for elem in Input:\n        # get the first element of the tuple\n        first = elem[0]\n\n        # if the first element exists in the count dictionary, add the tuple to the result list\n        if first in count:\n            count[first] -= 1\n\n            # if the count for the first element becomes 0, remove it from the count dictionary\n            if count[first] == 0:\n                del count[first]\n\n            result.append(elem)\n\n    # return the list of unique tuples with the common first element\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty list to store common elements\n    common = []\n\n    # Loop through the list of tuples\n    for i in range(len(Input)):\n        # Check if the first element is in the list of common elements\n        if Input[i][0] in common:\n            # If it is, add the second element to the list of common elements\n            common.append(Input[i][1])\n        else:\n            # If it's not, add the first element to the list of common elements\n            common.append(Input[i][0])\n\n    # Return the list of common elements\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i])\n                break\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    # create a set to store the first element of the tuples\n    first_elements = set()\n\n    # loop through the input list of tuples\n    for tup in Input:\n        # if the first element is not already in the set, add it\n        if tup[0] not in first_elements:\n            first_elements.add(tup[0])\n\n    # return the set as a list of tuples\n    return list(first_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for tup in Input:\n        if tup[0] in common_elements:\n            common_elements.remove(tup[0])\n        else:\n            common_elements.add(tup[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tuple_1 in Input:\n        for tuple_2 in Input:\n            if tuple_1[0] == tuple_2[0]:\n                common_elements.append(tuple_1[0])\n    return common_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for i in lst: \n        if len(str(i)) > max_length: \n            max_length = len(str(i)) \n            max_element = i\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    for i in lst:\n        if len(i) == max_len:\n            return i"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    \"\"\"\n    This function takes a list as input and returns the element with the maximum length.\n    \"\"\"\n    # Initialize the maximum length to zero\n    max_length = 0\n    # Initialize the element with maximum length to None\n    max_element = None\n    # Loop through the list and update the maximum length and element with maximum length\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    # Return the maximum element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(max(lst, key=len))\n    for item in lst:\n        if len(item) == max_len:\n            return item"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = len(max(lst, key=len))\n    max_elem = None\n    for elem in lst:\n        if len(elem) == max_len:\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max([len(x) for x in lst])\n    return [x for x in lst if len(x) == max_len][0]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element with the maximum length.\n    '''\n    max_len = 0\n    max_element = None\n\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_element = item\n\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(list(map(round, list1)))\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Calculate the sum of the rounded numbers\n    rounded_sum = sum([round(num) for num in list1])\n    \n    # Calculate the product of the rounded sum and the length of the list\n    product = rounded_sum * len(list1)\n    \n    # Print the result\n    print(product)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    result = total * len(list1)\n    return result"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    cube_sum = 0\n    for num in even_numbers:\n        cube_sum += num ** 3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i**3\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    count = 0\n    \n    while count < n:\n        count += 1\n        sum_of_cubes += count ** 3\n    \n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    count = 0\n    while count < n:\n        sum_of_cubes += count ** 3\n        count += 1\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cube = 0\n    i = 2\n    while i <= n:\n        cube = i ** 3\n        sum_cube += cube\n        i += 2\n    return sum_cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer argument n and returns the cube sum of the first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i*i*i\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n    '''\n    even_sum = 0\n    for i in range(1, n+1, 2):\n        even_sum += i*i*i\n    return even_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    # Initialize variables\n    result = 0\n    \n    # Iterate through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate cube of i\n        cube = i ** 3\n        # Add cube to result\n        result += cube\n        \n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join([str(elem) for elem in test_tup])"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    concatenated_str = delimiter.join(str(i) for i in test_tup)\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \" \".join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return tuple(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \", \"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-2]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple and a delimiter as input parameters and concatenates each element of the tuple by the delimiter.\n    '''\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    #initialize variables to store sum and count of cubes\n    sum_cubes = 0\n    count_cubes = 0\n\n    #iterate through the first n natural numbers\n    for i in range(1,n+1):\n        #calculate the cube of the number\n        cube = i**3\n        #add the cube to the sum\n        sum_cubes += cube\n        #increment the count\n        count_cubes += 1\n\n    #calculate the average of cubes\n    average_cubes = sum_cubes/count_cubes\n\n    #return the average\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i*i*i  \n    return sum/n  \n  \n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum / (n ** 2)\n\nprint(find_Average_Of_Cube(10))  # Output: 125.0"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes an integer n and returns the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n        count += 1\n    return sum / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    sum = 0 #initialize sum to 0\n    \n    #loop through the first n numbers\n    for i in range(1, n+1):\n        sum += i**3 #add cube of each number to the sum\n        \n    average = sum/n #calculate the average of cubes by dividing the sum by n\n    \n    return average #return the average of cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum / n**2"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    # calculate the sum of cubes of natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # calculate the average of cubes\n    avg_cubes = sum_cubes/n\n\n    return avg_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize the sum and count variables\n    sum = 0\n    count = 0\n\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # calculate the cube of the current number\n        cube = i**3\n\n        # add the cube to the sum\n        sum += cube\n\n        # increment the count variable\n        count += 1\n\n    # calculate the average of the cubes\n    average = sum / count\n\n    # print the average\n    print(\"The average of cubes of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i, item in enumerate(test_tuple):\n        if isinstance(item, str):\n            rear_index.append(item[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_element = []\n    for string in test_tuple:\n        rear_element.append(string[-1])\n    return rear_element"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [tuple_element[1] for tuple_element in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_elements = []\n    for index, element in enumerate(test_tuple):\n        if index == len(test_tuple)-1:\n            rear_elements.append(element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        rear_indices.append(len(test_tuple[i]) - 1)\n    return rear_indices"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    # Create an empty list to store the odd numbers\n    odd_nums = []\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If it's odd, add it to the odd_nums list\n            odd_nums.append(num)\n    \n    # Return the odd_nums list\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # create an empty list to hold the filtered numbers\n    filtered_nums = []\n    # loop through each number in the input list\n    for num in nums:\n        # check if the number is odd\n        if num % 2 == 1:\n            # if it is, add it to the filtered list\n            filtered_nums.append(num)\n    # return the filtered list of odd numbers\n    return filtered_nums"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Match the pattern with the date string\n    match = re.match(pattern, dt)\n    if match:\n        # Use the group() method to get the matched values\n        year, month, day = match.group(1), match.group(2), match.group(3)\n        # Define the new date format in the desired format\n        new_format = '%d-%m-%Y'\n        # Use the strptime() method to convert the date to the new format\n        new_dt = datetime.datetime.strptime(year + '-' + month + '-' + day, new_format)\n        # Return the new date in the desired format\n        return new_dt.strftime(new_format)\n    else:\n        # If the pattern does not match, return the original date\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Define a regular expression object for pattern matching\n    regex = re.compile(pattern)\n    # Use search() method to search for the pattern in the date string\n    match = regex.search(dt)\n    # If the match object is not None, then it means the date string matches the pattern\n    if match:\n        # Use group() method to extract the matched groups from the match object\n        year, month, day = match.group(1), match.group(2), match.group(3)\n        # Reverse the order of the month and day values\n        formatted_date = day + '-' + month + '-' + year\n        # Return the formatted date string\n        return formatted_date\n    else:\n        # If the match object is None, then it means the date string does not match the pattern\n        # Return the original date string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the date format\n    date_format = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Use the re.sub() method to replace the date format with the new format\n    new_dt = re.sub(date_format, r'\\3-\\2-\\1', dt)\n\n    # Return the new date in the new format\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Search the date string for the pattern\n    match = re.search(pattern, dt)\n\n    # If a match is found, replace the dashes with slashes and reverse the order of the month and day\n    if match:\n        yyyy, mm, dd = match.groups()\n        new_date = dd + '-' + mm + '-' + yyyy\n        return new_date\n\n    # If a match is not found, return the original date string\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Convert the date to a string\n    dt_str = str(dt)\n\n    # Use a regular expression to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    matches = re.findall(pattern, dt_str)\n\n    # If the date matches the format, convert it to dd-mm-yyyy format\n    if matches:\n        match = matches[0]\n        day, month, year = match.split('-')\n        new_date = f\"{day}-{month}-{year}\"\n        return new_date\n\n    # If the date does not match the format, return the original date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern for the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.search() method to match the pattern in the date string\n    match = re.search(pattern, dt)\n    # Extract the year, month, and day from the match object\n    year, month, day = match.groups()\n    # Use string formatting to convert the year, month, and day into dd-mm-yyyy format\n    new_date = f\"{day}-{month}-{year}\"\n    # Return the new date in dd-mm-yyyy format\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace dashes with slashes in the date string\n    dt = dt.replace('-', '/')\n    \n    # Split the date string into year, month, and day components\n    year, month, day = map(int, dt.split('/'))\n    \n    # Construct a new date string with the day, month, and year components in the desired order\n    new_dt = '{}-{}-{}'.format(day, month, year)\n    \n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regular expression pattern to match input date in yyyy-mm-dd format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    # Use re.match() function to check if input date is in correct format\n    match = re.match(pattern, dt)\n    # If input date is in correct format, use datetime.datetime() function to convert it to dd-mm-yyyy format\n    if match:\n        import datetime\n        dt_obj = datetime.datetime.strptime(dt, '%Y-%m-%d')\n        return dt_obj.strftime('%d-%m-%Y')\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Search for the pattern in the input string\n    match = re.search(pattern, dt)\n\n    # Check if the pattern was found\n    if match:\n        # Extract the matched groups\n        year, month, day = match.groups()\n\n        # Convert the date format to dd-mm-yyyy format\n        formatted_date = f'{day}-{month}-{year}'\n\n        # Return the formatted date\n        return formatted_date\n    else:\n        # If the pattern is not found, return the original input string\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.search() function to search for a match in the input string\n    match = re.search(pattern, dt)\n\n    # Check if a match was found\n    if match:\n        # Use the datetime module to convert the matched date to the desired format\n        from datetime import datetime\n        dt = datetime.strptime(match.group(0), '%Y-%m-%d').strftime('%d-%m-%Y')\n\n    return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Find the largest element in the array\n    n = len(my_list)\n    largest = my_list[n-1]\n    i = n//2\n    while i>=1:\n        # Compare elements and swap if necessary\n        for j in range(i, n):\n            key = my_list[j]\n            # Move elements of array[0..i-1], that are greater than key, to one position ahead of their current position\n            # If we are at position i, then we are done, as all elements are already sorted\n            while j>=i and key < my_list[j-i]:\n                my_list[j] = my_list[j-i]\n                j -= i\n            my_list[j] = key\n        # Decrease the gap between elements\n        i //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    This function sorts the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Get the length of the array\n    length = len(my_list)\n    \n    # Calculate the largest gap\n    gap = length // 2\n    \n    # Begin sorting\n    while gap > 0:\n        # Print the gap size\n        print(gap)\n        \n        # Begin inner loop\n        for i in range(gap, length):\n            # Set the current element as the new reference element\n            temp = my_list[i]\n            \n            # Shift the elements to their correct positions\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n                \n            # Set the last element to its correct position\n            my_list[j] = temp\n        \n        # Reduce the gap size\n        gap = gap // 2\n    \n    # Print the sorted array\n    print(\"Sorted array:\", my_list)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n // 3:\n        h = 3 * h + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            key = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > key:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = key\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    # gap sequence\n    gap = n // 2\n    while gap > 0:\n        # insertion sort on gap-sorted sublist\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Check if the given tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    # Initialize an empty list to store the elementwise and tuples\n    and_list = []\n\n    # Iterate through the tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements from each tuple\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n\n        # Check if both elements are true\n        if elem1 and elem2:\n            # If both elements are true, add them to the and_list\n            and_list.append((elem1, elem2))\n\n    # Return the and_list as a tuple\n    return tuple(and_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    else:\n        raise ValueError(\"Both tuples must have the same length.\")"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize two empty tuples for the result\n    and_tup1 = ()\n    and_tup2 = ()\n    # Iterate over the two input tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements from the tuples and perform the elementwise and operation\n        and_tup1 += (test_tup1[i] and test_tup2[i],)\n        and_tup2 += (test_tup1[i] and not test_tup2[i],)\n    # Return the resultant tuples\n    return (and_tup1, and_tup2)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Extract the elements from the two tuples\n    tup1_elements = [i for i in test_tup1]\n    tup2_elements = [i for i in test_tup2]\n\n    # Elementwise and operation on the tuples\n    result_tup = tuple(zip(tup1_elements, tup2_elements))\n\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return tuple(and_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same length.\")\n\n    # Initialize the empty and_tup list\n    and_tup = []\n\n    # Loop through the tuples and extract the elementwise and elements\n    for i in range(len(test_tup1)):\n        and_tup.append((test_tup1[i] & test_tup2[i]))\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the given input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The given tuples are of different lengths!\")\n        return\n\n    # Extract the elementwise and tuples from the two tuples\n    and_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += ((test_tup1[i] & test_tup2[i],),)\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # check if the discriminant is negative\n    if disc < 0:\n        print(\"The equation of the parabola is imaginary.\")\n        return None\n    \n    # calculate the directrix\n    x1 = (-b + disc**0.5)/(2*a)\n    x2 = (-b - disc**0.5)/(2*a)\n    \n    # print the results\n    print(\"The directrix of the parabola is:\", x1)\n    print(\"The directrix of the parabola is:\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = -b/2/a\n    x2 = (b**2 - 4*c)/(2*a)\n\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Calculate the directrix\n        directrix = (-b + math.sqrt(discriminant)) / (2*a)\n        \n        return directrix\n    elif discriminant == 0:\n        # If the discriminant is zero, the directrix is real and it's the root of the discriminant\n        directrix = -b / (2*a)\n        \n        return directrix\n    else:\n        # If the discriminant is negative, the directrix is complex and the equation of the parabola is in the form\n        # ax^2 + bx + c = 0\n        # The equation of the parabola is x = (-b \u00b1 sqrt(b^2 - 4ac)) / (2a)\n        \n        # Calculate the real and imaginary parts of the discriminant\n        discriminant_root = math.sqrt(abs(discriminant))\n        \n        # Calculate the real part of the directrix\n        real_part_directrix = (-b + discriminant_root) / (2*a)\n        \n        # Calculate the imaginary part of the directrix\n        imag_part_directrix = (-b - discriminant_root) / (2*a)\n        \n        return real_part_directrix, imag_part_directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant == 0:\n        return None\n    elif determinant > 0:\n        return (-b + determinant**0.5) / (2*a)\n    else:\n        return (-b - determinant**0.5) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    if a**2 + b**2!= 0:\n        # calculate the discriminant\n        disc = b**2 - 4*a*c\n\n        if disc > 0:\n            # calculate the directrix\n            directrix = (-b + math.sqrt(disc))/(2*a)\n\n        elif disc == 0:\n            # directrix is a single point\n            directrix = -b/(2*a)\n\n        else:\n            # directrix is a double point\n            directrix1 = (-b + math.sqrt(disc))/(2*a)\n            directrix2 = (-b - math.sqrt(disc))/(2*a)\n\n            return directrix1, directrix2\n\n    else:\n        # the parabola is vertical or horizontal\n        directrix = None\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if disc > 0:\n        # Calculate the two solutions\n        root1 = (-b + math.sqrt(disc)) / (2*a)\n        root2 = (-b - math.sqrt(disc)) / (2*a)\n        \n        # Sort the roots in ascending order\n        roots = sorted([root1, root2])\n        \n        # Return the directrix as the midpoint of the two roots\n        directrix = (roots[0] + roots[1]) / 2\n        \n    else:\n        # The directrix doesn't exist\n        directrix = None\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    disc = b**2 - 4*a*c\n    return (-b + disc**(0.5))/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n\n    if discriminant < 0:\n        return \"The directrix does not exist.\"\n    elif discriminant == 0:\n        return \"The directrix is equal to {}.\".format(-b / (2 * a))\n    else:\n        return \"The directrix is equal to {} and has a discriminant of {}.\".format(-b / (2 * a), discriminant)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"No real roots\"\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return f\"The directrix of the parabola is {x}\"\n    else:\n        x1 = (-b + math.sqrt(discriminant))/(2*a)\n        x2 = (-b - math.sqrt(discriminant))/(2*a)\n        return f\"The directrix of the parabola is {x1} and {x2}\""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for element in list1:\n        if element in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for num in list1:\n        if num in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Create a set of elements in list1 and list2\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if any element in set1 is also in set2\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    This function takes in the base1, base2, and height of a trapezium and returns the median length of the trapezium.\n    '''\n    if base1 + base2 <= height:\n        return base1 + base2\n    else:\n        return (base1 + base2) - (height - base1 - base2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function calculates the median length of a trapezium.\n\n    base1 and base2 are the lengths of the two bases of the trapezium.\n    height is the height of the trapezium.\n\n    The function returns the median length of the trapezium as a float.\n    '''\n\n    # Calculate the sum of the bases and height\n    total = base1 + base2 + height\n\n    # Calculate the sum of the squares of the bases and height\n    total_squared = base1**2 + base2**2 + height**2\n\n    # Calculate the sum of the areas of the trapezium\n    area1 = 0.5 * (base1 * height)\n    area2 = 0.5 * (base2 * height)\n\n    # Calculate the sum of the differences between the areas\n    total_difference = area1 - area2\n\n    # Calculate the median difference\n    median_difference = total_difference / 2\n\n    # Calculate the area of the trapezium that contains the median difference\n    total_area = area1 + area2 + 2 * median_difference\n\n    # Calculate the median length of the trapezium\n    median_length = total_area / total\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    # Calculate the length of the shorter base\n    base = min(base1, base2)\n    # Calculate the length of the longer base\n    length = max(base1, base2)\n    # Calculate the length of the shorter base and the longer base\n    sum_bases = base + length\n    # Calculate the area of the trapezium using the sum of the bases\n    area_sum = 0.5 * sum_bases * height\n    # Calculate the area of the trapezium using the longer base\n    area_long = 0.5 * length * height\n    # Calculate the ratio of the two areas\n    ratio = area_long / area_sum\n    # Calculate the length of the median base\n    median_base = base * ratio\n    # Calculate the length of the median trapezium\n    median_length = 0.5 * (median_base + length)\n    # Return the median length\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    median = 0.5 * (base1 + base2)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 > base2:\n        base1, base2 = base2, base1\n    \n    # Calculate the height of the trapezium using Heron's formula\n    s = (base1 + base2 + height) / 2\n    area = base1 * height + base2 * height\n    perimeter = base1 + base2 + height\n    \n    # Use the area of the trapezium to calculate the length of its base\n    base = 0.5 * s * area\n    \n    # Calculate the length of the trapezium using Heron's formula\n    trapezium = (base * (base + perimeter) - perimeter * (perimeter - base)) / 2\n    \n    # Calculate the median of the trapezium\n    median = trapezium / 2\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = 0.5*base1*base2 + 0.5*base2*height + 0.5*base1*height\n    \n    # calculate the length of the three halves of the trapezium\n    half1 = 0.5*(base1 + base2)\n    half2 = 0.5*(height - base2)\n    half3 = 0.5*(height - base1)\n    \n    # find the length of the middle segment\n    middle = 0.5*(half1 + half2 + half3)\n    \n    # calculate the difference between the area of the trapezium and the length of the middle segment\n    diff = area - middle\n    \n    # return the median of the three lengths\n    return [diff, middle, middle - abs(diff)]"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    s = (base1 + base2) / 2\n    area = 0.5 * base1 * height\n    return 0.5 * s * (area - height)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    half_area = 0.5 * area\n    base_and_height_area = 0.5 * base1 * height\n    total_area = area + base_and_height_area\n\n    first_half_trapezium_length = half_area / total_area\n    second_half_trapezium_length = (base1 + base2) / total_area\n\n    return (first_half_trapezium_length + second_half_trapezium_length) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the length of the trapezium using Heron's formula\n    area = 0.5 * (base1 + base2) * height\n    semi_perimeter = 0.5 * (base1 + base2)\n    # Calculate the length of the top half using the area of the bottom half\n    top_half = (semi_perimeter * (height - area)) ** 0.5\n    # Calculate the length of the bottom half using the area of the top half\n    bottom_half = (semi_perimeter * area) ** 0.5\n    # Combine the lengths of the two halves to get the length of the trapezium\n    total_length = top_half + bottom_half\n    # Return the median length\n    return total_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1, base2, height = sorted([base1, base2, height])\n    if height % 2 == 0:\n        area = 0.5 * (base1 + base2) * (height / 2)\n        median_len = math.sqrt(area)\n    else:\n        area = base1 * height + base2 * height\n        median_len = math.sqrt(area)\n    return median_len"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(f\"{element} is greater than {number}.\")\n            return True\n    print(f\"{number} is not greater than any element of the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than\", i)\n            return True\n    print(\"The number is not greater than any element of the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(\"The entered number is greater than the element(s) in the array.\")\n            return"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_number = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater_than_number = True\n            break\n    return greater_than_number"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]*'\n    return re.findall(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab*'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def text_match_one(text):\n    pattern = r'a(?=.*b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.{1,}b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a(b)*\"\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba.*b\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # Find the last digit of the number\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return last_Digit(n//10)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers in the original list.\n    '''\n    new_lst = []\n    for num in lst:\n        if num < 0:\n            new_lst.append(num)\n    return new_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(str.isalpha, str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Initialize an empty list to store the even characters\n    even_lst = []\n    # Iterate over the list of characters\n    for char in lst:\n        # Check if the character is odd or even\n        if char % 2 == 0:\n            # If the character is even, add it to the even list\n            even_lst.append(char)\n    # Convert the even list to a string and return it\n    return ''.join(str(x) for x in even_lst)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if char.isalpha():\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalnum() and int(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # remove the odd characters from the string\n    str2 = ''.join(char for char in str1 if char % 2 == 0)\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(char for char in str1 if char.isalnum())"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j][0] or (test_list[j][0], test_list[i][1]) in test_list[i][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if test_list[i] == test_list[j]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and tuple(test_list[i]) == tuple(test_list[j]) and tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(L):\n    '''\n    Write a function to return the sum of a list of integers.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through the list of integers\n    for num in L:\n        # Check if the number is a multiple of 2\n        if num % 2 == 0:\n            # Add the number to the sum\n            sum += num\n        else:\n            # If it's not a multiple of 2, just add it to the sum\n            sum += num\n    \n    # Return the sum\n    return sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result += i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result to 0\n    result = 0\n    # Iterate over each element in the list\n    for num in L:\n        # Multiply the result by the current element\n        result *= num\n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    multiple = 1\n    for num in L:\n        multiple *= num\n    return multiple"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = 0\n    for i in L:\n        num += i\n    return num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression to find adverbs\n    pattern = r'\\b(a|an|the)\\b\\s*(adverb)\\b'\n    \n    # Find all the matches with the pattern\n    matches = re.findall(pattern, text)\n    \n    # Initialize a dictionary to store adverb positions\n    positions = {}\n    \n    # Loop through all the matches\n    for match in matches:\n        # Split the match into its parts\n        part1, part2 = match\n        \n        # Convert part1 to lowercase for consistency\n        part1 = part1.lower()\n        \n        # If the part1 is a noun, then part2 must be a verb\n        if part1 == 'a' or part1 == 'an' or part1 == 'the':\n            # Convert part2 to lowercase for consistency\n            part2 = part2.lower()\n            \n            # Check if part2 is a verb\n            if part2 in ['verb', 'past tense', 'gerund', 'present participle', 'infinitive']:\n                # Add the position of the first adverb to the dictionary\n                positions[match] = 0\n    \n    # Sort the dictionary by position\n    sorted_positions = dict(sorted(positions.items()))\n    \n    # Return the sorted dictionary\n    return sorted_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input, finds all the adverbs in the sentence and returns a list of tuples, each tuple representing an adverb and its position in the sentence.\n    '''\n    \n    # Create a list to store all the adverbs in the sentence\n    adverbs = []\n\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b[a-zA-Z][a-zA-Z]+\\b'\n\n    # Use the regular expression pattern to find all the adverbs in the sentence\n    matches = re.findall(pattern, text)\n\n    # Iterate through all the matches and append each adverb and its position to the adverbs list\n    for i, match in enumerate(matches):\n        adverbs.append((match, i))\n\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b[a-z]+\\b', text.lower())\n\n    # Find the positions of each adverb in the text\n    positions = [m.start() for m in re.finditer(r'\\b[a-z]+\\b', text.lower())]\n\n    # Sort the positions in ascending order\n    positions.sort()\n\n    return adverbs, positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern for adverbs\n    pattern = re.compile(r'\\b(again|already|already|anymore|anytime|also|although|always|among|as|because|before|being|between|both|but|by|during|each|either|enough|except|further|had|has|have|having|he|here|hers|herself|him|himself|his|how|however|i|if|in|into|is|it|its|itself|just|least|let|like|more|most|much|my|neither|no|nor|not|now|of|off|often|on|only|or|other|our|ours|ourselves|out|over|own|rather|s|same|seem|should|since|so|some|such|than|that|the|their|theirs|them|themselves|then|there|these|they|this|those|through|to|too|under|until|up|upon|us|whether|where|which|while|who|whom|why|will|with|without)\\b')\n    \n    # Find all matches of the pattern in the text\n    matches = pattern.findall(text)\n    \n    # Return a list of tuples with the adverbs and their positions\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regex pattern to match adverbs\n    adverb_pattern = r'\\b(?:a(d|ll|n|t)|an|the|any|every|some|most|mostly|usually|rarely|rare|only|never|all|mostly|most|always|sometimes|often|seldom|rarely|rarely|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define regular expression pattern for finding adverbs\n    pattern = r'\\b(?:not|only|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern for finding the first adverb in the sentence\n    pattern = r'\\b\\w*([aeiouyAEIOUY])\\w*([a-z])\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Create an empty list to store the adverb positions and words\n    adverb_positions = []\n\n    # Iterate through all matches and store the adverb positions and words\n    for match in matches:\n        start_pos = match.start()\n        end_pos = match.end()\n        adverb = match.group(1)\n        adverb_word = match.group(2)\n        adverb_positions.append((start_pos, end_pos, adverb, adverb_word))\n\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # create a regular expression pattern to match adverbs\n    pattern = r'\\b(really|amazingly|amazingly|enormously|amazingly|superbly|amazingly|amazingly|exceedingly|exceptionally|extraordinarily|staggeringly|amazingly|terrifically|amazingly|gorgeously|amazingly|ultimately|amazingly|amazingly|elegantly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amazingly|amaz"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define regex pattern for finding adverbs\n    pattern = r'\\b([a-z]*[A-Z][a-z]*)\\b'\n\n    # find all matches of the pattern in the given text\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n\n    # check if any adverbs were found\n    if len(matches) > 0:\n        # define a dictionary to store adverbs and their positions\n        adverbs = {}\n        # loop through all matches and add them to the dictionary\n        for i, match in enumerate(matches):\n            if i == 0:\n                adverbs['Adverb'] = (0, len(match))\n            else:\n                adverbs[match] = (matches[i-1][1]+len(matches[i-1][0])+1, matches[i][1])\n\n        # return the dictionary of adverbs and their positions\n        return adverbs\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n    \n    # If no adverbs are found, return None\n    if len(adverbs) == 0:\n        return None\n    \n    # Find the position of the first adverb\n    position = text.index(adverbs[0])\n    \n    # Return the adverb and its position\n    return (adverbs[0], position)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    s = 6 * l ** 2\n    print(\"The surface area of the cube is:\", s)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    print(\"The surface area of a cube of size\", l, \"is\", surface_area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6 * l * l\n    return s"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = [num for num in nums if num > 0]\n    return len(pos_nums) / len(nums) * 100"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0, 0])\n    for num in nums:\n        if num > 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n    return count[0]/(count[0] + count[1])"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n\n    # convert the array to a list\n    nums_list = list(nums)\n\n    # count the number of positive numbers in the list\n    positive_count = sum([1 for num in nums_list if num > 0])\n\n    # find the ration of positive numbers in the list\n    if positive_count == 0:\n        return 0\n    else:\n        return float(positive_count) / len(nums_list)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num == 0:\n            zero_count += 1\n        else:\n            neg_count += 1\n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)  # convert the input array to an array of integers\n    pos_count = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            pos_count += 1\n    ratio = pos_count / len(arr)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array to store the positive numbers in the input array\n    positive_numbers = array('i')\n\n    # Iterate through the input array and append the positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positive_numbers.append(num)\n\n    # Calculate the ration of positive numbers in the array\n    positive_count = len(positive_numbers) / len(nums)\n\n    # Return the ration of positive numbers in the array\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    positive_count = array('i', [0])\n    negative_count = array('i', [0])\n\n    for num in nums:\n        if num > 0:\n            positive_count.append(num)\n        else:\n            negative_count.append(num)\n\n    positive_ratio = positive_count.item(0) / (positive_count.item(0) + negative_count.item(0))\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Initialize count of positive numbers and total number of numbers\n    count = 0\n    total = len(nums)\n\n    # Iterate through the array and count the positive numbers\n    for num in nums:\n        if num > 0:\n            count += 1\n\n    # Calculate the ratio of positive numbers to the total number of numbers\n    ratio = count / total\n\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = array('i')\n    neg = array('i')\n    zero = array('i')\n    for num in nums:\n        if num > 0:\n            pos.append(1)\n        elif num < 0:\n            neg.append(1)\n        else:\n            zero.append(1)\n    \n    pos_count = len(pos)\n    neg_count = len(neg)\n    zero_count = len(zero)\n    \n    pos_ratio = pos_count / (pos_count + neg_count + zero_count)\n    return pos_ratio"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for num in list1: \n        if num < 0 and num > max_neg: \n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf') # initialize maximum negative number to negative infinity\n    for num in list1:\n        if num < 0 and num > max_neg: # if the number is negative and greater than the current maximum negative number\n            max_neg = num # update maximum negative number\n    return max_neg # return the largest negative number\n"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')  # Initialize largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num  # Update largest if a negative number is found\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_neg_num
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]  # assume the first element is the largest negative number\n    for num in list1: \n        if num < 0 and num > max_neg:  # check if num is negative and larger than the current largest negative number\n            max_neg = num  # update the largest negative number to num\n    return max_neg  # return the largest negative number\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = (tup[0], tup[1][-K:], tup[2][-K:])\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = (tup[0], tup[1], tup[2][:K])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n        elif len(test_list[i]) < K:\n            test_list[i] = tuple(test_list[i] + (K - len(test_list[i])) * ((),))\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a positive integer k as input,\n    and returns a list of trimmed tuples.\n\n    The function iterates through each tuple in the input list and trims the\n    corresponding elements by k. For example, if the input list contains the\n    tuple (1, 2, 3, 4, 5) and k is 2, the output will be the tuple (1, 2, 4, 5).\n\n    Note: If the length of the trimmed tuple is less than k, then the remaining\n    elements are assumed to be zero.\n\n    Args:\n    test_list (list): A list of tuples to be trimmed.\n    K (int): A positive integer to be used for trimming.\n\n    Returns:\n    list: A list of trimmed tuples.\n    \"\"\"\n\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple([elem - K if type(elem) == int else elem for elem in tup])\n        if len(trimmed_tup) >= K:\n            trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # loop through each element in the tuple\n        for j in range(len(test_list[i])):\n            # if the element is greater than k, remove it from the tuple\n            if test_list[i][j] > K:\n                del test_list[i][j]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    # Iterate over each tuple in the list and remove the first k elements\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][K:]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Loop through each tuple in the list\n    for i, tup in enumerate(test_list):\n        # Trim the tuple by k\n        new_tup = tup[:K]\n        # Update the tuple in the list\n        test_list[i] = new_tup\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The length of the first tuple should be equal to the length of the second tuple.')\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Iterate over each index of the tuple\n    for i in range(len(test_tup1)):\n        # Multiply the elements at the corresponding index of the two tuples\n        result = test_tup1[i] * test_tup2[i]\n        # Append the result to the result_list\n        result_list.append(result)\n\n    # Return the result_list as the output of the function\n    return result_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_result = []\n    for i in range(len(test_tup1)):\n        multiplication_result.append(test_tup1[i] * test_tup2[i])\n    return multiplication_result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]*test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for item, freq in count.items():\n        result[item] = tup.count(item)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of the tuple and the values are the count of occurrences of those elements in the list.\n    '''\n    count_dict = {}\n    for item in tup:\n        if item in lst:\n            count_dict[item] = lst.count(item)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Using Counter module of collections to count the frequency of each element in the list.\n    freq_dict = Counter(lst) \n    # Dictionary to store the count of each element in the tuple\n    count_dict = {} \n    \n    # Loop through each element in the tuple and check if it's present in the list.\n    for elem in tup: \n        if elem in freq_dict: \n            # If the element is present in the list, update the count in the dictionary.\n            count_dict[elem] = freq_dict[elem] \n        else: \n            # If the element is not present in the list, add it to the dictionary with a count of 0.\n            count_dict[elem] = 0 \n    \n    # Return the dictionary containing the count of each element in the tuple.\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n    for i in tup: \n        result[i] = count_dict[i]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    count_dict = dict(c)\n    count = 0\n    for i in lst:\n        if i in count_dict.keys():\n            count += count_dict[i]\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Converting tuple elements to a set to remove duplicate elements\n    set_tup = set(tup)\n    \n    # Using Counter class from collections module to count the occurrences of each element in set_tup\n    count_dict = Counter(set_tup)\n    \n    # Converting dictionary values to lists to get the actual count of each element\n    count_list = [count for count in count_dict.values()]\n    \n    # Counting the total number of occurrences of each element in list\n    for element in lst:\n        count_list.append(lst.count(element))\n        \n    # Returning the list of count for each element in tuple\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = {}\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    for item in tup:\n        if item in count_dict:\n            print(f\"{item}: {count_dict[item]}\")\n        else:\n            print(f\"{item}: 0\")"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    for i in lst:\n        if i in count_dict:\n            count_dict[i] += 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes in a tuple and a list as arguments and returns a dictionary with the count of each element in the tuple.\n    '''\n    count_dict = {}\n    for elem in tup:\n        if elem in lst:\n            count_dict[elem] = count_dict.get(elem, 0) + 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of the list and the values are their respective occurrence in the tuple.\n    '''\n    count_dict = {} \n    for element in lst: \n        count_dict[element] = tup.count(element) \n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_nums = []\n    for i in range(n):\n        perrin_nums.append(i*(i+1))\n    sum_perrin = sum(perrin_nums)\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(1,n+1):\n        perrin_numbers.append(i*(i+1))\n    return sum(perrin_numbers)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    p = 1\n    while p <= n:\n        sum += p\n        p = 3 * p + 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # define the first perrin number\n    p = 1\n\n    # initialize the sum to zero\n    total = 0\n\n    # loop through the range of numbers to find the sum\n    for i in range(1, n+1):\n\n        # find the next perrin number\n        p = (3*p**2) + (1*p)\n\n        # add the perrin number to the sum\n        total += p\n\n    # return the sum\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n\n    Parameters:\n    n (int): the number of terms to calculate.\n\n    Returns:\n    int: the sum of perrin numbers.\n    \"\"\"\n    # Initialize the sum to 0\n    sum_perrin = 0\n    # Loop through n terms\n    for i in range(1, n+1):\n        # Calculate the perrin number and add it to the sum\n        sum_perrin += i**2\n    # Return the sum\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of Perrin numbers up to\", n, \"is:\", cal_sum(n))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            s += i\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1, n+1):\n        perrin_sum += 1/i\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    p = 1\n    total = 0\n    while p <= n:\n        total += p\n        p += 1\n    return total"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer as input and returns a new list with\n    the specified size of strings extracted from the original list.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) > size:\n            result.append(string[:size])\n        else:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and the size of the required string.\n    It returns a list of extracted string values.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n        elif len(l[i]) > l[i]:\n            result.append(l[i][:l[i]])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(0, len(str_list), size):\n        extracted_list.append(' '.join(str_list[i:i+size]))\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input, and returns a new list with the extracted strings.\n    '''\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a size of string to extract.\n    It returns a list of extracted string values.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        extracted_list.append(str_list[i][:size])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in l:\n        if len(i) == l[0]:\n            result.append(i)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in l:\n        if len(i) >= l:\n            result.append(i[:l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(str) <= l[i]:\n            result.append(str)\n            break\n        else:\n            result.append(str[:l[i]])\n            str = str[l[i]:]\n    return result"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('[\\s]+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the given string using regular expression\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regex\n    text2 = re.sub('\\s+','', text1)\n    \n    # Return the result\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text1)\n    return text.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expressions to remove all whitespaces\n    text2 = re.sub(r'\\s+', '', text1)\n    # return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percent = sale_amount/actual_cost\n    if loss_percent < 0.05:\n        return (loss_percent * sale_amount)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost - sale_amount > 0:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        loss_amount = sale_amount - actual_cost \n        return loss_amount \n    else: \n        return 0 "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_threshold = 1.5\n    if actual_cost >= sale_amount * loss_threshold:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # Initialize the sum to zero\n    sum_even_factors = 0\n\n    # Loop through all the numbers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # If it is, check if i is even\n            if i % 2 == 0:\n                # If i is even, add it to the sum\n                sum_even_factors += i\n                \n    # Return the sum of even factors\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_factors += i\n            else:\n                n //= i\n                continue\n    return even_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumOfFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of even factors of the number.\n    \"\"\"\n    sum_even = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even += i\n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumOfFactors(n):\n    \"\"\"\n    This function finds the sum of even factors of a number.\n    \"\"\"\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_factors += i\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum of factors as 0\n    sum = 0\n\n    # loop through all factors of n\n    for i in range(2, int(math.sqrt(n))+1):\n        # check if i is even and divides n\n        if i*i <= n and n % i == 0:\n            # add i to sum of factors\n            sum += i\n\n    # add n to sum of factors\n    sum += n\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and n % (2*i) == 0:\n            sum += i\n            sum += 2*i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            sum += i\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n        elif n % i == 0 and i % 2 == 1:\n            continue\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\sz\\b'\n    result = re.findall(pattern, text, re.IGNORECASE)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    result = re.findall(pattern, text)\n    return result\n\ntext = \"This is a test. There are many words containing 'z'.\"\nresult = text_match_wordz(text)\nprint(result)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\sz\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\w+\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define regex pattern for 'z' in a word\n    pattern = r'\\b[a-zA-Z]*[zZ][a-zA-Z]*\\b'\n    # Use re.search() method to search for the pattern in the text\n    match = re.search(pattern, text)\n    # Return True if pattern is found, False otherwise\n    return match is not None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    match = re.search(pattern, text)\n    if match:\n        return 'Match found'\n    else:\n        return 'Match not found'"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'  # define regex pattern\n    match = re.search(pattern, text)  # search for pattern in text\n    if match:\n        return match.group()  # return matched word\n    else:\n        return None  # return None if no match found"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b' # regular expression pattern for matching words containing 'z'\n    result = re.findall(pattern, text) # find all occurrences of the pattern in the text\n    return result"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if monthnum2 == 2 and daynum2 > 29:\n                return \"31\"\n            else:\n                return \"30\"\n        else:\n            if monthnum2 == 2 and daynum2 > 28:\n                return \"31\"\n            else:\n                return \"30\"\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            if daynum2 > 30:\n                return \"31\"\n            else:\n                return \"30\"\n        else:\n            if daynum2 > 31:\n                return \"31\"\n            else:\n                return \"30\"\n    else:\n        if daynum2 > 31:\n            return \"31\"\n        else:\n            return \"30\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in range(1, 13):\n        if monthnum == 2:\n            if is_leapyear(year):\n                return 31\n            else:\n                return 29\n        elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n            return 30\n        else:\n            return 31\n    else:\n        print(\"Invalid month number.\")\n\ndef is_leapyear(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n\n    # Check if the month number is valid\n    if monthnum2 < 1 or monthnum2 > 12:\n        print(\"Invalid month number.\")\n        return\n    \n    # Get the number of days in the month\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        num_days = 31\n    elif monthnum2 in [4, 6, 9, 11]:\n        num_days = 30\n    elif monthnum2 in [2]:\n        num_days = 28\n    else:\n        print(\"Invalid month number.\")\n        return\n    \n    # Print whether the month contains 31 days or not\n    if num_days == 31:\n        print(\"The month contains 31 days.\")\n    else:\n        print(\"The month does not contain 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if the month number is valid (between 1 and 12)\n    if not 1 <= monthnum2 <= 12:\n        return \"Invalid month number\"\n    \n    # Convert the month number to a string representation\n    monthnum2_str = str(monthnum2)\n    \n    # Check if the month number has 31 days\n    if monthnum2_str == \"01\" or monthnum2_str == \"03\" or monthnum2_str == \"05\" or monthnum2_str == \"07\" or monthnum2_str == \"08\" or monthnum2_str == \"10\" or monthnum2_str == \"12\":\n        return \"31 days\"\n    elif monthnum2_str == \"04\" or monthnum2_str == \"06\" or monthnum2_str == \"09\" or monthnum2_str == \"11\":\n        return \"30 days\"\n    elif monthnum2_str == \"02\":\n        if int(monthnum2_str) % 4 == 0 and (int(monthnum2_str) % 100!= 0 or int(monthnum2_str) % 400 == 0):\n            return \"29 days\"\n        else:\n            return \"28 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days, False otherwise.\n    '''\n\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if monthnum in range(1, 13):\n        return days_in_month[monthnum-1] == 31\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if month number is in range\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    \n    # check if month number has 31 days\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"The given month number contains 31 days.\")\n    else:\n        print(\"The given month number does not contain 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop through each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string using slicing and string methods\n        stringlist[i] = stringlist[i][::-1]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as an input and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    \n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n            min_sublist = i\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize the minimum length of any sublist \n    min_len = float('inf') \n\n    # Iterate over the list of sublists \n    for i in lst: \n        # Check if the length of the current sublist is smaller than the minimum \n        if len(i) < min_len: \n            # Update the minimum length \n            min_len = len(i) \n\n    # Create a list of sublists having minimum length \n    min_list = [] \n\n    # Iterate over the list of sublists again and append the sublist with minimum length \n    for i in lst: \n        if len(i) == min_len: \n            min_list.append(i) \n\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < len(min_sublist):\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    # Initialize minimum length and minimum sublist\n    min_length = float('inf')\n    min_sublist = []\n    # Iterate through the list\n    for i in range(len(lst)):\n        # Check if the current sublist has a smaller length\n        if len(lst[i]) < min_length:\n            # If it does, update minimum length and minimum sublist\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst)\n    min_sublist = lst\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize a variable to store the minimum length \n    min_length = float('inf')\n\n    # Initialize an empty list to store the sublists \n    sublists = []\n\n    # Loop through each element in the list \n    for i in range(len(lst)): \n\n        # Initialize a variable to store the current sublist length \n        current_length = 1\n\n        # Loop through each element in the sublist starting from the current element \n        for j in range(i, len(lst)): \n\n            # If the current element is not the same as the previous element, increment the current sublist length \n            if lst[j]!= lst[j-1]: \n                current_length += 1\n\n            # If the current sublist length is smaller than the minimum length, update the minimum length and the sublist \n            if current_length < min_length: \n                min_length = current_length\n                sublists = [[lst[i]]]\n\n            # If the current sublist length is the same as the minimum length and the sublist is not in the sublists list, add it to the list \n            if current_length == min_length and sublists[0][0]!= lst[i]: \n                sublists.append([lst[i]])\n\n    # Return the sublist having minimum length \n    return sublists[0]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return lst[lst.index(min(lst))-min_len+1:lst.index(max(lst))+1]"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Find the area of a rectangle using the formula: area = length * width\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Using regular expression to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Finding all uppercase substrings\n    uppercase_substrings = pattern.findall(str1)\n    # Removing all uppercase substrings from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regex pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    # Use re.sub() function to remove all uppercase substrings from the given string\n    result = re.sub(pattern, '', str1)\n    # Return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define pattern to match uppercase substrings\n    pattern = r'\\b[A-Z][a-z]+\\b'\n\n    # Replace uppercase substrings with spaces\n    str1 = re.sub(pattern,'', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function takes a string as input and returns the same string with all uppercase substrings removed.\n    \"\"\"\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    return uppercase_pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Create a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    \n    # Iterate over all the substrings of the given string and replace the uppercase substrings with an empty string\n    for match in pattern.finditer(str1):\n        str1 = str1.replace(match.group(0), '')\n    \n    # Return the modified string with uppercase substrings removed\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'[A-Z]+'\n    \n    # Use the re.sub() function to replace the uppercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n    \n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_uppercase(str1):\n    # create a regex pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # loop through each uppercase substring found in the string\n    for match in pattern.finditer(str1):\n        # slice the string to remove the uppercase substring\n        str1 = str1[:match.start()] + str1[match.end():]\n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    # Initialize an empty list to store the first elements of each sublist\n    first_elements = []\n\n    # Loop through each sublist in the input list\n    for sublist in lst:\n\n        # If the sublist is not empty, get the first element of the sublist and append it to the first_elements list\n        if sublist:\n            first_elements.append(sublist[0])\n\n    # Return the first_elements list\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a new list with the first element of each sublist.\n    '''\n    return [lst[0]]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i][0])\n\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    sublists = []\n    for item in lst:\n        sublists.append(item[0])\n    return sublists"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for char in str:\n        if char.isupper():\n            upper += 1\n    return upper"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Use a loop to iterate through all possible combinations of the elements in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            # Check if the current combination is not already in the result list\n            if not any(combination in result for combination in combinations):\n                result.append(combination)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    # Helper function to generate all combinations of k elements from the list\n    def generate_combinations(lst, k, start_index=0):\n        if k == 1:\n            yield lst[start_index:start_index+k]\n        else:\n            for i in range(start_index, len(lst)-k+1):\n                for j in generate_combinations(lst, k, i+1):\n                    yield [lst[start_index]] + j\n\n    # Generate all combinations of length 1 and length 2\n    comb_length_1 = [lst[0] for lst in generate_combinations(list1, 1)]\n    comb_length_2 = [lst[0] for lst in generate_combinations(list1, 2)]\n\n    # Combine the two lists and return the result\n    return comb_length_1 + comb_length_2"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Use a recursive function to find all combinations\n    def find_combinations(lst, start):\n        if start == len(lst):\n            print(lst)\n        else:\n            for i in range(start, len(lst)):\n                lst[start], lst[i] = lst[i], lst[start]\n                find_combinations(lst, start+1)\n                lst[start], lst[i] = lst[i], lst[start]\n\n    # Call the recursive function to find all combinations\n    find_combinations(list1, 0)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(1, n-i+1):\n            combination = list1[j:j+i]\n            combinations.append(combination)\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Sort the list in ascending order\n    list1 = sorted(list1)\n\n    # Initialize an empty list to store the combinations\n    combinations = []\n\n    # Find the possible combinations by iterating over all possible pairs of indices\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Check if the current combination is already in the list\n            if (i, j) not in combinations:\n                # Check if the sum of the elements is odd or even\n                if (list1[i] + list1[j]) % 2 == 0:\n                    # Add the combination to the list\n                    combination = (list1[i], list1[j])\n                    combinations.append(combination)\n\n    # Return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize a set to store the combinations\n    combinations = set()\n\n    # Loop through each element of the list\n    for i in range(len(list1)):\n\n        # Initialize a list to store the remaining elements of the list\n        remaining_list = list1[i+1:]\n\n        # Loop through each element of the remaining list\n        for j in range(len(remaining_list)):\n\n            # Append the current combination to the set\n            combinations.add((list1[i], remaining_list[j]))\n\n    # Return the set of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            yield list1[i:j]"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns all possible combinations of its elements.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list as input and returns all possible combinations of its elements.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    start = 0\n    \n    for i in range(len(arr)):\n        if i == 0:\n            start = i\n            curr_product = arr[i]\n        else:\n            curr_product *= arr[i]\n            if curr_product > max_product:\n                max_product = curr_product\n                start = i\n        \n        if curr_product < 0:\n            curr_product = 1\n            \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 1\n    current_product = 1\n\n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        if num > 0:\n            current_product *= num\n        else:\n            max_product = max(max_product, current_product)\n            current_product = 1\n    max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes in an array and returns the maximum product subarray.\n    '''\n\n    # Initialize max_product as the first element in the array\n    max_product = arr[0]\n\n    # Initialize max_ending_here as 1\n    max_ending_here = 1\n\n    # Initialize min_ending_here as 1\n    min_ending_here = 1\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Update max_ending_here\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n\n        # Update min_ending_here\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        # Update max_product if max_ending_here is greater\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function finds the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = 1\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    \n    for i in range(len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        current_product *= num\n        \n        if current_product < 0:\n            current_product = 1\n        \n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    if len(dict) == 1:\n        return True\n    for val in dict.values():\n        if len(set(val))!= 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_set = set(dict.values())\n    if len(value_set) == 1:\n        print(\"All values are same in the dictionary.\")\n    else:\n        print(\"All values are different in the dictionary.\")"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict[list(dict.keys())[0]]\n    for key in dict:\n        if dict[key]!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == n:\n        for value in dict.values():\n            if value!= dict[list(dict.keys())[0]]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n not in dict:\n        print(\"The key {} is not present in the dictionary\".format(n))\n    else:\n        value = dict[n]\n        for i in dict:\n            if i == n:\n                continue\n            if dict[i]!= value:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict[list(dict.keys())[0]])):\n        if any(dict[key][i]!= dict[key][0] for key in dict):\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = []\n    for i in dict.values():\n        values.append(i)\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    for i in range(n):\n        if not all(dict.values()):\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    for key, value in dict1.items():\n        if value == \"\":\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here*arr[i])\n            \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    def max_subsequence(arr):\n        n = len(arr)\n        if n == 1:\n            return arr[0]\n        elif n == 2:\n            return max(arr[0], arr[1])\n        else:\n            max_ending_here = max_subsequence(arr[1:])\n            min_ending_here = min(arr[0], arr[1])\n            return max(max_ending_here, max(arr[0], arr[1]), max(arr[0], min(arr[1:])))\n\n    return max_subsequence(arr)\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # create a dictionary to store the maximum product of increasing subsequences ending at each index\n    max_products = {}\n    \n    # initialize the maximum product to be negative infinity\n    max_product = float('-inf')\n    \n    # loop through the array\n    for i in range(len(arr)):\n        # get the maximum product of increasing subsequences ending at index i\n        subsequence_max = max(arr[:i+1]) * max(arr[i:])\n        \n        # update the maximum product if the current subsequence is greater than the previous maximum\n        if subsequence_max > max_product:\n            max_product = subsequence_max\n            \n        # update the maximum product of increasing subsequences ending at index i in the dictionary\n        if i not in max_products or subsequence_max > max_products[i]:\n            max_products[i] = subsequence_max\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    # Initialize variables to store the maximum product and the current product\n    max_product = float('-inf')\n    current_product = 1\n\n    # Loop through the array and compute the product of increasing subsequences\n    for num in arr:\n        # Update the current product if the new number is greater than it\n        current_product = max(num, current_product * num)\n        # Update the maximum product if the current product is greater than the maximum product\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(len(arr)):\n        if i > 0 and arr[i] >= arr[i-1]:\n            current_product *= arr[i]\n        else:\n            max_product = max(max_product, current_product)\n            current_product = 1\n\n    max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    current_product = 1\n    prev_max_product = 1\n    \n    for i in range(n):\n        if i == 0:\n            current_product = 1\n        else:\n            current_product *= arr[i]\n        \n        if current_product > max_product:\n            prev_max_product = max_product\n            max_product = current_product\n        \n        if i >= 2:\n            if current_product <= prev_max_product:\n                prev_max_product = current_product\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n\n        if arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # Initialize two pointers i and j to the first and last element of the array\n    i, j = 0, n - 1\n    # Initialize a variable max_product to store the maximum product formed so far\n    max_product = arr[i] * arr[j]\n    # Initialize a variable min_product to store the minimum product formed so far\n    min_product = arr[i] * arr[j]\n    # Initialize a variable prev_product to store the product of the previous two elements of the increasing subsequence\n    prev_product = arr[i] * arr[j]\n    # Loop through the array from the second element\n    for k in range(1, n - 1):\n        # Calculate the product of the kth element and the previous two elements of the increasing subsequence\n        current_product = arr[i] * arr[i + k] * arr[j - k]\n        # Update max_product and min_product if the current product is greater than max_product and min_product respectively\n        if current_product > max_product:\n            max_product = current_product\n            min_product = arr[i] * arr[j]\n        elif current_product < min_product:\n            min_product = current_product\n            max_product = arr[i] * arr[j]\n        else:\n            pass\n        # Update prev_product to the current product\n        prev_product = current_product\n    # Return the maximum product formed by the increasing subsequence\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = float('-inf')\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            temp_product = 1\n            for k in range(i, j):\n                temp_product *= arr[k]\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    add_list = []\n    for i in range(len(test_tup)-1):\n        add_list.append(test_tup[i] + test_tup[i+1])\n    return tuple(add_list)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup[0]\n    else:\n        return add_pairwise(test_tup[1:]) + test_tup[0]"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError('Input tuple must have at least two elements.')\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Check if the given tuple is of even length\n    if len(test_tup) % 2 == 1:\n        raise ValueError(\"The given tuple must have an even number of elements.\")\n    \n    # Calculate the sum of the first and second elements\n    first_sum = test_tup[0] + test_tup[1]\n    \n    # Calculate the sum of the last and second-to-last elements\n    last_sum = test_tup[-1] + test_tup[-2]\n    \n    # Calculate the sum of the rest of the elements\n    rest_sum = sum(test_tup[2:])\n    \n    # Calculate the final sum\n    final_sum = first_sum + last_sum + rest_sum\n    \n    return final_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    # initialize the sum of the first and last elements to 0\n    total = test_tup[0] + test_tup[-1]\n    # loop through the list of pairs (except the last pair)\n    for i in range(n-2):\n        total += test_tup[i+1] + test_tup[i+2]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize variables\n    prev_elem = test_tup[0]\n    total = 0\n\n    # Iterate through the tuple\n    for elem in test_tup:\n        # Calculate the pairwise addition\n        add = prev_elem + elem\n        # Update the total sum\n        total += add\n        # Update the previous element\n        prev_elem = elem\n\n    # Return the total sum\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print(\"Tuple must have at least two elements.\")\n        return\n    else:\n        total = 0\n        for i in range(len(test_tup)-1):\n            total += test_tup[i] + test_tup[i+1]\n        return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum to 0\n    total = 0\n    \n    # loop through the tuple and add the pairwise additions to the total\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    \n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Multiply all elements of the array\n    product = 1\n    for element in arr:\n        product = (product * element) % n\n    \n    # Return the product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array `arr` and an integer `n` as inputs. It calculates the product of the array's \n    multiplication modulo n and returns the result.\n    '''\n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array arr and a number n as input, and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product variable to 1\n    product = 1\n    \n    # Iterate over the array and multiply each element with the product\n    for num in arr:\n        product *= num\n    \n    # Return the result modulo n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result*i) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the result variable to 1\n    result = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Multiply the result by the current number and take the remainder modulo n\n        result = (result * num) % n\n\n    # Return the final result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # initialize the result\n    result = 1\n    \n    # loop through the array and multiply each element by the result modulo n\n    for num in arr:\n        result = (result * num) % n\n    \n    # return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array `arr` and an integer `n` as input and returns the product of their multiplication modulo n.\n    '''\n    product = 1\n\n    for i in range(len(arr)):\n        product *= arr[i]\n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # initialize a variable to store the product\n    product = 1\n    \n    # loop through the array and multiply the product with each element\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    \n    # return the result\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    for i in range(len(l)):\n        if i == 0:\n            if l[i] == l[i+1]:\n                return True\n            else:\n                continue\n        else:\n            if l[i] == l[i-1]:\n                return True\n            else:\n                continue\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    # Check if the list contains only unique elements\n    if len(l)!= len(set(l)): \n        return False\n\n    # Check if the list contains only consecutive elements\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1: \n        return True\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # Check if the list is empty\n    if not l:\n        return False\n\n    # Initialize variables to keep track of the current and previous numbers\n    prev = None\n    current = None\n\n    # Iterate over the list\n    for num in l:\n\n        # Check if the number is not consecutive\n        if (prev is not None and current == prev + 1) or (prev is None and current == 1):\n            return True\n\n        # Update the current and previous numbers\n        prev = current\n        current = num\n\n    # If the loop completes without returning True, the list contains consecutive numbers\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    count = 0\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a set from test_list1 and test_list2\n    common_elements = set(test_list1).intersection(set(test_list2))\n    # create a new list and append the elements that are present in both lists\n    new_list = []\n    for element in test_list1:\n        if element in common_elements and element not in new_list:\n            new_list.append(element)\n    for element in test_list2:\n        if element in common_elements and element not in new_list:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create an empty set to store the unique elements of the first list\n    set1 = set(test_list1)\n    # create an empty set to store the unique elements of the second list\n    set2 = set(test_list2)\n    # create an empty set to store the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of the elements in the first list\n    set1 = set(test_list1)\n    # Create a set of the elements in the second list\n    set2 = set(test_list2)\n    # Create an empty set to store the common elements\n    common_elements = set()\n    # Iterate over the elements in set1\n    for element in set1:\n        # Check if the element exists in set2 and add it to the common_elements set if it does\n        if element in set2:\n            common_elements.add(element)\n    # Convert the common_elements set back to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create two dictionaries for fast lookup\n    dict1 = {}\n    dict2 = {}\n    \n    # Add elements from each list to dictionaries\n    for elem in test_list1:\n        if elem not in dict1:\n            dict1[elem] = True\n    \n    for elem in test_list2:\n        if elem not in dict2:\n            dict2[elem] = True\n    \n    # Find common elements and create a new list with their intersection\n    common_elems = []\n    for elem in dict1:\n        if elem in dict2 and dict1[elem]:\n            common_elems.append(elem)\n            \n    return common_elems"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set from the first list and then intersect it with the second list to get the intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return tuple(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersection.append(test_list1[i])\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the test_list1 and test_list2 into sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets using the & operator\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back into a list and return it\n    return list(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    set_list1 = set(test_list1)\n    set_list2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set_list1.intersection(set_list2)\n\n    # Convert the intersection set back to a list\n    result = list(intersection)\n\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two lists of tuples as input and returns a new list containing only the unique elements present in both input lists.\n    '''\n\n    # Create a set from both lists to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets and convert it back to a list\n    result = list(set1.intersection(set2))\n\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = str1.replace(ch,newch)\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(str1)\n    # Loop through the list and replace the character\n    for i in range(len(char_list)):\n        if char_list[i] == ch:\n            char_list[i] = newch\n    # Join the list back into a string\n    result_str = ''.join(char_list)\n    return result_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            newstr += newch\n        else:\n            newstr += str1[i]\n    return newstr"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Args:\n    str1 (str): The input string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the old character with.\n\n    Returns:\n    str: The modified string with the old character replaced with the new character.\n    \"\"\"\n    # Convert the input string to a list of characters\n    str1_list = list(str1)\n    # Loop through the list of characters and replace the old character with the new character\n    for i, c in enumerate(str1_list):\n        if c == ch:\n            str1_list[i] = newch\n    # Convert the list of characters back to a string and return it\n    return ''.join(str1_list)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(Counter(dict1).items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Sort the dictionary by value in descending order\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    # Use Counter to count the frequency of each value in the sorted dictionary\n    count_dict = Counter(sorted_dict)\n    # Sort the Counter by key in ascending order\n    sorted_count_dict = sorted(count_dict.items(), key=lambda x: x[0])\n    return sorted_count_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1])\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.items())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # Sort the Counter object in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # Return the sorted dictionary\n    return dict(sorted_counter)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object to count the occurrences of values in the dictionary\n    counter = Counter(dict1.values())\n\n    # Sort the Counter object by values in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Create a new dictionary with the sorted values\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    sorted_count = count.most_common()\n    sorted_dict = {}\n    for key, value in sorted_count:\n        sorted_dict[key] = value\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    # Find the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # Calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the largest and smallest value in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # find the sum of these two values\n    sum_val = max_val + min_val\n\n    return sum_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize two variables to store the largest and smallest values\n    max_val = float('-inf')\n    min_val = float('inf')\n    \n    # Iterate through the array and update the max and min values\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        if num < min_val:\n            min_val = num\n    \n    # Return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the sum of the largest and smallest value in the array.\n\n    Args:\n    nums: a list or tuple of numbers\n\n    Returns:\n    the sum of the largest and smallest value in the array\n    \"\"\"\n    # find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # calculate the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b\\w*\\b'\n    lowercase_substrings = re.findall(pattern, string.lower())\n    for lowercase_substring in lowercase_substrings:\n        string = string.replace(lowercase_substring, '')\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function will remove all lowercase substrings from the given string.\n    '''\n    # Define the regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Find all lowercase substrings in the given string and replace them with an empty string\n    new_string = pattern.sub('', string)\n    return new_string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Use the re.findall() method to find all lowercase substrings in the string\n    lower_substrings = re.findall(pattern, str1)\n    # Use the list comprehension to remove all lowercase substrings from the string\n    cleaned_str = ''.join(filter(str.isupper, str1))\n    # Return the cleaned string\n    return cleaned_str"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z][a-z]+\\b', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'(?i)[a-z]+', '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # Find all lowercase substrings in the given string using the pattern\n    substrings = re.findall(pattern, str1)\n\n    # Remove the lowercase substrings from the string\n    str2 = re.sub(pattern, '', str1)\n\n    # Return the modified string\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_lowercase(str1):\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.findall(r'[a-z]', str1)\n    for i in lowercase:\n        str1 = str1.replace(i, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes any lowercase substrings from it.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    result = pattern.sub('', string)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # remove lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    str1 = pattern.sub('', str1)\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a Python function to find the first digit of a given number.\n    \"\"\"\n    # convert the given number to a string\n    n = str(n)\n    # convert the string to a list of digits\n    digits = list(n)\n    # return the first digit of the list of digits\n    return digits[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n) :\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Check if the given number is an integer\n    if not isinstance(n, int):\n        return None\n\n    # Convert the given number to a string\n    str_n = str(n)\n\n    # Find the first character of the string\n    first_char = str_n[0]\n\n    # Convert the first character to an integer\n    first_int = int(first_char)\n\n    # Return the first integer\n    return first_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    \"\"\"\n    This function takes a positive integer as input and returns the first digit of the number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n) :\n    \"\"\"\n    This function takes a positive integer as input and returns the first digit of the number.\n    \"\"\"\n    first_digit = n % 10   # take the last digit of the number\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # get the first character of the string\n    first_char = num_str[0]\n    # convert the first character to an integer\n    first_int = int(first_char)\n    # return the first integer\n    return first_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Check if the input is a positive integer\n    if type(n)!= int or n < 0:\n        return \"Error: Input must be a positive integer.\"\n    # Convert the number to a string\n    n_str = str(n)\n    # Check if the string has only one character\n    if len(n_str)!= 1:\n        return \"Error: Input must be a single digit.\"\n    # Return the first character of the string\n    return n_str[0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns only the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_lst = []\n    for i in lst:\n        if i % 2!= 0:\n            odd_lst.append(i)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list: \n        if i % 2!= 0: #checking if the number is odd \n            odd_list.append(i) #adding the odd number to a new list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = sum(x**3 for x in range(1, n+1))\n    sum_natural = sum(range(1, n+1))\n    return abs(sum_cubes - sum_natural)\n\nprint(difference(10)) # Output: 210"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(x**3 for x in range(1, n+1))\n    \n    # Find the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return abs(sum_of_cubes - sum_of_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    \n    for i in range(1,n+1):\n        sum_cubes += i**3\n        sum_natural += i\n        \n    diff = abs(sum_cubes - sum_natural)\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        sum_of_natural_numbers += i\n    difference = abs(sum_of_cubes - sum_of_natural_numbers)\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Function to calculate cube of a number\n    def cube(num):\n        return num ** 3\n    \n    # Calculate sum of cubes of first n natural numbers\n    cubes = sum(cube(i) for i in range(1, n+1))\n    \n    # Calculate sum of first n natural numbers\n    natural_sum = sum(range(1, n+1))\n    \n    # Return the difference between the two sums\n    return cubes - natural_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    def sum_of_cubes(n):\n        \"\"\"\n        Write a python function to find the sum of cubes of the first n natural numbers.\n        \"\"\"\n        return n * (n+1) * (2*n+1) // 6\n    \n    return sum_of_cubes(n) - sum_of_natural_numbers(n)\n\ndef sum_of_natural_numbers(n):\n    \"\"\"\n    Write a python function to find the sum of the first n natural numbers.\n    \"\"\"\n    return n * (n+1) // 2"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(n+1))\n    \n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    \n    # Calculate the difference between the two sums\n    difference = sum_of_cubes - sum_of_numbers\n    \n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through all pairs of elements in the array\n    for i in range(N):\n        for j in range(i+1, N):\n            # Check if xor of A[i] and A[j] is odd\n            if (A[i] ^ A[j]) % 2!= 0:\n                # Increment count if odd xor is found\n                count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    xor_value = 0\n    \n    for i in range(N):\n        xor_value ^= A[i]\n        count += xor_value & 1\n        xor_value >>= 1\n        \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    # initializing the variables\n    count = 0\n    xor = 0\n    \n    # loop for iterating over all pairs in the array\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    \n    # returning the count of odd xor pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+2, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize an empty string to hold the modified string\n    modified_string = ''\n    # loop through each character in the string\n    for char in string:\n        # check if the character is uppercase\n        if char.isupper():\n            # if it is, convert it to lowercase\n            modified_string += char.lower()\n        else:\n            # if it's not, convert it to uppercase\n            modified_string += char.upper()\n    # return the modified string\n    return modified_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize an empty string to store the result\n    result = \"\"\n    # loop through each character in the input string\n    for char in string:\n        # if the character is a letter, toggle its case and append it to the result\n        if char.isalpha():\n            result += char.upper() if char.islower() else char.lower()\n        # if the character is not a letter, append it as is to the result\n        else:\n            result += char\n    # return the final result\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # If the character is a lowercase letter, make it uppercase\n        if string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n        # If the character is an uppercase letter, make it lowercase\n        elif string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n    # Return the modified string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(chr(ord(c) ^ 32) if c.isalpha() else c for c in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    for i in range(10):\n        d1 = n1 % 10\n        d2 = n2 % 10\n        distance += abs(d1 - d2)\n        n1 //= 10\n        n2 //= 10\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n\n    # Convert the numbers to strings to be able to easily compare digits\n    num1_str = str(n1)\n    num2_str = str(n2)\n\n    # Initialize a variable to store the sum of the differences\n    sum_diff = 0\n\n    # Loop through each digit in the strings\n    for i in range(len(num1_str)):\n        # Convert the digit to an integer\n        digit1 = int(num1_str[i])\n        digit2 = int(num2_str[i])\n\n        # Find the absolute difference between the digits\n        diff = abs(digit1 - digit2)\n\n        # Add the absolute difference to the running sum of differences\n        sum_diff += diff\n\n    # Return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert both integers to lists of digits\n    digit_list1 = [int(digit) for digit in str(n1)]\n    digit_list2 = [int(digit) for digit in str(n2)]\n\n    # Calculate the sum of the per-digit differences\n    digit_distance_sum = sum([abs(digit1 - digit2) for digit1, digit2 in zip(digit_list1, digit_list2)])\n\n    return digit_distance_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    # Convert both numbers to strings\n    str1 = str(n1)\n    str2 = str(n2)\n    # Loop through the digits of the two numbers\n    for i in range(len(str1)):\n        if int(str1[i])!= int(str2[i]):\n            # Calculate the per-digit difference and add it to the distance variable\n            distance += abs(int(str1[i]) - int(str2[i]))\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize a variable to store the sum of differences\n    total_sum = 0\n    \n    # Extract the digits from the two numbers\n    n1_digits = list(str(n1))\n    n2_digits = list(str(n2))\n    \n    # Check the length of both numbers to ensure they have the same number of digits\n    if len(n1_digits)!= len(n2_digits):\n        return \"Invalid input. Both numbers should have the same number of digits.\"\n        \n    # Loop through each digit in the two numbers\n    for i in range(len(n1_digits)):\n        # Calculate the difference between the two digits\n        digit_diff = int(n1_digits[i]) - int(n2_digits[i])\n        \n        # Add the difference to the total sum\n        total_sum += digit_diff\n        \n    # Return the total sum of differences\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1-n2)\n    digit_sum = 0\n    \n    while diff > 0:\n        digit_sum += diff % 10\n        diff //= 10\n        \n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(10):\n        sum += abs(n1%10 - n2%10)\n        n1 //= 10\n        n2 //= 10\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    # create an empty list to store the differences between each digit of n1 and n2\n    diff_list = []\n\n    # loop through each digit of n1 and n2\n    for i in range(10):\n        # calculate the difference between the i-th digit of n1 and n2\n        digit_diff = abs(n1 % 10 - n2 % 10)\n        # add the difference to the list of differences\n        diff_list.append(digit_diff)\n        # shift the digits of n1 and n2 by one place to the right\n        n1 //= 10\n        n2 //= 10\n\n    # return the sum of the differences in the list\n    return sum(diff_list)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert input numbers to strings and convert to lists of digits\n    num1_digits = list(str(n1))\n    num2_digits = list(str(n2))\n    # calculate the sum of the differences between the lists of digits\n    digit_diff_sum = sum(abs(int(num1_digits[i]) - int(num2_digits[i])) for i in range(len(num1_digits)))\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_sum = 0\n\n    # Convert each number to a string of digits\n    n1_digits = [str(digit) for digit in n1]\n    n2_digits = [str(digit) for digit in n2]\n\n    # Loop through each digit and calculate the difference\n    for i in range(len(n1_digits)):\n        digit_diff = int(n1_digits[i]) - int(n2_digits[i])\n        total_sum += digit_diff ** 2\n\n    return total_sum ** 0.5"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n\n    Args:\n    a (list): A list of integers.\n    size (int): The size of the sublist to consider.\n\n    Returns:\n    int: The sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(a):\n        raise ValueError(\"Size of sublist should be less than or equal to the length of the list.\")\n    max_sum = float('-inf')\n    max_sublist = []\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if i >= size - 1:\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                max_sublist = [a[i]]\n            elif curr_sum == max_sum:\n                max_sublist.append(a[i])\n    return max(max_sublist)"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size <= 1:\n        return 0\n    \n    current_sum = a[0]\n    maximum_sum = a[0]\n    start = 0\n    \n    for i in range(1, size):\n        current_sum += a[i]\n        \n        if current_sum > maximum_sum:\n            maximum_sum = current_sum\n            start = i\n            \n        elif current_sum < 0:\n            current_sum = a[i]\n            start = i\n            \n    return maximum_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(a) - size + 1):\n        current_sum = sum(a[i:i+size])\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    current_end = 0\n\n    # iterate over the input list\n    for i in range(size):\n        # update the current sum\n        current_sum += a[i]\n\n        # move the current end to the right\n        current_end = i\n\n        # check if the current sum is larger than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # if the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    This function takes a list and a size as input and returns the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size > len(arr):\n        raise ValueError(\"Size cannot be greater than length of array\")\n\n    max_sum = arr[0]\n    curr_sum = arr[0]\n\n    for i in range(1, size):\n        curr_sum = max(arr[i], curr_sum + arr[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size == 1:\n        return max(a)\n    \n    max_ending_here = a[0]\n    max_so_far = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        raise ValueError(\"Size cannot be greater than the length of the list.\")\n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # find the union of the two tuples using the set union operation\n    union = set(test_tup1) | set(test_tup2)\n    \n    # sort the elements in ascending order\n    sorted_union = sorted(union)\n    \n    # output the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use set to find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Convert the set to a list and sort it\n    sorted_union = sorted(list(union_set))\n    \n    # Print the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Get the union of two lists using the + operator\n    union_list = list(set(test_tup1) | set(test_tup2))\n    # Sort the union list in ascending order\n    union_list.sort()\n    # Return the sorted union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = test_tup1.union(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = set(test_tup1).union(set(test_tup2))\n    union_list = sorted(list(union_set))\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Union of the two tuples\n    union_tup = test_tup1 + test_tup2\n    # Sort the union of the two tuples in ascending order\n    sorted_union_tup = sorted(union_tup)\n    # Print the union of the two tuples in sorted order\n    print(sorted_union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set of unique elements in test_tup1 and test_tup2\n    union_set = set(test_tup1 + test_tup2)\n    # convert the set to a list and sort it\n    sorted_union = sorted(list(union_set))\n    # print the sorted list\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # First, convert both tuples to lists and convert them to sets to remove duplicates\n    list1 = list(set(test_tup1))\n    list2 = list(set(test_tup2))\n\n    # Then, combine the two lists and convert them back to tuples\n    union_list = tuple(sorted(set(list1 + list2)))\n\n    # Finally, print the union of the elements in sorted order\n    print(\"Union of elements: \", end='')\n    for element in union_list:\n        print(element, end=' ')"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a new tuple to store the union of the two given tuples\n    new_tuple = ()\n    # loop through each element in the two given tuples\n    for element in test_tup1:\n        # check if the element is already in the new_tuple, if not, add it\n        if element not in new_tuple:\n            new_tuple += (element,)\n    # loop through each element in the second tuple\n    for element in test_tup2:\n        # check if the element is already in the new_tuple, if not, add it\n        if element not in new_tuple:\n            new_tuple += (element,)\n    # sort the new_tuple in ascending order and output it\n    sorted_new_tuple = sorted(new_tuple)\n    print(sorted_new_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples using the + operator\n    combined_tup = test_tup1 + test_tup2\n\n    # Convert the combined tuple to a set to remove duplicates\n    unique_tup = set(combined_tup)\n\n    # Convert the set back to a list and sort it in ascending order\n    sorted_tup = sorted(list(unique_tup))\n\n    # Output the sorted union\n    print(\"The union of the two tuples is:\", sorted_tup)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    length = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            length += 1\n        else:\n            if length > max_length:\n                max_length = length\n            length = 1\n    if length > max_length:\n        max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    # Initialize variables to store the length of the longest sublist seen so far\n    max_length = 1\n    current_length = 1\n\n    # Iterate through the list and update the current_length as we go\n    for i in range(1, len(lst)):\n        # If we encounter a sublist longer than the current sublist, update both max_length and current_length\n        if lst[i] > lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n\n    # Update max_length with the final value of current_length\n    max_length = max(max_length, current_length)\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    max_length = 0  \n    current_length = 0  \n    sublist = []  \n    \n    for i in lst:  \n        if len(sublist) == 0:  \n            sublist.append(i)  \n            current_length += 1  \n        else:  \n            if i == sublist[-1]:  \n                sublist.append(i)  \n                current_length += 1  \n            else:  \n                if current_length > max_length:  \n                    max_length = current_length  \n                sublist.pop(0)  \n                current_length -= 1  \n                sublist.append(i)  \n                current_length += 1  \n                \n    if current_length > max_length:  \n        max_length = current_length  \n            \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables to store the length of the longest sublist and the current sublist length\n    max_length = 0\n    current_length = 0\n\n    # Loop through each element in the list\n    for element in lst:\n        # Increment the current sublist length if the current element is not equal to the previous element\n        if element!= lst[current_length-1]:\n            current_length += 1\n        # If the current element is equal to the previous element, increment the current sublist length\n        else:\n            current_length += 1\n        # Update the maximum length if the current sublist length is greater than the maximum length\n        if current_length > max_length:\n            max_length = current_length\n\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i:i+5]\n        max_length = max(max_length, len(sublist))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n\n    max_length = 0\n    current_length = 0\n    current_sublist = []\n\n    for num in lst:\n        current_length += 1\n        current_sublist.append(num)\n\n        if len(current_sublist) > max_length:\n            max_length = len(current_sublist)\n\n        if len(current_sublist) > 1 and num == current_sublist[-2]:\n            current_sublist = current_sublist[:-1]\n            current_length -= 1\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)+1):  \n            sublist = lst[i:j]  \n            if max_length < len(sublist):  \n                max_length = len(sublist)  \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[j]) - len(lst[i]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    length = 0\n    current_length = 0\n\n    # Iterate over the list\n    for num in lst:\n        # Check if the current number is greater than the current maximum\n        if num > current_length:\n            # If yes, update the current maximum\n            current_length = num\n        # Add the current number to the current length\n        current_length += num\n        # Update the length if necessary\n        if current_length > length:\n            length = current_length\n\n    # Return the length of the longest sublist\n    return length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=[^\\\\])\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'[\"](.*?)[\"]')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\"([^\\\"]*)\\\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_values(text):\n    # Define a regular expression pattern to match strings enclosed in quotation marks\n    pattern = r'\"([^\"]+)\"'\n    # Use the re.finditer function to find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # Create an empty list to store the extracted values\n    values = []\n    # Loop through the matches and add the values to the values list\n    for match in matches:\n        values.append(match.group(1))\n    # Return the list of extracted values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"[^\"]*\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    # Initialize a counter for the number of pairs\n    count = 0\n    \n    # Loop through the array\n    for i in range(n):\n        # Loop through the remaining elements in the array\n        for j in range(i+1, n):\n            # Check if the elements at the current indices are equal\n            if arr[i]!= arr[j]:\n                # Increment the counter for the number of pairs\n                count += 1\n    \n    # Return the final count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n): \n    count = 0 \n    for i in range(n): \n        for j in range(i+1, n): \n            count += 1 \n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # create an empty list to store the characters\n    characters = []\n    # iterate over each character in the string\n    for char in word:\n        # add the character to the list of characters\n        characters.append(char)\n    # return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n\n    Args:\n        word: a string to split\n\n    Returns:\n        a list of characters from the input word\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # initialize the sum variable to 0\n    sum_val = 0\n    # iterate through the list of digits and add each digit to the sum\n    for digit in digits:\n        sum_val += digit\n    # return the sum of the digits\n    return sum_val"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # calculate the sum of the digits\n    sum = sum(digits)\n    # return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize the sum variable to 0\n    sum_val = 0\n    # Loop through each digit in the string\n    for digit in num_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Add the integer to the sum variable\n        sum_val += digit_int\n    # Return the sum of all the integers in the string\n    return sum_val"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum = 0\n    # Loop through each digit of the integer\n    while n > 0:\n        # Get the rightmost digit of n\n        digit = n % 10\n        # Add the digit to the sum\n        sum += digit\n        # Remove the rightmost digit of n\n        n //= 10\n    # Return the sum of digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the number to a string and remove any leading zeros\n    num_str = str(n).lstrip('0')\n    # initialize the sum to 0\n    sum = 0\n    # loop over each digit in the number\n    for digit in num_str:\n        # convert the digit to an integer and add it to the sum\n        sum += int(digit)\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and iterate over its characters\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(map(int, str(n)))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the given integer to a string\n    num_str = str(n)\n    \n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate over each digit in the string and add it to the sum\n    for digit in num_str:\n        total += int(digit)\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(len(list1) - 1):\n            if list1[i] > list1[i+1]:\n                return False\n    else:\n        return True\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if len(list1) <= 1:\n        return True\n    \n    # Check if the first element is smaller than the last element\n    if list1[0] > list1[-1]:\n        return False\n    \n    # Check if the first two elements are smaller than the last two elements\n    for i in range(len(list1) - 2):\n        if list1[i] > list1[i + 2]:\n            return False\n    \n    # If all the elements are sorted, return True\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(1, len(list1)):\n            if list1[i-1] > list1[i]:\n                return False\n        return True\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    :param lst: A list to check if it's sorted or not.\n    :return: True if the list is sorted, else False.\n    \"\"\"\n\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty or not\n    if len(list1) <= 1:\n        return True\n    # Check if the first element is greater than the last element\n    elif list1[0] > list1[-1]:\n        return False\n    # Recursively check the rest of the list\n    else:\n        return issort_list(list1[1:-1])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if it is sorted in ascending order, else False.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # create an empty list\n    result = []\n    # iterate over the length of the list\n    for i in range(length):\n        # create an empty dictionary\n        new_dict = {}\n        # append the dictionary to the list\n        result.append(new_dict)\n    # return the list\n    return result"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the given list\n    for sublist in list1:\n        # Sort the sublist in ascending order using sorted() function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n        # Sort the sublist using the sort() method\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    # initialize an empty set to store unique numbers\n    unique_nums = set()\n\n    # iterate over the lists and add the unique numbers to the set\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n\n    # convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set from the first list and remove duplicates\n    set1 = set(nums[0])\n    for i in range(1, len(nums)):\n        set1 = set1.union(set(nums[i]))\n    # convert the set back to a list and return it\n    return list(set1)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for i in nums:\n        if i not in unique_nums:\n            unique_nums.append(i)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    result = []\n\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.add(num)\n            result.append(num)\n\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # Create a dictionary to store the unique elements\n    unique_dict = {}\n\n    # Iterate through the list and add each element to the dictionary\n    for num in nums:\n        unique_dict[num] = True\n\n    # Create a new list containing only the unique elements\n    unique_nums = []\n    for num in unique_dict:\n        unique_nums.append(num)\n\n    # Return the new list of unique elements\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Set to store unique numbers\n    unique_nums = []\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is not already in the unique_nums set, add it\n        if num not in unique_nums:\n            unique_nums.append(num)\n    # Return the unique numbers list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    # Create a set to store unique numbers\n    unique_nums = set()\n\n    # Iterate through each list in the input list\n    for lst in nums:\n        # Iterate through each number in the list\n        for num in lst:\n            # If the number is already in the set, remove it from the list\n            if num in unique_nums:\n                lst.remove(num)\n            # Otherwise, add the number to the set\n            else:\n                unique_nums.add(num)\n\n    # Return the modified list\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # create a set of unique numbers in the list\n    unique_numbers = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    unique_numbers = list(set(list_data))\n    return unique_numbers[0] * unique_numbers[1]"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers in the list\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of integers and calculates the product of the unique numbers in the list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers from the list\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    # Return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    \n    for number in unique_numbers:\n        product *= number\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # create a set of unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number  # multiply all the unique numbers together\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    area = 2*3.14159*(r**2 + h)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    surface_area = 2 * pi * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for the surface area of a cylinder:\n    # surface area = 2 * pi * r * h\n    surface_area = 2 * 3.14159 * r * h\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Calculate the surface area of a cylinder.\n    \n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n    \n    Returns:\n    float: The surface area of the cylinder.\n    '''\n    \n    # calculate the surface area using the formula:\n    # A = 2 * pi * r * h\n    A = 2 * math.pi * r * h\n    \n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n    \n    Args:\n    r (float): Radius of the cylinder.\n    h (float): Height of the cylinder.\n    \n    Returns:\n    float: The surface area of the cylinder.\n    \"\"\"\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * h * r\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: surface area of the cylinder\n    '''\n\n    return 2 * 3.14159 * r * h + 2 * 3.14159 * r**2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i=i-j+1\n            j=0\n    if j==len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if B is a sublist of A\n    if len(A) >= len(B) and B in A:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not isinstance(A, list) or not isinstance(B, list):\n        return False\n\n    if len(A) > len(B):\n        return False\n\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if all(x==y for x,y in zip(A[i:i+len(B)],B)):\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A: \n        return True \n    if len(A) < len(B): \n        return False \n    if B[0] in A: \n        return is_Sub_Array(A[1:],B[1:])\n    else: \n        return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #check if the length of B is smaller than the length of A\n    if len(B) > len(A):\n        return False\n\n    #iterate through A and check if any element in B is present\n    for i in range(len(A)):\n        if B[0] == A[i]:\n            #check if the rest of B is also present in A\n            for j in range(1,len(B)):\n                if B[j] not in A[i:]:\n                    return False\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n\n    if not A: \n        return True \n\n    for i in range(len(B)): \n        if A[0:i+1] == B: \n            return True \n\n    return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    # Check if the length of the two arrays are same\n    if len(A)!= len(B):\n        return False\n    # Traverse the first array and check if all elements are present in the second array\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"Input should be an integer\")\n    # Factorial of 0 is 1\n    if n == 0:\n        return 1\n    # Calculate the factorial recursively\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    factorial = 1\n    num = n\n\n    # find the factorial of the given number\n    while num > 0:\n        factorial *= num\n        num -= 1\n\n    # find the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = int(factorial % 10)\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # initialize a variable to store the last digit in factorial\n    last_digit_factorial = 0\n    # loop through each digit in the factorial of n and add it to the variable\n    for i in range(9):\n        last_digit_factorial += int(str(n)[-i-1])\n    # return the last digit in factorial\n    return last_digit_factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes an integer as input and returns the last digit of its factorial.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # initialize the last digit to 0\n    last_digit = 0\n    \n    # loop through each digit of the factorial\n    for i in range(1, n+1):\n        \n        # find the product of all digits\n        product = 1\n        for j in range(1, i+1):\n            product *= j\n        \n        # find the last digit of the product\n        last_digit = int(str(product)[-1])\n        \n        # print the last digit of the product\n        print(last_digit)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        return last_Digit_Factorial(n//10) + n % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert number to string\n    str_n = str(n)\n    \n    # find length of string\n    len_n = len(str_n)\n    \n    # find the last digit in the string\n    last_digit = str_n[len_n-1]\n    \n    # convert last digit to integer\n    last_digit = int(last_digit)\n    \n    # find the factorial of the number\n    factorial = 1\n    \n    for i in range(1, n+1):\n        factorial *= i\n        \n    # find the last digit of factorial\n    last_factorial_digit = factorial % 10\n    \n    # return the last digit of factorial\n    return last_factorial_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    i = 0\n    for list_ in (list1, list2, list3):\n        for _ in range(len(list_)):\n            flat_list.append(list_[i])\n            i = (i + 1) % len(list_)\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] <= list2[j] <= list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list1[i] <= list3[k] <= list2[j]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] <= list1[i] <= list3[k]:\n            result.append(list2[j])\n            j += 1\n        elif list2[j] <= list3[k] <= list1[i]:\n            result.append(list2[j])\n            j += 1\n        elif list3[k] <= list1[i] <= list2[j]:\n            result.append(list3[k])\n            k += 1\n        elif list3[k] <= list2[j] <= list1[i]:\n            result.append(list3[k])\n            k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Iterate over each element in the first list\n    for elem in list1:\n        # Add the element to the interleaved list\n        interleaved_list.append(elem)\n        # If the length of the interleaved list is less than the total length of the lists,\n        # add the corresponding element from the second list\n        if len(interleaved_list) < len(list1) + len(list2):\n            interleaved_list.append(list2[interleaved_list.index(elem)])\n        # If the length of the interleaved list is less than the total length of the lists,\n        # add the corresponding element from the third list\n        if len(interleaved_list) < len(list1) + len(list2) + len(list3):\n            interleaved_list.append(list3[interleaved_list.index(elem)])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # create an empty list to store the interleaved elements\n    interleaved_list = []\n\n    # loop through the first list and add each element to the interleaved list\n    for element in list1:\n        interleaved_list.append(element)\n\n    # loop through the second list and add each element to the interleaved list\n    for element in list2:\n        interleaved_list.append(element)\n\n    # loop through the third list and add each element to the interleaved list\n    for element in list3:\n        interleaved_list.append(element)\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(max(len(list1), len(list2), len(list3))):\n        if i < len(list1):\n            result.append(list1[i])\n        if i < len(list2):\n            result.append(list2[i])\n        if i < len(list3):\n            result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Find the length of the shortest list\n    min_len = min(len(list1), len(list2), len(list3))\n    # Create an empty list to store the interleaved list\n    interleaved_list = []\n    # Loop through each list and add its elements to the interleaved list\n    for i in range(min_len):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # If the shortest list is shorter than the entire interleaved list, add the remaining elements from the shortest list to the interleaved list\n    if min_len < len(list1):\n        for i in range(len(list1), min_len):\n            interleaved_list.append(list1[i])\n    if min_len < len(list2):\n        for i in range(len(list2), min_len):\n            interleaved_list.append(list2[i])\n    if min_len < len(list3):\n        for i in range(len(list3), min_len):\n            interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    if i < len(list1):\n        result.append(list1[i:])\n    if j < len(list2):\n        result.append(list2[j:])\n    if k < len(list3):\n        result.append(list3[k:])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Combine the 3 lists into a single list\n    combined_list = list1 + list2 + list3\n    # Flatten the list to get a single list of all the elements\n    flat_list = [item for sublist in combined_list for item in sublist]\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return \"Error: All lists must have the same length.\"\n    \n    # Create an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Iterate through each list and append its elements to the interleaved list in alternating order\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create a set of unique elements in both tuples\n    unique_elements = set(test_tup1 + test_tup2)\n\n    # Create a dictionary to store the count of each unique element in each tuple\n    count_dict = {}\n\n    # Loop through each unique element in both tuples\n    for element in unique_elements:\n        # Check if the element is present in both tuples\n        if element in test_tup1 and element in test_tup2:\n            # If the element is present in both tuples, increment its count in the dictionary\n            count_dict[element] = count_dict.get(element, 0) + 1\n\n    # Create a list to store the dissimilar elements\n    dissimilar_elements = []\n\n    # Loop through each element in the dictionary\n    for element, count in count_dict.items():\n        # If the count of the element in one tuple is less than the count of the element in the other tuple,\n        # add the element to the dissimilar list\n        if count < count_dict[element]:\n            dissimilar_elements.append(element)\n\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Convert the tuples into lists to make it easier to compare them\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n\n    # Loop through both lists and compare their elements\n    for i in range(len(lst1)):\n        if lst1[i]!= lst2[i]:\n            # If the element is different, add it to the dissimilar list\n            dissimilar_list.append(lst1[i])\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and returns a list containing the dissimilar elements between the two tuples.\n    '''\n    # Using set() function to get the unique elements in each tuple\n    unique_tup1 = set(test_tup1)\n    unique_tup2 = set(test_tup2)\n    \n    # Using the set difference method to find the dissimilar elements\n    dissimilar_elements = unique_tup1.symmetric_difference(unique_tup2)\n    \n    # Converting the set to a list and returning the result\n    return list(dissimilar_elements)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of the elements that are present in test_tup1 but not in test_tup2.\n    '''\n    dissimilar_list = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_list.append(element)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    # create a dictionary to store the count of each element in the first tuple\n    count_dict = {}\n    for element in test_tup1:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    # loop through the second tuple and subtract the count of each element from the count dictionary\n    for element in test_tup2:\n        if element in count_dict:\n            count_dict[element] -= 1\n        else:\n            count_dict[element] = -1\n\n    # create a list of the dissimilar elements\n    dissimilar_list = [element for element in count_dict if count_dict[element] > 0]\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list containing all the dissimilar elements in the two tuples.\n    \"\"\"\n    # create a set to store the common elements in both tuples\n    common_set = set(test_tup1) & set(test_tup2)\n    # create a set to store the dissimilar elements in the two tuples\n    dissimilar_set = set(test_tup1) - common_set - set(test_tup2)\n    # convert the sets to a list and return it\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_elements = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_elements.append(even_ele(i, even_fnc))\n        elif isinstance(i, list):\n            even_elements.append(even_list(i, even_fnc))\n        elif even_fnc(i):\n            even_elements.append(i)\n    return even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # create a list to store the even elements\n    even_list = []\n    # iterate over each element in the tuple\n    for element in test_tuple:\n        # if the element is an even number, append it to the even_list\n        if even_fnc(element):\n            even_list.append(element)\n    # return the even_list\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        else:\n            result.append(even_fnc(i))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    def is_even(x):\n        '''\n        Helper function to check if an element is even.\n        '''\n        return x % 2 == 0\n    \n    def remove_uneven(nested_tuple):\n        '''\n        Recursive function to remove uneven elements in the nested tuple.\n        '''\n        result = []\n        for item in nested_tuple:\n            if isinstance(item, tuple):\n                result.append(remove_uneven(item))\n            else:\n                if is_even(item):\n                    result.append(item)\n                else:\n                    pass\n        return result\n    \n    return remove_uneven(test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Check if the input is a tuple\n    if not isinstance(test_tuple, tuple):\n        raise TypeError('Input must be a tuple')\n\n    # Check if the input tuple contains only tuples or lists\n    for item in test_tuple:\n        if not (isinstance(item, tuple) or isinstance(item, list)):\n            raise TypeError('Input must contain only tuples or lists')\n\n    # Iterate through the tuple and apply the even_fnc to each element\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_item = even_ele(item, even_fnc)\n        elif isinstance(item, list):\n            new_item = [even_fnc(x) for x in item]\n        else:\n            new_item = even_fnc(item)\n        new_tuple.append(new_item)\n\n    # Return the new tuple\n    return tuple(new_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_lst = []\n    for item in test_tuple: \n        if isinstance(item, list): \n            even_lst.extend(even_fnc(item))\n        elif isinstance(item, tuple): \n            even_lst.extend(even_fnc(item))\n        else: \n            even_lst.append(item)\n    return even_lst\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n        else:\n            test_tuple[i] = even_fnc(test_tuple[i])\n    \n    return tuple(test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    # Remove even elements from the nested mixed tuple\n    even_elements = [even_fnc(x) for x in test_tuple if even_fnc(x)]\n\n    # Combine even elements into a single list\n    return even_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Loop through each element in the tuple\n    for i in range(len(test_tuple)): \n        # If the element is an even number, apply the even_fnc function to it\n        if even_fnc(test_tuple[i]): \n            # Remove the element from the list\n            test_tuple.pop(i) \n            # Increment the index to skip the removed element\n            i -= 1\n\n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            result.append(even_ele(elem, even_fnc))\n        elif even_fnc(elem):\n            result.append(elem)\n    return result"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 6 * (b * s)  # formula for surface area of a square pyramid\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * (b * s) + (2 * b * b * s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*b*b + 2*s*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b*s**2)+(b*s)+(s**2)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the number of sides of the square pyramid\n    n = 4\n    \n    # calculate the total number of squares of side length b\n    total_squares = int(s/b)\n    \n    # calculate the surface area of each square side\n    side_area = b*b\n    \n    # calculate the total surface area of the pyramid\n    total_area = (side_area * total_squares) / 2\n    \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*(b*s+b+s**2)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    area = 0.5*b*s + 0.5*b*s \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s*2 + b*s*2 + b + s*2 + s*2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*(b*s**2)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not any(dict1.values()):\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return num * catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    n = num\n    numerator = 1\n    denominator = 1\n    for i in range(1, n+1):\n        numerator *= i\n        denominator *= (2*i-1)\n    return numerator/denominator"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Args:\n    n (int): Positive integer for which the nth Catalan number is to be found.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    def fact(n):\n        \"\"\"\n        Returns the factorial of n.\n\n        Args:\n        n (int): Positive integer for which the factorial is to be found.\n\n        Returns:\n        int: The factorial of n.\n        \"\"\"\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * fact(n - 1)\n\n    def choose(n, r):\n        \"\"\"\n        Returns the number of combinations of n objects chosen r at a time.\n\n        Args:\n        n (int): Number of objects in the set.\n        r (int): Number of objects to choose.\n\n        Returns:\n        int: The number of combinations of n objects chosen r at a time.\n        \"\"\"\n        if r == 0 or r == n:\n            return 1\n        else:\n            return choose(n - 1, r - 1) * choose(n - 1, r)\n\n    return fact(2 * n) // choose(2 * n, 2 * n)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    '''\n    This function calculates the nth Catalan number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return 2 * catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*catalan_number(n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        catalan_list = [1]\n        for i in range(1, n + 1):\n            catalan_list.append((i * catalan_list[-1]) // (i + 1))\n        return catalan_list[n]\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    pattern = r'(?<![a-zA-Z])[aeiouAEIOU]\\bly(?![a-zA-Z])'\n    for match in re.finditer(pattern, text):\n        adverbs.append((match.start(), match.end()))\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with \"ly\"\n    pattern = r'\\b(ly)\\b'\n\n    # Use re.findall() to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Create an empty dictionary to store the positions and adverbs found\n    positions = {}\n\n    # Loop through the matches and add their positions to the dictionary\n    for match in matches:\n        # Get the position of the first character of the match\n        position = text[:match.start()].rfind(' ')\n        # Add the position and match to the dictionary\n        positions[position] = match\n\n    # Sort the dictionary by position\n    sorted_positions = sorted(positions.items())\n\n    # Return the list of positions and adverbs found\n    return [positions[position] for position, match in sorted_positions]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match the adverb ending with \"ly\"\n    pattern = r'\\b([a-z]+)ly\\b'\n\n    # Use re.finditer() function to search for all occurrences of the pattern in the input text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Iterate over the matches and find the positions of the adverb ending with \"ly\"\n    for match in matches:\n        # Find the start and end positions of the adverb ending with \"ly\"\n        start = match.start()\n        end = match.end()\n\n        # Print the adverb ending with \"ly\" and its positions\n        print(f'Adverb ending with \"ly\" found at positions {start} and {end}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define regex pattern to find adverbs ending with \"ly\"\n    pattern = r'(?<=[a-z])(?=[a-z]{2,}ly)\\bly\\b'\n    \n    # find all matches of pattern in text\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    \n    # iterate over matches and store positions of adverbs\n    positions = []\n    for match in matches:\n        positions.append(match.start())\n        \n    # return list of positions of adverbs\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # define regular expression pattern to find adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # use re.findall() function to find all occurrences of the pattern in the text\n    adverbs = re.findall(pattern, text)\n    \n    # create a list of tuples where each tuple contains the adverb and its position in the text\n    adverb_positions = []\n    for i, adverb in enumerate(adverbs):\n        adverb_positions.append((adverb, text.find(adverb)))\n    \n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for matching adverbs ending with ly\n    pattern = r'\\b([a-z]+ly)\\b'\n    # Use re.findall() to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of the matches\n    positions = []\n    # Loop through the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    # Return a list of tuples containing the adverb and its position in the text\n    return [(match, position) for match, position in zip(matches, positions)]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all the words that end with \"ly\"\n    words_ending_with_ly = re.findall(r'\\b\\w+ly\\b', text)\n\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n\n    # Loop through each word and check if it ends with \"ly\"\n    for i, word in enumerate(words_ending_with_ly):\n        # If it ends with \"ly\", add its position to the list of adverb positions\n        if word.endswith('ly'):\n            adverb_positions.append(i)\n\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # define the regex pattern to match adverbs ending with ly\n    pattern = r'\\b(ly|les)$'\n\n    # use the pattern to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # return a list of tuples containing the first adverb ending with ly and its position in the text\n    return [(match[0], text.index(match[0])) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b([a-z]+)\\s*ly\\b'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If there are any matches, return them as a list of tuples, where each tuple contains the adverb and its position in the text\n    if matches:\n        return [(match[0], match.start()) for match in matches]\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(\\w+)\\s+ly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0])) # heappush takes two arguments: a tuple (priority, value)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item[1] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n\n    # Use a min heap to keep track of the n most expensive items\n    for item in items:\n        # If the heap is not full yet, add the item to the heap\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        # If the heap is full, but the current item is cheaper than the smallest item in the heap, update the heap\n        elif item < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items in the min heap\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Parameters:\n    items (list): a list of tuples, where each tuple contains (price, item).\n    n (int): the number of items to find.\n\n    Returns:\n    A list of the n most expensive items.\n    \"\"\"\n    # Create a min-heap of the n most expensive items\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, items[i])\n\n    # Iterate through the remaining items and update the heap\n    for i in range(n, len(items)):\n        if items[i][0] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, items[i])\n\n    # Extract and return the n most expensive items from the heap\n    return [item[1] for item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap to store the n most expensive items\n    heap = []\n\n    # Iterate through the items and update the heap accordingly\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the heap has more than n items, remove the least expensive item\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items from the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a dataset of items, and a number n, find the n most expensive items.\n    '''\n    # create a min heap of size n\n    max_heap = [0] * n\n    heapq.heapify(max_heap)\n\n    # loop through the items and update the min heap\n    for item in items:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, item)\n        else:\n            if item > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, item)\n\n    # return the n most expensive items from the min heap\n    return max_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and a positive integer n as input, and returns a list of the n most expensive items in the dataset.\n    The items should be represented as tuples (price, item), where price is the cost of the item and item is the name of the item.\n    The function first sorts the items based on their price in descending order, and then creates a min heap of the n smallest items.\n    Finally, the function returns the items in the min heap.\n    '''\n\n    # Sort the items based on their price in descending order\n    sorted_items = sorted(items, key=lambda x: x[0], reverse=True)\n\n    # Create a min heap of the n smallest items\n    min_heap = []\n    for i in range(n):\n        heapq.heappushpop(min_heap, sorted_items.pop())\n\n    # Return the n smallest items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # sort the items in descending order based on their prices\n    heapq.heapify(items)\n    for i in range(n):\n        heapq.heappop(items)\n    return items"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Sort the dataset in descending order of value\n    items.sort(reverse=True)\n    # Return the n most expensive items\n    return items[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Find the index of the nth element in the list\n    index = l.index(n)\n    # Create a new list with the first n elements of the original list\n    new_list = l[:n]\n    # Add the remaining elements to the end of the new list\n    new_list.extend(l[n:])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(n):\n        new_list.append(l[i])\n    new_list.extend(l[n:])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == len(l):\n        return l, []\n    else:\n        mid = n // 2\n        left, right = split_Arr(l[:mid], n - mid)\n        return left + [l[n]] + right"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if n is greater than or equal to the length of l\n    if n >= len(l):\n        return None\n    # add the first part of l to the end of a new list\n    new_l = l[:n]\n    # add the rest of l to the new list\n    new_l.extend(l[n:])\n    return new_l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"Error: The length of the list is less than the specified index.\")\n        return\n    \n    # Split the list at the specified index\n    first_half = l[:n]\n    second_half = l[n:]\n    \n    # Add the first half of the list to the end of the second half\n    new_list = first_half + second_half\n    \n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the length of the list is greater than n\n    if len(l) <= n:\n        return None\n    \n    # Get the nth element\n    nth_elem = l[n]\n    \n    # Remove the nth element from the list\n    l.pop(n)\n    \n    # Add the first part of the list to the end\n    l += [nth_elem]\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    elif n == len(l):\n        return [l[0]] + l\n    else:\n        return split_Arr(l[n:], n-1) + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n > len(l):\n        return None\n    \n    if n == 0:\n        return [l[0]]\n    else:\n        return l[:n] + [l[n]] + split_Arr(l[n:], n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth element and add the first part to the end.\n    \"\"\"\n    # Check if the length of the list is greater than n\n    if len(l) > n:\n        # Add the first n elements of the list to a new list\n        new_list = l[:n]\n        # Add the remaining elements of the list to the end of the new list\n        for i in range(n, len(l)):\n            new_list.append(l[i])\n        # Return the new list\n        return new_list\n    else:\n        # If the length of the list is less than or equal to n, return the list as it is\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[-n:], l[:n]]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest value in the list\n    largest = max(nums)\n    smallest = min(nums)\n    # Find the difference between the largest and smallest values\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 'The list must have at least two elements to calculate the difference.'\n    \n    # Initialize variables to keep track of the largest and smallest values\n    largest = nums[0]\n    smallest = nums[0]\n    \n    # Loop through the list and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Calculate the difference between the largest and smallest values\n    diff = largest - smallest\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    \n    min_val = float('inf')\n    max_val = float('-inf')\n    \n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest - smallest"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == i and square >= a and square <= b:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        square = i*i\n        if square == int(square):\n            squares.append(square)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = int(i ** 0.5)\n        if square ** 2 == i:\n            print(i, square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        for j in range(a, b+1):\n            if i**2 == j**2 and i!= j:\n                print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function will find all the perfect squares between two given numbers a and b.\n    '''\n    if a < b:\n        a, b = b, a\n    perfect_squares = []\n    for i in range(a, b+1):\n        square = i**2\n        if square == i:\n            perfect_squares.append(square)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a variable to store the sum of perfect squares found\n    perfect_sum = 0\n    \n    # Loop through each number between a and b\n    for num in range(a, b + 1):\n        # Check if the number is a perfect square\n        square = int(num ** 0.5)\n        if square ** 2 == num:\n            # If it is, add it to the sum\n            perfect_sum += num\n    \n    return perfect_sum"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # create a list to store perfect squares found between a and b\n    squares = []\n    # loop through all integers between a and b\n    for num in range(a, b+1):\n        # check if num is a perfect square\n        square = num**0.5\n        # if num is a perfect square, add it to the list of squares\n        if square.is_integer():\n            squares.append(int(square))\n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(int(a**0.5)+1):\n        for j in range(int(b**0.5)+1):\n            square_sum = i**2 + j**2\n            if square_sum == a and square_sum == b:\n                result.append((i,j))\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Iterate over the numbers from a to b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        if int(i**0.5)**2 == i:\n            print(i)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n        r (float): Polar radius.\n        theta (float): Polar angle in radians.\n\n    Returns:\n        tuple: (x, y) rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, x.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes two arguments, r and theta, where r is the radius and theta is the angle (in radians) of a point in the polar coordinate system.\n    It returns the corresponding x and y coordinates of the point in the rectangular coordinate system.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert angle to radians\n    theta = cmath.pi * theta / 180.0\n\n    # Calculate x and y coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes in the radius and angle in radians as arguments, and returns the rectangular coordinates of a point.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): The radius of the circle\n    theta (float): The angle of the polar coordinate in radians\n\n    Returns:\n    tuple: The x and y coordinates of the point corresponding to the input polar coordinate.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    \n    Arguments:\n    r -- radius of the circle\n    theta -- angle of the circle in radians\n    \n    Returns:\n    x -- x-coordinate of the point\n    y -- y-coordinate of the point\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    return r * cmath.exp(1j*theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes the radius and angle in radians and converts them to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    first = newList[0]\n    last = newList[length-1]\n    newList[0] = last\n    newList[length-1] = first\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # List with only one element\n    if len(newList) == 1:\n        return newList\n\n    # List with more than one element\n    else:\n        # First element\n        firstElement = newList[0]\n\n        # Last element\n        lastElement = newList[-1]\n\n        # Interchanging first and last elements\n        newList[0] = lastElement\n        newList[-1] = firstElement\n\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    # check if the length of the list is at least 2\n    if len(newList) < 2:\n        return newList\n    \n    # store the first and last elements of the list\n    firstElement = newList[0]\n    lastElement = newList[-1]\n    \n    # remove the last element from the list\n    newList = newList[:-1]\n    \n    # add the last element to the front of the list\n    newList.insert(0, lastElement)\n    \n    # add the first element to the end of the list\n    newList.append(firstElement)\n    \n    # return the new list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"List should have at least two elements\"\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list has at least two elements\n    if length < 2:\n        # If the list has less than 2 elements, return the same list\n        return newList\n    # Check if the first and last elements are swappable\n    if newList[0]!= newList[-1]:\n        # If they are swappable, swap them\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        # If they are not swappable, return the same list\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList "
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k): \n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n: integer value\n    k: integer value\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n\n    Example:\n    binomial_Coeff(5, 3)\n    \"\"\"\n    result = 0\n    for i in range(1, k+1):\n        result += (n - i + 1) * (k - i + 1) // i\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: # if k is greater than n, return 0\n        return 0\n\n    if k == 0 or k == n: # base cases\n        return 1\n    \n    if k == 1 or k == n-1: # special cases\n        return 1\n\n    bin_coeff = binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n    return bin_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    if k > n or k < 0:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): number of elements in the sequence\n    k (int): number of elements to be considered for the sum\n\n    Returns:\n    int: sum of the product of consecutive binomial co-efficients\n    \"\"\"\n\n    # Calculate the binomial co-efficients\n    binom_coeff = [1]*(n+1)\n    for i in range(1, n+1):\n        binom_coeff[i] = binom_coeff[i-1] + (n-k+i)*binom_coeff[k]\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    sum_product = 0\n    for i in range(1, n+1):\n        sum_product += binom_coeff[i]*binom_coeff[i]\n\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k): \n    # Base case \n    if n == 0 or k == 0 or k == n: \n        return 1 \n    # Recursive case \n    else: \n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k) "
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,k+1):\n        sum += n*factorial(k-i)/(factorial(i)*factorial(n-i))\n    return sum\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    sum = 0\n    for i in range(k, n+1): \n        term = (n-i+k)/(i+1)\n        sum += term\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # replace leading zeroes with non-zero character\n    ip = re.sub(r'^\\d*0', '1', ip)\n    # remove trailing zeroes\n    ip = re.sub(r'(\\d)\\.\\d+(\\.\\d+)?$', r'\\1.\\2', ip)\n    # replace multiple consecutive dots with single dot\n    ip = re.sub(r'(\\d)\\.\\.\\.', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+:', '', ip, flags=re.MULTILINE)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\b\\d{1,3}\\b\\.){3}\\b\\d{1,3}\\b', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = r'(\\d+\\.\\d+\\.\\d+\\.\\d+)'\n    ip_match = re.search(ip_pattern, ip)\n    \n    if ip_match:\n        return ip_match.group(1)\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$')\n    ip_list = ip.split('.')\n    for i in range(len(ip_list)):\n        ip_list[i] = str(int(ip_list[i]) - int(ip_list[i].lstrip('0')))\n        if len(ip_list[i]) == 1:\n            ip_list[i] = '0' + ip_list[i]\n    new_ip = '.'.join(ip_list)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    match = re.match(pattern, ip)\n    if match:\n        ip_list = ip.split('.')\n        for i in range(len(ip_list)):\n            ip_list[i] = int(ip_list[i])\n            if ip_list[i] == 0:\n                ip_list.pop(i)\n                break\n        return '.'.join(map(str, ip_list))\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from each part of the ip address\n    ip = re.sub(r\"^0+(\\d)\", r\"\\1\", ip)\n    ip = re.sub(r\"^0+(\\d)\\.\", r\"\\1.\", ip)\n    ip = re.sub(r\"^0+(\\d)\\.\\d+$\", r\"\\1\\2\", ip)\n    # remove leading zeroes from the last part of the ip address\n    ip = re.sub(r\"\\.$\", r\"\", ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            first_even = list1[i]\n            break\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            first_odd = list1[i]\n            break\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = 0\n    odd_first = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_first += num\n        else:\n            odd_first += num\n    return abs(even_first - odd_first)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[-1]\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    Returns the difference of the first even and first odd number in the given list.\n    \"\"\"\n    even = lst[0]\n    odd = lst[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"The list should have at least 2 elements.\"\n    \n    even_count = 0\n    odd_count = 0\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n            even_count += 1\n        else:\n            odd_sum += num\n            odd_count += 1\n            \n    if even_count == 0:\n        return \"The list does not contain any even numbers.\"\n    elif odd_count == 0:\n        return \"The list does not contain any odd numbers.\"\n    else:\n        return abs(even_sum - odd_sum)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count_even = 0\n    count_odd = 0\n    diff = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    diff = abs(count_even - count_odd)\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables for even and odd numbers\n    even = None\n    odd = None\n    \n    # Loop through the list and check for even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n            else:\n                even = abs(even - num)\n        else:\n            if odd is None:\n                odd = num\n            else:\n                odd = abs(odd - num)\n    \n    # If even and odd numbers are found, return the difference\n    if even is not None and odd is not None:\n        return even + odd\n    else:\n        # If even or odd numbers are not found, return None\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num += i\n        else:\n            odd_num += i\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    even_first = list1[0] % 2 == 0\n    odd_first = list1[0] % 2 == 1\n\n    if even_first and odd_first:\n        return list1[1] - list1[0]\n    elif even_first and not odd_first:\n        return list1[2] - list1[1]\n    elif not even_first and odd_first:\n        return list1[2] - list1[1]\n    else:\n        return list1[3] - list1[2]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Find the first even and first odd numbers in the list\n    even_num = next((num for num in list1 if num % 2 == 0), None)\n    odd_num = next((num for num in list1 if num % 2!= 0), None)\n    \n    # If the list has only even numbers, the first odd number is None\n    if odd_num is None:\n        return even_num - 1\n    \n    # If the list has only odd numbers, the first even number is None\n    elif even_num is None:\n        return odd_num - 1\n    \n    # If the list has both even and odd numbers, find the difference\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # find length of binary numbers\n    n1 = len(str1)\n    n2 = len(str2)\n    # convert binary strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # check if binary numbers are equal\n    if num1 == num2:\n        return 0\n    # set variables for swapping positions\n    swaps = 0\n    temp = 0\n    # iterate through binary numbers and swap positions if necessary\n    for i in range(n1):\n        # check if current bit is 1 in num1 and 0 in num2\n        if (num1 & (1 << i)) == 1 and (num2 & (1 << i)) == 0:\n            swaps += 1\n            temp ^= (1 << i)\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n    # iterate through binary numbers and swap positions if necessary\n    for i in range(n2):\n        # check if current bit is 1 in num1 and 0 in num2\n        if (num1 & (1 << i)) == 0 and (num2 & (1 << i)) == 1:\n            swaps += 1\n            temp ^= (1 << i)\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n    # check if number of swaps is less than total number of bits in binary numbers\n    if swaps < n1 + n2:\n        return swaps\n    # iterate through binary numbers and swap positions if necessary\n    for i in range(n1):\n        # check if current bit is 0 in num1 and 1 in num2\n        if (num1 & (1 << i)) == 0 and (num2 & (1 << i)) == 1:\n            swaps += 1\n            temp ^= (1 << i)\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n    # check if number of swaps is less than total number of bits in binary numbers\n    if swaps < n1 + n2:\n        return swaps\n    # iterate through binary numbers and swap positions if necessary\n    for i in range(n2):\n        # check if current bit is 0 in num1 and 1 in num2\n        if (num1 & (1 << i)) == 1 and (num2 & (1 << i)) == 0:\n            swaps += 1\n            temp ^= (1 << i)\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n    # check if number of swaps is less than total number of bits in binary numbers\n    if swaps < n1 + n2:\n        return swaps\n    # if no swaps are necessary, return 0\n    return 0"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    # Convert strings to binary numbers\n    bin1 = bin(int(str1, 2))[2:].zfill(n1)\n    bin2 = bin(int(str2, 2))[2:].zfill(n2)\n    # Calculate common prefix\n    i = 0\n    while i < n1 and i < n2 and bin1[i] == bin2[i]:\n        i += 1\n    # Count swaps required to convert binary numbers\n    swaps = 0\n    for i in range(n1):\n        if bin1[i]!= bin2[i]:\n            swaps += 1\n    for i in range(n2):\n        if bin2[i]!= bin1[i]:\n            swaps += 1\n    return swaps - i"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings to binary representation\n    bin1 = int(str1, 2)\n    bin2 = int(str2, 2)\n\n    # Initialize matrix with zeros\n    dp = [[0 for _ in range(len(str2) + 1)] for _ in range(len(str1) + 1)]\n\n    # Fill the matrix using dynamic programming\n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            # If digits are same, no swaps are needed\n            if bin1 % 2 == bin2 % 2:\n                dp[i][j] = dp[i - 1][j - 1]\n            # If digit at the i-th index of str1 is smaller, swap with digit at the j-th index of str2\n            elif bin1 % 2 < bin2 % 2:\n                dp[i][j] = dp[i - 1][j] + 1\n            # If digit at the i-th index of str1 is larger, swap with digit at the j-th index of str2\n            else:\n                dp[i][j] = dp[i][j - 1] + 1\n\n    # Return the minimum number of swaps required to convert one binary number to another\n    return dp[len(str1)][len(str2)]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as strings, str1 and str2, and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n\n    # initialize variables\n    count = 0\n    i = 0\n    j = 0\n\n    # compare the two binary numbers\n    while i < len(str1) and j < len(str2):\n        # check if the characters match\n        if str1[i] == str2[j]:\n            # if they match, move both pointers\n            i += 1\n            j += 1\n        else:\n            # if they don't match, increment count and move the pointer of the greater number\n            if str1[i] == '1':\n                count += 1\n            if str2[j] == '1':\n                count += 1\n            if str1[i] == '0' and str2[j] == '0':\n                i += 1\n                j += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Check if the binary numbers are the same\n    if num1 == num2:\n        return 0\n    \n    # Initialize variables\n    swaps = 0\n    prev = 0\n    curr = 0\n    \n    # Iterate through each bit of the binary numbers\n    for i in range(31):\n        # Determine the current bit\n        if num1 & (1 << i):\n            curr = 1\n        else:\n            curr = 0\n        \n        # Determine the previous bit\n        if num2 & (1 << i):\n            prev = 1\n        else:\n            prev = 0\n        \n        # Check if the current bit is not the same as the previous bit\n        if curr!= prev:\n            swaps += 1\n        \n        # Swap the bits of the binary numbers\n        if curr!= prev:\n            num1, num2 = num2, num1\n        \n        # Check if the binary numbers are the same after swapping\n        if num1 == num2:\n            break\n    \n    # Return the minimum number of swaps required\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    dp = [[0]*(n2+1) for _ in range(n1+1)]\n    for i in range(n1):\n        for j in range(n2):\n            if str1[i] == str2[j]:\n                dp[i+1][j+1] = dp[i][j]\n            else:\n                dp[i+1][j+1] = 1 + min(dp[i][j+1], dp[i+1][j])\n    return dp[n1][n2]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Check if the numbers are of same length\n    if len(str1)!= len(str2):\n        return \"Numbers are of different lengths\"\n\n    # Initialize a variable to store the minimum number of swaps\n    min_swaps = 0\n\n    # Compare the numbers and count the minimum number of swaps required to convert them\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            # Swap the characters of the numbers\n            str1[i], str2[i] = str2[i], str1[i]\n            # Increment the minimum number of swaps\n            min_swaps += 1\n\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # Convert binary strings to lists of digits\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Initialize variables to store the swaps required\n    swap_count = 0\n    last_index = len(str1) - 1\n\n    # Iterate through the strings from the last digit to the first digit\n    while last_index >= 0:\n        # If the digits are different, swap them\n        if list1[last_index]!= list2[last_index]:\n            list1[last_index], list2[last_index] = list2[last_index], list1[last_index]\n            swap_count += 1\n\n        # Move to the previous digit\n        last_index -= 1\n\n    # Return the number of swaps required\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    # convert binary strings to lists\n    lst1 = [int(x) for x in str1]\n    lst2 = [int(x) for x in str2]\n    # create a zero matrix to store the number of swaps required\n    swaps = [[0] * n2 for _ in range(n1 + 1)]\n    # fill the zero matrix with the number of swaps required\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if lst1[i - 1] == lst2[j - 1]:\n                swaps[i][j] = swaps[i - 1][j - 1]\n            else:\n                swaps[i][j] = min(swaps[i - 1][j], swaps[i][j - 1]) + 1\n    # return the minimum number of swaps required to convert str1 to str2\n    return swaps[n1][n2]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # Convert both strings to lists of binary digits\n    str1_list = [int(d) for d in str1]\n    str2_list = [int(d) for d in str2]\n\n    # Find the length of the shorter string\n    length = min(len(str1_list), len(str2_list))\n\n    # Initialize a variable to keep track of the minimum number of swaps required\n    min_swaps = float('inf')\n\n    # Loop through each bit in the shorter string\n    for i in range(length):\n        # Check if the bits are not equal\n        if str1_list[i]!= str2_list[i]:\n            # Calculate the number of swaps required to convert the bits\n            num_swaps = abs(str1_list[i] - str2_list[i])\n            # Update the minimum number of swaps required\n            min_swaps = min(min_swaps, num_swaps)\n\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the size in bytes of the largest tuple.\n    '''\n    max_tuple = max(tuple_list, key=lambda x: sys.getsizeof(x))\n    return sys.getsizeof(max_tuple)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_size(tuple_list):\n    size = 0\n    for item in tuple_list:\n        if hasattr(item, '__sizeof__'):\n            size += item.__sizeof__()\n        else:\n            size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Convert the tuple to a byte string\n    byte_string = bytearray(tuple(tuple_list))\n    \n    # Calculate the size in bytes\n    size = sys.getsizeof(byte_string)\n    \n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.setrecursionlimit(100000)  # increase the recursion limit for large lists\n    total_size = 0\n    for item in tuple_list:\n        if isinstance(item, tuple):\n            item_size = tuple_size(item)\n        elif isinstance(item, list):\n            item_size = list_size(item)\n        elif isinstance(item, str):\n            item_size = len(item.encode('utf-8'))\n        else:\n            item_size = sys.getsizeof(item)\n        total_size += item_size\n    return total_size\n\ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    sys.setrecursionlimit(100000)  # increase the recursion limit for large lists\n    total_size = 0\n    for item in list_list:\n        if isinstance(item, tuple):\n            item_size = tuple_size(item)\n        elif isinstance(item, list):\n            item_size = list_size(item)\n        elif isinstance(item, str):\n            item_size = len(item.encode('utf-8'))\n        else:\n            item_size = sys.getsizeof(item)\n        total_size += item_size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Using sys.getsizeof() function to find the size of the tuple\n    size = sys.getsizeof(tuple_list[0]) * len(tuple_list)\n    \n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the size of the tuple in bytes.\n    \"\"\"\n    size_of_tuple = sys.getsizeof(tuple_list)\n    return size_of_tuple"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the length of the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize two pointers i and j to start of arrays\n    i = 0\n    j = 0\n\n    # Initialize a variable to store the kth element\n    kth_element = None\n\n    # Iterate until both pointers i and j have crossed\n    while i < n1 and j < n2:\n        # If arr1[i] is smaller, increment i\n        if arr1[i] < arr2[j]:\n            i += 1\n        # If arr2[j] is smaller, increment j\n        elif arr1[i] > arr2[j]:\n            j += 1\n        # If arr1[i] is equal to arr2[j], increment both i and j\n        else:\n            kth_element = arr1[i]\n            i += 1\n            j += 1\n            k -= 1\n\n            # If kth element is found, return it\n            if k == 0:\n                return kth_element\n\n    # If kth element is not found, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m, n = len(arr1), len(arr2)\n\n    # compare first m elements of both arrays\n    i, j = 0, k - 1\n    while i < m and j >= 0:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j -= 1\n        else:\n            return arr1[i]\n\n    # if there are still elements to compare, compare first n-m elements of arr1\n    if i < m:\n        return find_kth(arr1[i:], arr2, k - i)\n\n    # if there are still elements to compare, compare first m-j elements of arr2\n    return find_kth(arr1, arr2[j+1:], k - j - 1)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    # Initialize variables to keep track of the current position in both arrays\n    i = 0\n    j = 0\n    \n    # Initialize variables to keep track of the current position in the result array\n    kth_pos = 0\n    \n    # Compare the elements at the current positions in both arrays\n    while i < n1 and j < n2 and kth_pos < k:\n        if arr1[i] < arr2[j]:\n            arr1[kth_pos], arr1[i] = arr1[i], arr1[kth_pos]\n            kth_pos += 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            arr2[kth_pos], arr2[j] = arr2[j], arr2[kth_pos]\n            kth_pos += 1\n            j += 1\n        else:\n            kth_pos += 1\n            i += 1\n            j += 1\n            \n    # Return the kth element\n    return arr1[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    if i == n1:\n        return arr2[j]\n    elif j == n2:\n        return arr1[i]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    for _ in range(len(arr1)):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr2[j] < arr1[i]:\n            j += 1\n        else:\n            return arr1[i]\n        if i == len(arr1) and j < k:\n            return arr2[j]\n        elif i < k and j == len(arr2):\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the total number of elements in the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the total number of elements that must be compared\n    n_total = n1 + n2\n\n    # Initialize variables to store the current positions in both arrays\n    i, j = 0, 0\n\n    # Initialize variables to store the current positions in the output array\n    index = 0\n\n    # Compare elements from both arrays and add the smaller one to the output array\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if index < k:\n                output[index] = arr1[i]\n                index += 1\n            i += 1\n        else:\n            if index < k:\n                output[index] = arr2[j]\n                index += 1\n            j += 1\n\n    # Add remaining elements from the first array to the output array\n    while i < n1:\n        if index < k:\n            output[index] = arr1[i]\n            index += 1\n        i += 1\n\n    # Add remaining elements from the second array to the output array\n    while j < n2:\n        if index < k:\n            output[index] = arr2[j]\n            index += 1\n        j += 1\n\n    return output"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, else False.\n    \"\"\"\n    num_str = str(n)\n    sum = 0\n    for digit in num_str:\n        digit = int(digit)\n        sum += digit ** len(num_str)\n    return sum == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Initialize the sum to zero\n    sum_of_squares = 0\n\n    # Iterate over each digit in the number\n    for digit in number_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n\n        # Add the square of the digit to the sum of squares\n        sum_of_squares += digit_int ** 3\n\n    # Check if the sum of squares is equal to the original number\n    if sum_of_squares == number:\n        # The number is armstrong\n        print(\"The number is armstrong.\")\n    else:\n        # The number is not armstrong\n        print(\"The number is not armstrong.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check whether a given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(number)\n    sum = 0\n    power = len(num_str)\n\n    for digit in num_str:\n        sum += int(digit) ** power\n\n    return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, and False otherwise.\n    \"\"\"\n    if num < 10:\n        return False\n    else:\n        power = len(str(num))\n        total = 0\n        while num > 0:\n            digit = num % 10\n            total += digit ** power\n            num //= 10\n        return total == num\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    def is_armstrong(n):\n        \"\"\"\n        Helper function to check whether the given number is armstrong or not.\n        \"\"\"\n        num = n\n        total = 0\n        while num > 0:\n            digit = num % 10\n            total += digit ** 3\n            num //= 10\n        return total == n\n\n    if is_armstrong(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_len = len(num_str)\n    sum_of_squares = 0\n\n    for i in range(num_len):\n        digit = int(num_str[i])\n        square = digit ** num_len\n        sum_of_squares += square\n\n    if number == sum_of_squares:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Check if the input is an integer or not\n    if not isinstance(number, int):\n        return False\n    \n    # Initialize a variable to store the sum of the digits of the number\n    sum_of_digits = 0\n    \n    # Traverse through the digits of the number\n    while number > 0:\n        # Get the last digit of the number\n        digit = number % 10\n        \n        # Add the last digit to the sum of digits\n        sum_of_digits += digit ** 3\n        \n        # Remove the last digit from the number\n        number //= 10\n    \n    # Check if the sum of digits is equal to the number itself\n    return sum_of_digits == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #taking the number of digits of the given number\n    num_of_digits = len(str(number))\n    \n    #initializing the sum variable\n    sum = 0\n    \n    #extracting the digits of the given number\n    digits = []\n    while number > 0:\n        digits.append(number % 10)\n        number //= 10\n    \n    #iterating over the digits and adding them to the sum\n    for digit in digits:\n        sum += digit**num_of_digits\n    \n    #checking if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong_number(number):\n    if number < 10:\n        return False\n    \n    power = 1\n    total = 0\n    temp = number\n    \n    while temp > 0:\n        digit = temp % 10\n        total += digit ** power\n        temp //= 10\n        power += 1\n    \n    return number == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string and remove any non-numeric characters\n    number_str = ''.join(filter(str.isdigit, str(number)))\n\n    # Initialize the sum of the digits of the number to zero\n    sum_of_digits = 0\n\n    # Loop through each digit of the number and add its power to the sum\n    for digit in number_str:\n        digit = int(digit)\n        sum_of_digits += digit ** len(number_str)\n\n    # If the sum of digits is equal to the original number, then the number is an Armstrong number\n    if sum_of_digits == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n\n    # calculate the average\n    average = sum / count\n\n    # return the sum and average\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        sum += i\n        count += 1\n    average = sum / count\n    print(f\"The sum of the first {number} natural numbers is {sum}.\")\n    print(f\"The average of the first {number} natural numbers is {average}.\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    avg = sum / count\n    print(\"Sum of first\", n, \"natural numbers is:\", sum)\n    print(\"Average of first\", n, \"natural numbers is:\", avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_num = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum_num += i\n        count += 1\n    average = sum_num / count\n    return sum_num, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    print(\"Sum of first\", number, \"natural numbers is\", total)\n    print(\"Average of first\", number, \"natural numbers is\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 0:\n        return \"Please enter a positive integer.\"\n    elif number == 0:\n        return \"There are no natural numbers to sum or average.\"\n    else:\n        sum = 0\n        for i in range(1, number + 1):\n            sum += i\n        average = sum / number\n        return \"The sum of the first\", number, \"natural numbers is\", sum, \"and the average is\", average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is even and False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if it is even and False if it is odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes an integer as input and returns a boolean value indicating whether it is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    Checks whether a given number is even or odd.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n) :\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Find the first repeated character in a given string.\n    \"\"\"\n    # Use a set to keep track of the characters we've seen so far\n    seen = set()\n    # Iterate over the characters in the string\n    for char in str1:\n        # If the character is already in the set, we've found a repeated character\n        if char in seen:\n            return char\n        # Add the character to the set of seen characters\n        seen.add(char)\n    # If we reach this point, no repeated characters were found\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # loop through each character in the string and update the frequency count in the dictionary\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n        \n    # find the first character with a frequency greater than 1\n    for char, count in freq.items():\n        if count > 1:\n            return char\n        \n    # if no character has a frequency greater than 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first repeated character\n    for char in str1:\n        if freq[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # iterate through the string and count the occurrences of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # iterate through the dictionary and find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Create an empty dictionary to store the counts of each character\n    char_counts = {}\n    \n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count by 1\n        if char in char_counts:\n            char_counts[char] += 1\n        # Otherwise, add the character and its count to the dictionary\n        else:\n            char_counts[char] = 1\n    \n    # Iterate over each character in the string again to find the first repeated character\n    for char in str1:\n        # If the character is in the dictionary and its count is greater than 1, return the character\n        if char in char_counts and char_counts[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Find the first repeated character in the dictionary\n    for char, freq in char_freq.items():\n        if freq > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # Find the character with the highest frequency\n    max_freq = max(freq.values())\n    for char, count in freq.items():\n        if count == max_freq:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_char = str1[0]\n    for i in range(len(str1)):\n        if str1[i] == first_char:\n            return first_char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If no character is repeated, the function will return None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_list = []\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            j = i\n            while j * j <= n:\n                if n % j:\n                    j += 1\n                else:\n                    ludic_list.append(j)\n                    j += 1\n            ludic_list.append(i)\n            i += 1\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    num = 2\n    while num <= n:\n        if num == 1:\n            lucid_numbers.append(num)\n        elif num % 2 == 0:\n            lucid_numbers.append(num)\n        else:\n            lucid_numbers.append(num)\n            for i in range(3, int(num**0.5) + 1, 2):\n                if num % i == 0:\n                    if num % (2*i) == 0:\n                        lucid_numbers.append(num)\n                    else:\n                        lucid_numbers.append(num + i)\n                        lucid_numbers.append(num - i)\n        num += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n+1):\n        if i == 1 or i == 2:\n            ludic_list.append(i)\n        else:\n            if i % 2 == 0:\n                ludic_list.append(i)\n            else:\n                j = 3\n                while j <= i**0.5:\n                    if i % j == 0:\n                        ludic_list.append(i)\n                        break\n                    j += 2\n    return ludic_list\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Determine whether a given integer is a lucid number or not.\n    '''\n    s = str(n)\n    for i in range(len(s)):\n        if int(s[i]) == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # Iterate through all integers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Check if i is a lucid number\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        # If i is a lucid number, add it to the list\n        if is_lucid:\n            lucid_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        if all(i % j!= 0 for j in range(2, i)):\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(i%j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    This function finds all the lucid numbers smaller than or equal to a given integer.\n    The lucid numbers are numbers that are the sum of the cubes of the digits of the original number.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        digits = [int(d) for d in str(i)]\n        lucid_num = sum([d**3 for d in digits])\n        if lucid_num <= n:\n            lucids.append(lucid_num)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    # initialize a list to store the lucid numbers\n    lucid_numbers = []\n\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # if i is a lucid number, add it to the list\n        if is_lucid(i):\n            lucid_numbers.append(i)\n\n    return lucid_numbers\n\n\ndef is_lucid(n):\n    \"\"\"\n    Check if a given number is a lucid number. A lucid number is a number that can be written as the sum of its digits raised to the power of the number of digits in the number. For example, 123 is a lucid number because 1 + 2 + 3 = 6 = 1^3.\n    \"\"\"\n    # get the number of digits in the number\n    num_digits = len(str(n))\n\n    # calculate the sum of digits raised to the power of num_digits\n    digits_sum = sum([int(digit)**num_digits for digit in str(n)])\n\n    # check if the digits sum is equal to the original number\n    return digits_sum == n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words with spaces\n    reversed_s =''.join(words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back together into a string\n    result =''.join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert the string to a list of words\n    words = s.split()\n\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n\n    # Join the words together with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # Split the string into a list of words\n    reversed_words = words[::-1] # Reverse the list of words\n    reversed_string =''.join(reversed_words) # Join the list of reversed words back into a string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words = words[::-1]\n    words =''.join(words)\n    return words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    # split the string into a list of words\n    words = s.split()\n    # reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # join the reversed words back into a string with spaces\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split() # split the string into words\n    reversed_words = words[::-1] # reverse the order of words using slicing\n    reversed_string = \" \".join(reversed_words) # join the reversed words back into a string\n    return reversed_string # return the reversed string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # reverse each word in the list using list slicing\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words into a single string using space as separator\n    return''.join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if is_prime(num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n\n    # check if the number is less than 2\n    if num < 2:\n        return False\n\n    # loop through all numbers from 2 to the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        # if the number is divisible by any of the numbers in that range\n        if num % i == 0:\n            return False\n\n    # if we've made it through the loop without finding a divisor, the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n\n    # check if the number is less than or equal to 1\n    if num <= 1:\n        return False\n\n    # check if the number is divisible by 1 or 0\n    if num == 1 or num == 0:\n        return True\n\n    # check if the number is divisible by any number between 2 and the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function converts degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n\n    # Convert degree to radians using math.radians() function\n    radians = math.radians(degree)\n\n    # Return the result\n    return radians"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        print(\"Found literal '{}' in the text between indices {} and {}.\".format(literal, start_index, end_index))\n        print(\"Original text: '{}'.\".format(text))\n    return literal, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use re.search to search for the pattern in the text\n    match = re.search(pattern, text)\n    \n    # If the match was found, return the substring, start index and end index\n    if match:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        return literal, start_index, end_index\n    \n    # If no match was found, return None\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function will search a string for a given regex pattern. It will return the matching substring, start index, and end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        return match, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes a string and a regex pattern as arguments and returns a tuple containing the matching substrings, start index, and end index.\n    '''\n    matches = re.findall(pattern, text)\n    results = []\n    for match in matches:\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        results.append((match, start_index, end_index))\n    return results"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] * (n+1)\n    bell[0], bell[1] = 1, 1\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        print(\"Input should be non-negative integer.\")\n        return\n    \n    bell_number = 1\n    for i in range(1, n+1):\n        bell_number = bell_number * (n-i+1) / i\n    \n    return bell_number"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function finds the nth Bell number recursively.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * (bell_Number(n - 1) - bell_Number(n - 2)) / 2"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return bell_Number(n//2) * bell_Number(n//2)\n    else:\n        return (2 * bell_Number(n//2)) + 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_array = [0] * (n+1)\n    bell_array[0] = 0\n    bell_array[1] = 1\n    for i in range(2, n+1):\n        bell_array[i] = bell_array[i-1] + bell_array[i-2]\n    return bell_array[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\n\nprint(bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a Python function to find the nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nprint(bell_Number(5)) # Output: 120"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    return list1[:L-1]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Remove the k'th element of the list\n    list1.pop(L-1)\n    # Return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Get the length of the list\n    n = len(list1)\n    \n    # Remove the k'th element from the list\n    list1.pop(L-1)\n    \n    # Return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # initialize a list to store the new list\n    new_list = []\n\n    # iterate over the elements of the original list\n    for i in range(len(list1)):\n        # if the index is not equal to L, append the element to the new list\n        if i!= L:\n            new_list.append(list1[i])\n\n    # return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1\n    elif L > len(list1):\n        return None\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L\n    for i in range(len(list1)-1, -1, -1):\n        if k == 1:\n            list1.pop(i)\n            return list1\n        k -= 1\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L - 1\n    if k >= n or k < 0:\n        return list1\n    else:\n        return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k, which represents the index of the element to be removed.\n    The function then returns a new list with the same elements, except for the k'th element, which is removed.\n    '''\n    # Create a new list with the same elements as the original list\n    new_list = list1\n    \n    # Remove the k'th element from the new list\n    new_list.pop(k - 1)\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # initialize the list with the same elements as the input list\n    new_list = list1[:]\n    \n    # check if the length of the list is less than or equal to L\n    if len(new_list) <= L:\n        return None\n    \n    # initialize the counter variable to 0\n    count = 0\n    \n    # iterate over the list\n    for i in range(len(new_list)):\n        # if the counter variable is equal to L-1, remove the element at index i\n        if count == L-1:\n            del new_list[i]\n            break\n        # increment the counter variable\n        count += 1\n    \n    return new_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the matrix and the number of columns in it\n    m = len(test_list)\n    n = len(test_list[0])\n\n    # Check if the n is within range\n    if N >= n or N < 1:\n        return \"Invalid input. n should be between 1 and the number of columns in the matrix.\"\n\n    # Initialize an empty list to store the max values of each column\n    max_values = []\n\n    # Iterate through each row of the matrix\n    for row in test_list:\n        # Get the value of then'th column of the row\n        col_value = row[N-1]\n        # Check if the value is not already in the list of max values\n        if col_value not in max_values:\n            # If not, add it to the list\n            max_values.append(col_value)\n\n    # Find the maximum value in the list of max values\n    max_val = max(max_values)\n\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    max_val = -1000000\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize a variable to store the max value\n    max_val = float('-inf')\n    \n    # Loop through each row of the matrix\n    for row in test_list:\n        # Check if the current value is greater than the max value found so far\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Function to find the max of then'th column in the given matrix\n    def nth_column_max(matrix, N):\n        # Find the length of the matrix\n        m = len(matrix)\n        # Create an empty list to store the maximum values of then'th column\n        max_list = []\n        # Loop through each row in the matrix\n        for i in range(m):\n            # Find then'th column value in the row and append it to the max_list\n            max_list.append(matrix[i][N-1])\n        # Find the maximum value in the max_list\n        max_value = max(max_list)\n        # Return the maximum value of then'th column\n        return max_value\n    \n    # Find the length of the first row of the matrix\n    m = len(test_list)\n    # Find the maximum value of then'th column in the matrix\n    max_value = nth_column_max(test_list, N)\n    # Print the maximum value of then'th column\n    print(\"The maximum value of the\", N, \"th column is:\", max_value)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the list\n    n = len(test_list)\n    # Create an empty list to store the max values\n    max_values = []\n    # Loop through each row of the matrix\n    for i in range(n):\n        # Get the value of then'th column in the ith row\n        value = test_list[i][N-1]\n        # Add the value to the max_values list\n        max_values.append(value)\n    # Return the maximum value in the max_values list\n    return max(max_values)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Get the length of the first list in the matrix\n    length = len(test_list[0])\n\n    # Initialize the maximum value as negative infinity\n    max_value = float('-inf')\n\n    # Loop through each row in the matrix\n    for row in test_list:\n        # If the current row has N columns, compare the value in the Nth column to the maximum value\n        if N < length:\n            if row[N] > max_value:\n                max_value = row[N]\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    return max(row[N-1] for row in test_list)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    m = len(test_list[0])\n    for i in range(n):\n        if i < N:\n            continue\n        max_val = max(test_list[i][j] for j in range(m))\n        print(f\"The max value of the {N}th column in row {i} is: {max_val}\")"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    # Check if N is a valid index of the first row\n    if N < 0 or N >= len(test_list[0]):\n        return None\n    # Find the max of then'th column\n    max_value = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_value:\n            max_value = row[N]\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    # create two empty lists to hold the merged elements\n    merged = []\n    merged2 = []\n    \n    # iterate over the outer list of sublists\n    for sublist in lst:\n        # add the first element of each sublist to the merged list\n        merged.append(sublist[0])\n        # add the second element of each sublist to the merged2 list\n        merged2.append(sublist[1])\n    \n    # return the merged and merged2 lists as a single list of tuples\n    return merged + merged2"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n\n    # Iterate through each element in the tuple list\n    for element in test_list:\n        # Check if the element is an integer or a float\n        if isinstance(element, int) or isinstance(element, float):\n            # Add the element to the cumulative sum\n            cum_sum += element\n\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values that are present in the list.\n    '''\n    # initialize the cumulative sum variable to 0\n    cum_sum = 0\n    \n    # iterate through the tuple list and add each value to the cumulative sum variable\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][0]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            total += test_list[i][j]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][1]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in test_list:\n        total_sum += i\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cum_sum = 0\n    # loop through the list of tuples and add the values to the cumulative sum\n    for tup in test_list:\n        for num in tup:\n            cum_sum += num\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for sublist in nums:\n        total += sum(sublist)\n        count += 1\n    averages = [total / count] * count\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        avg = sum(num_tuple) / len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in nums:\n        total = 0\n        count = 0\n        for j in i:\n            total += j\n            count += 1\n        average = total / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples and returns a list of the average values for each tuple.\n    \"\"\"\n    # Initialize an empty list to store the averages\n    avg_list = []\n    \n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the sum of the values in the tuple\n        total = sum(tup)\n        \n        # Calculate the average value of the tuple\n        avg = total / len(tup)\n        \n        # Add the average value to the list of averages\n        avg_list.append(avg)\n    \n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        count = len(tup)\n        average = total / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    averages = []\n    # Iterate through each tuple in the input tuple\n    for tup in nums:\n        # Calculate the sum of all the values in the tuple\n        total = sum(tup)\n        # Calculate the average value of the tuple\n        average = total / len(tup)\n        # Add the average value to the list of averages\n        averages.append(average)\n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for i in num:\n            sum += i\n        avg = sum / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        average = total / len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_result = []\n    for i in range(len(test_tup1)):\n        modulo_result.append(test_tup1[i] % test_tup2[i])\n    return tuple(modulo_result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo operation.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    else:\n        mod_tup = []\n        for i in range(len(test_tup1)):\n            mod_tup.append(test_tup1[i] % test_tup2[i])\n        return mod_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return 'Error: Tuples must have the same length'\n    \n    # Perform element-wise modulo\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element-wise modulo operation on them.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length!\")\n\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element-wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples are not of equal length.\"\n\n    # Perform element-wise modulo\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    # initialize a variable to store the minimum number of jumps required\n    min_jumps = float('inf')\n\n    # initialize a variable to store the current position\n    current_position = (0, steps)\n\n    # loop until the current position is equal to (d, 0)\n    while current_position!= (d, 0):\n        # check if the current position is at the starting point\n        if current_position[0] == 0:\n            # if the starting point, check if the current position is within the range of steps\n            if current_position[1] <= steps:\n                # if the current position is within the range, add 1 to the minimum number of jumps\n                min_jumps = 1\n            else:\n                # if the current position is out of the range, break out of the loop and set the minimum number of jumps to the maximum possible number\n                min_jumps = float('inf')\n                break\n        # check if the current position is at the target point\n        elif current_position == (d, 0):\n            # if the target point, set the minimum number of jumps to 0\n            min_jumps = 0\n            break\n        # move to the next position\n        current_position = (current_position[0] - 1, current_position[1] - 1)\n\n    # return the minimum number of jumps required\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # find the number of jumps required to reach the point of form (d, 0) from origin\n    jumps = 0\n    current_x = 0\n    current_y = d\n\n    while current_y > 0:\n        jumps += 1\n        current_x += 1\n        current_y -= 1\n\n        # check if we've reached the point of form (d, 0) from origin\n        if current_x == steps:\n            return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    last_point = (d, 0)\n    count = 0\n    queue = [(0, last_point)]\n    \n    # Loop through the queue\n    while queue:\n        count += 1\n        current_point, current_distance = queue.pop(0)\n        \n        # Check if we have reached the destination point\n        if current_point == (0, 0):\n            return count\n        \n        # Check if we have reached the starting point\n        if current_point == (steps, 0):\n            return -1\n        \n        # Check if we have reached a valid point to move to\n        if current_point[0] > 0 and current_point[0] <= steps and current_point[1] >= -d:\n            # Check if we can move to the left or right of the current point\n            if current_point[0] - 1 <= steps and (current_distance[0] - 1, current_distance[1]) not in queue:\n                queue.append((current_point[0] - 1, (current_distance[0] - 1, current_distance[1])))\n            if current_point[0] + 1 <= steps and (current_distance[0] + 1, current_distance[1]) not in queue:\n                queue.append((current_point[0] + 1, (current_distance[0] + 1, current_distance[1])))\n    \n    # If we have reached this point, it means that we have not reached the destination point\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    if d == 0:\n        return steps\n\n    min_steps = steps + 1\n    min_jumps = 0\n\n    for i in range(1, steps + 1):\n        if i + d >= steps:\n            break\n\n        new_steps = steps - i\n        new_jumps = i\n\n        if new_jumps < min_jumps:\n            min_jumps = new_jumps\n            min_steps = new_steps\n\n    return min_steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    i = 0\n    j = d\n\n    while i <= j:\n        if i < j:\n            i += 1\n        else:\n            i = 0\n            j -= 1\n            jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    # initialize dp list with height of each point in the plane\n    dp = [steps + 1] * (d + 1) \n\n    # calculate minimum jumps required to reach each point\n    for i in range(steps):\n        for j in range(d + 1):\n            # calculate points that can be reached from (j, i) in a straight line with height d\n            reachable_points = [(j + 1, i + 1)]\n            for k in range(i + 1):\n                reachable_points.append((j + 1, k))\n            for k in range(j, d + 1):\n                reachable_points.append((k, i + 1))\n\n            # find minimum jumps required to reach the reachable points\n            min_jumps = min([dp[k] for k, _ in reachable_points])\n\n            # update dp list with minimum jumps required to reach the current point\n            dp[j] = min(dp[j], min_jumps)\n\n    # return the minimum value in the dp list as the minimum number of jumps required to reach (d, 0) from the origin\n    return min(dp)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # calculate total number of jumps required to reach (0,0) from origin\n    total_jumps = 0\n    x = 0\n    y = 0\n    steps_to_reach_d = 0\n    while (x, y)!= (0, 0):\n        total_jumps += 1\n        if y > d:\n            steps_to_reach_d += 1\n            y = y - 1\n        else:\n            y = y + 1\n            x = x + 1\n        if steps_to_reach_d >= steps:\n            return total_jumps\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    count = 0\n    step = 0\n\n    # Loop through steps\n    while step < steps:\n\n        # Check if we can reach (d, 0) from origin by one jump\n        if step + d >= steps:\n            count += 1\n            step = steps\n        else:\n            count += 1\n            step += d\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    current_point = (0, d)\n    \n    while current_point!= (steps, 0):\n        current_point = (current_point[0] + 1, current_point[1])\n        jumps += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # create a 2D array to store the distance of each step\n    steps_array = [[0] * steps for i in range(steps)]\n    # set the first step as the initial distance\n    steps_array[0][0] = d\n    # initialize the number of jumps and the step to which the last jump occurred\n    jumps = 1\n    last_step = 0\n    \n    # fill the remaining steps in the array\n    for i in range(1, steps):\n        # if the step is not the last step, check if the next step can be reached from the last step with a smaller distance\n        for j in range(steps-i-1):\n            # check if the next step can be reached from the current step with a smaller distance\n            if steps_array[j][j+1] > steps_array[j+1][j+2] + d:\n                steps_array[j][j+1] = steps_array[j][j+2] + d\n                # if a smaller distance is found, update the number of jumps and the step to which the last jump occurred\n                jumps += 1\n                last_step = j+1\n                break\n        # if the current step is the last step, no smaller distance can be reached from it, so set the step to infinity\n        else:\n            steps_array[i][i] = float('inf')\n    \n    # return the number of jumps required to reach the destination\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each element of the two lists\n    for i in range(len(nums1)):\n        # Check if the second element is zero\n        if nums2[i] == 0:\n            # If it is, raise a ZeroDivisionError\n            raise ZeroDivisionError(\"Second element cannot be zero\")\n        # Calculate the quotient of the first and second elements\n        quotient = nums1[i] / nums2[i]\n        # Append the quotient to the result list\n        result.append(quotient)\n    # Return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have different lengths\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have the same length\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            print(\"Error: Cannot divide by zero\")\n            return\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n        \n    return nums1"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list) + test_str[:-len(num_list)]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    str_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            str_list.append(char)\n    for i in range(len(num_list)):\n        test_str = test_str.replace(num_list[i], \"\")\n    for i in range(len(str_list)):\n        test_str += str_list[i]\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to hold the numbers\n    num_str = \"\"\n\n    # iterate through each character in the input string\n    for char in test_str:\n        # if the character is a number, append it to the num_str variable\n        if char.isdigit():\n            num_str += char\n        # otherwise, append the character as is\n        else:\n            num_str += char\n\n    # return the new string with all numbers moved to the end\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initializing variables\n    nums = []\n    result = []\n\n    # iterating through the string\n    for i in test_str:\n        # if the character is a number\n        if i.isdigit():\n            # appending the number to the nums list\n            nums.append(i)\n        else:\n            # if the character is not a number, appending it to the result list\n            result.append(i)\n\n    # iterating through the nums list and moving the numbers to the end of the result list\n    for i in range(len(nums)-1, -1, -1):\n        result.append(nums[i])\n\n    # joining the result list to get the final string\n    final_str = ''.join(result)\n\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to hold the numbers\n    nums = []\n    \n    # loop through the string\n    for char in test_str:\n        # if the character is a number, append it to the list\n        if char.isdigit():\n            nums.append(char)\n    \n    # loop through the list backwards and append each number to the end of the string\n    for num in nums:\n        test_str = test_str.replace(num, '')\n    \n    # return the final string with all the numbers moved to the end\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create an empty list to store the numbers\n    num_list = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # otherwise, add the character to the end of the string\n        else:\n            test_str += char\n    # join the list of numbers into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    result = \"\"\n\n    # split the input string into a list of characters\n    chars = list(test_str)\n\n    # loop through the characters in the list\n    for char in chars:\n        # if the character is a number, append it to the 'nums' list\n        if char.isdigit():\n            nums.append(char)\n        # otherwise, append it to the'result' string\n        else:\n            result += char\n\n    # loop through the 'nums' list and append it to the end of the'result' string\n    for num in nums:\n        result += num\n\n    # return the final string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    # initialize two pointers\n    left = 0\n    right = -1\n    \n    # traverse the string from the right side\n    while right < len(test_str) - 1:\n        # check if the current character is a digit\n        if test_str[right].isdigit():\n            # move the number to the end of the string\n            while test_str[right]!= test_str[right + 1]:\n                test_str = test_str[:right] + test_str[right + 1] + test_str[right]\n                right += 1\n            right += 1\n        # move the pointer to the right\n        right += 1\n    \n    # return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    # create a list to store the numbers in the string\n    num_list = []\n    \n    # loop through the string and check if each character is a number\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    \n    # reverse the list and join it back into a string\n    num_str = \"\".join(num_list[::-1])\n    \n    # return the final string with the numbers moved to the end\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for i in test_str:\n        if i.isdigit():\n            num_list.append(i)\n    if num_list:\n        return test_str[-len(num_list):] + ''.join(num_list)\n    else:\n        return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    subsets = []\n\n    for i in range(len(a)):\n        current_subset = [a[i]]\n        remaining_elements = list(set(a) - set(current_subset))\n\n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0:\n                current_subset.append(a[j])\n                remaining_elements.remove(a[j])\n\n            if len(current_subset) > max_size:\n                max_size = len(current_subset)\n                subsets = [current_subset]\n            elif len(current_subset) == max_size:\n                subsets.append(current_subset)\n\n        current_subset = []\n\n    return subsets, max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Initialize variables\n    max_subset_size = 0\n    current_subset_size = 0\n\n    # Iterate through the list\n    for i in range(len(a)):\n        # If the current element is even, add 1 to the subset size\n        if a[i] % 2 == 0:\n            current_subset_size += 1\n\n        # If the subset size is greater than the maximum size seen so far, update the maximum size\n        if current_subset_size > max_subset_size:\n            max_subset_size = current_subset_size\n\n        # If the current element is odd, subtract 1 from the subset size\n        if a[i] % 2 == 1:\n            current_subset_size -= 1\n\n    # Return the maximum subset size\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * (n + 1)\n    max_len = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if a[i - 1] % j == 0 and a[i - 1] % (j - 1) == 0:\n                dp[i] = max(dp[i], dp[j - 1] + 1)\n                max_len = max(max_len, dp[i])\n\n    return max_len"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_size = 1\n    \n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            max_size += 1\n        else:\n            max_size = 1\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    # Sort the list in ascending order\n    a.sort()\n    # Initialize the largest subset size as 1\n    largest = 1\n    # Initialize the current subset size as 1\n    current = 1\n    # Initialize the current subset as the first element of the list\n    subset = [a[0]]\n    # Iterate through the list\n    for i in range(1, len(a)):\n        # If the next element is divisible by the current element, add it to the current subset and increment the current subset size\n        if a[i] % subset[-1] == 0:\n            subset.append(a[i])\n            current += 1\n        # If the next element is not divisible by the current element, check if the current subset is larger than the largest subset seen so far and update the largest subset size and subset if necessary\n        else:\n            if current > largest:\n                largest = current\n                subset = [a[i]]\n            else:\n                # Remove the last element from the current subset to make room for the next element\n                subset.pop()\n                # Add the next element to the current subset and increment the current subset size\n                subset.append(a[i])\n                current = 1\n    # If the current subset is larger than the largest subset seen so far, update the largest subset size and subset\n    if current > largest:\n        largest = current\n        subset = [a[i] for i in range(len(a))]\n    # Return the largest subset size\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the input list in ascending order\n    a.sort()\n\n    # initialize the variables for the maximum subset size and current subset size\n    max_size = 0\n    curr_size = 0\n\n    # iterate over the list of numbers\n    for i in range(len(a)):\n        # if the current number is divisible by the previous number, increment the current subset size\n        if i > 0 and a[i] % a[i-1] == 0:\n            curr_size += 1\n        else:\n            # if the current subset size is greater than the maximum subset size, update the maximum subset size\n            if curr_size > max_size:\n                max_size = curr_size\n            # reset the current subset size\n            curr_size = 1\n\n    # return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Create a dictionary to store the frequency of each number in the list\n    freq = {}\n    for num in a:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Create a list to store the pairs of numbers with the maximum frequency\n    max_pairs = []\n\n    # Loop through the dictionary and find the pairs with the maximum frequency\n    for num, freq in freq.items():\n        for other_num, other_freq in freq.items():\n            if other_freq > freq:\n                if (num + other_num) in a:\n                    max_pairs.append((num, other_num))\n\n    # Return the size of the largest subset of numbers\n    return len(max_pairs)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    count = 0\n    curr_sum = a[0]\n    max_sum = a[0]\n    max_count = 1\n\n    for i in range(1, n):\n        curr_sum += a[i]\n        count += 1\n        if curr_sum == max_sum:\n            max_count += 1\n        elif curr_sum > max_sum:\n            max_sum = curr_sum\n            max_count = 1\n\n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    current_size = 0\n    pairs = []\n\n    for num in a:\n        if current_size == 0:\n            current_size += 1\n            pairs.append(num)\n        elif num % pairs[-1] == 0:\n            current_size += 1\n        else:\n            current_size = 1\n            pairs.append(num)\n\n        max_size = max(max_size, current_size)\n\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the median of the two lists\n    mid1 = n // 2\n    mid2 = n - mid1 - 1\n    median1 = arr1[mid1] if mid1 < len(arr1) else None\n    median2 = arr2[mid2] if mid2 < len(arr2) else None\n\n    # if both lists have the same median, return the median\n    if median1 == median2:\n        return median1\n\n    # if the first list has a median, check if the second list has a median\n    if median1 is not None:\n        if median2 is not None:\n            # if both lists have a median, compare their medians\n            if median1 < median2:\n                return median1\n            else:\n                return median2\n        else:\n            # if the first list has a median, check if the second list is sorted\n            if arr2[0] < arr1[n - 1]:\n                return median1\n            else:\n                return median2\n\n    # if the second list has a median, check if the first list has a median\n    if median2 is not None:\n        if median1 is not None:\n            # if both lists have a median, compare their medians\n            if median1 < median2:\n                return median2\n            else:\n                return median1\n        else:\n            # if the second list has a median, check if the first list is sorted\n            if arr1[0] < arr2[n - 1]:\n                return median2\n            else:\n                return median1\n\n    # if none of the above conditions apply, return None\n    return None\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two lists\n    combined_list = arr1 + arr2\n    # sort the combined list\n    combined_list.sort()\n    # calculate the median index\n    median_index = n // 2\n    # check if the length of the combined list is odd or even\n    if n % 2 == 0:\n        # return the average of two middle values\n        return (combined_list[median_index-1] + combined_list[median_index]) / 2\n    else:\n        # return the middle value\n        return combined_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge both arrays into one and sort it\n    merged_arr = sorted(arr1 + arr2)\n    \n    # Find the middle index\n    middle_index = n // 2\n    \n    # Check if the middle index is even or odd\n    if n % 2 == 0:\n        # If even, return the average of the middle two elements\n        return (merged_arr[middle_index-1] + merged_arr[middle_index]) / 2\n    else:\n        # If odd, return the middle element\n        return merged_arr[middle_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    return arr1[n//2] if n%2 == 0 else (arr1[n//2] + arr1[n//2-1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    arr.sort()\n    \n    # Get the size of the array\n    m = len(arr)\n    \n    # If the array size is odd, return the middle element\n    if m % 2 == 1:\n        return arr[m//2]\n    \n    # If the array size is even, return the average of the two middle elements\n    else:\n        return (arr[m//2] + arr[m//2-1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted lists of size n and returns the median of these lists.\n    '''\n\n    # Merge both sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Find the middle index of the sorted list\n    mid_index = n // 2\n\n    # If the length of the list is odd, return the middle element\n    if n % 2 == 1:\n        return sorted_list[mid_index]\n    # If the length of the list is even, return the average of the middle two elements\n    else:\n        return (sorted_list[mid_index - 1] + sorted_list[mid_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Find the median\n    if n % 2 == 0:\n        # If the number of elements in the merged list is even\n        median = (merged_list[n//2-1] + merged_list[n//2]) / 2\n    else:\n        # If the number of elements in the merged list is odd\n        median = merged_list[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Concatenate the two sorted arrays\n    combined_arr = arr1 + arr2\n    \n    # Sort the combined array\n    combined_arr.sort()\n    \n    # Find the middle index\n    middle_index = n // 2\n    \n    # Return the median\n    if n % 2 == 0:\n        return (combined_arr[middle_index - 1] + combined_arr[middle_index]) / 2\n    else:\n        return combined_arr[middle_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Combine the two lists into a single list\n    combined_list = arr1 + arr2\n    \n    # Sort the combined list\n    combined_list.sort()\n    \n    # Check if the size of the combined list is odd or even\n    if n % 2 == 0:\n        # Find the median of the combined list\n        median = (combined_list[n//2 - 1] + combined_list[n//2]) / 2\n    else:\n        # Find the median of the combined list\n        median = combined_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    merged_list.sort()\n    \n    # Find the median of the merged list\n    mid = n // 2\n    \n    if n % 2 == 0:\n        # Find the average of the middle two elements\n        median = (merged_list[mid-1] + merged_list[mid]) / 2\n    else:\n        # Find the middle element\n        median = merged_list[mid]\n    \n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function computes the nth power of each number in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input.\n    It computes the n-th power of each number in the list and returns the result.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as an argument and returns the same string in uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        print(newList)\n    else:\n        print(\"The given list does not have enough elements to swap.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return None\n    elif len(newList) == 2:\n        return newList[::-1]\n    else:\n        return newList[:2] + newList[::-1][2:]"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Swap first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) >= 2:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        # If the list has less than two elements, return the original list\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list should have at least two elements to swap.\"\n\n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    if length > 1:\n        first_element = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = first_element\n    else:\n        print(\"Error: The list should have at least two elements.\")\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) > 1:\n        # Swap the first and last elements\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"The list must have at least two elements to swap.\")\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # checking if the list has more than one element\n    if len(newList) > 1:\n        # swapping the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"List has less than two elements!\")\n        return None"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    first = newList[0]\n    last = newList[-1]\n    \n    newList[0] = last\n    newList[-1] = first\n    \n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = 3.14159 * r * r\n\n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = math.pi * r * r\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the radius of the semicircle\n    s = r / 2\n\n    # Calculate the area of the smallest triangle\n    area_1 = (3 * r * r) / 4\n\n    # Calculate the area of the second smallest triangle\n    area_2 = (4 * r * r) / 9\n\n    # Calculate the area of the largest triangle\n    area_3 = (s * s) / 3\n\n    # Calculate the sum of the areas of all three triangles\n    area_sum = area_1 + area_2 + area_3\n\n    # Return the area of the largest triangle\n    return area_sum"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    h = (2*r)/(3*math.sqrt(3))\n    s = math.sqrt(3)*r\n    area = 0.5*s*h\n    print(\"The area of the largest triangle that can be inscribed in a semicircle with a radius of\", r, \"is\", area)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    import math\n    \n    # Area of a triangle = (1/2) * base * height\n    # where base = height = r\n    \n    # Area of a square = r^2\n    # where r is the given radius\n    \n    # Area of the largest triangle that can be inscribed in a semicircle with radius r\n    # = pi * r^2\n    # where pi is the mathematical constant\n    \n    area_of_largest_triangle = math.pi * r ** 2\n    \n    return area_of_largest_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate semi-circle area\n    semi_circle_area = 2 * r ** 2\n    # Calculate area of triangle with sides of length r and angle of 90 degrees\n    angle_90 = 90 * (math.pi / 180)\n    area_triangle_90 = 0.5 * r * r * math.sin(angle_90)\n    # Calculate area of largest triangle that can be inscribed in the semicircle\n    area_largest_triangle = max(semi_circle_area, area_triangle_90)\n    return area_largest_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Find the area of the largest triangle that can be inscribed in a semicircle with radius r\n    s = (3*r**2)/(4*math.tan(math.pi/3))\n    area = (s**2)/(4*math.tan(math.pi/3))**2\n\n    # Print the area of the largest triangle inscribed in a semicircle\n    print(\"The area of the largest triangle that can be inscribed in a semicircle with radius\", r, \"is\", area, \"square units.\")\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    a = math.pi * (r ** 2)\n    b = 2 * math.pi * r\n    c = 2 * math.pi * r ** 2\n    \n    s = (a + b + c) / 2\n    \n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Converting radius to semi-circle radius\n    s = r/2\n    \n    # Using Heron's formula to find the area of the triangle\n    area = 0.5*s*(s-r)*(s-2*r)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            continue\n        else:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Check if the array is sorted or not\n    if end is None:\n        end = len(array) - 1\n    if array[start] > array[end]:\n        return find_First_Missing(array, start + 1, end)\n    elif array[start] == array[end]:\n        # If the array is sorted and has duplicates, try excluding the largest number\n        if start < end:\n            return find_First_Missing(array, start + 1, end - 1)\n        else:\n            return len(array)\n    else:\n        # If the array is sorted and has no duplicates, try excluding the smallest number\n        if start < end:\n            return find_First_Missing(array, start + 1, end)\n        else:\n            return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            start = mid + 1\n        elif array[mid] > mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the first missing number.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # check if the input array is sorted\n    if len(array) > 1 and array[0] < array[1]:\n        # check if the input array is fully sorted\n        if end is None or end > len(array)-1:\n            end = len(array)-1\n        \n        # binary search for the first missing number\n        while start <= end:\n            mid = (start + end) // 2\n            \n            # check if the mid number is present in the array\n            if mid in array:\n                # check if the mid number is the first missing number\n                if mid == len(array) - 1:\n                    return mid\n                # if the mid number is not the first missing number, update the start and end indices\n                else:\n                    end = mid - 1\n            # if the mid number is not present in the array, update the start and end indices\n            else:\n                start = mid + 1\n                \n        # if the binary search fails, return -1\n        return -1\n    else:\n        return -1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return len(array) + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Check if the input is a list\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list\")\n    \n    # Check if the list contains only integers\n    if not all(isinstance(i, int) for i in array):\n        raise TypeError(\"List must contain only integers\")\n    \n    # Check if the list is sorted in ascending order\n    if len(array) > 1 and array[1] <= array[0]:\n        raise ValueError(\"List must be sorted in ascending order\")\n    \n    # Check if the start and end indices are valid\n    if start < 0 or end >= len(array):\n        raise ValueError(\"Start and end indices must be within the bounds of the array\")\n    \n    # Check if the start and end indices are valid\n    if end is None:\n        end = len(array) - 1\n    \n    # Initialize the missing number to the maximum possible value\n    missing_num = len(array) + 1\n    \n    # Iterate through the array using the binary search algorithm\n    while start <= end:\n        mid = (start + end) // 2\n        \n        if array[mid] == mid:\n            missing_num = mid\n            end = mid - 1\n        elif array[mid] < mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n    \n    # Return the missing number\n    return missing_num"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    :param array: sorted list of natural numbers\n    :param start: starting index of the search range (default 0)\n    :param end: ending index of the search range (default None)\n    :return: the smallest missing number or None if the list is empty\n    \"\"\"\n    if not array:\n        return None\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a new list of even numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if sub:\n        return sub\n    else:\n        sub = []\n        if x > 0:\n            sub.append((x-1, y))\n        if x < 9:\n            sub.append((x+1, y))\n        if y > 0:\n            sub.append((x, y-1))\n        if y < 9:\n            sub.append((x, y+1))\n        return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj_coords = []\n    if x > 0 and y > 0:\n        adj_coords.append((x-1,y-1))\n    if x > 0:\n        adj_coords.append((x-1,y))\n    if x > 0 and y < 2:\n        adj_coords.append((x-1,y+1))\n    if y > 0:\n        adj_coords.append((x,y-1))\n    if y < 2:\n        adj_coords.append((x,y+1))\n    if x < 2 and y > 0:\n        adj_coords.append((x+1,y-1))\n    if x < 2:\n        adj_coords.append((x+1,y))\n    if x < 2 and y < 2:\n        adj_coords.append((x+1,y+1))\n    return adj_coords + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    if row > 0:\n        sub.append((row - 1, col))\n    if row < 4:\n        sub.append((row + 1, col))\n    if col > 0:\n        sub.append((row, col - 1))\n    if col < 4:\n        sub.append((row, col + 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = []\n    if x - 1 >= 0:\n        result.append((x-1, y))\n    if x + 1 < 3:\n        result.append((x+1, y))\n    if y - 1 >= 0:\n        result.append((x, y-1))\n    if y + 1 < 3:\n        result.append((x, y+1))\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define the boundary conditions for the given coordinate system\n    # For example, if the coordinates are (x,y), the boundary conditions can be:\n    # - x = -infinity to infinity\n    # - y = -infinity to infinity\n    # - All other coordinates are finite\n    x_min, y_min, x_max, y_max = -float('inf'), -float('inf'), float('inf'), float('inf')\n\n    # Extract the coordinates of the given element\n    x, y = ele\n\n    # Generate all the adjacent coordinates using a list comprehension\n    adj_coords = [(x+dx, y+dy) for dx in range(-1, 2) for dy in range(-1, 2) if not (dx == 0 and dy == 0)]\n\n    # Filter out the coordinates that are outside of the boundary conditions\n    adj_coords = [(x, y) if x_min <= x <= x_max and y_min <= y <= y_max else (x+dx, y+dy) for dx in range(-1, 2) for dy in range(-1, 2) if not (dx == 0 and dy == 0) and (x_min <= x+dx <= x_max and y_min <= y+dy <= y_max)]\n\n    # Recursively generate the adjacent coordinates of the adjacent elements\n    adj_elements = []\n    for coord in adj_coords:\n        adj_elements += adjac(coord, adj_elements)\n\n    return adj_elements"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if sub is None:\n        sub = []\n    sub.append(ele)\n    if len(sub) == 2:\n        return sub\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue\n            adj = (ele[0]+i, ele[1]+j)\n            if adj not in sub:\n                sub.append(adj)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    # The four adjacent coordinates\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    \n    # Filter out the coordinates that are out of bounds\n    adj = [adj_ele for adj_ele in adj if 0 <= adj_ele[0] < len(sub) and 0 <= adj_ele[1] < len(sub[0])]\n    \n    # Add the current coordinate to the sublist\n    sub.append(ele)\n    \n    # Recursively call the function for the adjacent coordinates\n    return [adjac(adj_ele, sub) for adj_ele in adj]"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extract the row and column coordinates of the given tuple\n    x, y = ele\n    \n    # Iterate over the possible adjacent rows and columns and store them in a new list\n    for i in range(max(0, x-1), min(x+2, 8)):\n        for j in range(max(0, y-1), min(y+2, 8)):\n            if i!= x or j!= y:  # Exclude the current element\n                sub.append((i,j))\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # check if the element is a tuple or not\n    if type(ele)!= tuple:\n        return None\n    # get the first element of the tuple\n    x, y = ele\n    # get all the adjacent coordinates\n    adj_coords = [(x+dx, y+dy) for dx, dy in [[-1,0], [1,0], [0,-1], [0,1]] if 0 <= x+dx < len(sub) and 0 <= y+dy < len(sub[0])]\n    # return the adjacent coordinates\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    sub.append((x+1, y))\n    sub.append((x-1, y))\n    sub.append((x, y+1))\n    sub.append((x, y-1))\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    # Convert the string to lowercase\n    text = text.lower()\n\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # create a new string that will hold the replaced text\n    new_text = ''\n    \n    # iterate over each character in the input string\n    for char in text:\n        # if the character is a space, replace it with an underscore\n        if char =='':\n            new_text += '_'\n        # if the character is an underscore, replace it with a space\n        elif char == '_':\n            new_text +=''\n        # otherwise, append the character to the new string\n        else:\n            new_text += char\n            \n    # return the new string with replaced spaces and underscores\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    result = \"\"\n    for char in text:\n        if char =='':\n            result += '_'\n        elif char == '_':\n            result +=''\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char.isspace():\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces = \" \"\n    underscore = \"_\"\n\n    for char in text:\n        if char == spaces:\n            text = text.replace(char, underscore)\n        elif char == underscore:\n            text = text.replace(char, spaces)\n    \n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Removing all whitespaces from the text\n    text = text.replace(\" \", \"\")\n    # Replacing all underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    # Replacing all whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace whitespaces with underscores\n    result = text.replace(\" \", \"_\")\n    # Replace underscores with whitespaces\n    result = result.replace(\"_\", \" \")\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    return new_text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n    # Loop through each word\n    for i in range(len(words)):\n        # Check if the word contains a space\n        if'' in words[i]:\n            # Replace all spaces with underscores\n            words[i] = words[i].replace(' ', '_')\n        else:\n            # Replace all underscores with spaces\n            words[i] = words[i].replace('_','')\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_indices = []\n    non_zero_indices = []\n    for i, num in enumerate(num_list):\n        if num!= 0:\n            non_zero_indices.append(i)\n        else:\n            zero_indices.append(i)\n    \n    zero_indices.sort()\n    for zero_index in zero_indices:\n        non_zero_indices.insert(0, num_list.pop(zero_index))\n        \n    return non_zero_indices"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Using two pointers to traverse the list\n    i = 0\n    j = 0\n    while j < len(num_list):\n        # Move non-zero elements to their correct position\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    # If there were no zeroes, return the original list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    # Initialize two pointers, one for the first non-zero element and one for the last element in the list\n    i = 0\n    j = len(num_list) - 1\n    \n    # Traverse the list from the first non-zero element to the last\n    while i <= j:\n        # If the current element is non-zero, swap it with the next non-zero element\n        if num_list[i]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n        # If the current element is zero, increment the index of the first non-zero element\n        else:\n            i += 1\n    \n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0  # counter to keep track of number of non-zero elements\n    \n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize variables\n    count = 0\n    i = 0\n    \n    # iterate through the list\n    while i < len(num_list):\n        # check if the current element is zero\n        if num_list[i] == 0:\n            # move the zero to the end of the list\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            # increment the count\n            count += 1\n        # increment the index\n        i += 1\n        \n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.reverse()\n    i = 0\n    while i < len(num_list) and num_list[i] == 0:\n        num_list.pop(i)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    # Loop through the list\n    for i in range(len(num_list)):\n        \n        # If the current number is zero, swap it with the last non-zero number\n        if num_list[i] == 0 and i!= len(num_list)-1:\n            temp = num_list[i]\n            num_list[i] = num_list[len(num_list)-1]\n            num_list[len(num_list)-1] = temp\n        \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    # Loop through the list and find all the zeroes\n    zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n    \n    # Move the zeroes to the end of the list\n    for num in num_list:\n        if num!= 0:\n            if num in zeroes:\n                zeroes.remove(num)\n            else:\n                num_list.append(num)\n    \n    # Remove the zeroes from the list\n    for num in zeroes:\n        num_list.remove(num)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of integers as input and moves all zeroes to the end of the list.\n    '''\n    index = 0\n\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[index], num_list[i] = num_list[i], num_list[index]\n            index += 1\n\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Calculate the xor of all pairs of elements in the list\n    xor_sum = sum([a^b for a in arr for b in arr])\n    \n    # Print the result\n    print(xor_sum)"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and a positive integer n as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            xor_sum = 0\n            for k in range(n):\n                if k == i or k == j:\n                    xor_sum ^= arr[k]\n            sum += xor_sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    # initialize variables for sum and xor\n    sum_xor = 0\n    xor = 0\n    # loop through the array\n    for i in range(n):\n        # add the current element to xor and calculate the xor of the previous elements\n        xor = xor ^ arr[i]\n        # add the xor of the previous elements to the sum\n        sum_xor = sum_xor ^ xor\n    # return the sum of xor of all pairs of elements\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes in a list of integers and an integer n. The function calculates the sum of XOR of all pairs of numbers in the list.\n\n    Args:\n    arr (list): A list of integers.\n    n (int): An integer representing the number of elements in the list.\n\n    Returns:\n    int: The sum of XOR of all pairs of numbers in the list.\n    \"\"\"\n    # XOR operation is defined as (a XOR b) = (a AND NOT b) OR (b AND NOT a)\n    # We can calculate the XOR of all pairs of elements in the list using the following formula:\n    # XOR_sum = XOR(arr[0],arr[1]) XOR XOR(arr[1],arr[2]) XOR... XOR XOR(arr[n-2],arr[n-1])\n    # We can use the formula XOR(arr[i], arr[j]) = (arr[i] XOR arr[j]) AND (NOT arr[i] XOR NOT arr[j])\n    # To calculate the XOR of all pairs of elements, we can iterate over all pairs of indices i and j and calculate XOR(arr[i], arr[j]),\n    # where XOR is the XOR operation defined above.\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes in a list of integers and an integer n, and returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n\n    # iterate through the list\n    for i in range(n):\n        xor_sum ^= arr[i]\n\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list so that we can use heapq\n    arr = list(iterable)\n    # Build a min heap from the list\n    hq.heapify(arr)\n    # Extract elements from the heap in sorted order\n    result = []\n    while arr:\n        result.append(hq.heappop(arr))\n    # Convert the list back to an iterable\n    return iter(result)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = [0] * len(iterable)\n    hq.heapify(heap)\n    \n    for num in iterable:\n        hq.heappush(heap, -num)\n        \n    sorted_list = [hq.heappop(heap) for _ in range(len(iterable))]\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    arr = list(iterable)\n    n = len(arr)\n    \n    # Build heap (rearrange array)\n    for i in range(n//2-1, -1, -1):\n        hq.heapify(arr, n, i)\n    \n    # One by one extract an element from heap\n    for i in range(n-1, 0, -1):\n        # Move current root to end\n        arr[0], arr[i] = arr[i], arr[0]\n        # call max_heapify on the reduced heap\n        hq.heapify(arr, i, 0)\n    \n    return arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while hq.heappop(iterable) is not None:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(iterable.pop())\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a min heap.\n    '''\n    # create a min heap from the input list\n    hq.heapify(iterable)\n\n    # build the output list in reverse order\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a heap\n    hq.heapify(iterable)\n    # sort the heap\n    hq.heapify(iterable, 0, len(iterable)-1)\n    # extract the elements from the heap\n    result = []\n    while len(iterable) > 0:\n        result.append(hq.heappop(iterable))\n    # reverse the list to get the sorted elements\n    result.reverse()\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts the given iterable using heap sort algorithm.\n    \"\"\"\n    # convert the iterable to a heap\n    hq.heapify(iterable)\n    \n    # extract and store the first element from the heap\n    heap_sort_list = [hq.heappop(iterable)]\n    \n    # repeat until the heap is empty\n    while iterable:\n        # extract and store the maximum element from the heap\n        heap_sort_list.append(hq.heappop(iterable))\n    \n    return heap_sort_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss.\n    It returns True if the amount has no profit and no loss, False otherwise.\n    '''\n    \n    # if the actual cost is greater than the sale amount, there is no profit and no loss\n    if actual_cost > sale_amount:\n        return True\n    \n    # if the actual cost is less than the sale amount, there is a loss but no profit\n    elif actual_cost < sale_amount:\n        return False\n    \n    # if the actual cost is equal to the sale amount, there is a loss and a profit\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n    if profit < 0 and loss < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if sale_amount < actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount: # if the actual cost is greater than or equal to the sale amount\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount >= 0 and sale_amount >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # Check if the profit and loss are zero\n    if profit == 0 and loss == 0: \n        print(\"The amount has no profit and no loss\")\n    else: \n        print(\"The amount does not have no profit and no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        print(\"No profit or loss\")\n    else:\n        print(\"Profitable\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        print(\"Profitable\")\n    elif actual_cost > sale_amount:\n        print(\"Loss\")\n    else:\n        print(\"Loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill coefficient\n    c = 0.0625\n    \n    # Calculate the wind chill temperature\n    wct = c * (t - 273.15) + 32\n    \n    # Calculate the wind chill index\n    wci = 0.5 * (wct / v) + 32\n    \n    # Round the wind chill index to the nearest integer\n    wci = int(wci + 0.5)\n    \n    # Return the wind chill index\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # convert wind velocity to m/s\n    v = v * 3.6\n\n    # calculate the dewpoint temperature\n    dew_point = (t * 1.8) + 32\n\n    # calculate the wind chill index\n    wci = 23.79 + 0.6215 * v - 11.37 * math.log(t + 273.15) + 0.3965 * dew_point - 0.14 * (v ** 0.16)\n\n    # round to the nearest integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to fahrenheit\n    temp_f = (t * 1.8) + 32\n    \n    # Calculate the wind chill temperature\n    if v < 10:\n        wc = 0.25 * v * temp_f\n    elif v < 20:\n        wc = 0.50 * v * temp_f\n    else:\n        wc = 0.75 * v * temp_f\n    \n    # Calculate the wind chill index\n    wc_index = math.ceil(wc / 22.5)\n    \n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = t + 273.15  # convert to Kelvin\n    vc = v * 1.60934  # convert to m/s\n    wind_chill_index = 23.42 * (vc / 0.621971) * (1 - (0.0065 * (t - 273.15)))\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index given the wind velocity in km/h and temperature in celsius.\n    '''\n\n    if t < -5:\n        return None  # invalid temperature\n\n    wind_speed = math.sqrt(v**2 + 0.14 * (t + 273.15))  # calculate wind speed at sea level\n\n    if wind_speed < 3:\n        wchill = (t + 273.15) - 0.0065 * (t + 273.15) * (t + 273.15) + 0.016 * (t - 273.15) * (t - 273.15)\n    elif 3 <= wind_speed < 15:\n        wchill = t - 0.0042 * (wind_speed - 10) - 0.0068 * (t - 273.15)\n    else:\n        wchill = t - 0.0042 * (wind_speed - 10) - 0.0068 * (t - 273.15)\n\n    return int(wchill + 0.5)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if t <= 0:\n        return \"Temperature cannot be zero or negative.\"\n    else:\n        wc = math.floor(35.74 + 0.6215*v + 10.34*t - 0.2247*t*t - 0.0068*v*v)\n        return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 2 * v * math.sin(math.radians(t))\n    return int(round(w))\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the wind chill index\n    wci = 13.12 + (0.6215 * v) - (11.37 * math.exp(-(t - 273.15) / 10.0))\n\n    # Round the wind chill index to the nearest integer\n    wci = math.ceil(wci)\n\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from Celsius to Kelvin\n    k = t + 273.15\n\n    # Calculate the wind speed (m/s)\n    ws = v * 1.609344  # Conversion from km/h to m/s\n\n    # Calculate the reference temperature (K)\n    ref = 0.0622 * ws * (math.exp((17.625 * k) / (k + 243.5)) - 1) + 237.3\n\n    # Calculate the wind chill index (\u00b0C)\n    wc = ref - t\n\n    # Return the wind chill index rounded to the next integer\n    return math.ceil(wc)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper() == False:\n            sum += len(name)\n    return sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # define a function to check if a name starts with a lowercase letter\n    def starts_with_lowercase(name):\n        if name[0].islower():\n            return True\n        else:\n            return False\n    \n    # loop through the list of names and remove those starting with lowercase letters\n    sample_names_new = []\n    for name in sample_names:\n        if not starts_with_lowercase(name):\n            sample_names_new.append(name)\n    \n    # loop through the list of names again to calculate the sum of the lengths of the remaining names\n    total_length = 0\n    for name in sample_names_new:\n        total_length += len(name)\n    \n    # return the sum of the lengths of the remaining names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # filter out names starting with a lowercase letter\n    lower_names = [name for name in sample_names if not name[0].islower()]\n    # calculate the sum of the lengths of the remaining names\n    sum_lengths = sum(len(name) for name in lower_names)\n    return sum_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Loop through the list of names\n    total_length = 0\n    for name in sample_names:\n        # If the name does not start with a lowercase letter, add its length to the total length\n        if not name.startswith('a'):\n            total_length += len(name)\n    # Return the total length of the names after removing the lowercase ones\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # create an empty list to store the names with lowercase letters removed\n    lowercase_names = []\n\n    # iterate over each name in the original list\n    for name in sample_names:\n        # check if the first character of the name is lowercase\n        if name[0].islower():\n            # if it is, append it to the lowercase_names list\n            lowercase_names.append(name)\n\n    # create an empty list to store the names with punctuation removed\n    punctuated_names = []\n\n    # iterate over each name in the lowercase_names list\n    for name in lowercase_names:\n        # remove all punctuation from the name and store it in the punctuated_names list\n        name = ''.join([char for char in name if char not in ',.;?!'])\n        punctuated_names.append(name)\n\n    # sum the lengths of the names in the punctuated_names list\n    total_length = sum([len(name) for name in punctuated_names])\n\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # Filter the names that start with a lowercase letter\n    filtered_names = list(filter(lambda x: x[0].isupper(), sample_names))\n\n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    # initialize a variable to store the sum of names lengths\n    sum_length = 0\n    \n    # iterate over each name in the list\n    for name in sample_names:\n        # remove any name that starts with a lowercase letter\n        if not name[0].isupper():\n            # add the length of the remaining name to the sum\n            sum_length += len(name)\n    \n    # return the sum of all the names lengths\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)') # regex pattern to match parenthesis\n    items = re.sub(pattern, '', items) # remove parenthesis using regex replace method\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove any parenthesis from the string\n    items = re.sub('\\(', '', items)\n    items = re.sub('\\)', '', items)\n    # Remove any text inside the parenthesis\n    items = re.sub('[\\w\\s]+', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove all the parenthesis from the string\n    items = re.sub(r'\\(.*?\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]+\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parentheses from the string\n    items = re.sub(r'\\(', '', items)\n    items = re.sub(r'\\)', '', items)\n    # Return the string without parentheses\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\((.*?)\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2 * n - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the sum of nonagonal numbers to 0\n    nonagonal_sum = 0\n    # Iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Add the square of the number to the sum\n        nonagonal_sum += i*i\n    # Return the sum of nonagonal numbers\n    return nonagonal_sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Calculate the number of rows in the square matrix\n    num_rows = int(n/2) + 1\n\n    # Initialize the first row with 1\n    row = [1]\n\n    # Iterate through the remaining rows\n    for i in range(1, num_rows):\n        # Calculate the current number in the row\n        current_num = (2 * i) - 1\n\n        # Append the current number to the row\n        row.append(current_num)\n\n    # Return the nth nonagonal number\n    return row[n-1]"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Define the first nonagonal number\n    first_nonagonal = 1\n\n    # Define the number of nonagonal numbers to find\n    num_nonagonal = 0\n\n    # Define the number of rows in the pyramid\n    num_rows = 2 * n - 1\n\n    # Define the variable to hold the current row of the pyramid\n    current_row = 1\n\n    # Define the variable to hold the current number in the current row\n    current_num = first_nonagonal\n\n    # Loop through each row of the pyramid\n    for i in range(1, num_rows + 1):\n\n        # Add the current number to the total number of nonagonal numbers\n        num_nonagonal += current_num\n\n        # Move to the next row by doubling the number of nonagonal numbers\n        if i == num_rows:\n            num_nonagonal += current_num\n\n        # Move to the next number in the current row\n        if i > 0 and i <= num_rows:\n            current_num += 2\n\n        # Print the current row\n        if i % 2 == 0:\n            for j in range(1, current_row + 1):\n                print(current_num, end=' ')\n            print()\n        else:\n            for j in range(1, current_row + 1):\n                print(current_num, end=' ')\n            print()\n\n        # Update the current row\n        current_row += 2\n\n    # Print the total number of nonagonal numbers found\n    print(\"Total number of nonagonal numbers found:\", num_nonagonal)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (2 * n) ** 2 + (2 * n - 1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    else:\n        return (2 * (n - 1)) * (n - 1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n+1)) // 2\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n-1)\n\nprint(is_nonagonal(5))  # Output: 10\nprint(is_nonagonal(10))  # Output: 30\nprint(is_nonagonal(15))  # Output: 45"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Initialize a counter variable\n    counter = 1\n\n    # Initialize a counter for the nonagonal numbers\n    nonagonal_count = 0\n\n    # Iterate through each side of the square\n    for i in range(1, n+1):\n        # Calculate the number of squares on the right\n        square_count = i*i\n\n        # If the counter is less than the square count, add the counter to the nonagonal count\n        if counter < square_count:\n            nonagonal_count += counter\n\n        # Increment the counter for the next side\n        counter += 1\n\n    # Return the nth nonagonal number\n    return nonagonal_count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    else:\n        return 4 * (2 * n - 1)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Check if the first and last words have 'z'\n    if re.search(r'\\bzz\\b', words[0]) and re.search(r'\\bzz\\b', words[-1]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z0-9]+\\b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = text.split()\n\n    # Iterate through each word\n    for word in words:\n        # Check if the word contains 'z' except at the start and end\n        if re.search(r'z[^z]*z[^z]*', word, re.IGNORECASE):\n            # If the word contains 'z', return True\n            return True\n\n    # If no word contains 'z', return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    # Define a regular expression pattern to match 'z' except at the start and end of the word\n    pattern = r'\\b(?!\\w)(z)(?!\\w)\\b'\n    # Use the re.search() method to search for the pattern in the input text\n    match = re.search(pattern, text)\n    # Return True if the pattern was found and False otherwise\n    return bool(match)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"(?<=^|[^\\w\\s])z(?=\\w$)\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Remove all special characters and convert to lowercase\n    text = re.sub('[^a-zA-Z ]+', '', text).lower()\n\n    # Split the text into words\n    words = text.split()\n\n    # Iterate through each word and check if it contains 'z'\n    for i in range(len(words)):\n        if words[i] == 'z':\n            # Check if it's the first or last word in the string\n            if i == 0 or i == len(words) - 1:\n                return True\n\n    # If no 'z' is found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<=\\w)z(?=\\w)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the input array\n    n = len(input)\n    # Initialize two pointers i and j which will help in reversing the array\n    i = 0\n    j = n-1\n    # Initialize a variable temp to store the value of input[j]\n    temp = input[j]\n    # While i is less than k and j is greater than i\n    while i < k and j > i:\n        # Swap the values of input[i] and input[j]\n        input[i], input[j] = input[j], input[i]\n        # Increment i and decrement j\n        i += 1\n        j -= 1\n    # If k is greater than or equal to n, then swap the values of input[i] and input[k-1]\n    if k >= n:\n        input[i], input[k-1] = input[k-1], input[i]\n    # Reverse the array from k to n-1\n    for l in range(k, n-1):\n        # Swap the values of input[l] and input[n-1-l]\n        input[l], input[n-1-l] = input[n-1-l], input[l]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    n = len(input)\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # Reverse the array from k to n-1\n    for i in range(k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Swap first and last elements\n    input[0], input[n-1] = input[n-1], input[0]\n    # Reverse remaining elements\n    for i in range(1, n-k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from the beginning to k-1\n    for i in range(k-1, len(input)-1, -1): \n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i] \n\n    # Reverse the array from k to the end\n    for i in range(k, len(input)-1): \n        input[i], input[k-1+i] = input[k-1+i], input[i] \n\n    # Return the reversed array\n    return input \n"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    if k >= length:\n        return input\n    else:\n        temp = input[k]\n        input[k] = input[length-1]\n        input[length-1] = temp\n        return reverse_Array_Upto_K(input, k+1)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # get the length of the array\n    n = len(input)\n    # check if k is valid\n    if k < 0 or k >= n:\n        print(\"Error: Invalid k value\")\n        return None\n    # reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # if k is not less than n, reverse the entire array\n    if k >= n:\n        return input\n    \n    # reverse the elements between 0 and k-1\n    for i in range(k):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # get the length of the input array\n    n = len(input)\n\n    # if k is greater than or equal to the length of the array, reverse the entire array\n    if k >= n:\n        input.reverse()\n        return input\n\n    # reverse the array from index 0 to k - 1\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Get the length of the array\n    n = len(input)\n\n    # Check if k is valid\n    if k > n or k <= 0:\n        print(\"Invalid position\")\n        return\n\n    # Swap the first and k positions\n    input[0], input[k-1] = input[k-1], input[0]\n\n    # Reverse the remaining part of the array\n    for i in range(1, n-k+1):\n        input[i], input[n-i] = input[n-i], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, -1, -1):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Check if the input is valid\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    if not isinstance(test_dict, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    # Merge the two dictionaries\n    merged_dict = {**test_dict, **test_tup[0]}\n    # Create a new tuple with the merged dictionary\n    new_tup = (test_tup[0], merged_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup[0], test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # check if the dictionary is a dictionary\n    if not isinstance(test_dict, dict):\n        print(\"Error: the dictionary should be a dictionary\")\n        return\n    \n    # check if the dictionary is empty\n    if not test_dict:\n        print(\"Error: the dictionary should not be empty\")\n        return\n    \n    # create a new dictionary with the elements of the original tuple and the elements of the dictionary\n    new_dict = {**test_dict, **test_tup}\n    \n    # convert the new dictionary to a tuple\n    new_tup = tuple(new_dict.values())\n    \n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary and add the elements of the input dictionary to it\n    new_dict = test_dict.copy()\n    new_dict.update(test_tup)\n    # Convert the new dictionary to a tuple\n    new_tup = tuple(new_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = tuple(test_tup)\n        test_tup = (key, value)\n        test_tup = tuple(test_tup)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # check if test_dict is already a tuple\n    if isinstance(test_dict, tuple):\n        # add test_dict to the tuple\n        test_tup = tuple(test_tup + test_dict)\n    else:\n        # convert test_dict to a tuple and add it to the tuple\n        test_dict = tuple(test_dict.items())\n        test_tup = tuple(test_tup + test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the given key value pairs\n    new_dict = {**test_dict}\n    # unpack the tuple\n    new_tup = test_tup\n    # add the new dictionary to the tuple\n    new_tup += (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Loop through the keys of the dictionary\n    for key in test_dict:\n        # Check if the key already exists in the tuple\n        if key in test_tup:\n            # If it does, add the value of the key to the existing tuple\n            test_tup[test_tup.index(key)] = test_dict[key]\n        else:\n            # If it doesn't, add the key and value to the end of the tuple\n            test_tup += (key, test_dict[key])\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # add the dictionary to the tuple\n    return (test_tup, test_dict)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # initialize variables to keep track of the maximum average and the maximum path\n    max_avg = float('-inf')\n    max_path = []\n\n    # iterate through each cell in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n\n            # if the current cell is not a boundary cell,\n            if i!= 0 and j!= 0:\n                # compute the total cost of the current path\n                total_cost = cost[i][j] + cost[i-1][j] + cost[i][j-1] - cost[i-1][j-1]\n\n                # check if this path has a higher average than the current maximum average\n                if total_cost / (i+j+1) > max_avg:\n                    max_avg = total_cost / (i+j+1)\n                    max_path = [(i,j), (i-1,j), (i,j-1)]\n\n    # return the maximum path with its average\n    return max_path, max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n\n    # Initialize the first row and column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        dp[i][0] = cost[i][0]\n\n    # Fill in the rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            if i == j:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                avg = dp[i][j]\n            else:\n                avg = dp[i][j] - cost[i][j]\n            if avg > max_avg:\n                max_avg = avg\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    \n    def dfs(i, j, visited, path_sum, max_sum, max_len):\n        \"\"\"\n        Depth-first search algorithm to find all paths with max average.\n        \"\"\"\n        \n        if i == n - 1 and j == m - 1:\n            path_sum -= cost[i][j]\n            if path_sum < 0:\n                return\n            elif len(path) > max_len:\n                max_len = len(path)\n                max_sum = path_sum\n            return\n        \n        if i < n and j < m:\n            visited.add((i, j))\n            path.append((i, j))\n            \n            dfs(i + 1, j, visited, path_sum, max_sum, max_len)\n            dfs(i, j + 1, visited, path_sum, max_sum, max_len)\n            \n            visited.remove((i, j))\n            path.pop()\n            \n    n, m = len(cost), len(cost[0])\n    max_sum = float('-inf')\n    max_len = 0\n    visited = set()\n    path = []\n    \n    dfs(0, 0, visited, 0, max_sum, max_len)\n    \n    return max_sum / max_len"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    max_avg = float('-inf')\n    max_path = []\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n                max_path = [[i,j]]\n                continue\n            if i == n-1 and j == n-1:\n                break\n            if i < n-1 and dp[i+1][j] > max_avg:\n                max_avg = dp[i+1][j]\n                max_path.append([i+1,j])\n            if j < n-1 and dp[i][j+1] > max_avg:\n                max_avg = dp[i][j+1]\n                max_path.append([i,j+1])\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize the first row and first column\n    curr_row, curr_col = 0, 0\n    max_cost = float('-inf')\n    max_path = []\n    # Traverse the matrix from top-left to bottom-right\n    while curr_row < N and curr_col < N:\n        # If the current cell is not a wall, update the max_cost and max_path\n        if cost[curr_row][curr_col]!= 0:\n            max_cost = max(max_cost, cost[curr_row][curr_col])\n            max_path.append(cost[curr_row][curr_col])\n        # Move to the right if the current cell is a wall or right wall\n        if curr_col == N-1 or cost[curr_row][curr_col+1]!= 0:\n            curr_col += 1\n        # Move down if the current cell is a wall or down wall\n        if curr_row == N-1 or cost[curr_row+1][curr_col]!= 0:\n            curr_row += 1\n    # Compute the average of the max_path\n    avg = sum(max_path) / len(max_path)\n    return max_cost, avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, cost[i][j])\n            else:\n                avg = (cost[i][j] + cost[i+1][j] + cost[i][j+1] + cost[i+1][j+1]) / 4\n                max_avg = max(max_avg, avg)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # initialize variables\n    m, n = len(cost), len(cost[0])\n    max_avg = 0\n    max_path = []\n    \n    # loop through all paths\n    for i in range(m):\n        for j in range(n):\n            # check if cell is not visited\n            if cost[i][j] == float('inf'):\n                continue\n            \n            # check if this is the last cell in the path\n            if i == m-1 and j == n-1:\n                path = [(i, j)]\n                total_cost = sum(cost[i][j] for i, j in path)\n                avg_cost = total_cost / len(path)\n                if avg_cost > max_avg:\n                    max_avg = avg_cost\n                    max_path = path\n                continue\n            \n            # check if cell can be reached in the right direction\n            if j < n-1:\n                if cost[i][j] + cost[i][j+1] > cost[i][j]:\n                    new_path = [(i, j), (i, j+1)]\n                    total_cost = sum(cost[i][j] + cost[i][j+1] for i, j in new_path)\n                    avg_cost = total_cost / len(new_path)\n                    if avg_cost > max_avg:\n                        max_avg = avg_cost\n                        max_path = new_path\n            \n            # check if cell can be reached in the down direction\n            if i < m-1:\n                if cost[i][j] + cost[i+1][j] > cost[i][j]:\n                    new_path = [(i, j), (i+1, j)]\n                    total_cost = sum(cost[i][j] + cost[i+1][j] for i, j in new_path)\n                    avg_cost = total_cost / len(new_path)\n                    if avg_cost > max_avg:\n                        max_avg = avg_cost\n                        max_path = new_path\n    \n    # return the maximum average path\n    return max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Find the maximum average of any path\n    max_avg = 0\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                max_avg = max(max_avg, cost[i][j])\n                continue\n            \n            # Check if moving right is possible\n            if j < len(cost[0]) - 1:\n                max_avg = max(max_avg, cost[i][j] + cost[i][j+1])\n            \n            # Check if moving down is possible\n            if i < len(cost) - 1:\n                max_avg = max(max_avg, cost[i][j] + cost[i+1][j])\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    max_avg = float('-inf')\n\n    # initialize first row and column\n    for i in range(n):\n        dp[0][i] = cost[0][i]\n        if i > 0:\n            dp[0][i] += dp[0][i - 1]\n\n    for j in range(n):\n        dp[j][0] = cost[j][0]\n        if j > 0:\n            dp[j][0] += dp[j - 1][0]\n\n    # fill rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n\n    # find max average path\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # initialize variables\n    n = len(cost)\n    dp = [[float('-inf') for j in range(n)] for i in range(n)]\n    max_avg = float('-inf')\n    # populate dp table with values\n    for i in range(n):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n        max_avg = max(max_avg, dp[i][0])\n        max_avg = max(max_avg, dp[0][i])\n    for i in range(1, n):\n        for j in range(1, n):\n            # consider two possibilities: right or down\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n    # return maximum average\n    return max_avg/n/n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            result[name] = info\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n\n    for name, student_info in students.items():\n        height, weight = student_info\n        if height > h and weight > w:\n            filtered_students[name] = student_info\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Loop through the dictionary and filter the students with height and weight above the given minimal values\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    # Create a new dictionary to store the filtered students\n    filtered_students = {}\n    # Loop through each student in the original dictionary\n    for name, info in students.items():\n        # Extract the height and weight from the tuple\n        height, weight = info\n        # Check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # Add the name to the filtered dictionary with their height and weight\n            filtered_students[name] = info\n    # Return the filtered dictionary\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        student_height, student_weight = students[student]\n        if student_height > h and student_weight > w:\n            filtered_students[student] = students[student]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, height_weight in students.items():\n        height, weight = height_weight\n        if height > h and weight > w:\n            filtered_students[name] = height_weight\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    same_pairs = []\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            same_pairs.append(i)\n    return len(same_pairs)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Create a dictionary to store the values and their indices in the second list\n    val_dict = {}\n    for i, num in enumerate(nums2):\n        val_dict[num] = i\n\n    # Loop through the first list and check if the value is present in the dictionary\n    count = 0\n    for i, num1 in enumerate(nums1):\n        if num1 in val_dict:\n            # If the value is present in the dictionary, check if its index is same as the current index in the second list\n            if val_dict[num1] == i:\n                count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum of digits to zero\n    sum_of_digits = 0\n    # Loop through each character in the string\n    for char in base_str:\n        # Convert the character to an integer and add it to the sum of digits\n        sum_of_digits += int(char)\n    # Calculate the sum of digits raised to the power\n    result = sum_of_digits ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    sum_of_digits = 0\n    \n    # Iterate through each digit of the base and add it to the sum_of_digits variable\n    while base > 0:\n        digit = base % 10\n        sum_of_digits += digit\n        base //= 10\n        \n    # Calculate the sum of digits to the power specified by power\n    result = sum_of_digits ** power\n    \n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable\n    total = 0\n    \n    # Loop through all digits of the base\n    for digit in str(base):\n        # Convert the digit to an integer\n        digit = int(digit)\n        \n        # Calculate the sum of digits raised to the specified power\n        power_sum = sum([digit**p for p in range(power+1)])\n        \n        # Add the power sum to the total\n        total += power_sum\n        \n    # Return the total sum\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize the sum variable to 0\n    result = 0\n    # Convert the base to a string\n    base_str = str(base)\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Multiply the result by the power of the digit\n        result += digit_int ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum_of_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_of_digits += digit * digit\n        power -= 1\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # calculate the sum of all digits of base to the specified power\n    base_sum = 0\n    for i in range(power):\n        base_sum += int(base[i])\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(power):\n        total += base % 10\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    \n    pattern = r'(?<!\\w)([\\'\"])([^\\1]*)(\\1)'\n    result = re.findall(pattern, text1)\n    \n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*?(?=\")' # extracting values between quotation marks\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    This function will extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"' # pattern to match a quotation mark and capture the characters between it\n    matches = re.findall(pattern, text1) # find all occurrences of the pattern in the string\n    return matches # return the list of matched values between quotation marks"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of values between quotation marks.\n    '''\n\n    # Define a regular expression pattern to find values between quotation marks\n    pattern = r'\"[^\"]*\"'\n\n    # Use the re.findall() function to find all matches of the pattern in the input string\n    matches = re.findall(pattern, text1)\n\n    # Return the list of values between quotation marks\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    pattern = r'\"(?:[^\"\\\\]|\\\\.)*\"'  # pattern to match all occurrences of quotation marks\n\n    # find all matches in the string using the pattern\n    matches = re.findall(pattern, text)\n\n    # initialize an empty list to store the extracted values\n    values = []\n\n    # iterate through all matches\n    for match in matches:\n        # remove the enclosing quotation marks and escape any double quotes\n        value = match[1:-1].replace('\\\"', '\"')\n        # add the extracted value to the values list\n        values.append(value)\n\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'(?<=[^\\\\])\"([^\"]+)\"(?=[^\\\\]|$)'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks \" \".\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple(test_tup[0] * test_tup[i+1] for i in range(N-1))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) % 2!= 0:\n        test_tup = test_tup + (0,)\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Define the length of the tuple\n    N = len(test_tup)\n    \n    # Create an empty tuple to store the result\n    result_tup = ()\n    \n    # Loop through the tuple and multiply each element with its next element\n    for i in range(N):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n        \n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    if len(test_tup) % 2 == 0:\n        # If the length of the tuple is even\n        N = len(test_tup) // 2\n    else:\n        # If the length of the tuple is odd\n        N = len(test_tup) // 2 + 1\n    \n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    \n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    # Get the length of the input tuple\n    N = len(test_tup) - 1\n    # Create an empty output tuple\n    output_tup = ()\n    # Multiply each element of the input tuple with its next one\n    for i in range(N):\n        output_tup += (test_tup[i] * test_tup[i+1],)\n    # Return the output tuple\n    return output_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_list = []\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i] + lst2[i])\n    return sum_list\n"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their sum as a new list.\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists [a_1,...,a_n] and [b_1,...,b_n] as input and returns a new list [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [i+j for i,j in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = {}\n    result = []\n    for num in nums:\n        if num in seen:\n            continue\n        seen[num] = True\n        if num not in seen:\n            result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Removes consecutive duplicates of a given list.\n    \"\"\"\n    def remove_duplicates(nums):\n        \"\"\"\n        Returns a list with consecutive duplicates removed.\n        \"\"\"\n        return list(set(nums))\n\n    def group_by_consecutive_duplicates(nums):\n        \"\"\"\n        Returns a list of consecutive duplicates grouped by their length.\n        \"\"\"\n        grouped_nums = groupby(nums)\n        result = []\n        for key, group in grouped_nums:\n            if len(list(group)) > 1:\n                result.append(list(group))\n        return result\n\n    def merge_groups(groups):\n        \"\"\"\n        Merges consecutive duplicates of the same length together.\n        \"\"\"\n        merged_groups = []\n        for group in groups:\n            merged_group = []\n            for num in group:\n                if not merged_group or merged_group[-1]!= num:\n                    merged_group.append(num)\n            merged_groups.append(merged_group)\n        return merged_groups\n\n    def merge_consecutive_duplicates(groups):\n        \"\"\"\n        Merges consecutive duplicates of the same length together.\n        \"\"\"\n        merged_groups = []\n        prev_group = []\n        for group in groups:\n            if not prev_group or prev_group[-1]!= group[0]:\n                merged_groups.append(group)\n            prev_group = group\n        return merged_groups\n\n    cleaned_nums = remove_duplicates(nums)\n    groups = group_by_consecutive_duplicates(cleaned_nums)\n    merged_groups = merge_groups(groups)\n    return merge_consecutive_duplicates(merged_groups)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def consecutive_duplicates(nums):\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(groupby(sorted(nums), key=lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(nums) if len(nums) < 2 else [x for _, x in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for item, group in groupby(sorted(nums)):\n        if len(list(group)) > 1:\n            result.append(item)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(enumerate(nums), lambda x: x[1] == nums[x[0]-1]):\n        if key and group:\n            yield group[0]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # groupby() function returns a generator that groups consecutive duplicates of the same item together\n    # returns a dictionary where keys are the items and values are a generator that iterates through their occurrences\n    grouped_items = groupby(nums)\n    # iterate over the grouped items and remove the duplicates\n    for item, group in grouped_items:\n        if item!= next(group, None):\n            yield item"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(set(nums)), lambda x: x))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*(r**2)*h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes two arguments: r (radius) and h (height).\n    It calculates the lateral surface area of a cone given by the radius and height.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 0.5 * r * h * math.sin(math.pi/3)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * (r ** 2 + h ** 2)\n    sl = math.sqrt(s)\n    s_l = sl * (r + h) / 2\n    s_r = sl * (r - h) / 2\n    return s_l + s_r"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r**2 * h\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (math.pi * r ** 2) + ((math.pi * r ** 2) / 3)\n    return area * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Find the lateral surface area using the formula:\n    # A = pi * r^2 * h\n    A = math.pi * r**2 * h\n    \n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the base area of the cone using the formula for the volume of a cylinder\n    base_area = (math.pi * r ** 2)\n    # calculate the lateral surface area by multiplying the base area with the height\n    lateral_surface = base_area * h\n    # return the lateral surface area\n    return lateral_surface"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match the special characters\n    pattern = r'([,\\.])'\n\n    # Use the re.sub() function to replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r'([,.])'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s.,]+')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,\\.]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # create a regular expression pattern for matching space, comma, and dot characters\n    pattern = re.compile(r'[\\s.,]+')\n    # replace all occurrences of the pattern with a colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # Define a regular expression pattern to match special characters\n    pattern = re.compile(r'[\\s,\\.]')\n\n    # Replace all matches with a colon\n    result = pattern.sub(':', text)\n\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^\\w\\s]')\n    colon_text = pattern.sub(':', text)\n    return colon_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[.,]'\n    new_text = re.sub(pattern, ':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'\\s+|,|\\.+|:', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = re.compile(r'[^a-zA-Z0-9\\s]')\n    return pattern.sub(':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize index of first occurrence to -1\n    first_index = -1\n    \n    # iterate through the sorted array\n    for i in range(len(A)):\n        # check if current element is equal to x\n        if A[i] == x:\n            # if it is, check if the first occurrence has not been found yet\n            if first_index == -1:\n                # if it has not, update the index of first occurrence to current index\n                first_index = i\n    \n    # return the index of first occurrence\n    return first_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    j = i - 1\n    while j >= 0 and A[j] == x:\n        j -= 1\n    return j + 1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the index to the first element of the array\n    index = 0\n    # loop through the array until we find the first occurrence of x\n    while index < len(A) and A[index]!= x:\n        index += 1\n    # if we found x, return its index\n    if index == len(A) or A[index] == x:\n        return -1\n    else:\n        return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # binary search to find the first occurrence of x in A\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # if x is not found in A, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index to -1\n    index = -1\n\n    # Iterate over the array and find the first occurrence of x\n    for i in range(len(A)):\n        if A[i] == x:\n            index = i\n            break\n\n    # Return the index of the first occurrence of x\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A):\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # calculate the product of subarrays of length i\n    def prod_of_subarrays(i):\n        prod = 1\n        for j in range(len(arr)):\n            if j + i <= len(arr):\n                prod *= arr[j] * arr[j+i-1]\n        return prod\n    \n    # calculate the sum of products of subarrays of length i\n    def sum_of_products(i):\n        sum = 0\n        for j in range(len(arr)):\n            if j + i <= len(arr):\n                sum += prod_of_subarrays(i)\n        return sum\n    \n    # calculate the sum of products of all subarrays\n    n = len(arr)\n    sum = 0\n    for i in range(1, n+1):\n        sum += sum_of_products(i)\n    \n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    MOD = 10**9 + 7\n    \n    # Calculate product of all elements in the array\n    prod = 1\n    for i in range(n):\n        prod = (prod * arr[i]) % MOD\n    \n    # Initialize a list to store sum of products of subarrays\n    dp = [0] * (n + 1)\n    \n    # Initialize sum of products of subarrays as 0\n    dp[0] = 0\n    \n    # Fill the dp list using dynamic programming approach\n    for i in range(1, n + 1):\n        dp[i] = (dp[i] + (dp[i-1] * arr[i-1]) % MOD) % MOD\n    \n    # Initialize the result\n    result = 0\n    \n    # Loop through the array and calculate sum of products of subarrays\n    for i in range(n):\n        # Calculate the sum of products of current subarray\n        current_sum = dp[i+1] - dp[i]\n        \n        # Calculate the sum of products of previous subarrays and the current element\n        prev_sum = current_sum + (dp[i] * arr[i]) % MOD\n        \n        # Update the result\n        result = (result + prev_sum) % MOD\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    def power(x, n):\n        if n == 0:\n            return 1\n        elif n % 2 == 0:\n            return power(x, n // 2) ** 2\n        else:\n            return x * power(x, n - 1)\n\n    def sum_of_subarray_products(start, end):\n        if start > end:\n            return 0\n\n        subarray_sum = 0\n        for i in range(start, end + 1):\n            subarray_sum += arr[i] * power(arr[i], end - start + 1)\n\n        return subarray_sum\n\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            total_sum += sum_of_subarray_products(i, j - 1)\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod_sum += arr[j] * arr[j+1] * arr[j+2] *... * arr[j+n-i]\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize the sum of products as 0\n    prod_sum = 0\n    # Initialize the products of subarrays as 1\n    prod_subarray = [1] * n\n    # Initialize the sum of subarrays as 0\n    subarray_sum = 0\n    # Iterate through all possible subarrays\n    for i in range(n):\n        # Add the current element to the sum of subarrays\n        subarray_sum += arr[i]\n        # Update the product of current subarray\n        prod_subarray[i] = subarray_sum * prod_subarray[i-1]\n        # Update the sum of products by multiplying the current product with the previous product of the same subarray\n        prod_sum += prod_subarray[i]\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sub_sum = 1\n    result = 0\n    \n    for i in range(n):\n        sub_sum *= arr[i]\n        result += sub_sum\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize the sum and product variables\n    sum = 0\n    product = 1\n    \n    # Initialize the list to keep track of the products of subarrays\n    subarray_prod = []\n    \n    # Loop through each element in the input list\n    for i in range(len(arr)):\n        \n        # Initialize the current subarray to 1\n        current_subarray = 1\n        \n        # Loop through each element from index i+1 to the end of the list\n        for j in range(i+1, len(arr)):\n            \n            # Calculate the product of the current subarray and the next element\n            current_subarray *= arr[j]\n            \n            # If the product is greater than the current maximum product, update the maximum product and add it to the list of subarray products\n            if current_subarray > product:\n                product = current_subarray\n                subarray_prod.append(current_subarray)\n        \n        # Add the current sum and product to the sum and product variables\n        sum += arr[i] + product\n        \n        # Reset the current subarray and product variables\n        current_subarray = 1\n        product = 1\n        \n    # Return the sum of all products in the list\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    # Initialize the result to 0\n    result = 0\n    # Create an empty list to store sublists\n    sublist = []\n    # Traverse through the list and find all possible sublists\n    for i in range(n):\n        # Add the current element to the sublist\n        sublist.append(arr[i])\n        # Traverse through the remaining elements of the list\n        for j in range(i+1, n):\n            # Add the current element to the sublist\n            sublist.append(arr[j])\n            # Calculate the product of the sublist\n            prod = 1\n            for k in range(len(sublist)):\n                prod *= sublist[k]\n            # Add the product to the result\n            result += prod\n            # Remove the current element from the sublist\n            sublist.pop()\n    # Return the result\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # calculate the product of first element of the list\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    \n    # calculate the product of subarrays with length 1 to n\n    subarray_products = [prod]\n    for i in range(1, n):\n        subarray_products.append(subarray_products[-1]*arr[i])\n    \n    # calculate the sum of products of subarrays with length n to 2n\n    sum_of_subarray_products = 0\n    for i in range(n, 2*n):\n        sum_of_subarray_products += subarray_products[i-n]\n    \n    return sum_of_subarray_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize variables\n    n = len(arr)\n    prod = 1\n    result = 0\n\n    # Calculate product of first element\n    prod *= arr[0]\n\n    # Loop through all subarrays\n    for i in range(1, n):\n\n        # Calculate product of current element and previous element\n        prod *= arr[i]\n\n        # Add product of current subarray to result\n        result += prod\n\n        # Calculate product of current subarray and subtract it from previous product\n        prod = prod - arr[i-1] * arr[i]\n\n    # Return the final result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the number of bits in n\n    bit_length = len(bin(n)[2:])\n    # toggle the middle bit\n    middle_bit = n ^ (1 << (bit_length - 2))\n    # mask out the middle bit and the first and last bits\n    mask = ~(1 << (bit_length - 2)) | ~(1 << (bit_length - 1))\n    return n & mask | middle_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # convert the binary representation of the number to a list\n    binary_str = bin(n)[2:]\n\n    # initialize a variable to store the new binary representation\n    new_binary_str = ''\n\n    # iterate over the binary string and toggle each bit except the first and last bits\n    for i in range(len(binary_str)-2):\n        if binary_str[i] == '0':\n            new_binary_str += '1'\n        else:\n            new_binary_str += '0'\n\n    # convert the new binary string to an integer\n    new_n = int(new_binary_str, 2)\n\n    # return the new integer value\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Use bitwise AND operator to get the middle bits of the number\n    middle_bits = n & ~(1 << 1) & ~(1 << len(bin(n)[2:]) - 2)\n    \n    # Use bitwise XOR operator to toggle the middle bits\n    middle_bits ^= 1\n    \n    # Use bitwise OR operator to combine the original number and the middle bits\n    return n | middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the first and last bits of n\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n\n    # Create the mask with all bits except the first and last\n    mask = (1 << 32) - 1 ^ (1 << 32)\n\n    # Toggle all bits except the first and last bits\n    toggled_bits = n ^ mask\n\n    # Combine the first and last bits with the toggled bits\n    result = first_bit ^ toggled_bits\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the last two bits of the number\n    last_two = n & 0x3\n\n    # toggle the last two bits\n    n ^= last_two\n\n    # set the first and last bits of the number to 0\n    n = n & ~(0x1 | 0x2)\n\n    # add the last two bits to get the final result\n    return n | last_two"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = ~(0x5555555555555555)\n    first_bit = n & 0x5555555555555555\n    last_bit = n & 0xAAAAAAAAAAAAAAA\n    new_bit = (first_bit ^ last_bit) & mask\n    n = n ^ new_bit\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Extract the first and last bit\n    first_bit = n & 1  \n    last_bit = n & (2**31)  \n    # Remove the first and last bits\n    n &= ~(first_bit | last_bit)  \n    # Toggle the middle bits\n    middle_bits = ((n & (2**29)) >> 2) | ((n & (2**30)) << 1)  \n    n ^= middle_bits  \n    # Add the first and last bits\n    n |= first_bit | last_bit  \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n\n    :param n: an integer\n    :return: the modified number with the middle bits toggled\n    \"\"\"\n    # First and last bits are not affected\n    n &= 0x7FFFFFFF\n    # Middle bits are toggled\n    n = ((n & 0xAAAAAAAA) >> 1) | ((n & 0x55555555) << 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n\n    n ^= (1 << (first_bit + last_bit)) & ~(1 << (first_bit + last_bit))\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the length of the number\n    num_len = len(bin(n)[2:])\n\n    # Calculate the index of the first and last bit\n    first_bit_index = num_len // 2 - 1\n    last_bit_index = num_len - 2\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate over all bits in the number\n    for i in range(num_len):\n        # Get the current bit value\n        bit_value = n & 1\n\n        # Toggle the bit value\n        bit_value = not bit_value\n\n        # Shift the value to the left by 1 position\n        result |= bit_value << i\n\n        # Shift the value to the right by 1 position\n        result |= bit_value << (num_len - 1 - i)\n\n        # Increment the current bit index\n        n >>= 1\n\n    # Return the resulting number\n    return result"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0 or a[index-1] <= x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Initialize the left and right indices\n    left, right = 0, len(a) - 1\n    \n    # Perform binary search to find the left insertion point\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If the mid value is greater than the specified value, search to the right\n        if a[mid] < x:\n            left = mid + 1\n        # If the mid value is less than or equal to the specified value, search to the left\n        else:\n            right = mid - 1\n            \n    # Return the index of the left insertion point\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index > 0 and a[index-1] == x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use binary search to find the left insertion point\n    left_index = bisect.bisect_left(a, x)\n    # Check if the left element is equal to x\n    if left_index == len(a) or a[left_index]!= x:\n        left_index = bisect.bisect_right(a, x)\n    return left_index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the index where x should be inserted into a sorted list a[0:i]\n    i = bisect.bisect_left(a, x)\n\n    # If x is already in the list, return i\n    if i!= len(a) and a[i] == x:\n        return i\n\n    # Otherwise, return the index where x should be inserted (i+1)\n    else:\n        return i+1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the index where x should be inserted to maintain sorted order\n    i = bisect.bisect_left(a, x)\n    # Check if x is already in the list\n    if i!= len(a) and a[i] == x:\n        return i\n    # If x is greater than all elements in the list, then the insertion point is after the last element\n    if i == len(a):\n        return len(a)\n    # If x is less than the first element, then the insertion point is before the first element\n    if x < a[0]:\n        return 0\n    # If x is greater than all elements in the list up to the current insertion point, then the insertion point is before the current insertion point\n    if x > a[i]:\n        return i\n    # If x is between two elements in the list, then the insertion point is the index of the element that comes before x\n    else:\n        j = i - 1\n        while j >= 0 and a[j] > x:\n            j -= 1\n        return j + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n    a (list): sorted list of values\n    x (int): value to be inserted\n\n    Returns:\n    int: index of the left insertion point\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        print(f\"{string} starts with a vowel\") \n    else: \n        print(f\"{string} does not start with a vowel\") "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_str(string):\n    pattern = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(pattern, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return (1/n) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * (geometric_sum(n-1) + geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n==1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    # The smallest triangular number with n digits is 10^n\n    base = 10 ** n \n    # We start with a base of 10^n, which is the smallest triangular number with n digits.\n    index = n\n    \n    # Check if the base is already a triangular number with n digits\n    if base ** 2 == (2 * n - 1) ** 2:\n        return index\n    \n    # If the base is not a triangular number, we start checking the previous triangular numbers until we find the first one.\n    while True:\n        # Check if the current base is a triangular number with n digits\n        if (base + 1) ** 2 == (2 * n - 1) ** 2:\n            # If it is, return its index\n            return index\n        # If not, increment the base and check again.\n        base += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_number = [0] * (n + 1)\n    triangular_number[1] = 1\n\n    for i in range(2, n + 1):\n        triangular_number[i] = triangular_number[i - 1] + triangular_number[i - 2]\n\n    return triangular_number.index(min(triangular_number))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize variables\n    t = 0\n    index = 0\n\n    # Calculate the value of the smallest triangular number with n digits\n    while t < math.pow(10, n - 1):\n        t += 1\n\n    # Initialize the variable to keep track of the number of digits in the smallest triangular number\n    count = 0\n\n    # Calculate the number of digits in the smallest triangular number\n    while t // 10 > 0:\n        count += 1\n        t //= 10\n\n    # Initialize variables\n    min_t = t\n    index_min_t = index\n\n    # Iterate through all triangular numbers with n digits\n    while count <= n:\n        t = 0\n        while t < math.pow(10, count):\n            t += 1\n\n        if count < min_t:\n            min_t = t\n            index_min_t = count\n\n        count += 1\n\n    return index_min_t"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the smallest triangular number and its index to None.\n    smallest = None \n    index = None \n\n    # Iterate from 1 to n.\n    for i in range(1, n+1): \n\n        # Calculate the triangular number.\n        num = i * (i+1) // 2 \n\n        # Check if it is smaller than the current smallest number.\n        if smallest is None or num < smallest: \n\n            # Update the smallest number and its index.\n            smallest = num \n            index = i \n\n    # Return the index.\n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    triangular = 1\n    index = 1\n    while len(str(triangular)) < n:\n        triangular += index\n        index += 1\n    return index - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Initialize the smallest triangular number with n digits to be 1\n    smallest = 1\n    \n    # Initialize the current triangular number to be 1\n    current = 1\n    \n    # Initialize the index of the smallest triangular number to be 1\n    index = 1\n    \n    # Calculate the required number of digits for the smallest triangular number\n    digits = int(math.log10(smallest))\n    \n    # Loop while the current triangular number has n digits\n    while len(str(current)) < n:\n        # Calculate the next triangular number\n        next_num = (current * (digits + 1)) + 1\n        \n        # Check if the next triangular number is smaller than the smallest triangular number\n        if next_num < smallest:\n            # If it is, update the smallest triangular number and its index\n            smallest = next_num\n            index = current\n        \n        # Update the current triangular number\n        current = next_num\n    \n    # Return the index of the smallest triangular number\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initialize an array to store the numbers with n digits \n    tri_array = []\n    \n    # iterate from 1 to n \n    for i in range(1, n+1): \n        \n        # initialize a variable to store the current triangular number \n        tri = 0\n        \n        # iterate from 1 to i-1 \n        for j in range(1, i+1): \n            tri += math.factorial(i-j) * math.factorial(j)\n        \n        # append the current triangular number to the array \n        tri_array.append(tri)\n    \n    # find the index of the smallest triangular number \n    index = tri_array.index(min(tri_array))\n    \n    # return the index of the smallest triangular number \n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else: \n        index = 0\n        triangular_number = 1\n        while triangular_number < 10 ** (n - 1): \n            index += 1\n            triangular_number = int(math.sqrt(triangular_number)) + 1\n        return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize an empty list to store the indices of triangular numbers\n    indices = []\n\n    # Calculate the first triangular number with n digits\n    triangular_number = int(''.join(['0'] * n))\n    index = 1\n\n    # Calculate and store the indices of triangular numbers with n digits\n    while triangular_number < 10**n:\n        indices.append(index)\n        triangular_number = int(str(triangular_number) + str(index))\n        index += 1\n\n    # Return the index of the smallest triangular number with n digits\n    return min(indices)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Initialize index and smallest triangular number\n    index = 0\n    smallest_triangular = 0\n    \n    # Loop through all possible indices for n digits\n    while True:\n        # Calculate the next triangular number\n        triangular = index * (index + 1)\n        \n        # If triangular has n digits, update smallest_triangular and break the loop\n        if len(str(triangular)) == n:\n            smallest_triangular = triangular\n            break\n        \n        # Increment the index for the next iteration\n        index += 1\n        \n    # Return the index of the smallest triangular number with n digits\n    return index, smallest_triangular"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    dict_obj = {}\n    # Loop through the tuple elements\n    for i in range(0, len(test_tup), 2):\n        # Extract the first and second elements from the tuple\n        key = test_tup[i]\n        value = test_tup[i+1]\n        # Add the key-value pair to the dictionary\n        dict_obj[key] = value\n    # Return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    result_dict = {}\n    if len(test_tup) % 2 == 0:\n        for i in range(0, len(test_tup), 2):\n            result_dict[test_tup[i]] = test_tup[i+1]\n    else:\n        for i in range(0, len(test_tup), 2):\n            result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    count = 0\n    for i in test_tup:\n        result_dict[count] = i\n        count += 1\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    result = {}\n    # loop through the tuple and add the adjacent elements to the dictionary\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # loop over the tuple elements and add them to the dictionary\n    for i in range(len(test_tup)-1):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return None\n    else:\n        d = {}\n        for i in range(0, len(test_tup), 2):\n            d[test_tup[i]] = test_tup[i+1]\n        return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_obj = {}\n    count = 0\n    while count < len(test_tup):\n        dict_obj[test_tup[count]] = test_tup[count+1]\n        count += 2\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) < 2:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif s[0] == s[-1]:\n        return all_Characters_Same(s[1:-1])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    \n    first_char = s[0]\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to a list of characters\n    lst = list(s)\n    \n    # get the first character of the list\n    first = lst[0]\n    \n    # iterate over the rest of the list\n    for char in lst[1:]:\n        # if the first character is not equal to the current character, return False\n        if char!= first:\n            return False\n    \n    # if all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    # check if the length of the string is 1\n    if len(s) == 1:\n        return True\n    # check if the length of the string is greater than 1\n    else:\n        # initialize a variable to store the first character\n        first_char = s[0]\n        # loop through the string starting from the second character\n        for char in s[1:]:\n            # if the current character is not the same as the first character, return False\n            if char!= first_char:\n                return False\n    # if the loop completes without returning False, all characters are the same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # convert string to lowercase\n    s = s.lower()\n    # get the first character of the string\n    first_char = s[0]\n    # check if all the characters in the string are same\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n    # if all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[2:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters of the string are same, otherwise False.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    \n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    \n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*side**3\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6)*side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    s = (side/2)**2\n    area = (math.sqrt(2)*s*s)/14\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1/3) * side**3\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Using Heron's formula for area of a triangle\n    s = (side**2 + side**2 + side**2 + side**2)/4.0\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1/3) * side**2\n    area = (math.sqrt(3)/4) * math.pi * s\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3*side**2 + 6*side**3) / 18\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side * side * side\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    base = side/2\n    return (1/6)*side**3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side * side * side\n    \nside = float(input(\"Enter the length of the base of the tetrahedron: \"))\nprint(\"The area of the tetrahedron is:\", area_tetrahedron(side))"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[0:n-m], list[m:] = list[m:], list[0:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    This function rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    \n    # Move the first m items to the end of the list\n    list = list[m:] + list[:m]\n    \n    # Reverse the first m items\n    list[:m] = reversed(list[:m])\n    \n    # Reverse the remaining items\n    list[m:] = reversed(list[m:])\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.append(list.pop(0))\n    return list[m:] + list[:m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    \n    # reverse the list\n    list = list[::-1]\n    \n    # move all elements of the list to the right by m positions\n    list = list[-m:] + list[:-m]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        temp = list[0]\n        for j in range(n-1):\n            list[j] = list[j+1]\n        list[n-1] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    This function rotates a given list by specified number of items to the right direction.\n    '''\n    # Get the length of the list\n    n = len(list)\n    \n    # Check if the number of items to be rotated is greater than the length of the list\n    if m > n:\n        print(\"Error: m is greater than the length of the list!\")\n        return\n    \n    # Move all the items after the mth item to the beginning of the list\n    for i in range(n-m):\n        list[i], list[i+m] = list[i+m], list[i]\n    \n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. \n    \"\"\"\n    # Check if the list is empty\n    if not list:\n        return []\n    \n    # Find the length of the list\n    n = len(list)\n    \n    # If m is greater than n, return the list as it is\n    if m > n:\n        return list\n    \n    # Find the index where the rotation starts\n    start_index = n - m\n    \n    # Create a new list to store the rotated items\n    rotated_list = []\n    \n    # Iterate through the original list and add the items to the new list\n    for i in range(start_index, n):\n        rotated_list.append(list[i])\n    \n    # Iterate through the original list again and add the items to the new list\n    for i in range(start_index - 1, -1, -1):\n        rotated_list.append(list[i])\n    \n    return rotated_list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for value in test_tup:\n        if value is None:\n            none_count += 1\n    return none_count > 0"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    if any(val is None for val in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_valid_number(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit not in range(10):\n                return False\n        return True\n\n    return list(filter(is_valid_number, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        digits = [int(d) for d in str(num)]\n        return all(d in digits for d in range(10))\n\n    for num in range(startnum, endnum+1):\n        if is_divisible_by_digits(num):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_all_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        return all(digit == digits[0] for digit in digits)\n    \n    return filter(is_divisible_by_all_digits, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n    return filter(lambda x: all(d in str(x) for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Define a lambda function to check if a number is divisible by every digit\n    is_divisible = lambda x: all(digit in str(x) for digit in str(x))\n    \n    # Find all numbers between startnum and endnum where is_divisible(num) is True\n    result = filter(is_divisible, range(startnum, endnum+1))\n    \n    # Convert the result to a list and return it\n    return list(result)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(int(d) in str(x) for d in str(startnum) if int(d) in str(endnum))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % i == 0 for i in range(10)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: all(int(d) in str(num) for d in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(int(d) in str(x) for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if the angle is valid\n    if a > 360:\n        print(\"Error: The angle should be less than or equal to 360 degrees.\")\n        return None\n    \n    # Calculate the area of the sector\n    area = math.pi * r ** 2 * a / 360\n    \n    # Return the area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r * a * math.pi / 180\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is valid\n    if a > 360 or a < 0:\n        print(\"Invalid angle\")\n        return None\n    \n    # Calculate area using formula\n    area = math.pi*r*r*math.sin(math.radians(a/2))\n    \n    # Return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is within valid range\n    if a > 360 or a < 0:\n        return None\n    \n    # Calculate area of sector using formula A = pi * r^2 * sin(a/180*pi)\n    A = math.pi * r**2 * math.sin(math.radians(a)/180*math.pi)\n    \n    return A"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    # Convert angle to radians\n    a = math.radians(a)\n    \n    # Calculate area using formulae\n    area = math.pi * r * r * math.sin(a/2)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is valid\n    if a > 360:\n        return None\n    \n    # Convert angle to radians\n    angle = math.radians(a)\n    \n    # Calculate area\n    area = r*r*angle\n    \n    # Return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector using the formula\n    area = math.pi * r * r * (math.sin(math.radians(a/360)))\n    \n    # Return the calculated area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if the angle is less than 360 degrees\n    if a > 360:\n        return None\n    else:\n        # Calculate the area of the sector using formula A = (r * r) * (sin(a/180*pi))^2\n        area = (r * r) * (math.sin(a/180*math.pi)**2)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi * r * r\n    \n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of LCS of all prefixes\n    L = [[0] * (p + 1) for i in range(m + 1)]\n\n    # Fill the L[i][j] in bottom up manner\n    for i in range(m + 1):\n        for j in range(p + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1] and Z[i - 1] == Z[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Initialize the LCS string\n    lcs = \"\"\n\n    # Backtrack to generate LCS string\n    i = m\n    j = p\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1] and Z[i - 1] == Z[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Calculate the lengths of the three string sequences \n    n = len(X) \n    m = len(Y) \n    p = len(Z) \n\n    # Step 2: Create a 2D table to store the lengths of the longest common subsequences of three sequences \n    table = [[0 for j in range(p+1)] for i in range(n+1)] \n\n    # Step 3: Fill the 2D table using dynamic programming \n    for i in range(1, n+1): \n        for j in range(1, p+1): \n            if X[i-1] == Y[j-1]: \n                table[i][j] = table[i-1][j-1] + 1\n            else: \n                table[i][j] = max(table[i-1][j], table[i][j-1]) \n\n    # Step 4: Print the longest common subsequence \n    lcs = [] \n    i = n \n    j = p \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif table[i-1][j] > table[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # Reverse the longest common subsequence \n    lcs.reverse() \n\n    return ''.join(lcs) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Function to find length of LCS for two strings\n    def lcs_length(X, Y):\n        m, n = len(X), len(Y)\n        L = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    L[i][j] = 0\n                elif X[i - 1] == Y[j - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                else:\n                    L[i][j] = max(L[i - 1][j], L[i][j - 1])\n        return L[m][n]\n\n    # Function to find LCS for three strings\n    def lcs_of_three_strings(X, Y, Z):\n        m, n, o = len(X), len(Y), len(Z)\n        L = [[[0] * (n + 1) for _ in range(o + 1)] for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                for k in range(o + 1):\n                    if i == 0 or j == 0 or k == 0:\n                        L[i][j][k] = 0\n                    elif X[i - 1] == Y[j - 1] and (k == 0 or X[i - 1] == Z[k - 1]):\n                        L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                    else:\n                        L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n        return L[m][n][o]\n\n    # Find the length of LCS of two strings\n    lcs_length_X_Y = lcs_length(X, Y)\n    print(\"Length of LCS of X and Y is:\", lcs_length_X_Y)\n\n    # Find the length of LCS of three strings\n    lcs_length_X_Y_Z = lcs_length(X, Y) + lcs_length(Y, Z) + lcs_length(Z, X)\n    print(\"Length of LCS of X, Y and Z is:\", lcs_length_X_Y_Z)\n\n    # Find the LCS of two strings\n    lcs_X_Y = lcs_of_three_strings(X, Y, \"\")\n    print(\"LCS of X and Y is:\", lcs_X_Y)\n\n    # Find the LCS of three strings\n    lcs_X_Y_Z = lcs_of_three_strings(X, Y, Z)\n    print(\"LCS of X, Y and Z is:\", lcs_X_Y_Z)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Find the longest common subsequence (LCS) of three given strings X, Y, Z using dynamic programming.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    L = [[0 for j in range(p+1)] for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    lcs = []\n    i = m\n    j = p\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return \"\".join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    table = [[0] * (o+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    table[i][j][k] = table[i-1][j-1][k]\n                elif Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i][j-1][k-1]\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif Y[j-1] == Z[k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n\n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n\n        return merge(left, right)\n\n    def merge(left, right):\n        result = []\n        i = j = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n\n        result += left[i:]\n        result += right[j:]\n\n        return result\n\n    def lcs(X, Y):\n        m = len(X)\n        n = len(Y)\n\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if X[i - 1] == Y[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return X[dp[m][n] - 1:dp[m][n] - 1 - dp[m - dp[m][n]][n]]\n\n    def lcs_of_three_strings(X, Y, Z):\n        return lcs(lcs(X, Y), Z)\n\n    X = X.split()\n    Y = Y.split()\n    Z = Z.split()\n\n    X = merge_sort(X)\n    Y = merge_sort(Y)\n    Z = merge_sort(Z)\n\n    return lcs_of_three_strings(X, Y, Z)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function finds the longest common subsequence (LCS) of three string sequences.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # creating a 2D table to store lengths of LCS of subsequences of X[0..m-1], Y[0..n-1] and Z[0..p-1]\n    L = [[0 for j in range(p+1)] for i in range(m+1)]\n\n    # filling the table in bottom up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # constructing the LCS by tracing back through the table\n    i = m\n    j = n\n    k = p\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i][j][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create a 2D array to store the length of LCS of substrings \n    LCS = [[0 for j in range(len(Z)+1)] for i in range(len(X)+1)] \n  \n    # Fill the LCS array using dynamic programming \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Z)+1): \n            if X[i-1] == Z[j-1]: \n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else: \n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1]) \n  \n    # Print the LCS array \n    print(\"Longest Common Subsequence (LCS) of three strings X =\", X, \"Y =\", Y, \"Z =\", Z, \"is:\") \n    for i in range(len(X)+1): \n        for j in range(len(Z)+1): \n            if LCS[i][j] == 0: \n                print(\" \", end=\"\") \n            else: \n                print(X[i-1], end=\"\") \n            if j == len(Z): \n                print() \n  \n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    # Creating a table to store lengths of LCS of subarrays\n    L = [[0] * (p + 1) for _ in range(m + 1)]\n    # Following steps build L[m+1][n+1] in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] == Z[i-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    # Following code is for printing the LCS of the given sequence\n    i, j, k = m, n, p\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j] >= L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y)\n    o = len(Z) \n    L = [[0 for j in range(o+1)] for i in range(m+1)] \n    for i in range(1, m+1): \n        for j in range(1, o+1): \n            if X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1 \n            elif L[i-1][j] >= L[i][j-1]: \n                L[i][j] = L[i-1][j] \n            else: \n                L[i][j] = L[i][j-1] \n    return L[m][o] "
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression to match words starting with capital letters\n    word_pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    # Split the string into words and loop through each word\n    for word in str1.split():\n        # Check if the word starts with a capital letter\n        if word_pattern.match(word):\n            # If the word starts with a capital letter, replace it with a space followed by the word\n            str1 = str1.replace(word,'' + word)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove non-alphanumeric characters and split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Capitalize the first letter of each word and join them with spaces\n    capitalized_words = [word.capitalize() for word in words]\n    result =''.join(capitalized_words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # create a regular expression pattern to find capital letters\n    pattern = re.compile(r'[A-Z]')\n\n    # find all the matches of the pattern in the string\n    matches = pattern.findall(str1)\n\n    # iterate over the matches and replace the capital letters with spaces\n    for match in matches:\n        str1 = str1.replace(match,'' + match)\n\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Find all matches of the pattern in the string\n    matches = re.findall(pattern, str1)\n    # Join the matches with spaces\n    result =''.join(matches)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = str1.split()\n    \n    # create a list of lists to store the words with spaces between them\n    word_list = []\n    \n    # iterate over each word in the list\n    for word in words:\n        \n        # if the first character is capital, add a space and then the word to the list\n        if word[0].isupper():\n            word_list.append(''+ word)\n        \n        # if the first character is not capital, just add the word to the list\n        else:\n            word_list.append(word)\n    \n    # join the words with spaces between them\n    return''.join(word_list)\n"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    pattern = r'\\b[A-Z][a-z]+\\b'\n    words = re.findall(pattern, str1)\n    \n    for i in range(len(words)):\n        words[i] = words[i][0].lower() +'' + words[i][1:]\n    \n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Using regular expressions to find all the words in the given string\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Joining all the words with spaces\n    result =''.join(words)\n\n    # Capitalizing the first letter of the result string\n    result = result.capitalize()\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1)\n    result = []\n    for word in words:\n        if word[0].isupper():\n            result.append(word +'')\n        else:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'(?<=\\w)([A-Z])', r' \\1', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', str1)\n    result = []\n    for word in words:\n        if word.istitle():\n            result.append(' ')\n            result.append(word)\n        else:\n            result.append(word)\n    return ''.join(result)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings as input and returns a sorted list of strings in ascending order of numerical values.\n    \n    It uses the built-in `sort()` function in Python to sort the list in ascending order of numerical values. The `float()` function is used to convert the strings to floating-point numbers.\n    \n    The `map()` function is used to iterate over the list of strings and convert each string to a floating-point number using the `float()` function. Finally, the `sorted()` function is used to sort the list of floating-point numbers.\n    \n    The sorted list of strings is then returned as output.\n    '''\n    \n    # Convert strings to floating-point numbers\n    nums = list(map(float, nums_str))\n    \n    # Sort the list in ascending order of numerical values\n    nums.sort()\n    \n    # Convert the sorted list of floating-point numbers back to strings\n    sorted_nums_str = [str(num) for num in nums]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: [int(s) for s in x.split('.')])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a list of strings of numbers numerically.\n\n    Args:\n        nums_str (list): A list of strings of numbers.\n\n    Returns:\n        sorted_nums_str (list): A list of strings of numbers sorted in ascending order.\n    \"\"\"\n    # split the string into a list of characters\n    nums_list = [char for char in nums_str]\n\n    # sort the list of characters numerically\n    nums_list.sort(key=lambda x: float(x))\n\n    # join the sorted list of characters back into a string\n    sorted_nums_str = ''.join(nums_list)\n\n    return sorted_nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all numeric strings to int and sort them\n    nums_int = sorted([int(x) for x in nums_str])\n    # Convert the sorted list of ints back to string and return the result\n    return [str(x) for x in nums_int]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    nums = [float(num) for num in nums_str if num.isdigit()]\n    nums.sort()\n    sorted_nums_str = [str(num) for num in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            continue\n    \n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(float(num))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Split the list into individual strings\n    nums_str = [num for num in nums_str if num.isdigit()]\n\n    # Convert the strings to integers\n    nums_int = [int(num) for num in nums_str]\n\n    # Sort the integers\n    nums_int.sort()\n\n    # Convert the sorted integers back to strings\n    nums_str = [str(num) for num in nums_int]\n\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n\n    Parameters:\n    nums_str (list of str): A list of strings of numbers.\n\n    Returns:\n    list of str: A sorted list of strings of numbers.\n    \"\"\"\n    # create a list of tuples containing the string and its numeric value\n    nums_value = [(s, float(s)) for s in nums_str]\n    # sort the list based on the numeric value of the strings\n    nums_value.sort(key=lambda x: x[1])\n    # create a new list containing only the sorted strings\n    sorted_nums_str = [x[0] for x in nums_value]\n    return sorted_nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the tuple to the list\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # convert tuple to list\n    test_list = list(test_list)\n    # add tuple to list\n    test_list.append(test_tup)\n    # convert list to tuple\n    test_list = tuple(test_list)\n    # return updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        test_list.append(item)\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] >= arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0 or (arr[i] < arr[i//2] and i % 2 == 0) or (arr[i] > arr[i//2] and i % 2 == 1):\n        return False\n    return True\n\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i < 0:\n        return True\n\n    # Check if the left child is smaller than the parent\n    if arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Call the helper function to check if the array is a min heap\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case: if i is 0, it means we have reached the last node\n    if i == 0:\n        return True\n\n    # If the left child is greater than the current node, return False\n    if arr[i] < arr[i//2]:\n        return False\n\n    # If the left child is smaller than the current node, then check recursively for the left child\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Given an array, check if it represents a min heap or not.\n    '''\n\n    # Check if the array is of size 0, then return True\n    if len(arr) == 0:\n        return True\n\n    # Check if the array represents a min heap by recursively calling the helper function\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "The function returns `True` if the current node is a min heap, and `False` otherwise."
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    left = 2*i + 1\n    right = 2*i + 2\n    if left <= len(arr) and arr[i] > arr[left]:\n        return False\n    if right <= len(arr) and arr[i] > arr[right]:\n        return False\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents a min heap or not.\n    It is a recursive function that takes the array and the index of the current node as parameters.\n    '''\n    if i == 0:\n        return True\n    else:\n        if arr[i] < arr[i//2] and check_min_heap_helper(arr, i//2):\n            return True\n        else:\n            return False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] > arr[2*i+1]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2*jacobsthal_num(n//2) - 1\n    else:\n        return 2*jacobsthal_num(n//2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n    else:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n\nprint(jacobsthal_num(10))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + (4 * jacobsthal_num(n - 1))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # initialize the variables\n    a, b = 0, 1\n    # loop through n times\n    for i in range(n):\n        # calculate the next number\n        c = (a + b) % 10\n        # update the variables\n        a, b = b, c\n    # return the value of the nth number\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + 1\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize the first two terms of the sequence\n    a, b = 0, 1\n    # Initialize the variable to keep track of the result\n    result = 0\n    # Loop through the desired number of terms\n    for i in range(n):\n        # Calculate the next term in the sequence using the formula for the jacobsthal number\n        c = a + 2 * b\n        # Add the next term to the result\n        result += c\n        # Update the values for the next iteration of the loop\n        a = b\n        b = c\n    # Return the result\n    return result"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_list = [0, 1, 1]\n    for i in range(3, n+1):\n        jacobsthal_list.append(jacobsthal_list[i-1] + jacobsthal_list[i-2])\n    return jacobsthal_list[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0 \n    else: \n        jacob = 0\n        for i in range(n): \n            jacob = (2*jacob + 1) % 10\n        return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    jacob_num = 0\n    \n    for i in range(n):\n        jacob_num = a + b\n        a = b\n        b = jacob_num\n        \n    return jacob_num"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize min_k with the first record in the list\n    min_k_index = 0\n    min_k_value = test_list[0]\n    for i in range(1, len(test_list)):\n        if test_list[i] < min_k_value:\n            min_k_index = i\n            min_k_value = test_list[i]\n        elif test_list[i] == min_k_value and i < min_k_index:\n            min_k_index = i\n    # Return the minimum k records as a list\n    return [min_k_value] + [test_list[i] for i in range(min_k_index + 1, min(K, len(test_list)))]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # Sort the list based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize the minimum count to infinity\n    min_count = float('inf')\n\n    # Initialize the result list\n    result_list = []\n\n    # Iterate over the sorted list and find the minimum k records\n    for i in range(len(sorted_list)):\n        if len(result_list) < K:\n            result_list.append(sorted_list[i])\n        else:\n            min_count = min(min_count, sorted_list[i][1])\n\n        if len(result_list) == K:\n            break\n\n    # Return the list of minimum k records\n    return result_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Initialize variables for minimum k records\n    min_records = []\n    min_key = None\n\n    # Loop through the tuple list\n    for key, value in test_list:\n\n        # If the value is smaller than the current minimum, update the minimum value and key\n        if (len(min_records) < K) or (value < min_records[-1][1]):\n            min_records = [(key, value)]\n            min_key = key\n        # If the value is equal to the current minimum, add the key to the list of minimum k records\n        elif value == min_records[-1][1]:\n            min_records.append((key, value))\n\n    # Return the list of minimum k records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes in a list of tuples and an integer K and returns the minimum K elements from the list.\n\n    Example:\n    >>> test_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n    >>> min_k(test_list, 3)\n    [(1, 2), (3, 4), (5, 6)]\n\n    The function first sorts the list of tuples based on the second element of each tuple. Then, it iterates through the sorted list and keeps the first K elements. Finally, it returns the sorted list of tuples.\n    \"\"\"\n\n    # Sort the list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize a variable to store the minimum K elements\n    min_elements = []\n\n    # Iterate through the first K elements of the sorted list\n    for i in range(K):\n        # Append the current element to the min_elements list\n        min_elements.append(test_list[i])\n\n    # Return the sorted list of tuples\n    return min_elements"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #sorting the tuple list based on the second element\n    test_list.sort(key=lambda x:x[1])\n    #creating a min heap of size k\n    min_heap = []\n    #initilizing the minimum value\n    min_val = float('inf')\n    #traversing the tuple list\n    for i in range(len(test_list)):\n        #checking if the size of the min heap is less than k\n        if len(min_heap) < K:\n            #adding the current element to the min heap\n            min_heap.append(test_list[i])\n        else:\n            #if the minimum value is greater than the current element, updating it\n            if min_val > test_list[i][1]:\n                min_val = test_list[i][1]\n                #updating the min heap\n                min_heap[0] = test_list[i]\n            #else, if the current element is greater than the minimum value, adding it to the min heap\n            elif test_list[i][1] < min_val:\n                min_heap.append(test_list[i])\n        #if the size of the min heap is equal to k, removing the last element from the heap\n        if len(min_heap) == K:\n            min_heap.pop()\n    #returning the minimum k values\n    return min_heap[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list)\n\n    # Initialize the minimum value and count to zero\n    minimum = float('inf')\n    count = 0\n\n    # Traverse through the sorted list and find the minimum k records\n    for i in range(len(sorted_list)):\n        if count < K:\n            count += 1\n            if count == K:\n                minimum = min(minimum, sorted_list[i][0])\n        else:\n            break\n\n    # Return the minimum value\n    return minimum"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the test_list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    # Initialize minimum k value to be the first element of the sorted list\n    min_k_val = test_list[0][0]\n    # Initialize count of minimum k values to 1\n    min_k_count = 1\n    # Iterate over the sorted test_list and update minimum k value and count as needed\n    for i in range(1, len(test_list)):\n        # If the current tuple's first element is less than the minimum k value, update the minimum k value and count\n        if test_list[i][0] < min_k_val:\n            min_k_val = test_list[i][0]\n            min_k_count = 1\n        # If the current tuple's first element is equal to the minimum k value, increment the count\n        elif test_list[i][0] == min_k_val:\n            min_k_count += 1\n        # If the current tuple's first element is greater than the minimum k value and the count is less than K, update the minimum k count\n        elif test_list[i][0] > min_k_val and min_k_count < K:\n            min_k_count = 1\n    # Return the minimum k value and count\n    return min_k_val, min_k_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list by the first element in each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize variables for minimum k and index of minimum k\n    min_k = None\n    min_k_index = None\n\n    # Traverse the sorted list and update minimum k if required\n    for i in range(K):\n        if i < len(test_list):\n            if min_k is None or test_list[i][1] < min_k:\n                min_k = test_list[i][1]\n                min_k_index = i\n\n    # Return the tuple with minimum k as the first element and its index as the second element\n    return (min_k, min_k_index) if min_k is not None else None"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input and returns the minimum K records from the list.\n    '''\n    min_list = []\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    for i in range(K):\n        min_list.append(sorted_list.pop(0))\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    test_list.sort()\n    return test_list[:K]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create an empty dictionary to store the count of each element in each list\n    count_dict = {}\n\n    # Loop through each element in the first list\n    for i in range(len(l1)):\n        # If the element exists in the second list and third list, increment its count in the dictionary\n        if l1[i] in l2 and l1[i] in l3:\n            count_dict[l1[i]] = count_dict.get(l1[i], 0) + 1\n\n    # Create an empty list to store the common elements\n    common_elements = []\n\n    # Loop through each element in the second list\n    for i in range(len(l2)):\n        # If the element exists in the first list and third list, and the count in the dictionary is equal to 2, add it to the common_elements list\n        if l2[i] in l1 and l2[i] in l3 and count_dict[l2[i]] == 2:\n            common_elements.append(l2[i])\n\n    # Return the common_elements list\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for index in range(len(l1)):\n        if l1[index] == l2[index] == l3[index]:\n            common_elements.append(l1[index])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n\n    # Iterate through the elements of each list and check if they are common\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = set()\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_indices.add(i)\n    return list(common_indices)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_elements = []\n\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in common_elements:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3 and l2[i] in common_elements:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2 and l3[i] in common_elements:\n            common_elements.append(l3[i])\n\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Parameters:\n    numbers (list): A list of numbers to find the second smallest of.\n\n    Returns:\n    The second smallest number in the list, or None if the list is empty.\n    \"\"\"\n    if not numbers:  # If the list is empty\n        return None\n    else:\n        # Sort the list in ascending order\n        numbers.sort()\n        # Return the second element (index 1) of the sorted list\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = numbers[0]\n    second_smallest = None\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Initialize variables to store the smallest and second smallest numbers\n    smallest = float('inf')\n    second_smallest = float('inf')\n    # Iterate through the list and compare each number to the current smallest and second smallest numbers\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    # If there is no second smallest number, return None\n    if second_smallest == float('inf'):\n        return None\n    # Otherwise, return the second smallest number\n    else:\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers[1:], key=lambda x: x)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function takes a list of numbers and returns the second smallest number in the list.\n    \"\"\"\n\n    # Sort the list in descending order\n    sorted_numbers = sorted(numbers, reverse=True)\n\n    # Return the second smallest number\n    return sorted_numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a(?=b*)\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=b.*b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n\n    if match:\n        return \"Match found\"\n    else:\n        return \"Match not found\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'ab+')\n    matches = re.findall(pattern, text)\n    return matches\n\nif __name__ == '__main__':\n    text = \"ababab\"\n    matches = text_match_zero_one(text)\n    print(matches)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*){0,1}'\n    result = re.search(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=.*b)'\n    return re.search(pattern, text) is not None\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b.*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            for k in range(len(test_list[i])):\n                if i!= j and i!= k and j!= k and test_list[i][k] == test_list[j][i] == test_list[k][j]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # create a dictionary to store the frequency of characters in each string\n    freq = {}\n\n    # loop through each string in the list\n    for string in test_list:\n        # iterate through each character in the string\n        for char in string:\n            # if the character is already in the dictionary, increment its frequency\n            if char in freq:\n                freq[char] += 1\n            # otherwise, add the character to the dictionary with a frequency of 1\n            else:\n                freq[char] = 1\n\n    # create an empty list to store the pairs of strings\n    pairs = []\n\n    # loop through each character in the frequency dictionary\n    for char, freq in freq.items():\n        # if the frequency of the character is greater than 1, check if the reversed version of the character is also in the dictionary\n        if freq > 1:\n            if char[::-1] in freq:\n                # add the pair of strings to the pairs list if they are not already in the list\n                if (string, char[::-1]) not in pairs and (char[::-1], string) not in pairs:\n                    pairs.append((string, char[::-1]))\n\n    # return the number of pairs found\n    return len(pairs)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through each string in the test_list\n    for string1 in test_list:\n        # Reverse the first string\n        reverse1 = string1[::-1]\n        \n        # Loop through each string in the test_list except the first one\n        for string2 in test_list[1:]:\n            # Reverse the second string\n            reverse2 = string2[::-1]\n            \n            # If the reversed first string is equal to the reversed second string, it means they are in reverse order, so add 1 to the count variable\n            if reverse1 == reverse2:\n                count += 1\n                \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    # initialize count to 0\n    count = 0\n\n    # iterate over the list of strings\n    for i in range(len(test_list)):\n\n        # iterate over the strings after the current one\n        for j in range(i+1, len(test_list)):\n\n            # check if the reverse of the current string is in the list\n            if test_list[j][::-1] in test_list[:i]:\n\n                # if yes, increment the count\n                count += 1\n\n    # return the count\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for string in test_list:\n        for i in range(len(string)):\n            for j in range(i+1, len(string)+1):\n                if string[i:j] == string[::-1][:j]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    reverse_dict = {}\n    result = 0\n\n    for string in test_list:\n        # Convert the string to a list of characters\n        chars = list(string)\n        # Sort the characters in descending order\n        chars.sort(reverse=True)\n        # Convert the sorted list back to a string\n        reversed_string = ''.join(chars)\n\n        if reversed_string not in reverse_dict:\n            reverse_dict[string] = True\n        else:\n            result += 1\n\n    return result"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n    count = 0\n\n    for string in test_list:\n        reverse_string = string[::-1]\n        if reverse_string in reverse_dict:\n            count += reverse_dict[reverse_string]\n        else:\n            reverse_dict[string] = 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # create a dictionary to store count of each unique sublist\n    sublist_count = {}\n    # iterate over all the lists in the original list\n    for sublist in lst:\n        # convert the list to a tuple and check if it already exists in the dictionary\n        if sublist in sublist_count:\n            # increment the count of the tuple in the dictionary\n            sublist_count[sublist] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            sublist_count[sublist] = 1\n    # return the dictionary of sublist counts\n    return sublist_count\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple not in unique_sublist_count:\n            unique_sublist_count[sublist_tuple] = 1\n        else:\n            unique_sublist_count[sublist_tuple] += 1\n    return unique_sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists:\n            sublists[sublist_tuple] += 1\n        else:\n            sublists[sublist_tuple] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Create an empty dictionary\n    counts = {}\n    \n    # Loop through each element in the list\n    for i in lst:\n        # Convert the element to a tuple\n        tup = (i,)\n        \n        # Check if the tuple exists in the dictionary\n        if tup in counts:\n            # Increment the count of the tuple by 1\n            counts[tup] += 1\n        else:\n            # If the tuple doesn't exist, add it with a count of 1\n            counts[tup] = 1\n            \n    # Return the dictionary with the counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    count_dict = {}\n    for lst in list1:\n        lst = tuple(sorted(lst))  # convert list to tuple and sort it to count duplicates\n        if lst in count_dict:\n            count_dict[lst] += 1\n        else:\n            count_dict[lst] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert list to tuple and count its occurrences\n    sublists = {}\n    for sublist in list1:\n        if sublist in sublists:\n            sublists[sublist] += 1\n        else:\n            sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    sublists = {}\n    # iterate through each element in the list\n    for i in range(len(list1)):\n        # convert each element to a tuple and check if it is already in the dictionary\n        if tuple(list1[i]) in sublists:\n            # if it is, increment its value by 1\n            sublists[tuple(list1[i])][1] += 1\n        else:\n            # if it's not, add it to the dictionary with value 1\n            sublists[tuple(list1[i])] = [list1[i], 1]\n    # return the dictionary\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = list(set(list1))  # remove duplicate elements\n    count = {}\n    for i in list1:\n        count[tuple(i)] = list1.count(i)  # convert list to tuple and count its occurrences\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist in count:\n                count[sublist] += 1\n            else:\n                count[sublist] = 1\n    return count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    dot_index = num.index('.')\n    if dot_index == -1:\n        return False\n    else:\n        if len(num) - dot_index - 1 > 2:\n            return False\n        else:\n            return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the number contains non-numeric characters\n    if not num.isnumeric():\n        return False\n    \n    # Check if the number contains less than two digits after the decimal point\n    if '.' not in num or len(num.split('.')[1]) < 2:\n        return False\n    \n    # Check if the number is within a certain range\n    if int(num) < -999999999999999 or int(num) > 999999999999999:\n        return False\n    \n    # Check if the number is a valid decimal number with a precision of 2\n    decimal_part = num.split('.')[1]\n    if len(decimal_part) > 2:\n        return False\n    \n    for digit in decimal_part:\n        if not digit.isdigit():\n            return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = float(num)\n    return num % 1 == 0.0"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        return False\n    \n    for c in num:\n        if not c.isdigit() and c!= '.':\n            return False\n    \n    try:\n        if '.' not in num:\n            num += '.'\n        float(num)\n    except ValueError:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        # parse the number as a float with a precision of 2\n        float(num)\n    except ValueError:\n        # the string is not a valid number\n        return False\n    else:\n        # check if the number has a precision of 2\n        return '.' in num and num.count('.') <= 1 and len(num.split('.')[1]) <= 2"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if \".\" not in num:\n        return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    parts = num.split(\".\")\n    if len(parts)!= 2:\n        return False\n    if len(parts[1])!= 2:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            decimal_part = num.split('.')[-1]\n            if len(decimal_part) > 2:\n                return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' not in num:\n            return False\n        num_split = num.split('.')\n        if len(num_split)!= 2:\n            return False\n        decimal_part = num_split[1]\n        if len(decimal_part) > 2:\n            return False\n        for char in decimal_part:\n            if not char.isdigit():\n                return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    # Check if the number contains at least one decimal point\n    if '.' not in num:\n        return False\n    \n    # Convert the string to a float with 2 decimal places\n    decimal_places = 2\n    float_num = float(num)\n    float_num = float_num * 10**decimal_places\n    float_num = float_num / 10**decimal_places\n    \n    # Check if the integer part of the float is zero\n    if int(float_num) == 0:\n        return True\n    \n    # If we reach this point, the float is not zero, so it must have at least one digit after the decimal point\n    if '.' in float(str(float_num)[-1]):\n        return True\n    \n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return True\n    else:\n        unique = True\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1]:\n                unique = False\n                break\n        if unique:\n            return True\n        else:\n            return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            count += 1\n            if count == 2:\n                return True\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = set(arr)\n    if len(distinct_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # check whether the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr.count(arr[i]) > 1:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n    elif len(arr) == 1:\n        return False\n    else:\n        for i in range(len(arr)):\n            if arr[i] == arr[i+1]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = set(arr)\n    if len(distinct_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Define a dictionary to map month numbers to the number of days in that month\n    month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    # Check if the given month number is in the dictionary\n    if monthnum3 in month_days:\n        # If the month number is present in the dictionary, check if it contains 30 days or not\n        if month_days[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        # If the month number is not present in the dictionary, return False\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            days_in_months[1] = 29\n        else:\n            days_in_months[1] = 28\n    if monthnum3 in [4, 6, 9, 11]:\n        days_in_months[monthnum3-1] = 30\n    if days_in_months[monthnum3-1] <= daynum:\n        print(monthnum3, \"contains\", days_in_months[monthnum3-1], \"days.\")\n    else:\n        print(monthnum3, \"does not contain\", days_in_months[monthnum3-1], \"days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        if monthnum3 in [4, 6, 9, 11]:\n            return True\n        elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n            return False\n    else:\n        if monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n            return True\n        elif monthnum3 in [4, 6, 9, 11]:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    # Check if the input is a number between 1 and 12\n    if isinstance(monthnum3, int) and 1 <= monthnum3 <= 12:\n        # Check if the month number has 30 days\n        if monthnum3 == 2:\n            return True if monthnum3 % 4 == 0 and (monthnum3 % 100!= 0 or monthnum3 % 400 == 0) else False\n        else:\n            return True if monthnum3 % 2 == 0 else False\n    else:\n        # If the input is not a number, return False\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if the month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n\n    # Get the number of days in the given month\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 == 2 and is_leap_year(year):\n        days[1] = 29\n\n    # Check if the number of days in the given month is 30\n    if days[monthnum3-1] == 30:\n        return True\n    else:\n        return False\n\n\ndef is_leap_year(year):\n    '''\n    A helper function to check if the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    if monthnum3 in days_in_month:\n        if days_in_month[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return \"Array must have at least two elements\"\n    \n    min_diff = float('inf')\n    min_element = arr[0]\n    min_index = 0\n    \n    for i in range(1, n):\n        diff = arr[i] - min_element\n        \n        if diff < min_diff:\n            min_diff = diff\n            min_element = arr[i]\n            min_index = i\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to positive infinity\n    min_diff = float('inf')\n\n    # Iterate over the array starting from the second element\n    for i in range(1, n):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i] - arr[i - 1]\n\n        # Update the minimum difference if the current difference is less than the previous minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    # Sort the array in ascending order \n    arr.sort()\n    # Initialize the minimum difference and the first element of the array \n    min_diff = abs(arr[1] - arr[0])\n    # Initialize the index of the first element of the array \n    i = 0\n    # Traverse the array from second element to last element \n    for j in range(1,n-1): \n        # If the difference between the current element and the next element is less than the minimum difference, update the minimum difference \n        if abs(arr[j+1] - arr[j]) < min_diff: \n            min_diff = abs(arr[j+1] - arr[j])\n            # If the difference between the current element and the next element is equal to the minimum difference, swap the elements if they are not already in the correct order \n            if abs(arr[j+1] - arr[j]) == min_diff and arr[j] > arr[j+1]: \n                arr[j],arr[j+1] = arr[j+1],arr[j]\n    # Return the minimum difference \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Initialize variables\n    min_diff = float('inf')\n    current_min = float('inf')\n    max_index = -1\n\n    # Iterate through the array\n    for i in range(n):\n        # Update the current minimum if the current element is smaller than it\n        if arr[i] < current_min:\n            current_min = arr[i]\n            max_index = i\n\n        # Calculate the difference between the current element and the current minimum\n        diff = arr[i] - current_min\n\n        # Update the minimum difference if the current difference is smaller than the previous minimum\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n    \n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n    \n    # Traverse through the array and find the minimum difference\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes in an array and its size n.\n    It returns the minimum difference between any two elements in the array.\n    '''\n    if n < 2:\n        return -1\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize variables for minimum difference and current difference\n    min_diff = arr[1] - arr[0]\n    curr_diff = arr[1] - arr[n-1]\n    \n    # Iterate over the array from the second element to the n-2th element\n    for i in range(1, n-1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n        \n        # Update the minimum difference if necessary\n        if diff < min_diff:\n            min_diff = diff\n        \n        # Update the current difference\n        curr_diff = diff\n        \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = arr[n] - arr[0]\n    min_diff = abs(diff)\n    for i in range(n):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Given an array arr[] of n integers, the task is to find the minimum difference between any two elements in the array.\n    The difference between two elements is defined as the absolute value of their difference.\n    The function should return the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # Sort the array in non-decreasing order\n    min_diff = arr[1] - arr[0]  # Initialize minimum difference\n\n    for i in range(1, n):  # Iterate over the remaining elements\n        diff = abs(arr[i] - arr[i - 1])  # Calculate difference between current and previous element\n        if diff < min_diff:  # Update minimum difference if necessary\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # A list to store the polite numbers\n    polite_numbers = []\n\n    # A function to check if a number is polite or not\n    def is_polite_num(num):\n        if num % 2 == 0:\n            return False\n        if num == 2 or num == 3:\n            return True\n\n        # Check for odd factors of 3\n        for i in range(5, int(math.sqrt(num)) + 1, 6):\n            if num % i == 0:\n                return False\n\n        return True\n\n    # Iterate till nth polite number is found\n    count = 0\n    while count < n:\n        # Generate a new random number\n        num = math.floor(1 + 2 * math.random())\n\n        # Check if it's a polite number\n        if is_polite_num(num):\n            polite_numbers.append(num)\n            count += 1\n\n    # Return the nth polite number\n    return polite_numbers[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function finds the nth polite number.\n    \"\"\"\n    a = 10\n    b = 1\n    for i in range(1, n+1):\n        c = a + b\n        if i == n:\n            return c\n        if c > n:\n            break\n        a = b\n        b = c\n    return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function finds the nth polite number.\n\n    Args:\n    n (int): the nth polite number to find.\n\n    Returns:\n    (int): the nth polite number.\n    \"\"\"\n    # The first two polite numbers are 1 and 2.\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n\n    # Calculate the square root of n.\n    sqrt_n = math.sqrt(n)\n\n    # Iterate from 3 to the square root of n.\n    for i in range(3, int(sqrt_n)+1):\n        # Check if i is a factor of n.\n        if n % i == 0:\n            return i\n\n    # If we reach here, n is a prime number.\n    return int(sqrt_n) + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    This function checks if a given number is a polite number or not. A polite number is a number where the sum of its digits is equal to its value. \n    \"\"\"\n    digits = []\n    num = n\n    while num > 0:\n        digits.append(num % 10)\n        num //= 10\n    \n    polite_sum = sum(digits)\n    \n    if polite_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    if n < 1:\n        return False\n    \n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n        \n    return True\n\ndef nth_polite(n):\n    i = 1\n    polite_num = 1\n    while i <= n:\n        if is_polite(polite_num):\n            i += 1\n            polite_num += 1\n        else:\n            polite_num += 2\n            \n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n and returns the nth polite number.\n\n    It follows the below algorithm to find nth polite number:\n    1. If n is even, return 2*n\n    2. If n is odd, return 2*n+1\n\n    If n is less than 1, raise ValueError.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    if n % 2 == 0:\n        return 2*n\n    else:\n        return 2*n+1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    if n < 2:\n        return n\n    \n    # Count the number of primes less than or equal to n\n    count = 0\n    i = 2\n    while i * i <= n:\n        if n % i:\n            count += 1\n        i += 1\n    \n    # Calculate the nth prime number\n    nth_prime = 2\n    while count < n:\n        nth_prime += 1\n        count = 0\n        i = 2\n        while i * i <= nth_prime:\n            if nth_prime % i:\n                count += 1\n            i += 1\n    \n    # Return the nth polite number\n    return nth_prime"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    if n < 2:\n        return n\n\n    count = 0\n    num = 1\n    while num <= n:\n        count += 1\n        num = num * 2 * count\n\n    return count\n\nn = 10\nprint(is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    a = 1\n    b = 1\n    polite_count = 0\n    while polite_count < n:\n        c = a + b\n        if math.gcd(a, b) == 1 and math.gcd(b, c) == 1:\n            polite_count += 1\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n):\n    if n < 1:\n        return False\n    for i in range(1, n+1):\n        if i % 15 == 0 or i % 3 == 0 or i % 5 == 0 or i % 7 == 0:\n            return False\n    return True\n\ndef nth_polite(n):\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 1\n    if is_polite(n):\n        return 4 # assuming the first polite number is 4\n    if n % 2 == 0:\n        prev_polite = nth_polite(n//2)\n    else:\n        prev_polite = nth_polite((n-1)//2)\n    return prev_polite + prev_polite + 2 # assuming the 2nd polite number is 6"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function takes as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The function gets as input a list of numbers and the sum,\n    '''\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs.append((arr[i], arr[j]))\n    return len(pairs)"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the elements of li1 that are not present in li2.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list which contains all the elements of li1 that are not present in li2.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # Convert both lists to sets\n    set1 = set(li1)\n    set2 = set(li2)\n    # Calculate the difference between the two sets\n    diff_set = set1.symmetric_difference(set2)\n    # Convert the difference set back to a list\n    diff_list = list(diff_set)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Returns the difference between two lists, i.e., those elements that are present in list1 but not in list2.\n    \"\"\"\n    diff = []\n    for elem in li1:\n        if elem not in li2:\n            diff.append(elem)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    set1 = set(li1)\n    set2 = set(li2)\n    return list(set1 - set2)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Initialize an empty list to store the difference\n    diff = []\n\n    # Loop through each element in list 1\n    for item in li1:\n        # If the element is not in list 2, add it to the difference list\n        if item not in li2:\n            diff.append(item)\n\n    # Return the difference list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns their difference.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Initialize sum variable to 0\n    sum_of_powers = 0\n\n    # Loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add fourth power of odd number to sum_of_powers\n        sum_of_powers += i ** 4\n\n    # Return sum_of_powers\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_pow = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum_of_fourth_pow += i**4\n    return sum_of_fourth_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    num = 1\n    while num <= n:\n        sum_of_fourth_powers += num ** 4\n        num += 2\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_fourth_pow = 0\n    for i in range(1, n + 1, 2):\n        sum_fourth_pow += i ** 4\n    return sum_fourth_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num_sum = 0\n    for i in range(1, n+1, 2):\n        num_sum += i ** 4\n    return num_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    sum_of_powers = 0\n    count = 0\n\n    while count < n:\n        num = count * (count * (count * (3 * count + 1) // 2) // 2)\n        sum_of_powers += num\n        count += 1\n\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum to zero\n    sum = 0\n\n    # loop through first n odd numbers\n    for i in range(1, n+1, 2):\n        # compute fourth power of the odd number\n        fourth_power = i**4\n\n        # add fourth power to the sum\n        sum += fourth_power\n\n    # return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 4\n        count += 1\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            elif stack[-1] == '(' and char == ')':\n                stack.pop()\n            elif stack[-1] == '[' and char == ']':\n                stack.pop()\n            elif stack[-1] == '{' and char == '}':\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_expression(exp):\n    stack = deque()\n    opening_brackets = {'(', '{', '['}\n    closing_brackets = {')', '}', ']'}\n\n    for bracket in exp:\n        if bracket in opening_brackets:\n            stack.append(bracket)\n        elif bracket in closing_brackets:\n            if not stack:\n                return False\n            last_bracket = stack.pop()\n            if last_bracket not in opening_brackets:\n                return False\n            if opening_brackets[last_bracket]!= bracket:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum():\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if char == '(':\n                if top!= ')':\n                    return False\n            elif char == '[':\n                if top!= ']':\n                    return False\n            elif char == '{':\n                if top!= '}':\n                    return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char == '(':\n                continue\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_expression(exp):\n    stack = []\n    deque = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack.pop()!= '(':\n                return False\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if char in [')', ']'] and top_char not in ['(', '[']:\n                return False\n            elif char in ['}', ']'] and top_char not in ['{', '[']:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the input string into a list of words\n    words = test_str.split()\n    # Initialize an empty list to store the new words\n    new_words = []\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the length of the word is greater than K\n        if len(word) > K:\n            # If so, add it to the new_words list\n            new_words.append(word)\n    # Join the new words into a single string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize a list to store the words that have k length\n    result = []\n\n    # Iterate through the words\n    for word in words:\n        # If the length of the word is not equal to K\n        if len(word)!= K:\n            # Add the word to the result list\n            result.append(word)\n\n    # Join the words in the result list into a string\n    final_str =''.join(result)\n\n    return final_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return \" \".join(result)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return (result.group(), result.start(), result.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    # Use regular expressions to search for the pattern in the text\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n    \n    for match in matches:\n        start = match.start()\n        end = match.end()\n        substring = text[start:end]\n        print(\"Substring found: '{}' at position {}\".format(substring, start))"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    if len(result) == 0:\n        return None\n    else:\n        return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    else:\n        for match in matches:\n            print(f\"Substring '{match}' found at position {text.find(match)}\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    try:\n        match = re.search(pattern, text, re.IGNORECASE)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None\n    except:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    try:\n        matches = re.findall(pattern, text)\n        if matches:\n            for match in matches:\n                print(f\"Substring: {match}, Occurrence: {text.count(match)}, Position: {text.find(match)}\")\n        else:\n            print(\"No matches found.\")\n    except Exception as e:\n        print(\"Error:\", e)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for i in range(len(matches)):\n            print(f\"Match {i+1}: {matches[i]}\")\n        return None\n    else:\n        print(\"No match found\")\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if any(nums[i] % 2!= 0 for j in range(i)):\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n        else:\n            break\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 1:\n            count += 1\n        else:\n            break\n    if count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if all the odd positions contain odd numbers.\n    '''\n    for i in range(1, len(nums), 2):\n        if not all(nums[i] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    for i in range(0, len(nums), 2):\n        if not all(nums[i] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_count += 1\n    return odd_count == 0"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    # iterate over the indices of the list\n    for i in range(len(nums)):\n        # if the current index is odd, check if the corresponding value at that index is odd\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            # if both conditions are satisfied, return True\n            return True\n    # if no odd index was found that satisfies the conditions, return False\n    return False"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    # Define a function to check if a character is a vowel\n    def is_vowel(char):\n        vowels = \"AEIOUaeiou\"\n        return char.upper() in vowels\n    \n    # Define a function to check if two characters have vowels as neighbors\n    def has_vowels_as_neighbors(char1, char2):\n        vowels = \"AEIOUaeiou\"\n        if (char1.upper() in vowels) and (char2.upper() in vowels):\n            return True\n        else:\n            return False\n    \n    # Define an empty dictionary to store the counts\n    counts = {}\n    \n    # Loop through each character in the string\n    for char in test_str:\n        \n        # Check if the character is a vowel\n        if is_vowel(char):\n            \n            # Check if the character has vowels as neighbors\n            if has_vowels_as_neighbors(char, char + 1):\n                # Increment the count of the vowel if it has neighbors\n                if char.upper() in counts:\n                    counts[char.upper()] += 1\n                else:\n                    counts[char.upper()] = 1\n            \n    # Return the count of each vowel as its neighbor\n    return counts"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] in vowels and test_str[i - 1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiou\"\n    count = 0\n\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str)-1:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n                \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            j = i - 1\n            while j >= 0 and test_str[j] in vowels:\n                j -= 1\n            k = i + 1\n            while k < len(test_str) and test_str[k] in vowels:\n                k += 1\n            if j >= 0 and k < len(test_str) and test_str[j] == test_str[i] and test_str[k] == test_str[i]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create a dictionary to store the elements of the list and their frequency\n    freq = {}\n    for elem in arr:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Iterate through the dictionary and add the sum of non-repeated elements to the sum variable\n    for elem in freq:\n        if freq[elem] == 1:\n            sum += elem\n\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # create a dictionary to store the elements and their frequency in the list\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # initialize variables to store the sum and count of non-repeated elements\n    sum = 0\n    count = 0\n\n    # iterate through the dictionary and add the non-repeated elements to the sum and count\n    for num, freq in freq.items():\n        if freq == 1:\n            sum += num\n            count += 1\n\n    # return the sum and count of non-repeated elements\n    return sum, count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_of_non_repeated = 0\n    # Loop through the unique elements and add their value to the sum\n    for element in unique_elements:\n        sum_of_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n    \n    # calculate the sum of the unique elements in the list\n    sum_unique = sum(unique_set)\n    \n    # return the sum of the unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create a dictionary to store unique elements of the list\n    unique_dict = {}\n\n    # Iterate through the list and add each element to the dictionary\n    for num in arr:\n        unique_dict[num] = True\n\n    # Sum up all the unique elements in the dictionary\n    sum_of_unique = sum(unique_dict.keys())\n\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = list(set(arr))\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the elements of the list\n    freq_dict = {}\n    \n    # Iterate over the list and update the frequency dictionary\n    for elem in arr:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    \n    # Initialize the sum to zero\n    sum_arr = 0\n    \n    # Iterate over the frequency dictionary and add up the sum of the non-repeated elements\n    for elem, freq in freq_dict.items():\n        if freq == 1:\n            sum_arr += elem\n    \n    # Return the sum of non-repeated elements\n    return sum_arr"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    '''\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Convert the list to a set so that we can remove duplicates easily\n    set_arr = set(arr)\n    # Find the sum of all the elements in the set\n    sum_set = sum(set_arr)\n    # Convert the set back to a list so that we can return it\n    list_set = list(set_arr)\n    # Sort the list in ascending order\n    list_set.sort()\n    # Return the sum of all the elements in the list, except for the first one\n    return sum_set - list_set[0]"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n    # Iterate through the set to find the sum of non-repeated elements\n    for element in unique_elements:\n        non_repeated_sum += element\n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    group_list = []\n    for item in list1:\n        if item in group_list:\n            group_list[-1].append(item)\n        else:\n            group_list.append([item])\n    return group_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [[k for k, g in groupby(list1)]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list elements by their corresponding index and pack the consecutive duplicates into sublists\n    return [list(group) for k, group in groupby(enumerate(list1), lambda x: x[0] == x[1])]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use the groupby() function to group the list by consecutive duplicates\n    grouped_list = groupby(list1)\n    \n    # Iterate over the grouped list and append sublists to a new list\n    new_list = []\n    for item, group in grouped_list:\n        if len(list(group)) > 1:\n            new_list.append(list(group))\n    \n    return new_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for group in groupby(list1) if len(list(group)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Use groupby function to group consecutive duplicates\n    grouped_list = groupby(list1)\n\n    # Create a sublist for each group of consecutive duplicates\n    packed_list = [list(group) for key, group in grouped_list]\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(sorted(list1)):\n        if key == key[0]:\n            result.append(list(group))\n        else:\n            result.append([key])\n    return result"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        if tuple(sorted(sublist)) not in count_dict:\n            count_dict[tuple(sorted(sublist))] = 1\n        else:\n            count_dict[tuple(sorted(sublist))]+=1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list.\n    The function should return a dictionary, where every list is turned to a tuple,\n    and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # create a dictionary to store the number of occurrences of each sublist\n    count = {}\n    # iterate through the list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in count:\n            # if it's already in the dictionary, increment its value\n            count[tuple(sublist)] += 1\n        else:\n            # if it's not in the dictionary, add it with a value of 1\n            count[tuple(sublist)] = 1\n    # return the dictionary\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of each sublist\n    count_dict = {}\n\n    # Iterate through the list\n    for sublist in list1:\n        # If the sublist is not in the dictionary, add it with a count of 1\n        if sublist not in count_dict:\n            count_dict[sublist] = 1\n        # If the sublist is already in the dictionary, increment its count by 1\n        else:\n            count_dict[sublist] += 1\n\n    # Return the dictionary of count of each sublist\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for item in lst:\n        if isinstance(item, list):\n            counts[tuple(item)] = counts.get(tuple(item), 0) + 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Loop over all lists in the input list\n    for sublist in list1:\n        # Convert the list to a tuple and add it to the dictionary\n        counts[(tuple(sublist))] = counts.get((tuple(sublist)), 0) + 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in lst:\n        if sublist not in count:\n            count[sublist] = 1\n        else:\n            count[sublist] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts of unique sublists\n    sublist_counts = {}\n    # Loop through each element of the list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple to use as a key in the dictionary\n            key = tuple(element)\n            # Check if the key is already in the dictionary\n            if key not in sublist_counts:\n                # If the key is not in the dictionary, add it and set its value to 1\n                sublist_counts[key] = 1\n            # If the key is already in the dictionary, increment its value by 1\n            else:\n                sublist_counts[key] += 1\n    # Return the dictionary of unique sublist counts\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list as input and returns a dictionary where every list is turned to a tuple and the value of the tuple is the number of its occurrences.\n    '''\n    lst = [tuple(x) for x in lst]\n    sublists = {}\n    for sublist in lst:\n        if sublist in sublists:\n            sublists[sublist] += 1\n        else:\n            sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[tuple(item)] = 1\n        else:\n            count[tuple(item)] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] += 1\n    return count"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    combinations_list = []\n    \n    for i in range(1, total_sum+1):\n        for j in combinations(test_list, len(test_list)):\n            if sum(j) == i:\n                combinations_list.append(tuple(j))\n    \n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Check if the input list is empty\n    if not test_list:\n        print(\"The input list is empty\")\n        return\n\n    # Get the first tuple from the list\n    first_tuple = test_list[0]\n\n    # Create a list of tuples containing the first tuple and itself\n    combined_list = [first_tuple, (first_tuple[0], first_tuple[1])]\n\n    # Create a set of tuples to store the remaining tuples to check\n    remaining_tuples = set(test_list[1:])\n\n    # Keep iterating until there are no more tuples to check\n    while remaining_tuples:\n        # Find the remaining tuples that have the same elements as the first tuple\n        tuples_to_check = set(combinations(remaining_tuples, 2))\n\n        # Add all the tuples that match the above condition to the combined list\n        for tuple_combination in tuples_to_check:\n            if tuple_combination[0] == first_tuple[0] and tuple_combination[1] == first_tuple[1]:\n                combined_list.append(tuple_combination)\n\n        # Remove the tuples that have been combined from the remaining set\n        remaining_tuples -= set(tuples_to_check)\n\n    # Print the combined list of tuples\n    print(\"The combined list of tuples is:\", combined_list)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    comb = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            comb.append(tuple(sorted(test_list[i:j])))\n    return comb"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Find all possible combinations of sums using itertools library\n    combinations_list = list(combinations(test_list, r=2))\n\n    # Filter out combinations which have tuples as elements\n    filtered_list = [item for sublist in combinations_list for item in sublist if type(item) is not tuple]\n\n    return filtered_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if i!= j:\n                sum_1 = test_list[i]\n                sum_2 = test_list[j]\n                if sum_1 + sum_2 == total_sum:\n                    print(tuple(sorted((sum_1, sum_2))))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # create a list of tuples from the given test list\n    tup_list = [(x,y) for x in test_list for y in test_list]\n    # find all combinations of sums using itertools\n    comb = combinations(tup_list, 2)\n    # return the list of combinations\n    return list(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Iterate through the tuple list and find all combinations of sums\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    for m in range(l+1, len(test_list)):\n                        for n in range(m+1, len(test_list)):\n                            print(test_list[i], test_list[j], test_list[k], test_list[l], test_list[m], test_list[n])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Sort the given list of tuples\n    test_list.sort()\n\n    # Initialize an empty list to store the combinations\n    comb_list = []\n\n    # Iterate over all possible combinations of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of the tuples is present in the list\n            if test_list[i][0] + test_list[j][0] in test_list[i+1:j]:\n                # If it is, add the combination to the list\n                comb_list.append(tuple(sorted((test_list[i], test_list[j]))))\n\n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if sum(test_list[i]) == sum(test_list[j]) and sum(test_list[j]) == sum(test_list[k]):\n                    result.append((test_list[i], test_list[j], test_list[k]))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initialize the result list\n    result = []\n    # create a list of all combinations of tuples\n    comb_list = list(combinations(test_list, len(test_list)))\n    # loop through each combination and check if the sum of the elements is equal to the target sum\n    for comb in comb_list:\n        # calculate the sum of the elements in the combination\n        sum_of_elements = sum(comb)\n        # check if the sum of the elements is equal to the target sum\n        if sum_of_elements == target_sum:\n            # append the combination to the result list\n            result.append(comb)\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    divisors = []\n    i = 1\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n        i += 1\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function takes an integer n as input and returns True if the count of divisors is even, otherwise False.\n    '''\n    if n == 1: \n        return True \n    divisors = [] \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors.append(i) \n            if n // i!= i: \n                divisors.append(n // i) \n    if len(divisors) % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n\n    def count_divisors_helper(n, count):\n        if n == 1:\n            return count\n        elif n % 2 == 0:\n            count_divisors_helper(n//2, count + 1)\n        else:\n            count_divisors_helper((3*n + 1)//2, count + 1)\n\n    count = count_divisors_helper(n, 0)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a Python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    divisor = 2\n    while divisor <= math.sqrt(n):\n        if n % divisor == 0:\n            count += 1\n        divisor += 1\n    return count % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if i!= n // i:\n                count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Use the fact that 1 has 1 divisor, 2 has 2 divisors, 3 has 1, 4 has 2, 5 has 1, etc.\n    divisors = [1]\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i!= n/i:\n                divisors.append(i)\n                divisors.append(n/i)\n\n    if sum(divisors) % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of divisors is even and False otherwise.\n    '''\n\n    # calculate the number of divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n\n    # calculate the count of divisors\n    count = len(divisors)\n\n    # check if the count of divisors is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function checks whether the count of divisors is even or odd.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    divisors.append(n)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    \n    def count_div(num):\n        '''\n        Write a python function to count the number of divisors of a given number. \n        '''\n        count = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                count += 1\n        if num > 1:\n            count += 1\n        return count\n    \n    count = 0\n    for i in range(1, n+1):\n        if count_div(i) % 2 == 0:\n            count += 1\n    \n    if count % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Create an auxiliary array to store the sum of even length subarrays\n    even_sum = [0] * n\n\n    # Calculate the sum of even length subarrays\n    for i in range(1, n, 2):\n        even_sum[i] = arr[i] + even_sum[i - 1]\n\n    # Initialize the sum of odd length subarrays\n    odd_sum = 0\n\n    # Calculate the sum of odd length subarrays\n    for i in range(0, n - 1, 2):\n        odd_sum += even_sum[i + 1]\n\n    # Return the sum of odd length subarrays\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)-1):\n        for j in range(i+2, len(arr)+1, 2):\n            sum += arr[j-1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        for j in range(i+2, n+1, 2):\n            sub_arr = arr[i:j]\n            sum += sum(sub_arr)\n            \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            total += arr[j-2]\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    # Initialize sum and count of odd length subarrays\n    sum = 0\n    count = 0\n    # Traverse through the array and count odd length subarrays\n    for i in range(n):\n        # If current element is odd, increment count and add current element to sum\n        if arr[i] % 2!= 0:\n            count += 1\n            sum += arr[i]\n            # If count becomes odd, check if sum is negative and update it if it is\n            if count % 2!= 0 and sum < 0:\n                sum = abs(sum)\n    # Return the sum of all odd length subarrays\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            result += arr[j]\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    \"\"\"\n    sum_of_subarrays = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sum_of_subarrays += sum(arr[j-i:j])\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_len = 0\n\n    for i in range(n):\n        # check if the current element is odd\n        if i == 0 or arr[i] % 2!= 0:\n            # get the sum of all odd length subarrays from index i+1 to n\n            sum_odd_len += sum_odd(arr, i+1, n)\n\n    return sum_odd_len\n\n\ndef sum_odd(arr, start, end):\n    '''\n    Recursive function to find the sum of all odd length subarrays from start to end.\n    '''\n    n = end - start\n    sum_odd_len = 0\n\n    # check if the current subarray has odd length\n    if n % 2!= 0:\n        # add the first element to the sum\n        sum_odd_len += arr[start]\n\n    # check if there are any elements to sum\n    if n > 1:\n        mid = start + n//2\n        # sum the sum of all odd length subarrays from start to mid\n        sum_odd_len += sum_odd(arr, start, mid)\n        # sum the sum of all odd length subarrays from mid+1 to end\n        sum_odd_len += sum_odd(arr, mid+1, end)\n\n    return sum_odd_len\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(odd_length_sum(arr))  # Output: 23 (2 + 4 + 6 + 8)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:\n                result += sum(arr[i:j+1])\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    # Initialize variables\n    n = len(arr)\n    sum = 0\n    count = 0\n    # Iterate through the array\n    for i in range(n):\n        if i == 0 or i == n-1:\n            # If the element is the first or last element of the subarray, add it to the sum\n            sum += arr[i]\n        elif i % 2 == 0:\n            # If the element is an even index, add it to the sum\n            sum += arr[i]\n        else:\n            # If the element is odd, add the sum to the count and reset the sum\n            count += sum\n            sum = 0\n    # Add the last odd subarray to the sum\n    count += sum\n    return count"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == 0:\n        h = 0\n    else:\n        if delta == 0:\n            h = 0\n        elif max_val == r:\n            h = 60 * ((g - b) / delta)\n        elif max_val == g:\n            h = 60 * ((b - r) / delta + 2)\n        else:\n            h = 60 * ((r - g) / delta + 4)\n\n    if h < 0:\n        h += 360\n\n    if max_val == min_val:\n        s = 0\n    else:\n        s = delta / max_val\n\n    v = max_val\n\n    # Convert HSV to RGB\n    if s == 0:\n        r, g, b = v, v, v\n    else:\n        if max_val == r:\n            h_int = int(h / 60)\n            f = (h / 60) - h_int\n            p = v * (1 - s)\n            q = v * (1 - f * s)\n            t = v * (1 - (1 - f) * s)\n        elif max_val == g:\n            h_int = int(h / 60)\n            f = (h / 60) - h_int\n            p = v * (1 - s)\n            q = v * (1 - (1 - f) * s)\n            t = v * (1 - (1 - (1 - f) * s))\n        else:\n            h_int = int(h / 60)\n            f = (h / 60) - h_int\n            p = v * (1 - (1 - f) * s)\n            q = v * (1 - s)\n            t = v * (1 - (1 - (1 - f) * s))\n\n        if h_int == 0:\n            r, g, b = v, t, p\n        elif h_int == 1:\n            r, g, b = q, v, p\n        elif h_int == 2:\n            r, g, b = p, v, t\n        elif h_int == 3:\n            r, g, b = p, q, v\n        elif h_int == 4:\n            r, g, b = t, p, v\n        else:\n            r, g, b = v, p, q\n\n        if r < 0:\n            r += 1\n        if g < 0:\n            g += 1\n        if b < 0:\n            b += 1\n\n        if r > 1:\n            r -= 1\n        if g > 1:\n            g -= 1\n        if b > 1:\n            b -= 1\n\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0.0\n    s = 0.0\n    v = max_value\n    if delta == 0:\n        h = 0.0\n    elif max_value == r:\n        h = (g - b) / delta\n        if g < b:\n            h += 6.0\n    elif max_value == g:\n        h = (b - r) / delta + 2.0\n    else:\n        h = (r - g) / delta + 4.0\n    h /= 6.0\n    if h < 0:\n        h += 1.0\n    if delta == 0:\n        s = 0.0\n    else:\n        s = delta / (1 - abs(2 * h - 1))\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h * 60\n    if h < 0:\n        h += 360\n\n    v = cmax\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # convert r, g, b to floats\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # calculate minimum and maximum values\n    min_value = min(r, g, b)\n    max_value = max(r, g, b)\n\n    # calculate hue, saturation and value\n    if max_value == min_value:\n        hue = 0\n        saturation = 0\n    else:\n        delta = max_value - min_value\n        saturation = delta / max_value\n        if r == max_value:\n            hue = (g - b) / delta\n        elif g == max_value:\n            hue = 2 + (b - r) / delta\n        else:\n            hue = 4 + (r - g) / delta\n        hue /= 6\n\n    # calculate hue value in degrees\n    if hue < 0:\n        hue += 1\n    h_degrees = hue * 60\n\n    # return hsv values as a tuple\n    return (h_degrees, saturation, max_value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    cmin = min(r, g, b)\n    cmax = max(r, g, b)\n    delta = cmax - cmin\n\n    if cmax == 0:\n        h = 0\n    else:\n        h = (cmax == r) + (cmax == g) + (cmax == b) \\\n            - (r == cmax) - (g == cmax) - (b == cmax) \\\n            / 6.0\n\n    h = 60.0 * h\n\n    if h < 0:\n        h += 360\n\n    s = delta / (1 - abs(2 * cmax - 1))\n    v = cmax\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n\n    # Convert RGB to HSV color model\n    r, g, b = r/255.0, g/255.0, b/255.0 # Normalize the values to be between 0 and 1\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    h = 0\n    s = 0\n    v = max_color\n\n    if delta == 0:\n        h = 0\n    elif max_color == r:\n        h = (g - b) / delta\n    elif max_color == g:\n        h = 2 + (b - r) / delta\n    elif max_color == b:\n        h = 4 + (r - g) / delta\n    h = h / 6\n\n    if max_color == min_color:\n        s = 0\n    else:\n        s = delta / max_color\n\n    if max_color == 0:\n        v = 0\n    else:\n        v = max_color\n\n    # Convert HSV color to HSVA color model\n    if max_color == 0:\n        h = 0\n        s = 0\n        v = 0\n    else:\n        s = s * 100\n        v = v * 100\n\n    return h, s, v, 100 # Return the HSV color as a tuple with alpha value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes in an rgb color value and returns its hsv equivalent.\n    \"\"\"\n    # Convert RGB to LAB color space\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = ((g - b) / delta) % 6\n    elif max_value == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = h * 60\n    if h < 0:\n        h += 360\n    # Calculate HSV values\n    v = max_value\n    if max_value!= 0:\n        s = delta / max_value\n    else:\n        s = 0\n    # Convert HSV values to hsv color space\n    h = h / 360\n    s = s * 100\n    v = v * 100\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if max_value == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / max_value\n    if delta == 0:\n        h = 0\n    elif max_value == r:\n        h = 60 * ((g - b) / delta) % 6\n    elif max_value == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n    if h < 0:\n        h += 360\n    return (h, s, max_value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0.0\n    s = 0.0\n    v = max_value / 255.0\n\n    if delta == 0.0:\n        h = 0.0\n        s = 0.0\n    elif max_value == r:\n        h = 60.0 * ((g - b) / delta) % 6.0\n    elif max_value == g:\n        h = 60.0 * ((b - r) / delta) + 120.0\n    else:\n        h = 60.0 * ((r - g) / delta) + 240.0\n\n    if delta == 0.0:\n        s = 0.0\n    else:\n        s = delta / (1.0 - abs(2.0 * v - 1.0))\n\n    return [h, s, v]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Parameters:\n    r (int): Red value of the color.\n    g (int): Green value of the color.\n    b (int): Blue value of the color.\n\n    Returns:\n    hsv (tuple): Hue, Saturation, and Value of the color.\n\n    Note:\n    Hue is a value between 0 and 360 that represents the color's position around the color wheel.\n    Saturation is a value between 0 and 100 that represents the color's intensity.\n    Value is a value between 0 and 100 that represents the color's brightness.\n    \"\"\"\n\n    # Convert red, green, and blue values to floats\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    # Calculate minimum and maximum values among the RGB values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate difference between maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate saturation and value of the color\n    if max_val == 0:\n        hsv = (0, 0, max_val * 100)\n    else:\n        if diff == 0:\n            hsv = (0, 0, 0)\n        else:\n            if r == max_val:\n                h = (g - b) / diff\n            elif g == max_val:\n                h = 2 + (b - r) / diff\n            else:\n                h = 4 + (r - g) / diff\n\n            h = h * 60\n            if h < 0:\n                h += 360\n\n            s = (max_val - min_val) * 100 / diff\n\n            v = max_val * 100\n\n            hsv = (h, s, v)\n\n    return hsv"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n\n    if even_count > 0 and odd_count > 0:\n        product /= even_count * odd_count\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count * odd_count\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num % 2 == 0:\n            count += 1\n            if count == 1:\n                print(num)\n    return lst[0] * lst[1]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        product *= num\n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return 'No even or odd number found in the list.'"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even = 0\n    odd = 0\n    \n    # Iterate through the list and count even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    \n    # Return the product of even and odd numbers\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the product of first even and odd number of the list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n    \n    if even_count == 0:\n        print(\"No even numbers found in the list.\")\n    else:\n        print(\"Product of the first even and odd numbers in the list:\", product)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    product = 1\n    count = 0\n    for num in lst:\n        if num % 2 == 0:\n            count += 1\n        else:\n            count += 1\n        product *= count\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            break\n    \n    if even_count > 0 and odd_count > 0:\n        product = list1[0] * list1[1]\n    \n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string by comma\n    tup_str = test_str.split(',')\n    \n    # create an empty list\n    int_tup = []\n    \n    # loop through each string in the tuple\n    for string in tup_str:\n        # convert the string to an integer\n        int_num = int(string.strip())\n        \n        # add the integer to the list\n        int_tup.append(int_num)\n    \n    # return the integer tuple\n    return int_tup"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(x) for x in test_str.split(','))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # check if test_str is a string\n    if type(test_str)!= str:\n        return None\n    \n    # split the string into a tuple of strings\n    str_tuple = test_str.split(',')\n    \n    # check if the tuple has odd number of elements\n    if len(str_tuple) % 2!= 0:\n        return None\n    \n    # convert each string in the tuple to integer\n    int_tuple = tuple(int(x) for x in str_tuple)\n    \n    # return the converted tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of integers\n    int_list = [int(x) for x in test_str]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert tuple string to tuple\n    test_tuple = eval(test_str)\n    # check if input is valid\n    if not isinstance(test_tuple, tuple):\n        print(\"Invalid input. Please provide a valid tuple string.\")\n        return None\n    # convert tuple elements to integers\n    new_tuple = tuple(int(x) for x in test_tuple)\n    return new_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for num in test_str:\n        int_tuple += (int(num),)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert a tuple string to an integer tuple.\n\n    Args:\n        test_str (tuple): A tuple string in the format (x, y, z).\n\n    Returns:\n        tuple: A tuple of integers representing the elements of the tuple string.\n    \"\"\"\n    result = []\n    for element in test_str:\n        if isinstance(element, str):\n            result.append(int(element))\n        else:\n            raise ValueError(\"Tuple string can only contain strings.\")\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert tuple string to list of tuples\n    list_of_tuples = [tuple(x.split(',')) for x in test_str.split(';')]\n\n    # Convert list of tuples to integer tuple\n    int_tuple = tuple(int(x) for x in list_of_tuples[0])\n\n    # Print the integer tuple\n    print(int_tuple)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Create an empty list to store the converted integers\n    int_list = []\n    # Split the string by commas and spaces\n    str_list = test_str.split(\",\")\n    # Loop through each string in the list\n    for str_elem in str_list:\n        # Convert each string to an integer and append it to the list\n        int_list.append(int(str_elem))\n    # Return the converted integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_list = []\n    int_str = \"\"\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            int_str += test_str[i]\n        else:\n            int_list.append(int(int_str))\n            int_str = \"\"\n    int_list.append(int(int_str))\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        return 0\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif x < a[index-1]:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        # If the value is not found or if it is present at the end of the array, return the index of the last element\n        return index\n    else:\n        # If the value is found at the end of the array, return the index of the next element to the right\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the right insertion point\n    index = bisect.bisect_right(a, x)\n    # Check if the value is already present in the list\n    if index == len(a) or a[index]!= x:\n        # If not, insert the value at the right insertion point\n        return index\n    else:\n        # If the value is already present, return the insertion point\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x) - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    if a[index] == x:\n        return index\n    if a[index - 1] == x:\n        return index - 1\n    return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # find the index of the last element greater than or equal to x\n    i = bisect.bisect_right(a, x)\n    # if x is the largest element in a, i will be the length of a\n    if i == len(a):\n        i = 0\n    # if x is the smallest element in a, i will be 0\n    elif i == 0:\n        i = 0\n    # if x is between two elements in a, return i-1\n    else:\n        i -= 1\n    # return the index of the insertion point\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def text_match_three(text):\n    pattern = r'a.*?b{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{3}b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*?b{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a\\w{3}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{3}'\n    result = re.findall(pattern, text)\n    if result:\n        return result[0]\n    else:\n        return None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n    test_list (list): A list of strings.\n    test_str (str): A string.\n\n    Returns:\n    A new tuple containing the strings from the list and the given string.\n    \"\"\"\n    return (test_str,) + tuple(test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_str)\n    for i in test_list:\n        new_tup += (i,)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    # Concatenate the list and string\n    new_tuple = (test_str, *new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # convert string to list of characters\n    test_list = list(test_str)\n    # convert list of characters to list of integers\n    test_list = list(map(int, test_list))\n    # convert list of integers to tuple\n    new_tuple = tuple(test_list)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): A list of values to be included in the new tuple.\n    test_str (str): A string of characters to be used as the first element of the new tuple.\n\n    Returns:\n    new_tuple (tuple): A new tuple made up of the first element of test_str and the elements of test_list.\n    \"\"\"\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str +'' + str(i) for i in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists into a single list\n    combined_list = test_list + [test_str]\n    # Convert the combined list into a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for char in test_str:\n        if char in test_list:\n            new_list.append(char)\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple = (new_tuple[0], test_str, new_tuple[1])\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Create an empty list to store the even numbers\n    even_numbers = []\n\n    # Loop through the numbers and check whether they are even\n    for num in nums:\n        if num % 2 == 0:\n            even_numbers.append(num)\n\n    # Check whether there are even numbers in each even index\n    for i in range(0, len(nums), 2):\n        if len(even_numbers) <= i:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if sum(nums[i:]) % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        even_count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                even_count += 1\n        if even_count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n    return count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # check if index is even\n            if len(nums[i::2]) % 2!= 0: # check if even numbers are present in the even index\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n            if count == 2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n\n        if even_count == 0:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_list = []\n    for i in test_tup:\n        if isinstance(i, (list, tuple)):\n            flattened_list.extend(i)\n        else:\n            flattened_list.append(i)\n    return flattened_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                flat_list.append(subitem)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n    return tuple(new_list)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            new_tup.append(elem)\n        else:\n            for sub_elem in elem:\n                if type(sub_elem)!= tuple:\n                    new_tup.append(sub_elem)\n    return tuple(new_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = [x for x in test_tup if type(x)!= tuple]\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) is not tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return [x for sublist in test_tup for x in sublist]\n    else:\n        return [test_tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [elem for tup in test_tup for elem in tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    return tuple(item for sublist in test_tup for item in sublist if isinstance(item, tuple) is False)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_tup.append(sub_item)\n        else:\n            new_tup.append(item)\n    return tuple(new_tup)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n            count += count_list(item)\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n        else:\n            count = count\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=0\n    j=len(arr)-1\n    while arr[i]!=x:\n        i+=1\n    while arr[j]!=x:\n        j-=1\n    return j"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    elif arr[0] == x:\n        return 0\n    else:\n        for i in range(1,len(arr)):\n            if arr[i] == x:\n                return i\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    This function takes two parameters - the sorted array and the element for which we want to find the last position.\n    It returns the last position of the element in the array.\n    '''\n    # initialize the last position to -1\n    last_position = -1\n    \n    # iterate through the array from the last element to the second last element\n    for i in range(len(arr)-2, -1, -1):\n        # if the current element is equal to the element we want to find, return its index\n        if arr[i] == x:\n            last_position = i\n            break\n    \n    # return the last position\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = len(arr)-1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(arr):\n        if arr[i] == x:\n            return i\n        i += 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n    \n    # search for the element in the array\n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            # check if the previous element is also equal to x\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize index and length variables\n    index = 0\n    length = len(arr)\n\n    # Binary search to find the last element\n    while index < length and arr[index]!= x:\n        index += 1\n\n    # If element is not found, return -1\n    if index == length:\n        return -1\n    else:\n        return index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    n = len(arr)\n    while i < n and arr[i]!= x:\n        i += 1\n    return i-1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    This function takes in two arguments: an array and an element. It returns the last position of the element in the array.\n    '''\n    last_index = len(arr) - 1\n    \n    while last_index >= 0 and arr[last_index] > x:\n        last_index -= 1\n        \n    if last_index == -1:\n        return \"Element not found in the array\"\n    else:\n        return last_index"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.b$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'^a.*?b$'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a\\w+b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a[^b]*b')\n    result = pattern.search(text)\n    if result:\n        return result.group(0)\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba[^b]*b\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict.keys():\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n    # loop through the range of numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # add the number to the sum\n            sum += i\n    # return the sum of all odd numbers within the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n <= 0:\n        print(\"Invalid input! Please enter a positive integer.\")\n    else:\n        l = 1\n        r = n\n        total = 0\n        for i in range(l, r+1, 2):\n            total += i\n        print(\"The sum of all odd natural numbers within the range\", l, \"and\", r, \"is\", total)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 1:\n        return \"Please enter a valid positive integer.\"\n    \n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # take input from user for range of natural numbers\n    l, r = map(int, input(\"Enter the range of natural numbers separated by space: \").split())\n\n    # initialize sum to 0\n    sum = 0\n\n    # loop through all odd natural numbers between l and r\n    for i in range(l, r+1, 2):\n        # add i to sum\n        sum += i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # Find the range of numbers to iterate over\n    l = 1\n    r = n\n\n    # Initialize sum variable\n    sum = 0\n\n    # Iterate over odd numbers within the given range\n    for i in range(l, r+1, 2):\n        sum += i\n\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize the sum variable\n    sum_val = 0\n\n    # Loop through all natural numbers between 1 and n\n    for i in range(1, n + 1):\n        # Check if the number is odd\n        if i % 2!= 0:\n            # Add the odd number to the sum\n            sum_val += i\n\n    # Return the sum of all odd numbers\n    return sum_val"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    result = 0\n    for i in range(l, r+1, 2):\n        result += i\n    return result"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    s = 0\n    for i in range(2, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # iterate over the elements of the array\n    for num in arr:\n        # add each element to the sum variable\n        sum += num\n    \n    # return the sum of the array\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(arr):\n    '''\n    This function takes an array as input and returns the sum of all its elements.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + sum(arr[1:])\n\ndef _sum(arr):\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0  \n    for i in arr:  \n        total += i  \n    return total  "
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return ((n << d) & mask) | (n & (~mask))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the number to binary string\n    binary = bin(n)[2:]\n    # if d is negative, shift the number to the left by 32 - |d| bits\n    if d < 0:\n        d += 32\n    # shift the binary string to the left by d bits\n    new_binary = binary[d:] + binary[:d]\n    # convert the new binary string back to an integer\n    new_number = int(new_binary, 2)\n    # return the rotated number\n    return new_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary string\n    bin_num = bin(n)[2:]\n\n    # Calculate the number of zero bits at the end of the binary string\n    num_zeros = len(bin_num) - bin_num[::-1].index('1') - 1\n\n    # If d is greater than the number of zero bits, rotate left d % n bits\n    if d > num_zeros:\n        d = d % n\n        new_bin_num = bin_num[-d:] + bin_num[:-d]\n    # If d is less than the number of zero bits, rotate left d % (n - 1) bits\n    else:\n        d = d % (n - 1)\n        new_bin_num = bin_num[-d:] + bin_num[:-d]\n        new_bin_num = new_bin_num[-(n-1):] + new_bin_num[:-n-1]\n\n    # Convert the new binary string to integer\n    new_num = int(new_bin_num, 2)\n\n    # Return the new number\n    return new_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32 # ensure d is a multiple of 32\n    n_bits = bin(n)[2:].zfill(32) # convert number to binary and pad with zeros to make it 32 bits\n    n_bits = n_bits[d:] + n_bits[:d] # rotate left bits by d bits\n    return int(n_bits, 2) # convert rotated binary number back to decimal"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Extract the least significant d bits and shift the remaining bits to the left\n    mask = 1 << (32 - d)\n    rotated = (n & mask) << d | n >> (32 - d)\n    \n    # Return the rotated number\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number.\n    '''\n\n    # Extract the last d bits and rotate it to the left\n    mask = (1 << d) - 1\n    shifted = (n << d) & mask\n    rotated = (n >> (32 - d)) | shifted\n\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    # Convert the integer to a list of bits\n    bits = [int(bit) for bit in format(n, \"032b\")]\n    # Rotate the list of bits by d bits\n    rotated_bits = bits[-d:] + bits[:-d]\n    # Convert the rotated list of bits back to an integer\n    rotated_n = int(\"\".join(map(str, rotated_bits)), 2)\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n &= 0xffffffff  # Remove any bits above 32 bits\n    d &= 0x1f  # Remove any bits above 5 bits\n    n = (n << d) | (n >> (32 - d))\n    return n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all spaces from the string\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing spaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all spaces using regex\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing spaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for num in [x, y, z]:\n        if num == x or num == y or num == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1, x+1):\n        for j in range(1, y+1):\n            if i == x//y * j and i == j:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and y == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y):\n        for j in range(x, y):\n            for k in range(x, y):\n                if i!= j and i!= k and j!= k and i == x and j == y and k == z:\n                    count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal integers.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x == z!= y:\n        count += 1\n    if y == z!= x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    # initialize counter to 0\n    count = 0\n    # iterate over all possible pairs of numbers between x and z\n    for i in range(x, z+1):\n        for j in range(x, z+1):\n            # if i and j are equal, increment counter\n            if i == j:\n                count += 1\n    # return counter\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == y == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    # loop through all possible pairs of integers and check if they are equal\n    for i in range(x, z+1):\n        for j in range(y, z+1):\n            if i!= j:\n                if i == x or i == y or i == z or j == x or j == y or j == z:\n                    count += 1\n\n    # print the result\n    print(\"There are\", count, \"equal numbers in the range [\", x, \",\", z, \"]\")"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # loop through all possible rotations\n    for i in range(n):\n        for j in range(i, n):\n            # if the two sub-arrays are sorted, increment the count\n            if sorted(arr[i:j+1]) == sorted(arr[j:i+1]):\n                count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    # Initialize variables\n    n = len(arr)\n    count = 0\n    \n    # If the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    \n    # Traverse through the array and find the last element\n    for i in range(n):\n        if arr[i]!= arr[-1]:\n            break\n    \n    # If the last element is the minimum element\n    if i == n-1:\n        return 0\n    \n    # If the array has only one element\n    if n == 1:\n        return 1\n    \n    # Traverse through the array and find the minimum element\n    for j in range(n-2, i-1, -1):\n        if arr[j]!= arr[j+1]:\n            break\n    \n    # Calculate the number of rotations\n    count = abs(j-i+1)\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the smallest element\n    smallest = min(arr)\n    # Initialize count and index of smallest element\n    count = 0\n    index = arr.index(smallest)\n    # Traverse the array\n    for i in range(n):\n        # If current element is greater than or equal to smallest element\n        if arr[i] >= smallest:\n            # Increment count\n            count += 1\n            # If count reaches 2, return the index\n            if count == 2:\n                return i\n        # If current element is less than smallest element\n        else:\n            # Move the smallest element to the right\n            arr[index], arr[i] = arr[i], arr[index]\n            # Update the index\n            index = i\n    # If count reaches 1, return the index\n    if count == 1:\n        return n-1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    max_i = 0\n    for i in range(1, n):\n        if arr[i] > arr[max_i]:\n            max_i = i\n    left = 0\n    right = n - 1\n    count = 0\n    while left <= right:\n        if arr[left] <= arr[max_i]:\n            left += 1\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            right -= 1\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return i\n    return n-1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize count of rotations as 0\n    count = 0\n    # Traverse through the array from the second element\n    for i in range(1, n):\n        # If the current element is smaller than the previous element\n        while i > 0 and arr[i] < arr[i - 1]:\n            # Increment count of rotations\n            count += 1\n            # Move the left pointer to the right\n            i -= 1\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        # circular rotation\n        for j in range(i, n):\n            arr[j], arr[i] = arr[i], arr[j]\n            if j == n - 1:\n                count += 1\n                break\n        # non-circular rotation\n        for k in range(i+1, n):\n            arr[k], arr[i] = arr[i], arr[k]\n            if k == n - 1:\n                count += 1\n                break"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    # Find the minimum value of the array\n    min_value = min(arr)\n    \n    # Initialize two pointers, one starting from the left and other starting from the right\n    left = 0\n    right = len(arr) - 1\n    \n    # Initialize the count of rotations required to generate a sorted array\n    count = 0\n    \n    # While the pointers are not at the same position\n    while left < right:\n        # If the values at the left and right pointers are equal\n        if arr[left] == arr[right]:\n            # Increment the count of rotations required\n            count += 1\n            # Move the left pointer to the right\n            left += 1\n            # Move the right pointer to the left\n            right -= 1\n        else:\n            # If the value at the left pointer is smaller than the value at the right pointer\n            if arr[left] < arr[right]:\n                # Move the left pointer to the right\n                left += 1\n            # If the value at the right pointer is smaller than the value at the left pointer\n            else:\n                # Move the right pointer to the left\n                right -= 1\n    \n    # Return the count of rotations required\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # check if the array is already sorted\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return 0\n    \n    # check if the array is already sorted in reverse\n    for i in range(n-1):\n        if arr[i] > arr[n-1-i]:\n            return 0\n    \n    # count the rotations\n    count = 0\n    # check if the array is already sorted\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n            if count >= n:\n                return count\n    \n    # check if the array is already sorted in reverse\n    for i in range(n-1):\n        if arr[i] > arr[n-1-i]:\n            count += 1\n            if count >= n:\n                return count\n    \n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. \n    '''\n    if n < 0:\n        return \"Negative number is not a perfect square.\"\n    \n    # check if n is a perfect square\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            return \"The given number is a perfect square.\"\n    return \"The given number is not a perfect square.\""
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    # Check if n is less than or equal to 1\n    if n <= 1:\n        return False\n    \n    # Check if n is equal to 1\n    if n == 1:\n        return True\n    \n    # Use loop to check if n is a perfect square\n    i = n\n    while i * i!= n:\n        i -= 1\n    \n    # Check if n is equal to 1 after loop\n    if i * i == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # get the square root of the given number\n    sqrt_n = int(n ** 0.5) + 1\n    # check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if the number is less than 0 or not an integer\n    if type(n)!= int or n < 0:\n        return False\n    \n    # Check if the number is equal to 1\n    if n == 1:\n        return True\n    \n    # Check if the number is equal to 4 or 9\n    if n == 4 or n == 9:\n        return True\n    \n    # Check for even numbers\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    \n    # If we reach here, the number is a perfect square\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    x = n * n\n    y = n * (n + 1)\n    while x!= y:\n        if x > y:\n            x = (x + n) // 2\n        else:\n            y = (y + n) // 2\n    return x == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    return math.sqrt(n) == int(math.sqrt(n))"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Returns True if n is a perfect square, else False\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if the number is greater than or equal to 0\n    if n < 0:\n        return False\n\n    # check if the number is a power of 2\n    if n & (n-1) == 0:\n        return True\n\n    # check for other perfect squares\n    low = 1\n    high = n\n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    for i in range(int(n**0.5)+1):\n        if i**2 == n:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the given number is even or odd\n    if n % 2 == 0:\n        # Check if the given number is divisible by 4\n        if n % 4 == 0:\n            return True\n        else:\n            # Check for perfect squares by iterating from 1 to sqrt(n) and checking if the square of any number is less than n\n            for i in range(1, int(n ** 0.5) + 1):\n                if i ** 2 <= n:\n                    return False\n    else:\n        # Check if the given number is divisible by 2\n        if n % 2 == 0:\n            return True\n        else:\n            # Check for perfect squares by iterating from 1 to sqrt(n) and checking if the square of any number is less than n\n            for i in range(1, int(n ** 0.5) + 1):\n                if i ** 2 <= n:\n                    return False\n    # If the given number is not a perfect square, return False\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of numbers as input and returns True if the product of all the numbers is even, False otherwise.\n    '''\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return \"The product of the numbers in the list is even.\"\n    else:\n        return \"The product of the numbers in the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Initialize variables\n    even_product = 1\n    odd_product = 1\n    \n    # Iterate through the array and calculate the product of even and odd numbers\n    for num in arr: \n        if num % 2 == 0: \n            even_product *= num \n        else: \n            odd_product *= num \n        \n    # Check if the even and odd product are equal\n    if even_product == odd_product: \n        return \"The product of even and odd numbers in the list is even.\" \n    else: \n        return \"The product of even and odd numbers in the list is odd.\""
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    for i, list in enumerate(lists):\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = [list]\n        elif current_sum == max_sum:\n            max_list.append(list)\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    # initialize the maximum sum to zero\n    max_sum = 0\n    \n    # loop through each list in the input list of lists\n    for i in range(len(lists)):\n        # initialize the sum to zero\n        current_sum = 0\n        \n        # loop through each element in the current list\n        for j in range(len(lists[i])):\n            # add the current element to the sum\n            current_sum += lists[i][j]\n            \n            # if the sum is greater than the current maximum sum, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n    \n    # create a new list and append the elements of each list in the input list of lists that resulted in the maximum sum\n    new_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if current_sum == max_sum:\n                new_list.append(lists[i][j])\n    \n    # return the new list of elements that resulted in the maximum sum\n    return new_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = []\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            sub_list = lists[i] + lists[j]\n            if sum(sub_list) > max_sum:\n                max_sum = sum(sub_list)\n                max_sum_list = sub_list\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = []\n\n    for sublist in lists:\n        total = sum(sublist)\n        if total > max_sum:\n            max_sum = total\n            max_sum_list = [sublist]\n        elif total == max_sum:\n            max_sum_list.append(sublist)\n\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lists[i]\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        sum_lst = sum(lst)\n\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # initialize maximum sum to negative infinity\n    max_sum = float('-inf')\n    \n    # loop through the list of lists\n    for sublist in lists:\n        \n        # calculate the sum of elements in the sublist\n        sublist_sum = sum(sublist)\n        \n        # check if the sublist sum is greater than the current maximum sum\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            \n    # create a new list with the maximum sum of elements\n    max_sum_list = [sublist for sublist in lists if sum(sublist) == max_sum]\n    \n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    This function takes a list of lists as input and returns the list in the list of lists\n    that has the highest sum of its elements.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_list = [lists[i][j]]\n            elif lists[i][j] == max_sum:\n                max_list.append(lists[i][j])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_lists = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            sum = lists[i][j]\n            for k in range(len(lists[i])):\n                if k!= j:\n                    sum += lists[i][k]\n            if sum > max_sum:\n                max_sum = sum\n                max_lists = [lists[i][j]]\n            elif sum == max_sum:\n                max_lists.append(lists[i][j])\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    upper_count = 0\n    start = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            upper_count += 1\n            if upper_count > max_run:\n                max_run = upper_count\n                start = i\n        else:\n            upper_count = 0\n    return test_str[start:start+max_run]\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    current_run = 0\n    max_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n            if uppercase_count > current_run:\n                current_run = uppercase_count\n                max_run = current_run\n        else:\n            uppercase_count = 0\n    \n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    # initialize variables\n    max_run = 0\n    curr_run = 0\n    uppercase_count = 0\n\n    # iterate over the string\n    for char in test_str:\n        # if the character is uppercase, increment the uppercase count\n        if char.isupper():\n            uppercase_count += 1\n        # if the character is not uppercase or if the uppercase count is greater than 1, reset the count and start a new run\n        else:\n            if uppercase_count > 1:\n                max_run = max(max_run, curr_run)\n                curr_run = 0\n                uppercase_count = 0\n\n        # increment the current run count\n        curr_run += 1\n\n    # return the maximum run\n    return max(max_run, curr_run)"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n        else:\n            curr_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    curr_char = test_str[0]\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n            if curr_run > max_run:\n                max_run = curr_run\n        else:\n            curr_run = 0\n    if curr_run > max_run:\n        max_run = curr_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start = 0\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_run:\n                max_run = count\n                start = i - count + 1\n        else:\n            count = 0\n    return test_str[start:start + max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 1\n    current_run = 1\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 1\n        \n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    uppercase_run = 0\n    current_run = 0\n    current_char = test_str[0]\n\n    for char in test_str[1:]:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > uppercase_run:\n                uppercase_run = current_run\n            current_run = 0\n            current_char = char\n\n    if current_run > uppercase_run:\n        uppercase_run = current_run\n\n    return uppercase_run\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isupper():\n            j = i\n            while j < len(test_str) and test_str[j].isupper():\n                j += 1\n            max_run = max(max_run, j - i)\n            i = j\n        else:\n            i += 1\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            # If it is, increment the count and update the maximum run if needed\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n            # If the count exceeds the length of the string, reset the count\n            if current_run > len(test_str):\n                current_run = 0\n        else:\n            # If it's not uppercase, reset the count\n            current_run = 0\n    \n    # Return the maximum run of uppercase characters found\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_list = []\n    for tup in test_tup:\n        k_list.append(tup[0])\n    if K in k_list:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes two tuples as input - test_tup and K.\n    It checks if the tuples contain the element K or not.\n\n    Input:\n    test_tup: a tuple containing elements to be checked for K\n    K: the element to be checked for in the input tuple\n\n    Output:\n    A boolean value indicating whether the input tuple contains K or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        for i in range(len(test_tup)):\n            if test_tup[i]!= K:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n\n    Args:\n    test_tup: a tuple of integers.\n    K: an integer.\n\n    Returns:\n    True if the given tuples contain the k, otherwise False.\n    \"\"\"\n\n    # Convert the tuple to a set to check for uniqueness\n    test_set = set(test_tup)\n\n    # Check if the size of the set is equal to K\n    if len(test_set) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for i in test_tup:\n        if i == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            print(tup, \"contains\", K)\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(K).intersection(set(test_tup))) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the lengths of the tuples are equal\n    if len(test_tup1) == len(test_tup2):\n        # Loop through each element of the tuples\n        for i in range(len(test_tup1)):\n            # Check if the element in test_tup2 is smaller than the element in test_tup1\n            if test_tup2[i] < test_tup1[i]:\n                return False\n        # If all the elements in the tuples are smaller than each other, return True\n        return True\n    # If the lengths of the tuples are not equal, return False\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples have different lengths.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]